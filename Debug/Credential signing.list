
Credential signing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a27c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a40  0800a41c  0800a41c  0000b41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 CMOX_CTA_PROTECTED_DATA 00000264  0800ae5c  0800ae5c  0000be5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800b0c0  0800b0c0  0000d068  2**0
                  CONTENTS
  5 .ARM          00000008  0800b0c0  0800b0c0  0000c0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800b0c8  0800b0c8  0000d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800b0c8  0800b0c8  0000c0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0800b0cc  0800b0cc  0000c0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000068  20000000  0800b0d0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000e08  20000068  0800b138  0000d068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000e70  0800b138  0000de70  2**0
                  ALLOC
 12 .ARM.attributes 00000034  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009fd4  00000000  00000000  0000d09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b82  00000000  00000000  00017070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000880  00000000  00000000  00018bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000670  00000000  00000000  00019478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017229  00000000  00000000  00019ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ad30  00000000  00000000  00030d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b01e  00000000  00000000  0003ba41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c6a5f  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000054  00000000  00000000  000c6aa4  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00002d44  00000000  00000000  000c6af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006e  00000000  00000000  000c983c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a404 	.word	0x0800a404

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800a404 	.word	0x0800a404

080001e0 <cmox_ecc_construct>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	0004      	movs	r4, r0
 80001e4:	4610      	mov	r0, r2
 80001e6:	bf18      	it	ne
 80001e8:	2900      	cmpne	r1, #0
 80001ea:	461a      	mov	r2, r3
 80001ec:	d00a      	beq.n	8000204 <cmox_ecc_construct+0x24>
 80001ee:	2800      	cmp	r0, #0
 80001f0:	bf18      	it	ne
 80001f2:	2a00      	cmpne	r2, #0
 80001f4:	d006      	beq.n	8000204 <cmox_ecc_construct+0x24>
 80001f6:	6121      	str	r1, [r4, #16]
 80001f8:	4601      	mov	r1, r0
 80001fa:	4620      	mov	r0, r4
 80001fc:	f002 fe2d 	bl	8002e5a <cmox_membuf_init>
 8000200:	4b01      	ldr	r3, [pc, #4]	@ (8000208 <cmox_ecc_construct+0x28>)
 8000202:	6163      	str	r3, [r4, #20]
 8000204:	bd10      	pop	{r4, pc}
 8000206:	bf00      	nop
 8000208:	5e1caffe 	.word	0x5e1caffe

0800020c <cmox_ecc_cleanup>:
 800020c:	b510      	push	{r4, lr}
 800020e:	0004      	movs	r4, r0
 8000210:	d007      	beq.n	8000222 <cmox_ecc_cleanup+0x16>
 8000212:	f002 fe66 	bl	8002ee2 <cmox_membuf_cleanup>
 8000216:	4620      	mov	r0, r4
 8000218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800021c:	2118      	movs	r1, #24
 800021e:	f009 bca5 	b.w	8009b6c <__aeabi_memclr>
 8000222:	bd10      	pop	{r4, pc}

08000224 <cmox_ECC_InvertModN>:
 8000224:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000226:	0004      	movs	r4, r0
 8000228:	460d      	mov	r5, r1
 800022a:	bf18      	it	ne
 800022c:	2d00      	cmpne	r5, #0
 800022e:	4616      	mov	r6, r2
 8000230:	461f      	mov	r7, r3
 8000232:	d00d      	beq.n	8000250 <cmox_ECC_InvertModN+0x2c>
 8000234:	2e00      	cmp	r6, #0
 8000236:	bf18      	it	ne
 8000238:	2f00      	cmpne	r7, #0
 800023a:	d009      	beq.n	8000250 <cmox_ECC_InvertModN+0x2c>
 800023c:	69a0      	ldr	r0, [r4, #24]
 800023e:	6801      	ldr	r1, [r0, #0]
 8000240:	6888      	ldr	r0, [r1, #8]
 8000242:	682a      	ldr	r2, [r5, #0]
 8000244:	6801      	ldr	r1, [r0, #0]
 8000246:	428a      	cmp	r2, r1
 8000248:	bf24      	itt	cs
 800024a:	683b      	ldrcs	r3, [r7, #0]
 800024c:	428b      	cmpcs	r3, r1
 800024e:	d201      	bcs.n	8000254 <cmox_ECC_InvertModN+0x30>
 8000250:	2001      	movs	r0, #1
 8000252:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000254:	463a      	mov	r2, r7
 8000256:	f06f 0101 	mvn.w	r1, #1
 800025a:	f002 fc27 	bl	8002aac <cmox_AddBN_Int>
 800025e:	69a0      	ldr	r0, [r4, #24]
 8000260:	f8d0 c01c 	ldr.w	ip, [r0, #28]
 8000264:	6a20      	ldr	r0, [r4, #32]
 8000266:	9002      	str	r0, [sp, #8]
 8000268:	4622      	mov	r2, r4
 800026a:	69e1      	ldr	r1, [r4, #28]
 800026c:	9101      	str	r1, [sp, #4]
 800026e:	9600      	str	r6, [sp, #0]
 8000270:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8000274:	f8dc 4000 	ldr.w	r4, [ip]
 8000278:	4639      	mov	r1, r7
 800027a:	4628      	mov	r0, r5
 800027c:	47a0      	blx	r4
 800027e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000280 <cmox_ECC_InitCurve>:
 8000280:	b510      	push	{r4, lr}
 8000282:	2800      	cmp	r0, #0
 8000284:	bf18      	it	ne
 8000286:	2900      	cmpne	r1, #0
 8000288:	d101      	bne.n	800028e <cmox_ECC_InitCurve+0xe>
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2400      	movs	r4, #0
 8000290:	6144      	str	r4, [r0, #20]
 8000292:	6181      	str	r1, [r0, #24]
 8000294:	61c2      	str	r2, [r0, #28]
 8000296:	6203      	str	r3, [r0, #32]
 8000298:	2000      	movs	r0, #0
 800029a:	bd10      	pop	{r4, pc}

0800029c <cmox_ECC_InitCurveModDomainP>:
 800029c:	4602      	mov	r2, r0
 800029e:	6990      	ldr	r0, [r2, #24]
 80002a0:	6800      	ldr	r0, [r0, #0]
 80002a2:	6841      	ldr	r1, [r0, #4]
 80002a4:	69d3      	ldr	r3, [r2, #28]
 80002a6:	6800      	ldr	r0, [r0, #0]
 80002a8:	f002 bcfe 	b.w	8002ca8 <cmox_ModularBN_InitWithR2>

080002ac <cmox_ECC_InitCurveModDomainN>:
 80002ac:	4602      	mov	r2, r0
 80002ae:	6990      	ldr	r0, [r2, #24]
 80002b0:	6800      	ldr	r0, [r0, #0]
 80002b2:	68c1      	ldr	r1, [r0, #12]
 80002b4:	69d3      	ldr	r3, [r2, #28]
 80002b6:	6880      	ldr	r0, [r0, #8]
 80002b8:	f002 bcf6 	b.w	8002ca8 <cmox_ModularBN_InitWithR2>

080002bc <cmox_ECC_DeInitCurveModDomain>:
 80002bc:	69c1      	ldr	r1, [r0, #28]
 80002be:	f002 bd7a 	b.w	8002db6 <cmox_ModularBN_DeinitWithR2>

080002c2 <cmox_ECC_AllocPoint>:
 80002c2:	b570      	push	{r4, r5, r6, lr}
 80002c4:	4605      	mov	r5, r0
 80002c6:	460e      	mov	r6, r1
 80002c8:	69e8      	ldr	r0, [r5, #28]
 80002ca:	2214      	movs	r2, #20
 80002cc:	f002 fdd5 	bl	8002e7a <cmox_membuf_alloc>
 80002d0:	0004      	movs	r4, r0
 80002d2:	d149      	bne.n	8000368 <cmox_ECC_AllocPoint+0xa6>
 80002d4:	6831      	ldr	r1, [r6, #0]
 80002d6:	2000      	movs	r0, #0
 80002d8:	6108      	str	r0, [r1, #16]
 80002da:	69aa      	ldr	r2, [r5, #24]
 80002dc:	6810      	ldr	r0, [r2, #0]
 80002de:	6803      	ldr	r3, [r0, #0]
 80002e0:	69e8      	ldr	r0, [r5, #28]
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	f004 f978 	bl	80045d8 <cmox_bn_alloc>
 80002e8:	0004      	movs	r4, r0
 80002ea:	d138      	bne.n	800035e <cmox_ECC_AllocPoint+0x9c>
 80002ec:	69a8      	ldr	r0, [r5, #24]
 80002ee:	6801      	ldr	r1, [r0, #0]
 80002f0:	6830      	ldr	r0, [r6, #0]
 80002f2:	680a      	ldr	r2, [r1, #0]
 80002f4:	6812      	ldr	r2, [r2, #0]
 80002f6:	f100 0108 	add.w	r1, r0, #8
 80002fa:	69e8      	ldr	r0, [r5, #28]
 80002fc:	f004 f96c 	bl	80045d8 <cmox_bn_alloc>
 8000300:	0004      	movs	r4, r0
 8000302:	d128      	bne.n	8000356 <cmox_ECC_AllocPoint+0x94>
 8000304:	69a8      	ldr	r0, [r5, #24]
 8000306:	6842      	ldr	r2, [r0, #4]
 8000308:	69d3      	ldr	r3, [r2, #28]
 800030a:	6831      	ldr	r1, [r6, #0]
 800030c:	2b03      	cmp	r3, #3
 800030e:	d030      	beq.n	8000372 <cmox_ECC_AllocPoint+0xb0>
 8000310:	6800      	ldr	r0, [r0, #0]
 8000312:	6802      	ldr	r2, [r0, #0]
 8000314:	69e8      	ldr	r0, [r5, #28]
 8000316:	6812      	ldr	r2, [r2, #0]
 8000318:	1d09      	adds	r1, r1, #4
 800031a:	f004 f95d 	bl	80045d8 <cmox_bn_alloc>
 800031e:	0004      	movs	r4, r0
 8000320:	d113      	bne.n	800034a <cmox_ECC_AllocPoint+0x88>
 8000322:	69a8      	ldr	r0, [r5, #24]
 8000324:	6842      	ldr	r2, [r0, #4]
 8000326:	69d3      	ldr	r3, [r2, #28]
 8000328:	6831      	ldr	r1, [r6, #0]
 800032a:	2b02      	cmp	r3, #2
 800032c:	d11e      	bne.n	800036c <cmox_ECC_AllocPoint+0xaa>
 800032e:	6800      	ldr	r0, [r0, #0]
 8000330:	6802      	ldr	r2, [r0, #0]
 8000332:	69e8      	ldr	r0, [r5, #28]
 8000334:	6812      	ldr	r2, [r2, #0]
 8000336:	310c      	adds	r1, #12
 8000338:	f004 f94e 	bl	80045d8 <cmox_bn_alloc>
 800033c:	0004      	movs	r4, r0
 800033e:	d013      	beq.n	8000368 <cmox_ECC_AllocPoint+0xa6>
 8000340:	6830      	ldr	r0, [r6, #0]
 8000342:	1d01      	adds	r1, r0, #4
 8000344:	69e8      	ldr	r0, [r5, #28]
 8000346:	f004 f952 	bl	80045ee <cmox_bn_free>
 800034a:	6830      	ldr	r0, [r6, #0]
 800034c:	f100 0108 	add.w	r1, r0, #8
 8000350:	69e8      	ldr	r0, [r5, #28]
 8000352:	f004 f94c 	bl	80045ee <cmox_bn_free>
 8000356:	6831      	ldr	r1, [r6, #0]
 8000358:	69e8      	ldr	r0, [r5, #28]
 800035a:	f004 f948 	bl	80045ee <cmox_bn_free>
 800035e:	69e8      	ldr	r0, [r5, #28]
 8000360:	2214      	movs	r2, #20
 8000362:	4631      	mov	r1, r6
 8000364:	f002 fda8 	bl	8002eb8 <cmox_membuf_free>
 8000368:	4620      	mov	r0, r4
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	2000      	movs	r0, #0
 800036e:	60c8      	str	r0, [r1, #12]
 8000370:	e7fa      	b.n	8000368 <cmox_ECC_AllocPoint+0xa6>
 8000372:	2200      	movs	r2, #0
 8000374:	604a      	str	r2, [r1, #4]
 8000376:	60ca      	str	r2, [r1, #12]
 8000378:	e7f6      	b.n	8000368 <cmox_ECC_AllocPoint+0xa6>

0800037a <cmox_ECC_FreePoint>:
 800037a:	b570      	push	{r4, r5, r6, lr}
 800037c:	460c      	mov	r4, r1
 800037e:	2500      	movs	r5, #0
 8000380:	4606      	mov	r6, r0
 8000382:	2c00      	cmp	r4, #0
 8000384:	bf1a      	itte	ne
 8000386:	6820      	ldrne	r0, [r4, #0]
 8000388:	2800      	cmpne	r0, #0
 800038a:	2501      	moveq	r5, #1
 800038c:	d023      	beq.n	80003d6 <cmox_ECC_FreePoint+0x5c>
 800038e:	69b1      	ldr	r1, [r6, #24]
 8000390:	684a      	ldr	r2, [r1, #4]
 8000392:	69d3      	ldr	r3, [r2, #28]
 8000394:	2b02      	cmp	r3, #2
 8000396:	d104      	bne.n	80003a2 <cmox_ECC_FreePoint+0x28>
 8000398:	f100 010c 	add.w	r1, r0, #12
 800039c:	69f0      	ldr	r0, [r6, #28]
 800039e:	f004 f926 	bl	80045ee <cmox_bn_free>
 80003a2:	69b0      	ldr	r0, [r6, #24]
 80003a4:	6841      	ldr	r1, [r0, #4]
 80003a6:	69c8      	ldr	r0, [r1, #28]
 80003a8:	2803      	cmp	r0, #3
 80003aa:	d004      	beq.n	80003b6 <cmox_ECC_FreePoint+0x3c>
 80003ac:	6821      	ldr	r1, [r4, #0]
 80003ae:	69f0      	ldr	r0, [r6, #28]
 80003b0:	1d09      	adds	r1, r1, #4
 80003b2:	f004 f91c 	bl	80045ee <cmox_bn_free>
 80003b6:	6820      	ldr	r0, [r4, #0]
 80003b8:	f100 0108 	add.w	r1, r0, #8
 80003bc:	69f0      	ldr	r0, [r6, #28]
 80003be:	f004 f916 	bl	80045ee <cmox_bn_free>
 80003c2:	6821      	ldr	r1, [r4, #0]
 80003c4:	69f0      	ldr	r0, [r6, #28]
 80003c6:	f004 f912 	bl	80045ee <cmox_bn_free>
 80003ca:	69f0      	ldr	r0, [r6, #28]
 80003cc:	2214      	movs	r2, #20
 80003ce:	4621      	mov	r1, r4
 80003d0:	f002 fd72 	bl	8002eb8 <cmox_membuf_free>
 80003d4:	6025      	str	r5, [r4, #0]
 80003d6:	4628      	mov	r0, r5
 80003d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080003dc <cmox_ECC_CondCopyPoint>:
 80003dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003de:	460f      	mov	r7, r1
 80003e0:	2500      	movs	r5, #0
 80003e2:	4616      	mov	r6, r2
 80003e4:	2f00      	cmp	r7, #0
 80003e6:	bf18      	it	ne
 80003e8:	2e00      	cmpne	r6, #0
 80003ea:	4604      	mov	r4, r0
 80003ec:	d00b      	beq.n	8000406 <cmox_ECC_CondCopyPoint+0x2a>
 80003ee:	6839      	ldr	r1, [r7, #0]
 80003f0:	2900      	cmp	r1, #0
 80003f2:	bf1c      	itt	ne
 80003f4:	68b8      	ldrne	r0, [r7, #8]
 80003f6:	2800      	cmpne	r0, #0
 80003f8:	d005      	beq.n	8000406 <cmox_ECC_CondCopyPoint+0x2a>
 80003fa:	6832      	ldr	r2, [r6, #0]
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	bf1c      	itt	ne
 8000400:	68b0      	ldrne	r0, [r6, #8]
 8000402:	2800      	cmpne	r0, #0
 8000404:	d101      	bne.n	800040a <cmox_ECC_CondCopyPoint+0x2e>
 8000406:	2501      	movs	r5, #1
 8000408:	e019      	b.n	800043e <cmox_ECC_CondCopyPoint+0x62>
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	6133      	str	r3, [r6, #16]
 800040e:	4620      	mov	r0, r4
 8000410:	f004 f928 	bl	8004664 <cmox_bn_cCopy>
 8000414:	6879      	ldr	r1, [r7, #4]
 8000416:	2900      	cmp	r1, #0
 8000418:	bf1f      	itttt	ne
 800041a:	6872      	ldrne	r2, [r6, #4]
 800041c:	2a00      	cmpne	r2, #0
 800041e:	4620      	movne	r0, r4
 8000420:	f004 f920 	blne	8004664 <cmox_bn_cCopy>
 8000424:	68b2      	ldr	r2, [r6, #8]
 8000426:	68b9      	ldr	r1, [r7, #8]
 8000428:	4620      	mov	r0, r4
 800042a:	f004 f91b 	bl	8004664 <cmox_bn_cCopy>
 800042e:	68f9      	ldr	r1, [r7, #12]
 8000430:	2900      	cmp	r1, #0
 8000432:	bf1f      	itttt	ne
 8000434:	68f2      	ldrne	r2, [r6, #12]
 8000436:	2a00      	cmpne	r2, #0
 8000438:	4620      	movne	r0, r4
 800043a:	f004 f913 	blne	8004664 <cmox_bn_cCopy>
 800043e:	4628      	mov	r0, r5
 8000440:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08000442 <cmox_ECC_CondSymmetricPoint>:
 8000442:	b570      	push	{r4, r5, r6, lr}
 8000444:	460e      	mov	r6, r1
 8000446:	4615      	mov	r5, r2
 8000448:	69b1      	ldr	r1, [r6, #24]
 800044a:	680a      	ldr	r2, [r1, #0]
 800044c:	69d3      	ldr	r3, [r2, #28]
 800044e:	4604      	mov	r4, r0
 8000450:	2001      	movs	r0, #1
 8000452:	b13b      	cbz	r3, 8000464 <cmox_ECC_CondSymmetricPoint+0x22>
 8000454:	2b02      	cmp	r3, #2
 8000456:	d001      	beq.n	800045c <cmox_ECC_CondSymmetricPoint+0x1a>
 8000458:	d307      	bcc.n	800046a <cmox_ECC_CondSymmetricPoint+0x28>
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	6849      	ldr	r1, [r1, #4]
 800045e:	69cb      	ldr	r3, [r1, #28]
 8000460:	2b03      	cmp	r3, #3
 8000462:	d014      	beq.n	800048e <cmox_ECC_CondSymmetricPoint+0x4c>
 8000464:	6812      	ldr	r2, [r2, #0]
 8000466:	6869      	ldr	r1, [r5, #4]
 8000468:	e00c      	b.n	8000484 <cmox_ECC_CondSymmetricPoint+0x42>
 800046a:	6812      	ldr	r2, [r2, #0]
 800046c:	6829      	ldr	r1, [r5, #0]
 800046e:	4620      	mov	r0, r4
 8000470:	f002 fbec 	bl	8002c4c <cmox_FieldBN_CondNegate>
 8000474:	69b1      	ldr	r1, [r6, #24]
 8000476:	684a      	ldr	r2, [r1, #4]
 8000478:	69d3      	ldr	r3, [r2, #28]
 800047a:	2b02      	cmp	r3, #2
 800047c:	d107      	bne.n	800048e <cmox_ECC_CondSymmetricPoint+0x4c>
 800047e:	6808      	ldr	r0, [r1, #0]
 8000480:	68e9      	ldr	r1, [r5, #12]
 8000482:	6802      	ldr	r2, [r0, #0]
 8000484:	4620      	mov	r0, r4
 8000486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800048a:	f002 bbdf 	b.w	8002c4c <cmox_FieldBN_CondNegate>
 800048e:	bd70      	pop	{r4, r5, r6, pc}

08000490 <cmox_ECC_SetPointAtInfinity>:
 8000490:	b570      	push	{r4, r5, r6, lr}
 8000492:	460d      	mov	r5, r1
 8000494:	4606      	mov	r6, r0
 8000496:	6928      	ldr	r0, [r5, #16]
 8000498:	f040 0001 	orr.w	r0, r0, #1
 800049c:	6128      	str	r0, [r5, #16]
 800049e:	2400      	movs	r4, #0
 80004a0:	69b1      	ldr	r1, [r6, #24]
 80004a2:	6808      	ldr	r0, [r1, #0]
 80004a4:	69c2      	ldr	r2, [r0, #28]
 80004a6:	b11a      	cbz	r2, 80004b0 <cmox_ECC_SetPointAtInfinity+0x20>
 80004a8:	2a02      	cmp	r2, #2
 80004aa:	d00b      	beq.n	80004c4 <cmox_ECC_SetPointAtInfinity+0x34>
 80004ac:	d31a      	bcc.n	80004e4 <cmox_ECC_SetPointAtInfinity+0x54>
 80004ae:	e02f      	b.n	8000510 <cmox_ECC_SetPointAtInfinity+0x80>
 80004b0:	6828      	ldr	r0, [r5, #0]
 80004b2:	2100      	movs	r1, #0
 80004b4:	f004 f8c7 	bl	8004646 <cmox_bn_init>
 80004b8:	6868      	ldr	r0, [r5, #4]
 80004ba:	2101      	movs	r1, #1
 80004bc:	f004 f8c3 	bl	8004646 <cmox_bn_init>
 80004c0:	68a8      	ldr	r0, [r5, #8]
 80004c2:	e021      	b.n	8000508 <cmox_ECC_SetPointAtInfinity+0x78>
 80004c4:	6849      	ldr	r1, [r1, #4]
 80004c6:	69ca      	ldr	r2, [r1, #28]
 80004c8:	6828      	ldr	r0, [r5, #0]
 80004ca:	2a03      	cmp	r2, #3
 80004cc:	bf08      	it	eq
 80004ce:	2101      	moveq	r1, #1
 80004d0:	d004      	beq.n	80004dc <cmox_ECC_SetPointAtInfinity+0x4c>
 80004d2:	2100      	movs	r1, #0
 80004d4:	f004 f8b7 	bl	8004646 <cmox_bn_init>
 80004d8:	6868      	ldr	r0, [r5, #4]
 80004da:	2101      	movs	r1, #1
 80004dc:	f004 f8b3 	bl	8004646 <cmox_bn_init>
 80004e0:	68a8      	ldr	r0, [r5, #8]
 80004e2:	e011      	b.n	8000508 <cmox_ECC_SetPointAtInfinity+0x78>
 80004e4:	6828      	ldr	r0, [r5, #0]
 80004e6:	2100      	movs	r1, #0
 80004e8:	f004 f8ad 	bl	8004646 <cmox_bn_init>
 80004ec:	6868      	ldr	r0, [r5, #4]
 80004ee:	2101      	movs	r1, #1
 80004f0:	f004 f8a9 	bl	8004646 <cmox_bn_init>
 80004f4:	68a8      	ldr	r0, [r5, #8]
 80004f6:	2101      	movs	r1, #1
 80004f8:	f004 f8a5 	bl	8004646 <cmox_bn_init>
 80004fc:	69b0      	ldr	r0, [r6, #24]
 80004fe:	6841      	ldr	r1, [r0, #4]
 8000500:	69c8      	ldr	r0, [r1, #28]
 8000502:	2802      	cmp	r0, #2
 8000504:	d105      	bne.n	8000512 <cmox_ECC_SetPointAtInfinity+0x82>
 8000506:	68e8      	ldr	r0, [r5, #12]
 8000508:	2100      	movs	r1, #0
 800050a:	f004 f89c 	bl	8004646 <cmox_bn_init>
 800050e:	e000      	b.n	8000512 <cmox_ECC_SetPointAtInfinity+0x82>
 8000510:	2401      	movs	r4, #1
 8000512:	4620      	mov	r0, r4
 8000514:	bd70      	pop	{r4, r5, r6, pc}

08000516 <cmox_ECC_CondImportPoint>:
 8000516:	e92d 4bfc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, fp, lr}
 800051a:	4616      	mov	r6, r2
 800051c:	2500      	movs	r5, #0
 800051e:	2e00      	cmp	r6, #0
 8000520:	bf1c      	itt	ne
 8000522:	9f0b      	ldrne	r7, [sp, #44]	@ 0x2c
 8000524:	2f00      	cmpne	r7, #0
 8000526:	4680      	mov	r8, r0
 8000528:	468b      	mov	fp, r1
 800052a:	461c      	mov	r4, r3
 800052c:	d005      	beq.n	800053a <cmox_ECC_CondImportPoint+0x24>
 800052e:	6839      	ldr	r1, [r7, #0]
 8000530:	2900      	cmp	r1, #0
 8000532:	bf1c      	itt	ne
 8000534:	68b8      	ldrne	r0, [r7, #8]
 8000536:	2800      	cmpne	r0, #0
 8000538:	d103      	bne.n	8000542 <cmox_ECC_CondImportPoint+0x2c>
 800053a:	2501      	movs	r5, #1
 800053c:	4628      	mov	r0, r5
 800053e:	e8bd 8bf6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, fp, pc}
 8000542:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8000544:	6138      	str	r0, [r7, #16]
 8000546:	4640      	mov	r0, r8
 8000548:	684a      	ldr	r2, [r1, #4]
 800054a:	6831      	ldr	r1, [r6, #0]
 800054c:	f002 fc57 	bl	8002dfe <cmox_mathUtils_mux>
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	6050      	str	r0, [r2, #4]
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	b138      	cbz	r0, 8000568 <cmox_ECC_CondImportPoint+0x52>
 8000558:	6842      	ldr	r2, [r0, #4]
 800055a:	f856 102b 	ldr.w	r1, [r6, fp, lsl #2]
 800055e:	4640      	mov	r0, r8
 8000560:	f002 fc4d 	bl	8002dfe <cmox_mathUtils_mux>
 8000564:	6879      	ldr	r1, [r7, #4]
 8000566:	6048      	str	r0, [r1, #4]
 8000568:	2c00      	cmp	r4, #0
 800056a:	68b8      	ldr	r0, [r7, #8]
 800056c:	6842      	ldr	r2, [r0, #4]
 800056e:	bf0c      	ite	eq
 8000570:	2101      	moveq	r1, #1
 8000572:	6821      	ldrne	r1, [r4, #0]
 8000574:	4640      	mov	r0, r8
 8000576:	f002 fc42 	bl	8002dfe <cmox_mathUtils_mux>
 800057a:	68b9      	ldr	r1, [r7, #8]
 800057c:	6048      	str	r0, [r1, #4]
 800057e:	68f8      	ldr	r0, [r7, #12]
 8000580:	b138      	cbz	r0, 8000592 <cmox_ECC_CondImportPoint+0x7c>
 8000582:	6842      	ldr	r2, [r0, #4]
 8000584:	f856 103b 	ldr.w	r1, [r6, fp, lsl #3]
 8000588:	4640      	mov	r0, r8
 800058a:	f002 fc38 	bl	8002dfe <cmox_mathUtils_mux>
 800058e:	68f9      	ldr	r1, [r7, #12]
 8000590:	6048      	str	r0, [r1, #4]
 8000592:	f04f 0902 	mov.w	r9, #2
 8000596:	1f36      	subs	r6, r6, #4
 8000598:	e015      	b.n	80005c6 <cmox_ECC_CondImportPoint+0xb0>
 800059a:	4640      	mov	r0, r8
 800059c:	f002 fc2f 	bl	8002dfe <cmox_mathUtils_mux>
 80005a0:	68b9      	ldr	r1, [r7, #8]
 80005a2:	f841 0029 	str.w	r0, [r1, r9, lsl #2]
 80005a6:	68f8      	ldr	r0, [r7, #12]
 80005a8:	b158      	cbz	r0, 80005c2 <cmox_ECC_CondImportPoint+0xac>
 80005aa:	f850 2029 	ldr.w	r2, [r0, r9, lsl #2]
 80005ae:	eb09 004b 	add.w	r0, r9, fp, lsl #1
 80005b2:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 80005b6:	4640      	mov	r0, r8
 80005b8:	f002 fc21 	bl	8002dfe <cmox_mathUtils_mux>
 80005bc:	68f9      	ldr	r1, [r7, #12]
 80005be:	f841 0029 	str.w	r0, [r1, r9, lsl #2]
 80005c2:	f109 0901 	add.w	r9, r9, #1
 80005c6:	45cb      	cmp	fp, r9
 80005c8:	d3b8      	bcc.n	800053c <cmox_ECC_CondImportPoint+0x26>
 80005ca:	6838      	ldr	r0, [r7, #0]
 80005cc:	f850 2029 	ldr.w	r2, [r0, r9, lsl #2]
 80005d0:	f856 1029 	ldr.w	r1, [r6, r9, lsl #2]
 80005d4:	4640      	mov	r0, r8
 80005d6:	f002 fc12 	bl	8002dfe <cmox_mathUtils_mux>
 80005da:	6839      	ldr	r1, [r7, #0]
 80005dc:	f841 0029 	str.w	r0, [r1, r9, lsl #2]
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	b158      	cbz	r0, 80005fc <cmox_ECC_CondImportPoint+0xe6>
 80005e4:	f850 2029 	ldr.w	r2, [r0, r9, lsl #2]
 80005e8:	eb0b 0009 	add.w	r0, fp, r9
 80005ec:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 80005f0:	4640      	mov	r0, r8
 80005f2:	f002 fc04 	bl	8002dfe <cmox_mathUtils_mux>
 80005f6:	6879      	ldr	r1, [r7, #4]
 80005f8:	f841 0029 	str.w	r0, [r1, r9, lsl #2]
 80005fc:	2c00      	cmp	r4, #0
 80005fe:	68b8      	ldr	r0, [r7, #8]
 8000600:	f850 2029 	ldr.w	r2, [r0, r9, lsl #2]
 8000604:	bf0e      	itee	eq
 8000606:	2100      	moveq	r1, #0
 8000608:	1f20      	subne	r0, r4, #4
 800060a:	f850 1029 	ldrne.w	r1, [r0, r9, lsl #2]
 800060e:	e7c4      	b.n	800059a <cmox_ECC_CondImportPoint+0x84>

08000610 <cmox_ECC_PointToModularDomain>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	4604      	mov	r4, r0
 8000614:	460d      	mov	r5, r1
 8000616:	69a0      	ldr	r0, [r4, #24]
 8000618:	6841      	ldr	r1, [r0, #4]
 800061a:	69c8      	ldr	r0, [r1, #28]
 800061c:	2600      	movs	r6, #0
 800061e:	2803      	cmp	r0, #3
 8000620:	d818      	bhi.n	8000654 <cmox_ECC_PointToModularDomain+0x44>
 8000622:	e8df f000 	tbb	[pc, r0]
 8000626:	0707      	.short	0x0707
 8000628:	0c02      	.short	0x0c02
 800062a:	6a22      	ldr	r2, [r4, #32]
 800062c:	68e8      	ldr	r0, [r5, #12]
 800062e:	4621      	mov	r1, r4
 8000630:	f002 fb53 	bl	8002cda <cmox_ModularBN_Enter>
 8000634:	6a22      	ldr	r2, [r4, #32]
 8000636:	6868      	ldr	r0, [r5, #4]
 8000638:	4621      	mov	r1, r4
 800063a:	f002 fb4e 	bl	8002cda <cmox_ModularBN_Enter>
 800063e:	6a22      	ldr	r2, [r4, #32]
 8000640:	6828      	ldr	r0, [r5, #0]
 8000642:	4621      	mov	r1, r4
 8000644:	f002 fb49 	bl	8002cda <cmox_ModularBN_Enter>
 8000648:	6a22      	ldr	r2, [r4, #32]
 800064a:	68a8      	ldr	r0, [r5, #8]
 800064c:	4621      	mov	r1, r4
 800064e:	f002 fb44 	bl	8002cda <cmox_ModularBN_Enter>
 8000652:	e000      	b.n	8000656 <cmox_ECC_PointToModularDomain+0x46>
 8000654:	2601      	movs	r6, #1
 8000656:	6928      	ldr	r0, [r5, #16]
 8000658:	f040 0004 	orr.w	r0, r0, #4
 800065c:	6128      	str	r0, [r5, #16]
 800065e:	4630      	mov	r0, r6
 8000660:	bd70      	pop	{r4, r5, r6, pc}
	...

08000664 <cmox_ECC_PointFromModularDomain>:
 8000664:	b538      	push	{r3, r4, r5, lr}
 8000666:	4604      	mov	r4, r0
 8000668:	460d      	mov	r5, r1
 800066a:	69a0      	ldr	r0, [r4, #24]
 800066c:	6841      	ldr	r1, [r0, #4]
 800066e:	69c8      	ldr	r0, [r1, #28]
 8000670:	2803      	cmp	r0, #3
 8000672:	d81f      	bhi.n	80006b4 <cmox_ECC_PointFromModularDomain+0x50>
 8000674:	e8df f000 	tbb	[pc, r0]
 8000678:	10020909 	.word	0x10020909
 800067c:	6a23      	ldr	r3, [r4, #32]
 800067e:	69e2      	ldr	r2, [r4, #28]
 8000680:	68e8      	ldr	r0, [r5, #12]
 8000682:	4621      	mov	r1, r4
 8000684:	f002 fb31 	bl	8002cea <cmox_ModularBN_Exit>
 8000688:	b9a8      	cbnz	r0, 80006b6 <cmox_ECC_PointFromModularDomain+0x52>
 800068a:	6a23      	ldr	r3, [r4, #32]
 800068c:	69e2      	ldr	r2, [r4, #28]
 800068e:	6868      	ldr	r0, [r5, #4]
 8000690:	4621      	mov	r1, r4
 8000692:	f002 fb2a 	bl	8002cea <cmox_ModularBN_Exit>
 8000696:	b970      	cbnz	r0, 80006b6 <cmox_ECC_PointFromModularDomain+0x52>
 8000698:	6a23      	ldr	r3, [r4, #32]
 800069a:	69e2      	ldr	r2, [r4, #28]
 800069c:	6828      	ldr	r0, [r5, #0]
 800069e:	4621      	mov	r1, r4
 80006a0:	f002 fb23 	bl	8002cea <cmox_ModularBN_Exit>
 80006a4:	b938      	cbnz	r0, 80006b6 <cmox_ECC_PointFromModularDomain+0x52>
 80006a6:	6a23      	ldr	r3, [r4, #32]
 80006a8:	69e2      	ldr	r2, [r4, #28]
 80006aa:	68a8      	ldr	r0, [r5, #8]
 80006ac:	4621      	mov	r1, r4
 80006ae:	f002 fb1c 	bl	8002cea <cmox_ModularBN_Exit>
 80006b2:	e000      	b.n	80006b6 <cmox_ECC_PointFromModularDomain+0x52>
 80006b4:	2001      	movs	r0, #1
 80006b6:	6929      	ldr	r1, [r5, #16]
 80006b8:	f021 0104 	bic.w	r1, r1, #4
 80006bc:	6129      	str	r1, [r5, #16]
 80006be:	bd32      	pop	{r1, r4, r5, pc}

080006c0 <cmox_ECC_PointValidation>:
 80006c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c2:	4604      	mov	r4, r0
 80006c4:	2600      	movs	r6, #0
 80006c6:	460d      	mov	r5, r1
 80006c8:	2c00      	cmp	r4, #0
 80006ca:	bf18      	it	ne
 80006cc:	2d00      	cmpne	r5, #0
 80006ce:	d05e      	beq.n	800078e <cmox_ECC_PointValidation+0xce>
 80006d0:	7c28      	ldrb	r0, [r5, #16]
 80006d2:	2100      	movs	r1, #0
 80006d4:	f000 0001 	and.w	r0, r0, #1
 80006d8:	f002 fb99 	bl	8002e0e <cmox_mathUtils_neq>
 80006dc:	2801      	cmp	r0, #1
 80006de:	d056      	beq.n	800078e <cmox_ECC_PointValidation+0xce>
 80006e0:	68a8      	ldr	r0, [r5, #8]
 80006e2:	2100      	movs	r1, #0
 80006e4:	f004 f83c 	bl	8004760 <cmox_bn_cmpUint>
 80006e8:	2801      	cmp	r0, #1
 80006ea:	d050      	beq.n	800078e <cmox_ECC_PointValidation+0xce>
 80006ec:	69a0      	ldr	r0, [r4, #24]
 80006ee:	6801      	ldr	r1, [r0, #0]
 80006f0:	6828      	ldr	r0, [r5, #0]
 80006f2:	6809      	ldr	r1, [r1, #0]
 80006f4:	f003 fff3 	bl	80046de <cmox_bn_cmp>
 80006f8:	2800      	cmp	r0, #0
 80006fa:	d548      	bpl.n	800078e <cmox_ECC_PointValidation+0xce>
 80006fc:	69a0      	ldr	r0, [r4, #24]
 80006fe:	6841      	ldr	r1, [r0, #4]
 8000700:	69ca      	ldr	r2, [r1, #28]
 8000702:	2a03      	cmp	r2, #3
 8000704:	d006      	beq.n	8000714 <cmox_ECC_PointValidation+0x54>
 8000706:	6800      	ldr	r0, [r0, #0]
 8000708:	6801      	ldr	r1, [r0, #0]
 800070a:	6868      	ldr	r0, [r5, #4]
 800070c:	f003 ffe7 	bl	80046de <cmox_bn_cmp>
 8000710:	2800      	cmp	r0, #0
 8000712:	d53c      	bpl.n	800078e <cmox_ECC_PointValidation+0xce>
 8000714:	69a1      	ldr	r1, [r4, #24]
 8000716:	6809      	ldr	r1, [r1, #0]
 8000718:	6908      	ldr	r0, [r1, #16]
 800071a:	2800      	cmp	r0, #0
 800071c:	bf1c      	itt	ne
 800071e:	6948      	ldrne	r0, [r1, #20]
 8000720:	2800      	cmpne	r0, #0
 8000722:	d035      	beq.n	8000790 <cmox_ECC_PointValidation+0xd0>
 8000724:	69c8      	ldr	r0, [r1, #28]
 8000726:	b118      	cbz	r0, 8000730 <cmox_ECC_PointValidation+0x70>
 8000728:	2802      	cmp	r0, #2
 800072a:	d031      	beq.n	8000790 <cmox_ECC_PointValidation+0xd0>
 800072c:	d332      	bcc.n	8000794 <cmox_ECC_PointValidation+0xd4>
 800072e:	e02e      	b.n	800078e <cmox_ECC_PointValidation+0xce>
 8000730:	6960      	ldr	r0, [r4, #20]
 8000732:	6801      	ldr	r1, [r0, #0]
 8000734:	6a23      	ldr	r3, [r4, #32]
 8000736:	6828      	ldr	r0, [r5, #0]
 8000738:	4622      	mov	r2, r4
 800073a:	f002 fb1b 	bl	8002d74 <cmox_ModularBN_Sqr>
 800073e:	69a0      	ldr	r0, [r4, #24]
 8000740:	6961      	ldr	r1, [r4, #20]
 8000742:	6800      	ldr	r0, [r0, #0]
 8000744:	680b      	ldr	r3, [r1, #0]
 8000746:	6802      	ldr	r2, [r0, #0]
 8000748:	6901      	ldr	r1, [r0, #16]
 800074a:	4618      	mov	r0, r3
 800074c:	f002 f86a 	bl	8002824 <cmox_ModAddBN>
 8000750:	6960      	ldr	r0, [r4, #20]
 8000752:	6a21      	ldr	r1, [r4, #32]
 8000754:	6802      	ldr	r2, [r0, #0]
 8000756:	9100      	str	r1, [sp, #0]
 8000758:	4623      	mov	r3, r4
 800075a:	6829      	ldr	r1, [r5, #0]
 800075c:	4610      	mov	r0, r2
 800075e:	f002 fae6 	bl	8002d2e <cmox_ModularBN_Mul>
 8000762:	69a0      	ldr	r0, [r4, #24]
 8000764:	6962      	ldr	r2, [r4, #20]
 8000766:	6801      	ldr	r1, [r0, #0]
 8000768:	6810      	ldr	r0, [r2, #0]
 800076a:	680a      	ldr	r2, [r1, #0]
 800076c:	6949      	ldr	r1, [r1, #20]
 800076e:	4603      	mov	r3, r0
 8000770:	f002 f858 	bl	8002824 <cmox_ModAddBN>
 8000774:	6960      	ldr	r0, [r4, #20]
 8000776:	6841      	ldr	r1, [r0, #4]
 8000778:	6a23      	ldr	r3, [r4, #32]
 800077a:	6868      	ldr	r0, [r5, #4]
 800077c:	4622      	mov	r2, r4
 800077e:	f002 faf9 	bl	8002d74 <cmox_ModularBN_Sqr>
 8000782:	6960      	ldr	r0, [r4, #20]
 8000784:	6841      	ldr	r1, [r0, #4]
 8000786:	6800      	ldr	r0, [r0, #0]
 8000788:	f003 ffa9 	bl	80046de <cmox_bn_cmp>
 800078c:	b100      	cbz	r0, 8000790 <cmox_ECC_PointValidation+0xd0>
 800078e:	2604      	movs	r6, #4
 8000790:	4630      	mov	r0, r6
 8000792:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8000794:	6960      	ldr	r0, [r4, #20]
 8000796:	6801      	ldr	r1, [r0, #0]
 8000798:	6a23      	ldr	r3, [r4, #32]
 800079a:	6828      	ldr	r0, [r5, #0]
 800079c:	4622      	mov	r2, r4
 800079e:	f002 fae9 	bl	8002d74 <cmox_ModularBN_Sqr>
 80007a2:	6960      	ldr	r0, [r4, #20]
 80007a4:	6841      	ldr	r1, [r0, #4]
 80007a6:	6a23      	ldr	r3, [r4, #32]
 80007a8:	6868      	ldr	r0, [r5, #4]
 80007aa:	4622      	mov	r2, r4
 80007ac:	f002 fae2 	bl	8002d74 <cmox_ModularBN_Sqr>
 80007b0:	6960      	ldr	r0, [r4, #20]
 80007b2:	6a22      	ldr	r2, [r4, #32]
 80007b4:	6801      	ldr	r1, [r0, #0]
 80007b6:	9200      	str	r2, [sp, #0]
 80007b8:	4623      	mov	r3, r4
 80007ba:	69a0      	ldr	r0, [r4, #24]
 80007bc:	6807      	ldr	r7, [r0, #0]
 80007be:	6938      	ldr	r0, [r7, #16]
 80007c0:	460a      	mov	r2, r1
 80007c2:	f002 fab4 	bl	8002d2e <cmox_ModularBN_Mul>
 80007c6:	69a2      	ldr	r2, [r4, #24]
 80007c8:	6961      	ldr	r1, [r4, #20]
 80007ca:	6817      	ldr	r7, [r2, #0]
 80007cc:	6808      	ldr	r0, [r1, #0]
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	6849      	ldr	r1, [r1, #4]
 80007d2:	4603      	mov	r3, r0
 80007d4:	f002 f826 	bl	8002824 <cmox_ModAddBN>
 80007d8:	6960      	ldr	r0, [r4, #20]
 80007da:	6a21      	ldr	r1, [r4, #32]
 80007dc:	6840      	ldr	r0, [r0, #4]
 80007de:	9100      	str	r1, [sp, #0]
 80007e0:	4623      	mov	r3, r4
 80007e2:	6829      	ldr	r1, [r5, #0]
 80007e4:	4602      	mov	r2, r0
 80007e6:	f002 faa2 	bl	8002d2e <cmox_ModularBN_Mul>
 80007ea:	6960      	ldr	r0, [r4, #20]
 80007ec:	6a21      	ldr	r1, [r4, #32]
 80007ee:	6840      	ldr	r0, [r0, #4]
 80007f0:	9100      	str	r1, [sp, #0]
 80007f2:	4623      	mov	r3, r4
 80007f4:	6829      	ldr	r1, [r5, #0]
 80007f6:	4602      	mov	r2, r0
 80007f8:	f002 fa99 	bl	8002d2e <cmox_ModularBN_Mul>
 80007fc:	6960      	ldr	r0, [r4, #20]
 80007fe:	6a21      	ldr	r1, [r4, #32]
 8000800:	6840      	ldr	r0, [r0, #4]
 8000802:	9100      	str	r1, [sp, #0]
 8000804:	4623      	mov	r3, r4
 8000806:	69a7      	ldr	r7, [r4, #24]
 8000808:	683f      	ldr	r7, [r7, #0]
 800080a:	6979      	ldr	r1, [r7, #20]
 800080c:	4602      	mov	r2, r0
 800080e:	f002 fa8e 	bl	8002d2e <cmox_ModularBN_Mul>
 8000812:	69a1      	ldr	r1, [r4, #24]
 8000814:	6960      	ldr	r0, [r4, #20]
 8000816:	680a      	ldr	r2, [r1, #0]
 8000818:	6840      	ldr	r0, [r0, #4]
 800081a:	6812      	ldr	r2, [r2, #0]
 800081c:	68a9      	ldr	r1, [r5, #8]
 800081e:	4603      	mov	r3, r0
 8000820:	f002 f800 	bl	8002824 <cmox_ModAddBN>
 8000824:	e7ad      	b.n	8000782 <cmox_ECC_PointValidation+0xc2>
	...

08000828 <cmox_ECC_PointToAffine>:
 8000828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082a:	b085      	sub	sp, #20
 800082c:	460f      	mov	r7, r1
 800082e:	4606      	mov	r6, r0
 8000830:	2100      	movs	r1, #0
 8000832:	9103      	str	r1, [sp, #12]
 8000834:	9104      	str	r1, [sp, #16]
 8000836:	a903      	add	r1, sp, #12
 8000838:	69b0      	ldr	r0, [r6, #24]
 800083a:	6803      	ldr	r3, [r0, #0]
 800083c:	681c      	ldr	r4, [r3, #0]
 800083e:	69f0      	ldr	r0, [r6, #28]
 8000840:	6822      	ldr	r2, [r4, #0]
 8000842:	f003 fec9 	bl	80045d8 <cmox_bn_alloc>
 8000846:	2501      	movs	r5, #1
 8000848:	0004      	movs	r4, r0
 800084a:	f040 80c5 	bne.w	80009d8 <cmox_ECC_PointToAffine+0x1b0>
 800084e:	69b0      	ldr	r0, [r6, #24]
 8000850:	6801      	ldr	r1, [r0, #0]
 8000852:	680a      	ldr	r2, [r1, #0]
 8000854:	69f0      	ldr	r0, [r6, #28]
 8000856:	6812      	ldr	r2, [r2, #0]
 8000858:	a904      	add	r1, sp, #16
 800085a:	f003 febd 	bl	80045d8 <cmox_bn_alloc>
 800085e:	0004      	movs	r4, r0
 8000860:	f040 80b6 	bne.w	80009d0 <cmox_ECC_PointToAffine+0x1a8>
 8000864:	7c38      	ldrb	r0, [r7, #16]
 8000866:	2100      	movs	r1, #0
 8000868:	f000 0004 	and.w	r0, r0, #4
 800086c:	f002 facf 	bl	8002e0e <cmox_mathUtils_neq>
 8000870:	b920      	cbnz	r0, 800087c <cmox_ECC_PointToAffine+0x54>
 8000872:	4639      	mov	r1, r7
 8000874:	4630      	mov	r0, r6
 8000876:	f7ff fecb 	bl	8000610 <cmox_ECC_PointToModularDomain>
 800087a:	2500      	movs	r5, #0
 800087c:	f8df 2178 	ldr.w	r2, [pc, #376]	@ 80009f8 <.text_19>
 8000880:	4957      	ldr	r1, [pc, #348]	@ (80009e0 <cmox_ECC_PointToAffine+0x1b8>)
 8000882:	e9d2 3400 	ldrd	r3, r4, [r2]
 8000886:	e9cd 3400 	strd	r3, r4, [sp]
 800088a:	7808      	ldrb	r0, [r1, #0]
 800088c:	4b55      	ldr	r3, [pc, #340]	@ (80009e4 <cmox_ECC_PointToAffine+0x1bc>)
 800088e:	2800      	cmp	r0, #0
 8000890:	bf0e      	itee	eq
 8000892:	2100      	moveq	r1, #0
 8000894:	2004      	movne	r0, #4
 8000896:	2104      	movne	r1, #4
 8000898:	581a      	ldr	r2, [r3, r0]
 800089a:	f85d 0001 	ldr.w	r0, [sp, r1]
 800089e:	4952      	ldr	r1, [pc, #328]	@ (80009e8 <cmox_ECC_PointToAffine+0x1c0>)
 80008a0:	1882      	adds	r2, r0, r2
 80008a2:	6011      	str	r1, [r2, #0]
 80008a4:	2101      	movs	r1, #1
 80008a6:	6810      	ldr	r0, [r2, #0]
 80008a8:	6091      	str	r1, [r2, #8]
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	9900      	ldr	r1, [sp, #0]
 80008ae:	4050      	eors	r0, r2
 80008b0:	4041      	eors	r1, r0
 80008b2:	484e      	ldr	r0, [pc, #312]	@ (80009ec <cmox_ECC_PointToAffine+0x1c4>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	ea80 0c01 	eor.w	ip, r0, r1
 80008ba:	9901      	ldr	r1, [sp, #4]
 80008bc:	484c      	ldr	r0, [pc, #304]	@ (80009f0 <cmox_ECC_PointToAffine+0x1c8>)
 80008be:	404a      	eors	r2, r1
 80008c0:	4042      	eors	r2, r0
 80008c2:	69b0      	ldr	r0, [r6, #24]
 80008c4:	6803      	ldr	r3, [r0, #0]
 80008c6:	6818      	ldr	r0, [r3, #0]
 80008c8:	4494      	add	ip, r2
 80008ca:	4a4a      	ldr	r2, [pc, #296]	@ (80009f4 <cmox_ECC_PointToAffine+0x1cc>)
 80008cc:	ea92 0f0c 	teq	r2, ip
 80008d0:	9a04      	ldr	r2, [sp, #16]
 80008d2:	bf14      	ite	ne
 80008d4:	f06f 0102 	mvnne.w	r1, #2
 80008d8:	f06f 0101 	mvneq.w	r1, #1
 80008dc:	f002 f8e6 	bl	8002aac <cmox_AddBN_Int>
 80008e0:	69b0      	ldr	r0, [r6, #24]
 80008e2:	69c4      	ldr	r4, [r0, #28]
 80008e4:	6a30      	ldr	r0, [r6, #32]
 80008e6:	9002      	str	r0, [sp, #8]
 80008e8:	4632      	mov	r2, r6
 80008ea:	69f1      	ldr	r1, [r6, #28]
 80008ec:	9803      	ldr	r0, [sp, #12]
 80008ee:	9101      	str	r1, [sp, #4]
 80008f0:	9000      	str	r0, [sp, #0]
 80008f2:	6863      	ldr	r3, [r4, #4]
 80008f4:	9904      	ldr	r1, [sp, #16]
 80008f6:	68b8      	ldr	r0, [r7, #8]
 80008f8:	6824      	ldr	r4, [r4, #0]
 80008fa:	47a0      	blx	r4
 80008fc:	4604      	mov	r4, r0
 80008fe:	69b0      	ldr	r0, [r6, #24]
 8000900:	6841      	ldr	r1, [r0, #4]
 8000902:	69c8      	ldr	r0, [r1, #28]
 8000904:	2803      	cmp	r0, #3
 8000906:	d849      	bhi.n	800099c <cmox_ECC_PointToAffine+0x174>
 8000908:	e8df f000 	tbb	[pc, r0]
 800090c:	3f281e02 	.word	0x3f281e02
 8000910:	6a33      	ldr	r3, [r6, #32]
 8000912:	9904      	ldr	r1, [sp, #16]
 8000914:	9803      	ldr	r0, [sp, #12]
 8000916:	4632      	mov	r2, r6
 8000918:	f002 fa2c 	bl	8002d74 <cmox_ModularBN_Sqr>
 800091c:	683a      	ldr	r2, [r7, #0]
 800091e:	6a30      	ldr	r0, [r6, #32]
 8000920:	9904      	ldr	r1, [sp, #16]
 8000922:	9000      	str	r0, [sp, #0]
 8000924:	4633      	mov	r3, r6
 8000926:	4610      	mov	r0, r2
 8000928:	f002 fa01 	bl	8002d2e <cmox_ModularBN_Mul>
 800092c:	6a30      	ldr	r0, [r6, #32]
 800092e:	9a04      	ldr	r2, [sp, #16]
 8000930:	9000      	str	r0, [sp, #0]
 8000932:	4633      	mov	r3, r6
 8000934:	9803      	ldr	r0, [sp, #12]
 8000936:	4611      	mov	r1, r2
 8000938:	f002 f9f9 	bl	8002d2e <cmox_ModularBN_Mul>
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	6a31      	ldr	r1, [r6, #32]
 8000940:	9100      	str	r1, [sp, #0]
 8000942:	4633      	mov	r3, r6
 8000944:	9904      	ldr	r1, [sp, #16]
 8000946:	e025      	b.n	8000994 <cmox_ECC_PointToAffine+0x16c>
 8000948:	6838      	ldr	r0, [r7, #0]
 800094a:	6a31      	ldr	r1, [r6, #32]
 800094c:	9100      	str	r1, [sp, #0]
 800094e:	4633      	mov	r3, r6
 8000950:	9903      	ldr	r1, [sp, #12]
 8000952:	4602      	mov	r2, r0
 8000954:	f002 f9eb 	bl	8002d2e <cmox_ModularBN_Mul>
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	e017      	b.n	800098c <cmox_ECC_PointToAffine+0x164>
 800095c:	6838      	ldr	r0, [r7, #0]
 800095e:	6a31      	ldr	r1, [r6, #32]
 8000960:	9100      	str	r1, [sp, #0]
 8000962:	4633      	mov	r3, r6
 8000964:	9903      	ldr	r1, [sp, #12]
 8000966:	4602      	mov	r2, r0
 8000968:	f002 f9e1 	bl	8002d2e <cmox_ModularBN_Mul>
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	6a31      	ldr	r1, [r6, #32]
 8000970:	9100      	str	r1, [sp, #0]
 8000972:	4633      	mov	r3, r6
 8000974:	9903      	ldr	r1, [sp, #12]
 8000976:	4602      	mov	r2, r0
 8000978:	f002 f9d9 	bl	8002d2e <cmox_ModularBN_Mul>
 800097c:	6a30      	ldr	r0, [r6, #32]
 800097e:	9000      	str	r0, [sp, #0]
 8000980:	68fa      	ldr	r2, [r7, #12]
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	6838      	ldr	r0, [r7, #0]
 8000986:	4633      	mov	r3, r6
 8000988:	e005      	b.n	8000996 <cmox_ECC_PointToAffine+0x16e>
 800098a:	6838      	ldr	r0, [r7, #0]
 800098c:	6a31      	ldr	r1, [r6, #32]
 800098e:	9100      	str	r1, [sp, #0]
 8000990:	4633      	mov	r3, r6
 8000992:	9903      	ldr	r1, [sp, #12]
 8000994:	4602      	mov	r2, r0
 8000996:	f002 f9ca 	bl	8002d2e <cmox_ModularBN_Mul>
 800099a:	e000      	b.n	800099e <cmox_ECC_PointToAffine+0x176>
 800099c:	2401      	movs	r4, #1
 800099e:	68b8      	ldr	r0, [r7, #8]
 80009a0:	6a31      	ldr	r1, [r6, #32]
 80009a2:	9100      	str	r1, [sp, #0]
 80009a4:	4633      	mov	r3, r6
 80009a6:	9903      	ldr	r1, [sp, #12]
 80009a8:	4602      	mov	r2, r0
 80009aa:	f002 f9c0 	bl	8002d2e <cmox_ModularBN_Mul>
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	bf08      	it	eq
 80009b2:	2c00      	cmpeq	r4, #0
 80009b4:	d104      	bne.n	80009c0 <cmox_ECC_PointToAffine+0x198>
 80009b6:	4639      	mov	r1, r7
 80009b8:	4630      	mov	r0, r6
 80009ba:	f7ff fe53 	bl	8000664 <cmox_ECC_PointFromModularDomain>
 80009be:	4604      	mov	r4, r0
 80009c0:	6938      	ldr	r0, [r7, #16]
 80009c2:	f040 0002 	orr.w	r0, r0, #2
 80009c6:	6138      	str	r0, [r7, #16]
 80009c8:	a904      	add	r1, sp, #16
 80009ca:	69f0      	ldr	r0, [r6, #28]
 80009cc:	f003 fe0f 	bl	80045ee <cmox_bn_free>
 80009d0:	69f0      	ldr	r0, [r6, #28]
 80009d2:	a903      	add	r1, sp, #12
 80009d4:	f003 fe0b 	bl	80045ee <cmox_bn_free>
 80009d8:	4620      	mov	r0, r4
 80009da:	b005      	add	sp, #20
 80009dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000084 	.word	0x20000084
 80009e4:	0800ab5c 	.word	0x0800ab5c
 80009e8:	ad827e2c 	.word	0xad827e2c
 80009ec:	12008504 	.word	0x12008504
 80009f0:	7a0168fc 	.word	0x7a0168fc
 80009f4:	8e9be2a8 	.word	0x8e9be2a8

080009f8 <.text_19>:
 80009f8:	08001fbc 	.word	0x08001fbc

080009fc <cmox_ECC_EDW_DecPoint_ed25519>:
 80009fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a00:	4606      	mov	r6, r0
 8000a02:	b088      	sub	sp, #32
 8000a04:	69b0      	ldr	r0, [r6, #24]
 8000a06:	4689      	mov	r9, r1
 8000a08:	461d      	mov	r5, r3
 8000a0a:	6a01      	ldr	r1, [r0, #32]
 8000a0c:	6800      	ldr	r0, [r0, #0]
 8000a0e:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8000a12:	6803      	ldr	r3, [r0, #0]
 8000a14:	69f0      	ldr	r0, [r6, #28]
 8000a16:	4692      	mov	sl, r2
 8000a18:	eb09 020a 	add.w	r2, r9, sl
 8000a1c:	a906      	add	r1, sp, #24
 8000a1e:	f812 7c01 	ldrb.w	r7, [r2, #-1]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	f003 fdd8 	bl	80045d8 <cmox_bn_alloc>
 8000a28:	09ff      	lsrs	r7, r7, #7
 8000a2a:	0004      	movs	r4, r0
 8000a2c:	f040 8141 	bne.w	8000cb2 <cmox_ECC_EDW_DecPoint_ed25519+0x2b6>
 8000a30:	69b0      	ldr	r0, [r6, #24]
 8000a32:	6801      	ldr	r1, [r0, #0]
 8000a34:	680a      	ldr	r2, [r1, #0]
 8000a36:	69f0      	ldr	r0, [r6, #28]
 8000a38:	6812      	ldr	r2, [r2, #0]
 8000a3a:	a907      	add	r1, sp, #28
 8000a3c:	f003 fdcc 	bl	80045d8 <cmox_bn_alloc>
 8000a40:	0004      	movs	r4, r0
 8000a42:	f040 8132 	bne.w	8000caa <cmox_ECC_EDW_DecPoint_ed25519+0x2ae>
 8000a46:	69b0      	ldr	r0, [r6, #24]
 8000a48:	6801      	ldr	r1, [r0, #0]
 8000a4a:	680a      	ldr	r2, [r1, #0]
 8000a4c:	69f0      	ldr	r0, [r6, #28]
 8000a4e:	6812      	ldr	r2, [r2, #0]
 8000a50:	a903      	add	r1, sp, #12
 8000a52:	f003 fdc1 	bl	80045d8 <cmox_bn_alloc>
 8000a56:	0004      	movs	r4, r0
 8000a58:	f040 8123 	bne.w	8000ca2 <cmox_ECC_EDW_DecPoint_ed25519+0x2a6>
 8000a5c:	69b0      	ldr	r0, [r6, #24]
 8000a5e:	6801      	ldr	r1, [r0, #0]
 8000a60:	680a      	ldr	r2, [r1, #0]
 8000a62:	69f0      	ldr	r0, [r6, #28]
 8000a64:	6812      	ldr	r2, [r2, #0]
 8000a66:	a905      	add	r1, sp, #20
 8000a68:	f003 fdb6 	bl	80045d8 <cmox_bn_alloc>
 8000a6c:	0004      	movs	r4, r0
 8000a6e:	f040 8114 	bne.w	8000c9a <cmox_ECC_EDW_DecPoint_ed25519+0x29e>
 8000a72:	69b0      	ldr	r0, [r6, #24]
 8000a74:	6801      	ldr	r1, [r0, #0]
 8000a76:	680a      	ldr	r2, [r1, #0]
 8000a78:	69f0      	ldr	r0, [r6, #28]
 8000a7a:	6812      	ldr	r2, [r2, #0]
 8000a7c:	a904      	add	r1, sp, #16
 8000a7e:	f003 fdab 	bl	80045d8 <cmox_bn_alloc>
 8000a82:	0004      	movs	r4, r0
 8000a84:	f040 8105 	bne.w	8000c92 <cmox_ECC_EDW_DecPoint_ed25519+0x296>
 8000a88:	9a03      	ldr	r2, [sp, #12]
 8000a8a:	4651      	mov	r1, sl
 8000a8c:	4648      	mov	r0, r9
 8000a8e:	f003 ff83 	bl	8004998 <cmox_bn_fromU8LE>
 8000a92:	9803      	ldr	r0, [sp, #12]
 8000a94:	9903      	ldr	r1, [sp, #12]
 8000a96:	6800      	ldr	r0, [r0, #0]
 8000a98:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 8000a9c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000aa0:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
 8000aa4:	69b0      	ldr	r0, [r6, #24]
 8000aa6:	6801      	ldr	r1, [r0, #0]
 8000aa8:	9803      	ldr	r0, [sp, #12]
 8000aaa:	6809      	ldr	r1, [r1, #0]
 8000aac:	f003 fe17 	bl	80046de <cmox_bn_cmp>
 8000ab0:	2800      	cmp	r0, #0
 8000ab2:	d404      	bmi.n	8000abe <cmox_ECC_EDW_DecPoint_ed25519+0xc2>
 8000ab4:	69f0      	ldr	r0, [r6, #28]
 8000ab6:	a904      	add	r1, sp, #16
 8000ab8:	f003 fd99 	bl	80045ee <cmox_bn_free>
 8000abc:	e0c3      	b.n	8000c46 <cmox_ECC_EDW_DecPoint_ed25519+0x24a>
 8000abe:	6868      	ldr	r0, [r5, #4]
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	f003 fdc0 	bl	8004646 <cmox_bn_init>
 8000ac6:	686a      	ldr	r2, [r5, #4]
 8000ac8:	9903      	ldr	r1, [sp, #12]
 8000aca:	2001      	movs	r0, #1
 8000acc:	f003 fdca 	bl	8004664 <cmox_bn_cCopy>
 8000ad0:	6a32      	ldr	r2, [r6, #32]
 8000ad2:	9803      	ldr	r0, [sp, #12]
 8000ad4:	4631      	mov	r1, r6
 8000ad6:	f002 f900 	bl	8002cda <cmox_ModularBN_Enter>
 8000ada:	6a33      	ldr	r3, [r6, #32]
 8000adc:	9905      	ldr	r1, [sp, #20]
 8000ade:	9803      	ldr	r0, [sp, #12]
 8000ae0:	4632      	mov	r2, r6
 8000ae2:	f002 f947 	bl	8002d74 <cmox_ModularBN_Sqr>
 8000ae6:	69b0      	ldr	r0, [r6, #24]
 8000ae8:	6801      	ldr	r1, [r0, #0]
 8000aea:	68c0      	ldr	r0, [r0, #12]
 8000aec:	680a      	ldr	r2, [r1, #0]
 8000aee:	6812      	ldr	r2, [r2, #0]
 8000af0:	1d01      	adds	r1, r0, #4
 8000af2:	9804      	ldr	r0, [sp, #16]
 8000af4:	f003 fd86 	bl	8004604 <cmox_bn_import>
 8000af8:	69b0      	ldr	r0, [r6, #24]
 8000afa:	6801      	ldr	r1, [r0, #0]
 8000afc:	680a      	ldr	r2, [r1, #0]
 8000afe:	9b07      	ldr	r3, [sp, #28]
 8000b00:	9904      	ldr	r1, [sp, #16]
 8000b02:	9805      	ldr	r0, [sp, #20]
 8000b04:	f001 ff1f 	bl	8002946 <cmox_ModSubBN>
 8000b08:	6a30      	ldr	r0, [r6, #32]
 8000b0a:	9a06      	ldr	r2, [sp, #24]
 8000b0c:	9000      	str	r0, [sp, #0]
 8000b0e:	4633      	mov	r3, r6
 8000b10:	69b0      	ldr	r0, [r6, #24]
 8000b12:	6801      	ldr	r1, [r0, #0]
 8000b14:	9805      	ldr	r0, [sp, #20]
 8000b16:	6949      	ldr	r1, [r1, #20]
 8000b18:	f002 f909 	bl	8002d2e <cmox_ModularBN_Mul>
 8000b1c:	69b0      	ldr	r0, [r6, #24]
 8000b1e:	6801      	ldr	r1, [r0, #0]
 8000b20:	680a      	ldr	r2, [r1, #0]
 8000b22:	9b06      	ldr	r3, [sp, #24]
 8000b24:	9904      	ldr	r1, [sp, #16]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 fe7c 	bl	8002824 <cmox_ModAddBN>
 8000b2c:	6a33      	ldr	r3, [r6, #32]
 8000b2e:	9903      	ldr	r1, [sp, #12]
 8000b30:	9806      	ldr	r0, [sp, #24]
 8000b32:	4632      	mov	r2, r6
 8000b34:	f002 f91e 	bl	8002d74 <cmox_ModularBN_Sqr>
 8000b38:	6a30      	ldr	r0, [r6, #32]
 8000b3a:	9a03      	ldr	r2, [sp, #12]
 8000b3c:	9906      	ldr	r1, [sp, #24]
 8000b3e:	9000      	str	r0, [sp, #0]
 8000b40:	4633      	mov	r3, r6
 8000b42:	4610      	mov	r0, r2
 8000b44:	f002 f8f3 	bl	8002d2e <cmox_ModularBN_Mul>
 8000b48:	6a30      	ldr	r0, [r6, #32]
 8000b4a:	9a05      	ldr	r2, [sp, #20]
 8000b4c:	9903      	ldr	r1, [sp, #12]
 8000b4e:	9000      	str	r0, [sp, #0]
 8000b50:	4633      	mov	r3, r6
 8000b52:	9807      	ldr	r0, [sp, #28]
 8000b54:	f002 f8eb 	bl	8002d2e <cmox_ModularBN_Mul>
 8000b58:	9903      	ldr	r1, [sp, #12]
 8000b5a:	6a33      	ldr	r3, [r6, #32]
 8000b5c:	4632      	mov	r2, r6
 8000b5e:	4608      	mov	r0, r1
 8000b60:	f002 f908 	bl	8002d74 <cmox_ModularBN_Sqr>
 8000b64:	6a30      	ldr	r0, [r6, #32]
 8000b66:	9a03      	ldr	r2, [sp, #12]
 8000b68:	9906      	ldr	r1, [sp, #24]
 8000b6a:	9000      	str	r0, [sp, #0]
 8000b6c:	4633      	mov	r3, r6
 8000b6e:	4610      	mov	r0, r2
 8000b70:	f002 f8dd 	bl	8002d2e <cmox_ModularBN_Mul>
 8000b74:	6a30      	ldr	r0, [r6, #32]
 8000b76:	9a03      	ldr	r2, [sp, #12]
 8000b78:	9907      	ldr	r1, [sp, #28]
 8000b7a:	9000      	str	r0, [sp, #0]
 8000b7c:	4633      	mov	r3, r6
 8000b7e:	4610      	mov	r0, r2
 8000b80:	f002 f8d5 	bl	8002d2e <cmox_ModularBN_Mul>
 8000b84:	69b0      	ldr	r0, [r6, #24]
 8000b86:	6803      	ldr	r3, [r0, #0]
 8000b88:	9a04      	ldr	r2, [sp, #16]
 8000b8a:	6818      	ldr	r0, [r3, #0]
 8000b8c:	f06f 0104 	mvn.w	r1, #4
 8000b90:	f001 ff8c 	bl	8002aac <cmox_AddBN_Int>
 8000b94:	9a04      	ldr	r2, [sp, #16]
 8000b96:	2103      	movs	r1, #3
 8000b98:	4610      	mov	r0, r2
 8000b9a:	f001 fe18 	bl	80027ce <cmox_RightShiftBN>
 8000b9e:	69b0      	ldr	r0, [r6, #24]
 8000ba0:	69c4      	ldr	r4, [r0, #28]
 8000ba2:	6a30      	ldr	r0, [r6, #32]
 8000ba4:	9002      	str	r0, [sp, #8]
 8000ba6:	69f1      	ldr	r1, [r6, #28]
 8000ba8:	9803      	ldr	r0, [sp, #12]
 8000baa:	9101      	str	r1, [sp, #4]
 8000bac:	682a      	ldr	r2, [r5, #0]
 8000bae:	9904      	ldr	r1, [sp, #16]
 8000bb0:	9200      	str	r2, [sp, #0]
 8000bb2:	4632      	mov	r2, r6
 8000bb4:	6863      	ldr	r3, [r4, #4]
 8000bb6:	6824      	ldr	r4, [r4, #0]
 8000bb8:	47a0      	blx	r4
 8000bba:	4604      	mov	r4, r0
 8000bbc:	69f0      	ldr	r0, [r6, #28]
 8000bbe:	a904      	add	r1, sp, #16
 8000bc0:	f003 fd15 	bl	80045ee <cmox_bn_free>
 8000bc4:	2c00      	cmp	r4, #0
 8000bc6:	d164      	bne.n	8000c92 <cmox_ECC_EDW_DecPoint_ed25519+0x296>
 8000bc8:	6828      	ldr	r0, [r5, #0]
 8000bca:	6a31      	ldr	r1, [r6, #32]
 8000bcc:	9100      	str	r1, [sp, #0]
 8000bce:	4633      	mov	r3, r6
 8000bd0:	9905      	ldr	r1, [sp, #20]
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	f002 f8ab 	bl	8002d2e <cmox_ModularBN_Mul>
 8000bd8:	6a33      	ldr	r3, [r6, #32]
 8000bda:	9903      	ldr	r1, [sp, #12]
 8000bdc:	6828      	ldr	r0, [r5, #0]
 8000bde:	4632      	mov	r2, r6
 8000be0:	f002 f8c8 	bl	8002d74 <cmox_ModularBN_Sqr>
 8000be4:	6a30      	ldr	r0, [r6, #32]
 8000be6:	9a03      	ldr	r2, [sp, #12]
 8000be8:	9000      	str	r0, [sp, #0]
 8000bea:	4633      	mov	r3, r6
 8000bec:	9806      	ldr	r0, [sp, #24]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	f002 f89d 	bl	8002d2e <cmox_ModularBN_Mul>
 8000bf4:	9907      	ldr	r1, [sp, #28]
 8000bf6:	9803      	ldr	r0, [sp, #12]
 8000bf8:	f003 fd71 	bl	80046de <cmox_bn_cmp>
 8000bfc:	b198      	cbz	r0, 8000c26 <cmox_ECC_EDW_DecPoint_ed25519+0x22a>
 8000bfe:	69b0      	ldr	r0, [r6, #24]
 8000c00:	6803      	ldr	r3, [r0, #0]
 8000c02:	9a05      	ldr	r2, [sp, #20]
 8000c04:	9907      	ldr	r1, [sp, #28]
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	f001 ff1c 	bl	8002a44 <cmox_SubBN>
 8000c0c:	9905      	ldr	r1, [sp, #20]
 8000c0e:	9803      	ldr	r0, [sp, #12]
 8000c10:	f003 fd65 	bl	80046de <cmox_bn_cmp>
 8000c14:	b9b8      	cbnz	r0, 8000c46 <cmox_ECC_EDW_DecPoint_ed25519+0x24a>
 8000c16:	6828      	ldr	r0, [r5, #0]
 8000c18:	6a31      	ldr	r1, [r6, #32]
 8000c1a:	9100      	str	r1, [sp, #0]
 8000c1c:	4633      	mov	r3, r6
 8000c1e:	4602      	mov	r2, r0
 8000c20:	4641      	mov	r1, r8
 8000c22:	f002 f884 	bl	8002d2e <cmox_ModularBN_Mul>
 8000c26:	6a33      	ldr	r3, [r6, #32]
 8000c28:	69f2      	ldr	r2, [r6, #28]
 8000c2a:	6828      	ldr	r0, [r5, #0]
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	f002 f85c 	bl	8002cea <cmox_ModularBN_Exit>
 8000c32:	0004      	movs	r4, r0
 8000c34:	d12d      	bne.n	8000c92 <cmox_ECC_EDW_DecPoint_ed25519+0x296>
 8000c36:	2f01      	cmp	r7, #1
 8000c38:	d107      	bne.n	8000c4a <cmox_ECC_EDW_DecPoint_ed25519+0x24e>
 8000c3a:	6828      	ldr	r0, [r5, #0]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	f003 fd8f 	bl	8004760 <cmox_bn_cmpUint>
 8000c42:	2801      	cmp	r0, #1
 8000c44:	d101      	bne.n	8000c4a <cmox_ECC_EDW_DecPoint_ed25519+0x24e>
 8000c46:	2404      	movs	r4, #4
 8000c48:	e023      	b.n	8000c92 <cmox_ECC_EDW_DecPoint_ed25519+0x296>
 8000c4a:	69b0      	ldr	r0, [r6, #24]
 8000c4c:	6829      	ldr	r1, [r5, #0]
 8000c4e:	6802      	ldr	r2, [r0, #0]
 8000c50:	7908      	ldrb	r0, [r1, #4]
 8000c52:	6812      	ldr	r2, [r2, #0]
 8000c54:	f000 0001 	and.w	r0, r0, #1
 8000c58:	4078      	eors	r0, r7
 8000c5a:	f001 fff7 	bl	8002c4c <cmox_FieldBN_CondNegate>
 8000c5e:	6928      	ldr	r0, [r5, #16]
 8000c60:	f040 0002 	orr.w	r0, r0, #2
 8000c64:	6128      	str	r0, [r5, #16]
 8000c66:	2101      	movs	r1, #1
 8000c68:	68a8      	ldr	r0, [r5, #8]
 8000c6a:	f003 fcec 	bl	8004646 <cmox_bn_init>
 8000c6e:	69b0      	ldr	r0, [r6, #24]
 8000c70:	6841      	ldr	r1, [r0, #4]
 8000c72:	69c8      	ldr	r0, [r1, #28]
 8000c74:	2802      	cmp	r0, #2
 8000c76:	d10c      	bne.n	8000c92 <cmox_ECC_EDW_DecPoint_ed25519+0x296>
 8000c78:	6a30      	ldr	r0, [r6, #32]
 8000c7a:	9000      	str	r0, [sp, #0]
 8000c7c:	68ea      	ldr	r2, [r5, #12]
 8000c7e:	6869      	ldr	r1, [r5, #4]
 8000c80:	6828      	ldr	r0, [r5, #0]
 8000c82:	4633      	mov	r3, r6
 8000c84:	f002 f853 	bl	8002d2e <cmox_ModularBN_Mul>
 8000c88:	6a32      	ldr	r2, [r6, #32]
 8000c8a:	68e8      	ldr	r0, [r5, #12]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	f002 f824 	bl	8002cda <cmox_ModularBN_Enter>
 8000c92:	69f0      	ldr	r0, [r6, #28]
 8000c94:	a905      	add	r1, sp, #20
 8000c96:	f003 fcaa 	bl	80045ee <cmox_bn_free>
 8000c9a:	69f0      	ldr	r0, [r6, #28]
 8000c9c:	a903      	add	r1, sp, #12
 8000c9e:	f003 fca6 	bl	80045ee <cmox_bn_free>
 8000ca2:	69f0      	ldr	r0, [r6, #28]
 8000ca4:	a907      	add	r1, sp, #28
 8000ca6:	f003 fca2 	bl	80045ee <cmox_bn_free>
 8000caa:	69f0      	ldr	r0, [r6, #28]
 8000cac:	a906      	add	r1, sp, #24
 8000cae:	f003 fc9e 	bl	80045ee <cmox_bn_free>
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	b008      	add	sp, #32
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000cba <cmox_ECC_EDW_DecPoint_ed448>:
 8000cba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cbe:	461f      	mov	r7, r3
 8000cc0:	4605      	mov	r5, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	4691      	mov	r9, r2
 8000cc6:	eb08 0009 	add.w	r0, r8, r9
 8000cca:	b087      	sub	sp, #28
 8000ccc:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 8000cd0:	69a8      	ldr	r0, [r5, #24]
 8000cd2:	6803      	ldr	r3, [r0, #0]
 8000cd4:	681c      	ldr	r4, [r3, #0]
 8000cd6:	69e8      	ldr	r0, [r5, #28]
 8000cd8:	6822      	ldr	r2, [r4, #0]
 8000cda:	a905      	add	r1, sp, #20
 8000cdc:	f003 fc7c 	bl	80045d8 <cmox_bn_alloc>
 8000ce0:	09f6      	lsrs	r6, r6, #7
 8000ce2:	0004      	movs	r4, r0
 8000ce4:	f040 8113 	bne.w	8000f0e <cmox_ECC_EDW_DecPoint_ed448+0x254>
 8000ce8:	69a8      	ldr	r0, [r5, #24]
 8000cea:	6801      	ldr	r1, [r0, #0]
 8000cec:	680a      	ldr	r2, [r1, #0]
 8000cee:	69e8      	ldr	r0, [r5, #28]
 8000cf0:	6812      	ldr	r2, [r2, #0]
 8000cf2:	a906      	add	r1, sp, #24
 8000cf4:	f003 fc70 	bl	80045d8 <cmox_bn_alloc>
 8000cf8:	0004      	movs	r4, r0
 8000cfa:	f040 8104 	bne.w	8000f06 <cmox_ECC_EDW_DecPoint_ed448+0x24c>
 8000cfe:	69a8      	ldr	r0, [r5, #24]
 8000d00:	6801      	ldr	r1, [r0, #0]
 8000d02:	680a      	ldr	r2, [r1, #0]
 8000d04:	69e8      	ldr	r0, [r5, #28]
 8000d06:	6812      	ldr	r2, [r2, #0]
 8000d08:	a903      	add	r1, sp, #12
 8000d0a:	f003 fc65 	bl	80045d8 <cmox_bn_alloc>
 8000d0e:	0004      	movs	r4, r0
 8000d10:	f040 80f5 	bne.w	8000efe <cmox_ECC_EDW_DecPoint_ed448+0x244>
 8000d14:	69a8      	ldr	r0, [r5, #24]
 8000d16:	6801      	ldr	r1, [r0, #0]
 8000d18:	680a      	ldr	r2, [r1, #0]
 8000d1a:	69e8      	ldr	r0, [r5, #28]
 8000d1c:	6812      	ldr	r2, [r2, #0]
 8000d1e:	a904      	add	r1, sp, #16
 8000d20:	f003 fc5a 	bl	80045d8 <cmox_bn_alloc>
 8000d24:	0004      	movs	r4, r0
 8000d26:	f040 80e6 	bne.w	8000ef6 <cmox_ECC_EDW_DecPoint_ed448+0x23c>
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	f1a9 0101 	sub.w	r1, r9, #1
 8000d30:	4640      	mov	r0, r8
 8000d32:	f003 fe31 	bl	8004998 <cmox_bn_fromU8LE>
 8000d36:	69a8      	ldr	r0, [r5, #24]
 8000d38:	6801      	ldr	r1, [r0, #0]
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	6809      	ldr	r1, [r1, #0]
 8000d3e:	f003 fcce 	bl	80046de <cmox_bn_cmp>
 8000d42:	2800      	cmp	r0, #0
 8000d44:	f140 80bf 	bpl.w	8000ec6 <cmox_ECC_EDW_DecPoint_ed448+0x20c>
 8000d48:	9803      	ldr	r0, [sp, #12]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	f003 fc7b 	bl	8004646 <cmox_bn_init>
 8000d50:	9a03      	ldr	r2, [sp, #12]
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	2001      	movs	r0, #1
 8000d56:	f003 fc85 	bl	8004664 <cmox_bn_cCopy>
 8000d5a:	6a2a      	ldr	r2, [r5, #32]
 8000d5c:	9803      	ldr	r0, [sp, #12]
 8000d5e:	4629      	mov	r1, r5
 8000d60:	f001 ffbb 	bl	8002cda <cmox_ModularBN_Enter>
 8000d64:	6a2b      	ldr	r3, [r5, #32]
 8000d66:	9904      	ldr	r1, [sp, #16]
 8000d68:	9803      	ldr	r0, [sp, #12]
 8000d6a:	462a      	mov	r2, r5
 8000d6c:	f002 f802 	bl	8002d74 <cmox_ModularBN_Sqr>
 8000d70:	69a8      	ldr	r0, [r5, #24]
 8000d72:	6801      	ldr	r1, [r0, #0]
 8000d74:	68c0      	ldr	r0, [r0, #12]
 8000d76:	680a      	ldr	r2, [r1, #0]
 8000d78:	6812      	ldr	r2, [r2, #0]
 8000d7a:	1d01      	adds	r1, r0, #4
 8000d7c:	6838      	ldr	r0, [r7, #0]
 8000d7e:	f003 fc41 	bl	8004604 <cmox_bn_import>
 8000d82:	69a8      	ldr	r0, [r5, #24]
 8000d84:	6801      	ldr	r1, [r0, #0]
 8000d86:	680a      	ldr	r2, [r1, #0]
 8000d88:	9b06      	ldr	r3, [sp, #24]
 8000d8a:	6839      	ldr	r1, [r7, #0]
 8000d8c:	9804      	ldr	r0, [sp, #16]
 8000d8e:	f001 fdda 	bl	8002946 <cmox_ModSubBN>
 8000d92:	6a28      	ldr	r0, [r5, #32]
 8000d94:	9a05      	ldr	r2, [sp, #20]
 8000d96:	9000      	str	r0, [sp, #0]
 8000d98:	462b      	mov	r3, r5
 8000d9a:	69a8      	ldr	r0, [r5, #24]
 8000d9c:	6801      	ldr	r1, [r0, #0]
 8000d9e:	9804      	ldr	r0, [sp, #16]
 8000da0:	6949      	ldr	r1, [r1, #20]
 8000da2:	f001 ffc4 	bl	8002d2e <cmox_ModularBN_Mul>
 8000da6:	69a8      	ldr	r0, [r5, #24]
 8000da8:	6801      	ldr	r1, [r0, #0]
 8000daa:	680a      	ldr	r2, [r1, #0]
 8000dac:	9b05      	ldr	r3, [sp, #20]
 8000dae:	6839      	ldr	r1, [r7, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f001 fdc8 	bl	8002946 <cmox_ModSubBN>
 8000db6:	6a2b      	ldr	r3, [r5, #32]
 8000db8:	9903      	ldr	r1, [sp, #12]
 8000dba:	9806      	ldr	r0, [sp, #24]
 8000dbc:	462a      	mov	r2, r5
 8000dbe:	f001 ffd9 	bl	8002d74 <cmox_ModularBN_Sqr>
 8000dc2:	9903      	ldr	r1, [sp, #12]
 8000dc4:	6a2b      	ldr	r3, [r5, #32]
 8000dc6:	462a      	mov	r2, r5
 8000dc8:	4608      	mov	r0, r1
 8000dca:	f001 ffd3 	bl	8002d74 <cmox_ModularBN_Sqr>
 8000dce:	6a28      	ldr	r0, [r5, #32]
 8000dd0:	9a03      	ldr	r2, [sp, #12]
 8000dd2:	9906      	ldr	r1, [sp, #24]
 8000dd4:	9000      	str	r0, [sp, #0]
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	4610      	mov	r0, r2
 8000dda:	f001 ffa8 	bl	8002d2e <cmox_ModularBN_Mul>
 8000dde:	6a2b      	ldr	r3, [r5, #32]
 8000de0:	9904      	ldr	r1, [sp, #16]
 8000de2:	9805      	ldr	r0, [sp, #20]
 8000de4:	462a      	mov	r2, r5
 8000de6:	f001 ffc5 	bl	8002d74 <cmox_ModularBN_Sqr>
 8000dea:	6a28      	ldr	r0, [r5, #32]
 8000dec:	9a04      	ldr	r2, [sp, #16]
 8000dee:	9000      	str	r0, [sp, #0]
 8000df0:	462b      	mov	r3, r5
 8000df2:	9805      	ldr	r0, [sp, #20]
 8000df4:	4611      	mov	r1, r2
 8000df6:	f001 ff9a 	bl	8002d2e <cmox_ModularBN_Mul>
 8000dfa:	6a28      	ldr	r0, [r5, #32]
 8000dfc:	9a03      	ldr	r2, [sp, #12]
 8000dfe:	9904      	ldr	r1, [sp, #16]
 8000e00:	9000      	str	r0, [sp, #0]
 8000e02:	462b      	mov	r3, r5
 8000e04:	4610      	mov	r0, r2
 8000e06:	f001 ff92 	bl	8002d2e <cmox_ModularBN_Mul>
 8000e0a:	69a8      	ldr	r0, [r5, #24]
 8000e0c:	6803      	ldr	r3, [r0, #0]
 8000e0e:	9a04      	ldr	r2, [sp, #16]
 8000e10:	6818      	ldr	r0, [r3, #0]
 8000e12:	f06f 0102 	mvn.w	r1, #2
 8000e16:	f001 fe49 	bl	8002aac <cmox_AddBN_Int>
 8000e1a:	9a04      	ldr	r2, [sp, #16]
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	4610      	mov	r0, r2
 8000e20:	f001 fcd5 	bl	80027ce <cmox_RightShiftBN>
 8000e24:	69a8      	ldr	r0, [r5, #24]
 8000e26:	69c4      	ldr	r4, [r0, #28]
 8000e28:	6a28      	ldr	r0, [r5, #32]
 8000e2a:	9002      	str	r0, [sp, #8]
 8000e2c:	69e9      	ldr	r1, [r5, #28]
 8000e2e:	9803      	ldr	r0, [sp, #12]
 8000e30:	9101      	str	r1, [sp, #4]
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	9904      	ldr	r1, [sp, #16]
 8000e36:	9200      	str	r2, [sp, #0]
 8000e38:	462a      	mov	r2, r5
 8000e3a:	6863      	ldr	r3, [r4, #4]
 8000e3c:	6824      	ldr	r4, [r4, #0]
 8000e3e:	47a0      	blx	r4
 8000e40:	0004      	movs	r4, r0
 8000e42:	d154      	bne.n	8000eee <cmox_ECC_EDW_DecPoint_ed448+0x234>
 8000e44:	6a28      	ldr	r0, [r5, #32]
 8000e46:	9a03      	ldr	r2, [sp, #12]
 8000e48:	9905      	ldr	r1, [sp, #20]
 8000e4a:	9000      	str	r0, [sp, #0]
 8000e4c:	462b      	mov	r3, r5
 8000e4e:	9806      	ldr	r0, [sp, #24]
 8000e50:	f001 ff6d 	bl	8002d2e <cmox_ModularBN_Mul>
 8000e54:	6a2b      	ldr	r3, [r5, #32]
 8000e56:	9904      	ldr	r1, [sp, #16]
 8000e58:	9806      	ldr	r0, [sp, #24]
 8000e5a:	462a      	mov	r2, r5
 8000e5c:	f001 ff8a 	bl	8002d74 <cmox_ModularBN_Sqr>
 8000e60:	6a28      	ldr	r0, [r5, #32]
 8000e62:	9a03      	ldr	r2, [sp, #12]
 8000e64:	9904      	ldr	r1, [sp, #16]
 8000e66:	9000      	str	r0, [sp, #0]
 8000e68:	462b      	mov	r3, r5
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	f001 ff5f 	bl	8002d2e <cmox_ModularBN_Mul>
 8000e70:	6838      	ldr	r0, [r7, #0]
 8000e72:	6a29      	ldr	r1, [r5, #32]
 8000e74:	9100      	str	r1, [sp, #0]
 8000e76:	462b      	mov	r3, r5
 8000e78:	9903      	ldr	r1, [sp, #12]
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	f001 ff57 	bl	8002d2e <cmox_ModularBN_Mul>
 8000e80:	6a2b      	ldr	r3, [r5, #32]
 8000e82:	9903      	ldr	r1, [sp, #12]
 8000e84:	6838      	ldr	r0, [r7, #0]
 8000e86:	462a      	mov	r2, r5
 8000e88:	f001 ff74 	bl	8002d74 <cmox_ModularBN_Sqr>
 8000e8c:	6a28      	ldr	r0, [r5, #32]
 8000e8e:	9a03      	ldr	r2, [sp, #12]
 8000e90:	9000      	str	r0, [sp, #0]
 8000e92:	462b      	mov	r3, r5
 8000e94:	9805      	ldr	r0, [sp, #20]
 8000e96:	4611      	mov	r1, r2
 8000e98:	f001 ff49 	bl	8002d2e <cmox_ModularBN_Mul>
 8000e9c:	9906      	ldr	r1, [sp, #24]
 8000e9e:	9803      	ldr	r0, [sp, #12]
 8000ea0:	f003 fc1d 	bl	80046de <cmox_bn_cmp>
 8000ea4:	b978      	cbnz	r0, 8000ec6 <cmox_ECC_EDW_DecPoint_ed448+0x20c>
 8000ea6:	6a2b      	ldr	r3, [r5, #32]
 8000ea8:	69ea      	ldr	r2, [r5, #28]
 8000eaa:	6838      	ldr	r0, [r7, #0]
 8000eac:	4629      	mov	r1, r5
 8000eae:	f001 ff1c 	bl	8002cea <cmox_ModularBN_Exit>
 8000eb2:	0004      	movs	r4, r0
 8000eb4:	d11b      	bne.n	8000eee <cmox_ECC_EDW_DecPoint_ed448+0x234>
 8000eb6:	2e01      	cmp	r6, #1
 8000eb8:	d107      	bne.n	8000eca <cmox_ECC_EDW_DecPoint_ed448+0x210>
 8000eba:	6838      	ldr	r0, [r7, #0]
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	f003 fc4f 	bl	8004760 <cmox_bn_cmpUint>
 8000ec2:	2801      	cmp	r0, #1
 8000ec4:	d101      	bne.n	8000eca <cmox_ECC_EDW_DecPoint_ed448+0x210>
 8000ec6:	2404      	movs	r4, #4
 8000ec8:	e011      	b.n	8000eee <cmox_ECC_EDW_DecPoint_ed448+0x234>
 8000eca:	69a8      	ldr	r0, [r5, #24]
 8000ecc:	6839      	ldr	r1, [r7, #0]
 8000ece:	6802      	ldr	r2, [r0, #0]
 8000ed0:	7908      	ldrb	r0, [r1, #4]
 8000ed2:	6812      	ldr	r2, [r2, #0]
 8000ed4:	f000 0001 	and.w	r0, r0, #1
 8000ed8:	4070      	eors	r0, r6
 8000eda:	f001 feb7 	bl	8002c4c <cmox_FieldBN_CondNegate>
 8000ede:	68b8      	ldr	r0, [r7, #8]
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	f003 fbb0 	bl	8004646 <cmox_bn_init>
 8000ee6:	6938      	ldr	r0, [r7, #16]
 8000ee8:	f040 0002 	orr.w	r0, r0, #2
 8000eec:	6138      	str	r0, [r7, #16]
 8000eee:	a904      	add	r1, sp, #16
 8000ef0:	69e8      	ldr	r0, [r5, #28]
 8000ef2:	f003 fb7c 	bl	80045ee <cmox_bn_free>
 8000ef6:	69e8      	ldr	r0, [r5, #28]
 8000ef8:	a903      	add	r1, sp, #12
 8000efa:	f003 fb78 	bl	80045ee <cmox_bn_free>
 8000efe:	69e8      	ldr	r0, [r5, #28]
 8000f00:	a906      	add	r1, sp, #24
 8000f02:	f003 fb74 	bl	80045ee <cmox_bn_free>
 8000f06:	69e8      	ldr	r0, [r5, #28]
 8000f08:	a905      	add	r1, sp, #20
 8000f0a:	f003 fb70 	bl	80045ee <cmox_bn_free>
 8000f0e:	4620      	mov	r0, r4
 8000f10:	b007      	add	sp, #28
 8000f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000f16 <cmox_ECC_MONTY_Clamping>:
 8000f16:	b570      	push	{r4, r5, r6, lr}
 8000f18:	4606      	mov	r6, r0
 8000f1a:	460c      	mov	r4, r1
 8000f1c:	69b0      	ldr	r0, [r6, #24]
 8000f1e:	6801      	ldr	r1, [r0, #0]
 8000f20:	6808      	ldr	r0, [r1, #0]
 8000f22:	4615      	mov	r5, r2
 8000f24:	6802      	ldr	r2, [r0, #0]
 8000f26:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8000f2a:	f001 ff7c 	bl	8002e26 <cmox_mathUtils_bitLength>
 8000f2e:	69b1      	ldr	r1, [r6, #24]
 8000f30:	680b      	ldr	r3, [r1, #0]
 8000f32:	699e      	ldr	r6, [r3, #24]
 8000f34:	6862      	ldr	r2, [r4, #4]
 8000f36:	1e76      	subs	r6, r6, #1
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	404e      	eors	r6, r1
 8000f3e:	4032      	ands	r2, r6
 8000f40:	6062      	str	r2, [r4, #4]
 8000f42:	2601      	movs	r6, #1
 8000f44:	f1c0 0220 	rsb	r2, r0, #32
 8000f48:	40d1      	lsrs	r1, r2
 8000f4a:	6822      	ldr	r2, [r4, #0]
 8000f4c:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 8000f50:	400b      	ands	r3, r1
 8000f52:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
 8000f56:	1e40      	subs	r0, r0, #1
 8000f58:	6822      	ldr	r2, [r4, #0]
 8000f5a:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 8000f5e:	4086      	lsls	r6, r0
 8000f60:	4333      	orrs	r3, r6
 8000f62:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
 8000f66:	6828      	ldr	r0, [r5, #0]
 8000f68:	6802      	ldr	r2, [r0, #0]
 8000f6a:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8000f6e:	4019      	ands	r1, r3
 8000f70:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 8000f74:	bd70      	pop	{r4, r5, r6, pc}

08000f76 <cmox_ECC_SW_AddPoints_JacoAff>:
 8000f76:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f7a:	4605      	mov	r5, r0
 8000f7c:	461f      	mov	r7, r3
 8000f7e:	460e      	mov	r6, r1
 8000f80:	b084      	sub	sp, #16
 8000f82:	6968      	ldr	r0, [r5, #20]
 8000f84:	f8d0 8000 	ldr.w	r8, [r0]
 8000f88:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8000f8c:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8000f90:	68c0      	ldr	r0, [r0, #12]
 8000f92:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8000f94:	9001      	str	r0, [sp, #4]
 8000f96:	f8d7 b000 	ldr.w	fp, [r7]
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	9103      	str	r1, [sp, #12]
 8000f9e:	462a      	mov	r2, r5
 8000fa0:	68b8      	ldr	r0, [r7, #8]
 8000fa2:	9002      	str	r0, [sp, #8]
 8000fa4:	4641      	mov	r1, r8
 8000fa6:	6a2b      	ldr	r3, [r5, #32]
 8000fa8:	68b0      	ldr	r0, [r6, #8]
 8000faa:	f001 fee3 	bl	8002d74 <cmox_ModularBN_Sqr>
 8000fae:	6a28      	ldr	r0, [r5, #32]
 8000fb0:	9000      	str	r0, [sp, #0]
 8000fb2:	462b      	mov	r3, r5
 8000fb4:	68b0      	ldr	r0, [r6, #8]
 8000fb6:	464a      	mov	r2, r9
 8000fb8:	4641      	mov	r1, r8
 8000fba:	f001 feb8 	bl	8002d2e <cmox_ModularBN_Mul>
 8000fbe:	6a28      	ldr	r0, [r5, #32]
 8000fc0:	9904      	ldr	r1, [sp, #16]
 8000fc2:	9000      	str	r0, [sp, #0]
 8000fc4:	462b      	mov	r3, r5
 8000fc6:	6809      	ldr	r1, [r1, #0]
 8000fc8:	4642      	mov	r2, r8
 8000fca:	4640      	mov	r0, r8
 8000fcc:	f001 feaf 	bl	8002d2e <cmox_ModularBN_Mul>
 8000fd0:	6a28      	ldr	r0, [r5, #32]
 8000fd2:	9904      	ldr	r1, [sp, #16]
 8000fd4:	9000      	str	r0, [sp, #0]
 8000fd6:	462b      	mov	r3, r5
 8000fd8:	6849      	ldr	r1, [r1, #4]
 8000fda:	464a      	mov	r2, r9
 8000fdc:	4648      	mov	r0, r9
 8000fde:	f001 fea6 	bl	8002d2e <cmox_ModularBN_Mul>
 8000fe2:	69a8      	ldr	r0, [r5, #24]
 8000fe4:	6801      	ldr	r1, [r0, #0]
 8000fe6:	680a      	ldr	r2, [r1, #0]
 8000fe8:	6831      	ldr	r1, [r6, #0]
 8000fea:	4643      	mov	r3, r8
 8000fec:	4640      	mov	r0, r8
 8000fee:	f001 fcaa 	bl	8002946 <cmox_ModSubBN>
 8000ff2:	69a8      	ldr	r0, [r5, #24]
 8000ff4:	6801      	ldr	r1, [r0, #0]
 8000ff6:	680a      	ldr	r2, [r1, #0]
 8000ff8:	6871      	ldr	r1, [r6, #4]
 8000ffa:	464b      	mov	r3, r9
 8000ffc:	4648      	mov	r0, r9
 8000ffe:	f001 fca2 	bl	8002946 <cmox_ModSubBN>
 8001002:	b1ec      	cbz	r4, 8001040 <cmox_ECC_SW_AddPoints_JacoAff+0xca>
 8001004:	2100      	movs	r1, #0
 8001006:	4640      	mov	r0, r8
 8001008:	f003 fbaa 	bl	8004760 <cmox_bn_cmpUint>
 800100c:	6020      	str	r0, [r4, #0]
 800100e:	4649      	mov	r1, r9
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	f003 fb5f 	bl	80046d4 <cmox_bn_mux>
 8001016:	4683      	mov	fp, r0
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	6820      	ldr	r0, [r4, #0]
 800101c:	4649      	mov	r1, r9
 800101e:	f003 fb59 	bl	80046d4 <cmox_bn_mux>
 8001022:	9003      	str	r0, [sp, #12]
 8001024:	4649      	mov	r1, r9
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	6820      	ldr	r0, [r4, #0]
 800102a:	f003 fb53 	bl	80046d4 <cmox_bn_mux>
 800102e:	9002      	str	r0, [sp, #8]
 8001030:	2100      	movs	r1, #0
 8001032:	4648      	mov	r0, r9
 8001034:	f003 fb94 	bl	8004760 <cmox_bn_cmpUint>
 8001038:	6821      	ldr	r1, [r4, #0]
 800103a:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
 800103e:	6021      	str	r1, [r4, #0]
 8001040:	462b      	mov	r3, r5
 8001042:	6a28      	ldr	r0, [r5, #32]
 8001044:	9a02      	ldr	r2, [sp, #8]
 8001046:	9000      	str	r0, [sp, #0]
 8001048:	4641      	mov	r1, r8
 800104a:	68b0      	ldr	r0, [r6, #8]
 800104c:	f001 fe6f 	bl	8002d2e <cmox_ModularBN_Mul>
 8001050:	6a2b      	ldr	r3, [r5, #32]
 8001052:	462a      	mov	r2, r5
 8001054:	4651      	mov	r1, sl
 8001056:	4640      	mov	r0, r8
 8001058:	f001 fe8c 	bl	8002d74 <cmox_ModularBN_Sqr>
 800105c:	6a28      	ldr	r0, [r5, #32]
 800105e:	9a01      	ldr	r2, [sp, #4]
 8001060:	9000      	str	r0, [sp, #0]
 8001062:	462b      	mov	r3, r5
 8001064:	4651      	mov	r1, sl
 8001066:	4640      	mov	r0, r8
 8001068:	f001 fe61 	bl	8002d2e <cmox_ModularBN_Mul>
 800106c:	6a28      	ldr	r0, [r5, #32]
 800106e:	9000      	str	r0, [sp, #0]
 8001070:	462b      	mov	r3, r5
 8001072:	6830      	ldr	r0, [r6, #0]
 8001074:	4652      	mov	r2, sl
 8001076:	4651      	mov	r1, sl
 8001078:	f001 fe59 	bl	8002d2e <cmox_ModularBN_Mul>
 800107c:	69a8      	ldr	r0, [r5, #24]
 800107e:	6801      	ldr	r1, [r0, #0]
 8001080:	680a      	ldr	r2, [r1, #0]
 8001082:	4643      	mov	r3, r8
 8001084:	4651      	mov	r1, sl
 8001086:	4650      	mov	r0, sl
 8001088:	f001 fbcc 	bl	8002824 <cmox_ModAddBN>
 800108c:	6a2b      	ldr	r3, [r5, #32]
 800108e:	462a      	mov	r2, r5
 8001090:	4659      	mov	r1, fp
 8001092:	4648      	mov	r0, r9
 8001094:	f001 fe6e 	bl	8002d74 <cmox_ModularBN_Sqr>
 8001098:	69a8      	ldr	r0, [r5, #24]
 800109a:	6801      	ldr	r1, [r0, #0]
 800109c:	680a      	ldr	r2, [r1, #0]
 800109e:	465b      	mov	r3, fp
 80010a0:	4641      	mov	r1, r8
 80010a2:	4658      	mov	r0, fp
 80010a4:	f001 fc4f 	bl	8002946 <cmox_ModSubBN>
 80010a8:	69a8      	ldr	r0, [r5, #24]
 80010aa:	6801      	ldr	r1, [r0, #0]
 80010ac:	680a      	ldr	r2, [r1, #0]
 80010ae:	9901      	ldr	r1, [sp, #4]
 80010b0:	465b      	mov	r3, fp
 80010b2:	4658      	mov	r0, fp
 80010b4:	f001 fc47 	bl	8002946 <cmox_ModSubBN>
 80010b8:	69a8      	ldr	r0, [r5, #24]
 80010ba:	6801      	ldr	r1, [r0, #0]
 80010bc:	680a      	ldr	r2, [r1, #0]
 80010be:	4653      	mov	r3, sl
 80010c0:	4659      	mov	r1, fp
 80010c2:	4650      	mov	r0, sl
 80010c4:	f001 fc3f 	bl	8002946 <cmox_ModSubBN>
 80010c8:	6a28      	ldr	r0, [r5, #32]
 80010ca:	9000      	str	r0, [sp, #0]
 80010cc:	462b      	mov	r3, r5
 80010ce:	4652      	mov	r2, sl
 80010d0:	4651      	mov	r1, sl
 80010d2:	4648      	mov	r0, r9
 80010d4:	f001 fe2b 	bl	8002d2e <cmox_ModularBN_Mul>
 80010d8:	6a28      	ldr	r0, [r5, #32]
 80010da:	9a01      	ldr	r2, [sp, #4]
 80010dc:	9000      	str	r0, [sp, #0]
 80010de:	462b      	mov	r3, r5
 80010e0:	6871      	ldr	r1, [r6, #4]
 80010e2:	4610      	mov	r0, r2
 80010e4:	f001 fe23 	bl	8002d2e <cmox_ModularBN_Mul>
 80010e8:	69a8      	ldr	r0, [r5, #24]
 80010ea:	6801      	ldr	r1, [r0, #0]
 80010ec:	680a      	ldr	r2, [r1, #0]
 80010ee:	9b03      	ldr	r3, [sp, #12]
 80010f0:	9901      	ldr	r1, [sp, #4]
 80010f2:	4650      	mov	r0, sl
 80010f4:	b005      	add	sp, #20
 80010f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010fa:	f001 bc24 	b.w	8002946 <cmox_ModSubBN>

080010fe <cmox_ECC_SW_AddPoints_Jacobian>:
 80010fe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001102:	4604      	mov	r4, r0
 8001104:	461e      	mov	r6, r3
 8001106:	6960      	ldr	r0, [r4, #20]
 8001108:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800110c:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8001110:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 8001114:	f8d0 9000 	ldr.w	r9, [r0]
 8001118:	6a23      	ldr	r3, [r4, #32]
 800111a:	460d      	mov	r5, r1
 800111c:	4617      	mov	r7, r2
 800111e:	68a8      	ldr	r0, [r5, #8]
 8001120:	4622      	mov	r2, r4
 8001122:	4649      	mov	r1, r9
 8001124:	f001 fe26 	bl	8002d74 <cmox_ModularBN_Sqr>
 8001128:	6a20      	ldr	r0, [r4, #32]
 800112a:	9000      	str	r0, [sp, #0]
 800112c:	4623      	mov	r3, r4
 800112e:	6838      	ldr	r0, [r7, #0]
 8001130:	4652      	mov	r2, sl
 8001132:	4649      	mov	r1, r9
 8001134:	f001 fdfb 	bl	8002d2e <cmox_ModularBN_Mul>
 8001138:	6a20      	ldr	r0, [r4, #32]
 800113a:	9000      	str	r0, [sp, #0]
 800113c:	4623      	mov	r3, r4
 800113e:	68a8      	ldr	r0, [r5, #8]
 8001140:	464a      	mov	r2, r9
 8001142:	4649      	mov	r1, r9
 8001144:	f001 fdf3 	bl	8002d2e <cmox_ModularBN_Mul>
 8001148:	6a20      	ldr	r0, [r4, #32]
 800114a:	9000      	str	r0, [sp, #0]
 800114c:	4623      	mov	r3, r4
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	464a      	mov	r2, r9
 8001152:	4649      	mov	r1, r9
 8001154:	f001 fdeb 	bl	8002d2e <cmox_ModularBN_Mul>
 8001158:	6a23      	ldr	r3, [r4, #32]
 800115a:	68b8      	ldr	r0, [r7, #8]
 800115c:	4622      	mov	r2, r4
 800115e:	4641      	mov	r1, r8
 8001160:	f001 fe08 	bl	8002d74 <cmox_ModularBN_Sqr>
 8001164:	6a20      	ldr	r0, [r4, #32]
 8001166:	9000      	str	r0, [sp, #0]
 8001168:	4623      	mov	r3, r4
 800116a:	6828      	ldr	r0, [r5, #0]
 800116c:	465a      	mov	r2, fp
 800116e:	4641      	mov	r1, r8
 8001170:	f001 fddd 	bl	8002d2e <cmox_ModularBN_Mul>
 8001174:	6a20      	ldr	r0, [r4, #32]
 8001176:	9000      	str	r0, [sp, #0]
 8001178:	4623      	mov	r3, r4
 800117a:	68b8      	ldr	r0, [r7, #8]
 800117c:	4642      	mov	r2, r8
 800117e:	4641      	mov	r1, r8
 8001180:	f001 fdd5 	bl	8002d2e <cmox_ModularBN_Mul>
 8001184:	6a20      	ldr	r0, [r4, #32]
 8001186:	9000      	str	r0, [sp, #0]
 8001188:	4623      	mov	r3, r4
 800118a:	6868      	ldr	r0, [r5, #4]
 800118c:	4642      	mov	r2, r8
 800118e:	4641      	mov	r1, r8
 8001190:	f001 fdcd 	bl	8002d2e <cmox_ModularBN_Mul>
 8001194:	69a0      	ldr	r0, [r4, #24]
 8001196:	6801      	ldr	r1, [r0, #0]
 8001198:	680a      	ldr	r2, [r1, #0]
 800119a:	4653      	mov	r3, sl
 800119c:	4659      	mov	r1, fp
 800119e:	4650      	mov	r0, sl
 80011a0:	f001 fbd1 	bl	8002946 <cmox_ModSubBN>
 80011a4:	69a0      	ldr	r0, [r4, #24]
 80011a6:	6801      	ldr	r1, [r0, #0]
 80011a8:	680a      	ldr	r2, [r1, #0]
 80011aa:	464b      	mov	r3, r9
 80011ac:	4641      	mov	r1, r8
 80011ae:	4648      	mov	r0, r9
 80011b0:	f001 fbc9 	bl	8002946 <cmox_ModSubBN>
 80011b4:	6a20      	ldr	r0, [r4, #32]
 80011b6:	9000      	str	r0, [sp, #0]
 80011b8:	4623      	mov	r3, r4
 80011ba:	6832      	ldr	r2, [r6, #0]
 80011bc:	68b8      	ldr	r0, [r7, #8]
 80011be:	4651      	mov	r1, sl
 80011c0:	f001 fdb5 	bl	8002d2e <cmox_ModularBN_Mul>
 80011c4:	6a20      	ldr	r0, [r4, #32]
 80011c6:	9000      	str	r0, [sp, #0]
 80011c8:	68b2      	ldr	r2, [r6, #8]
 80011ca:	6831      	ldr	r1, [r6, #0]
 80011cc:	68a8      	ldr	r0, [r5, #8]
 80011ce:	4623      	mov	r3, r4
 80011d0:	f001 fdad 	bl	8002d2e <cmox_ModularBN_Mul>
 80011d4:	6a23      	ldr	r3, [r4, #32]
 80011d6:	6831      	ldr	r1, [r6, #0]
 80011d8:	4622      	mov	r2, r4
 80011da:	4650      	mov	r0, sl
 80011dc:	f001 fdca 	bl	8002d74 <cmox_ModularBN_Sqr>
 80011e0:	6a20      	ldr	r0, [r4, #32]
 80011e2:	9000      	str	r0, [sp, #0]
 80011e4:	6872      	ldr	r2, [r6, #4]
 80011e6:	6831      	ldr	r1, [r6, #0]
 80011e8:	4623      	mov	r3, r4
 80011ea:	4650      	mov	r0, sl
 80011ec:	f001 fd9f 	bl	8002d2e <cmox_ModularBN_Mul>
 80011f0:	6a20      	ldr	r0, [r4, #32]
 80011f2:	9000      	str	r0, [sp, #0]
 80011f4:	4623      	mov	r3, r4
 80011f6:	6831      	ldr	r1, [r6, #0]
 80011f8:	4652      	mov	r2, sl
 80011fa:	4658      	mov	r0, fp
 80011fc:	f001 fd97 	bl	8002d2e <cmox_ModularBN_Mul>
 8001200:	6a23      	ldr	r3, [r4, #32]
 8001202:	6831      	ldr	r1, [r6, #0]
 8001204:	4622      	mov	r2, r4
 8001206:	4648      	mov	r0, r9
 8001208:	f001 fdb4 	bl	8002d74 <cmox_ModularBN_Sqr>
 800120c:	69a1      	ldr	r1, [r4, #24]
 800120e:	680a      	ldr	r2, [r1, #0]
 8001210:	6830      	ldr	r0, [r6, #0]
 8001212:	6812      	ldr	r2, [r2, #0]
 8001214:	6871      	ldr	r1, [r6, #4]
 8001216:	4603      	mov	r3, r0
 8001218:	f001 fb95 	bl	8002946 <cmox_ModSubBN>
 800121c:	6871      	ldr	r1, [r6, #4]
 800121e:	6a20      	ldr	r0, [r4, #32]
 8001220:	9000      	str	r0, [sp, #0]
 8001222:	4623      	mov	r3, r4
 8001224:	460a      	mov	r2, r1
 8001226:	4640      	mov	r0, r8
 8001228:	f001 fd81 	bl	8002d2e <cmox_ModularBN_Mul>
 800122c:	69a0      	ldr	r0, [r4, #24]
 800122e:	6801      	ldr	r1, [r0, #0]
 8001230:	6809      	ldr	r1, [r1, #0]
 8001232:	4642      	mov	r2, r8
 8001234:	4650      	mov	r0, sl
 8001236:	f001 fcaa 	bl	8002b8e <cmox_FieldBN_Mul2>
 800123a:	69a1      	ldr	r1, [r4, #24]
 800123c:	680a      	ldr	r2, [r1, #0]
 800123e:	6830      	ldr	r0, [r6, #0]
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	4603      	mov	r3, r0
 8001244:	4641      	mov	r1, r8
 8001246:	f001 fb7e 	bl	8002946 <cmox_ModSubBN>
 800124a:	69a0      	ldr	r0, [r4, #24]
 800124c:	6801      	ldr	r1, [r0, #0]
 800124e:	680a      	ldr	r2, [r1, #0]
 8001250:	6831      	ldr	r1, [r6, #0]
 8001252:	4653      	mov	r3, sl
 8001254:	4650      	mov	r0, sl
 8001256:	f001 fb76 	bl	8002946 <cmox_ModSubBN>
 800125a:	6a20      	ldr	r0, [r4, #32]
 800125c:	9000      	str	r0, [sp, #0]
 800125e:	4623      	mov	r3, r4
 8001260:	464a      	mov	r2, r9
 8001262:	4651      	mov	r1, sl
 8001264:	4648      	mov	r0, r9
 8001266:	f001 fd62 	bl	8002d2e <cmox_ModularBN_Mul>
 800126a:	69a0      	ldr	r0, [r4, #24]
 800126c:	6802      	ldr	r2, [r0, #0]
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	6871      	ldr	r1, [r6, #4]
 8001272:	4648      	mov	r0, r9
 8001274:	b001      	add	sp, #4
 8001276:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800127a:	460b      	mov	r3, r1
 800127c:	f001 bb63 	b.w	8002946 <cmox_ModSubBN>

08001280 <cmox_ECC_SW_DblPoint_Jac_a3>:
 8001280:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001284:	4604      	mov	r4, r0
 8001286:	460d      	mov	r5, r1
 8001288:	6960      	ldr	r0, [r4, #20]
 800128a:	6807      	ldr	r7, [r0, #0]
 800128c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8001290:	6881      	ldr	r1, [r0, #8]
 8001292:	9101      	str	r1, [sp, #4]
 8001294:	4616      	mov	r6, r2
 8001296:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800129a:	6831      	ldr	r1, [r6, #0]
 800129c:	4698      	mov	r8, r3
 800129e:	463a      	mov	r2, r7
 80012a0:	4640      	mov	r0, r8
 80012a2:	f003 fa17 	bl	80046d4 <cmox_bn_mux>
 80012a6:	4683      	mov	fp, r0
 80012a8:	6871      	ldr	r1, [r6, #4]
 80012aa:	463a      	mov	r2, r7
 80012ac:	4640      	mov	r0, r8
 80012ae:	f003 fa11 	bl	80046d4 <cmox_bn_mux>
 80012b2:	9002      	str	r0, [sp, #8]
 80012b4:	463a      	mov	r2, r7
 80012b6:	68b1      	ldr	r1, [r6, #8]
 80012b8:	4640      	mov	r0, r8
 80012ba:	f003 fa0b 	bl	80046d4 <cmox_bn_mux>
 80012be:	4606      	mov	r6, r0
 80012c0:	6a23      	ldr	r3, [r4, #32]
 80012c2:	68a8      	ldr	r0, [r5, #8]
 80012c4:	4622      	mov	r2, r4
 80012c6:	4639      	mov	r1, r7
 80012c8:	f001 fd54 	bl	8002d74 <cmox_ModularBN_Sqr>
 80012cc:	69a0      	ldr	r0, [r4, #24]
 80012ce:	6801      	ldr	r1, [r0, #0]
 80012d0:	680a      	ldr	r2, [r1, #0]
 80012d2:	6828      	ldr	r0, [r5, #0]
 80012d4:	464b      	mov	r3, r9
 80012d6:	4639      	mov	r1, r7
 80012d8:	f001 faa4 	bl	8002824 <cmox_ModAddBN>
 80012dc:	69a0      	ldr	r0, [r4, #24]
 80012de:	6801      	ldr	r1, [r0, #0]
 80012e0:	680a      	ldr	r2, [r1, #0]
 80012e2:	6828      	ldr	r0, [r5, #0]
 80012e4:	463b      	mov	r3, r7
 80012e6:	4639      	mov	r1, r7
 80012e8:	f001 fb2d 	bl	8002946 <cmox_ModSubBN>
 80012ec:	6a20      	ldr	r0, [r4, #32]
 80012ee:	9000      	str	r0, [sp, #0]
 80012f0:	4623      	mov	r3, r4
 80012f2:	463a      	mov	r2, r7
 80012f4:	4649      	mov	r1, r9
 80012f6:	4638      	mov	r0, r7
 80012f8:	f001 fd19 	bl	8002d2e <cmox_ModularBN_Mul>
 80012fc:	69a0      	ldr	r0, [r4, #24]
 80012fe:	6801      	ldr	r1, [r0, #0]
 8001300:	6809      	ldr	r1, [r1, #0]
 8001302:	464a      	mov	r2, r9
 8001304:	4638      	mov	r0, r7
 8001306:	f001 fbf0 	bl	8002aea <cmox_FieldBN_Div2>
 800130a:	69a0      	ldr	r0, [r4, #24]
 800130c:	6801      	ldr	r1, [r0, #0]
 800130e:	680a      	ldr	r2, [r1, #0]
 8001310:	463b      	mov	r3, r7
 8001312:	4649      	mov	r1, r9
 8001314:	4638      	mov	r0, r7
 8001316:	f001 fa85 	bl	8002824 <cmox_ModAddBN>
 800131a:	6a23      	ldr	r3, [r4, #32]
 800131c:	6868      	ldr	r0, [r5, #4]
 800131e:	4622      	mov	r2, r4
 8001320:	4649      	mov	r1, r9
 8001322:	f001 fd27 	bl	8002d74 <cmox_ModularBN_Sqr>
 8001326:	6a20      	ldr	r0, [r4, #32]
 8001328:	9a01      	ldr	r2, [sp, #4]
 800132a:	9000      	str	r0, [sp, #0]
 800132c:	4623      	mov	r3, r4
 800132e:	6828      	ldr	r0, [r5, #0]
 8001330:	4649      	mov	r1, r9
 8001332:	f001 fcfc 	bl	8002d2e <cmox_ModularBN_Mul>
 8001336:	6a23      	ldr	r3, [r4, #32]
 8001338:	4622      	mov	r2, r4
 800133a:	4651      	mov	r1, sl
 800133c:	4638      	mov	r0, r7
 800133e:	f001 fd19 	bl	8002d74 <cmox_ModularBN_Sqr>
 8001342:	69a0      	ldr	r0, [r4, #24]
 8001344:	6801      	ldr	r1, [r0, #0]
 8001346:	680a      	ldr	r2, [r1, #0]
 8001348:	9901      	ldr	r1, [sp, #4]
 800134a:	4653      	mov	r3, sl
 800134c:	4650      	mov	r0, sl
 800134e:	f001 fafa 	bl	8002946 <cmox_ModSubBN>
 8001352:	69a0      	ldr	r0, [r4, #24]
 8001354:	6801      	ldr	r1, [r0, #0]
 8001356:	680a      	ldr	r2, [r1, #0]
 8001358:	9901      	ldr	r1, [sp, #4]
 800135a:	465b      	mov	r3, fp
 800135c:	4650      	mov	r0, sl
 800135e:	f001 faf2 	bl	8002946 <cmox_ModSubBN>
 8001362:	6a20      	ldr	r0, [r4, #32]
 8001364:	9000      	str	r0, [sp, #0]
 8001366:	4623      	mov	r3, r4
 8001368:	68a9      	ldr	r1, [r5, #8]
 800136a:	6868      	ldr	r0, [r5, #4]
 800136c:	4632      	mov	r2, r6
 800136e:	f001 fcde 	bl	8002d2e <cmox_ModularBN_Mul>
 8001372:	6a23      	ldr	r3, [r4, #32]
 8001374:	4622      	mov	r2, r4
 8001376:	4649      	mov	r1, r9
 8001378:	4648      	mov	r0, r9
 800137a:	f001 fcfb 	bl	8002d74 <cmox_ModularBN_Sqr>
 800137e:	69a0      	ldr	r0, [r4, #24]
 8001380:	6801      	ldr	r1, [r0, #0]
 8001382:	680a      	ldr	r2, [r1, #0]
 8001384:	9801      	ldr	r0, [sp, #4]
 8001386:	4653      	mov	r3, sl
 8001388:	4659      	mov	r1, fp
 800138a:	f001 fadc 	bl	8002946 <cmox_ModSubBN>
 800138e:	6a20      	ldr	r0, [r4, #32]
 8001390:	9000      	str	r0, [sp, #0]
 8001392:	4623      	mov	r3, r4
 8001394:	463a      	mov	r2, r7
 8001396:	4651      	mov	r1, sl
 8001398:	4638      	mov	r0, r7
 800139a:	f001 fcc8 	bl	8002d2e <cmox_ModularBN_Mul>
 800139e:	69a0      	ldr	r0, [r4, #24]
 80013a0:	6801      	ldr	r1, [r0, #0]
 80013a2:	9b02      	ldr	r3, [sp, #8]
 80013a4:	680a      	ldr	r2, [r1, #0]
 80013a6:	4649      	mov	r1, r9
 80013a8:	4638      	mov	r0, r7
 80013aa:	b003      	add	sp, #12
 80013ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013b0:	f001 bac9 	b.w	8002946 <cmox_ModSubBN>

080013b4 <cmox_ECC_SW_DblPoint_Jacobian>:
 80013b4:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013b8:	4604      	mov	r4, r0
 80013ba:	460d      	mov	r5, r1
 80013bc:	6960      	ldr	r0, [r4, #20]
 80013be:	6807      	ldr	r7, [r0, #0]
 80013c0:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80013c4:	f8d0 9008 	ldr.w	r9, [r0, #8]
 80013c8:	68c0      	ldr	r0, [r0, #12]
 80013ca:	9001      	str	r0, [sp, #4]
 80013cc:	4616      	mov	r6, r2
 80013ce:	9802      	ldr	r0, [sp, #8]
 80013d0:	6831      	ldr	r1, [r6, #0]
 80013d2:	463a      	mov	r2, r7
 80013d4:	f003 f97e 	bl	80046d4 <cmox_bn_mux>
 80013d8:	4682      	mov	sl, r0
 80013da:	6871      	ldr	r1, [r6, #4]
 80013dc:	9802      	ldr	r0, [sp, #8]
 80013de:	463a      	mov	r2, r7
 80013e0:	f003 f978 	bl	80046d4 <cmox_bn_mux>
 80013e4:	4683      	mov	fp, r0
 80013e6:	68b1      	ldr	r1, [r6, #8]
 80013e8:	9802      	ldr	r0, [sp, #8]
 80013ea:	463a      	mov	r2, r7
 80013ec:	f003 f972 	bl	80046d4 <cmox_bn_mux>
 80013f0:	4606      	mov	r6, r0
 80013f2:	69a0      	ldr	r0, [r4, #24]
 80013f4:	6801      	ldr	r1, [r0, #0]
 80013f6:	680a      	ldr	r2, [r1, #0]
 80013f8:	68a9      	ldr	r1, [r5, #8]
 80013fa:	6868      	ldr	r0, [r5, #4]
 80013fc:	463b      	mov	r3, r7
 80013fe:	f001 fa11 	bl	8002824 <cmox_ModAddBN>
 8001402:	6a23      	ldr	r3, [r4, #32]
 8001404:	6828      	ldr	r0, [r5, #0]
 8001406:	4622      	mov	r2, r4
 8001408:	4641      	mov	r1, r8
 800140a:	f001 fcb3 	bl	8002d74 <cmox_ModularBN_Sqr>
 800140e:	6a23      	ldr	r3, [r4, #32]
 8001410:	6868      	ldr	r0, [r5, #4]
 8001412:	4622      	mov	r2, r4
 8001414:	4649      	mov	r1, r9
 8001416:	f001 fcad 	bl	8002d74 <cmox_ModularBN_Sqr>
 800141a:	69a0      	ldr	r0, [r4, #24]
 800141c:	6801      	ldr	r1, [r0, #0]
 800141e:	680a      	ldr	r2, [r1, #0]
 8001420:	6828      	ldr	r0, [r5, #0]
 8001422:	4653      	mov	r3, sl
 8001424:	4649      	mov	r1, r9
 8001426:	f001 f9fd 	bl	8002824 <cmox_ModAddBN>
 800142a:	6a23      	ldr	r3, [r4, #32]
 800142c:	9901      	ldr	r1, [sp, #4]
 800142e:	68a8      	ldr	r0, [r5, #8]
 8001430:	4622      	mov	r2, r4
 8001432:	f001 fc9f 	bl	8002d74 <cmox_ModularBN_Sqr>
 8001436:	6a23      	ldr	r3, [r4, #32]
 8001438:	4622      	mov	r2, r4
 800143a:	4651      	mov	r1, sl
 800143c:	4650      	mov	r0, sl
 800143e:	f001 fc99 	bl	8002d74 <cmox_ModularBN_Sqr>
 8001442:	69a0      	ldr	r0, [r4, #24]
 8001444:	6801      	ldr	r1, [r0, #0]
 8001446:	680a      	ldr	r2, [r1, #0]
 8001448:	4653      	mov	r3, sl
 800144a:	4641      	mov	r1, r8
 800144c:	4650      	mov	r0, sl
 800144e:	f001 fa7a 	bl	8002946 <cmox_ModSubBN>
 8001452:	69a0      	ldr	r0, [r4, #24]
 8001454:	6801      	ldr	r1, [r0, #0]
 8001456:	6809      	ldr	r1, [r1, #0]
 8001458:	465a      	mov	r2, fp
 800145a:	4640      	mov	r0, r8
 800145c:	f001 fb97 	bl	8002b8e <cmox_FieldBN_Mul2>
 8001460:	69a0      	ldr	r0, [r4, #24]
 8001462:	6801      	ldr	r1, [r0, #0]
 8001464:	680a      	ldr	r2, [r1, #0]
 8001466:	4643      	mov	r3, r8
 8001468:	4659      	mov	r1, fp
 800146a:	4640      	mov	r0, r8
 800146c:	f001 f9da 	bl	8002824 <cmox_ModAddBN>
 8001470:	6a23      	ldr	r3, [r4, #32]
 8001472:	4622      	mov	r2, r4
 8001474:	4659      	mov	r1, fp
 8001476:	4648      	mov	r0, r9
 8001478:	f001 fc7c 	bl	8002d74 <cmox_ModularBN_Sqr>
 800147c:	6a23      	ldr	r3, [r4, #32]
 800147e:	4622      	mov	r2, r4
 8001480:	4639      	mov	r1, r7
 8001482:	4638      	mov	r0, r7
 8001484:	f001 fc76 	bl	8002d74 <cmox_ModularBN_Sqr>
 8001488:	69a0      	ldr	r0, [r4, #24]
 800148a:	6801      	ldr	r1, [r0, #0]
 800148c:	680a      	ldr	r2, [r1, #0]
 800148e:	463b      	mov	r3, r7
 8001490:	4649      	mov	r1, r9
 8001492:	4638      	mov	r0, r7
 8001494:	f001 fa57 	bl	8002946 <cmox_ModSubBN>
 8001498:	69a0      	ldr	r0, [r4, #24]
 800149a:	6801      	ldr	r1, [r0, #0]
 800149c:	680a      	ldr	r2, [r1, #0]
 800149e:	9901      	ldr	r1, [sp, #4]
 80014a0:	4633      	mov	r3, r6
 80014a2:	4638      	mov	r0, r7
 80014a4:	f001 fa4f 	bl	8002946 <cmox_ModSubBN>
 80014a8:	9901      	ldr	r1, [sp, #4]
 80014aa:	6a23      	ldr	r3, [r4, #32]
 80014ac:	4622      	mov	r2, r4
 80014ae:	4608      	mov	r0, r1
 80014b0:	f001 fc60 	bl	8002d74 <cmox_ModularBN_Sqr>
 80014b4:	6a20      	ldr	r0, [r4, #32]
 80014b6:	9a01      	ldr	r2, [sp, #4]
 80014b8:	9000      	str	r0, [sp, #0]
 80014ba:	4623      	mov	r3, r4
 80014bc:	69a0      	ldr	r0, [r4, #24]
 80014be:	6805      	ldr	r5, [r0, #0]
 80014c0:	6928      	ldr	r0, [r5, #16]
 80014c2:	4611      	mov	r1, r2
 80014c4:	f001 fc33 	bl	8002d2e <cmox_ModularBN_Mul>
 80014c8:	69a0      	ldr	r0, [r4, #24]
 80014ca:	6801      	ldr	r1, [r0, #0]
 80014cc:	680a      	ldr	r2, [r1, #0]
 80014ce:	9901      	ldr	r1, [sp, #4]
 80014d0:	463b      	mov	r3, r7
 80014d2:	4640      	mov	r0, r8
 80014d4:	f001 f9a6 	bl	8002824 <cmox_ModAddBN>
 80014d8:	69a0      	ldr	r0, [r4, #24]
 80014da:	6801      	ldr	r1, [r0, #0]
 80014dc:	680a      	ldr	r2, [r1, #0]
 80014de:	4643      	mov	r3, r8
 80014e0:	4659      	mov	r1, fp
 80014e2:	4650      	mov	r0, sl
 80014e4:	f001 fa2f 	bl	8002946 <cmox_ModSubBN>
 80014e8:	69a0      	ldr	r0, [r4, #24]
 80014ea:	6801      	ldr	r1, [r0, #0]
 80014ec:	6809      	ldr	r1, [r1, #0]
 80014ee:	4642      	mov	r2, r8
 80014f0:	4640      	mov	r0, r8
 80014f2:	f001 fb4c 	bl	8002b8e <cmox_FieldBN_Mul2>
 80014f6:	6a23      	ldr	r3, [r4, #32]
 80014f8:	4622      	mov	r2, r4
 80014fa:	4649      	mov	r1, r9
 80014fc:	4638      	mov	r0, r7
 80014fe:	f001 fc39 	bl	8002d74 <cmox_ModularBN_Sqr>
 8001502:	69a0      	ldr	r0, [r4, #24]
 8001504:	6801      	ldr	r1, [r0, #0]
 8001506:	9a01      	ldr	r2, [sp, #4]
 8001508:	6809      	ldr	r1, [r1, #0]
 800150a:	4640      	mov	r0, r8
 800150c:	f001 fb3f 	bl	8002b8e <cmox_FieldBN_Mul2>
 8001510:	69a0      	ldr	r0, [r4, #24]
 8001512:	6801      	ldr	r1, [r0, #0]
 8001514:	680a      	ldr	r2, [r1, #0]
 8001516:	9901      	ldr	r1, [sp, #4]
 8001518:	4653      	mov	r3, sl
 800151a:	4648      	mov	r0, r9
 800151c:	f001 fa13 	bl	8002946 <cmox_ModSubBN>
 8001520:	69a0      	ldr	r0, [r4, #24]
 8001522:	6801      	ldr	r1, [r0, #0]
 8001524:	680a      	ldr	r2, [r1, #0]
 8001526:	4643      	mov	r3, r8
 8001528:	4651      	mov	r1, sl
 800152a:	4640      	mov	r0, r8
 800152c:	f001 fa0b 	bl	8002946 <cmox_ModSubBN>
 8001530:	69a0      	ldr	r0, [r4, #24]
 8001532:	6801      	ldr	r1, [r0, #0]
 8001534:	6809      	ldr	r1, [r1, #0]
 8001536:	464a      	mov	r2, r9
 8001538:	4658      	mov	r0, fp
 800153a:	f001 fb28 	bl	8002b8e <cmox_FieldBN_Mul2>
 800153e:	69a0      	ldr	r0, [r4, #24]
 8001540:	6801      	ldr	r1, [r0, #0]
 8001542:	6809      	ldr	r1, [r1, #0]
 8001544:	464a      	mov	r2, r9
 8001546:	4648      	mov	r0, r9
 8001548:	f001 fb21 	bl	8002b8e <cmox_FieldBN_Mul2>
 800154c:	69a0      	ldr	r0, [r4, #24]
 800154e:	6801      	ldr	r1, [r0, #0]
 8001550:	6809      	ldr	r1, [r1, #0]
 8001552:	464a      	mov	r2, r9
 8001554:	4648      	mov	r0, r9
 8001556:	f001 fb1a 	bl	8002b8e <cmox_FieldBN_Mul2>
 800155a:	6a20      	ldr	r0, [r4, #32]
 800155c:	9000      	str	r0, [sp, #0]
 800155e:	4623      	mov	r3, r4
 8001560:	463a      	mov	r2, r7
 8001562:	4641      	mov	r1, r8
 8001564:	4638      	mov	r0, r7
 8001566:	f001 fbe2 	bl	8002d2e <cmox_ModularBN_Mul>
 800156a:	69a0      	ldr	r0, [r4, #24]
 800156c:	6801      	ldr	r1, [r0, #0]
 800156e:	680a      	ldr	r2, [r1, #0]
 8001570:	465b      	mov	r3, fp
 8001572:	4649      	mov	r1, r9
 8001574:	4638      	mov	r0, r7
 8001576:	b003      	add	sp, #12
 8001578:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800157c:	f001 b9e3 	b.w	8002946 <cmox_ModSubBN>

08001580 <cmox_ECC_EDW_AddPoints_ProjAff>:
 8001580:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001584:	4604      	mov	r4, r0
 8001586:	6965      	ldr	r5, [r4, #20]
 8001588:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800158a:	f8d5 8000 	ldr.w	r8, [r5]
 800158e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8001592:	f8d5 a008 	ldr.w	sl, [r5, #8]
 8001596:	b108      	cbz	r0, 800159c <cmox_ECC_EDW_AddPoints_ProjAff+0x1c>
 8001598:	2500      	movs	r5, #0
 800159a:	6005      	str	r5, [r0, #0]
 800159c:	4616      	mov	r6, r2
 800159e:	6a22      	ldr	r2, [r4, #32]
 80015a0:	9200      	str	r2, [sp, #0]
 80015a2:	460f      	mov	r7, r1
 80015a4:	461d      	mov	r5, r3
 80015a6:	6831      	ldr	r1, [r6, #0]
 80015a8:	6838      	ldr	r0, [r7, #0]
 80015aa:	4623      	mov	r3, r4
 80015ac:	4642      	mov	r2, r8
 80015ae:	f001 fbbe 	bl	8002d2e <cmox_ModularBN_Mul>
 80015b2:	69a0      	ldr	r0, [r4, #24]
 80015b4:	6801      	ldr	r1, [r0, #0]
 80015b6:	680a      	ldr	r2, [r1, #0]
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	6838      	ldr	r0, [r7, #0]
 80015bc:	464b      	mov	r3, r9
 80015be:	f001 f931 	bl	8002824 <cmox_ModAddBN>
 80015c2:	69a0      	ldr	r0, [r4, #24]
 80015c4:	6801      	ldr	r1, [r0, #0]
 80015c6:	680a      	ldr	r2, [r1, #0]
 80015c8:	682b      	ldr	r3, [r5, #0]
 80015ca:	6871      	ldr	r1, [r6, #4]
 80015cc:	6830      	ldr	r0, [r6, #0]
 80015ce:	f001 f929 	bl	8002824 <cmox_ModAddBN>
 80015d2:	6a20      	ldr	r0, [r4, #32]
 80015d4:	9000      	str	r0, [sp, #0]
 80015d6:	686a      	ldr	r2, [r5, #4]
 80015d8:	6871      	ldr	r1, [r6, #4]
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	4623      	mov	r3, r4
 80015de:	f001 fba6 	bl	8002d2e <cmox_ModularBN_Mul>
 80015e2:	6a20      	ldr	r0, [r4, #32]
 80015e4:	9000      	str	r0, [sp, #0]
 80015e6:	4623      	mov	r3, r4
 80015e8:	6869      	ldr	r1, [r5, #4]
 80015ea:	4652      	mov	r2, sl
 80015ec:	4640      	mov	r0, r8
 80015ee:	f001 fb9e 	bl	8002d2e <cmox_ModularBN_Mul>
 80015f2:	6a20      	ldr	r0, [r4, #32]
 80015f4:	9000      	str	r0, [sp, #0]
 80015f6:	4623      	mov	r3, r4
 80015f8:	69a0      	ldr	r0, [r4, #24]
 80015fa:	6806      	ldr	r6, [r0, #0]
 80015fc:	6970      	ldr	r0, [r6, #20]
 80015fe:	4652      	mov	r2, sl
 8001600:	4651      	mov	r1, sl
 8001602:	f001 fb94 	bl	8002d2e <cmox_ModularBN_Mul>
 8001606:	6a20      	ldr	r0, [r4, #32]
 8001608:	9000      	str	r0, [sp, #0]
 800160a:	4623      	mov	r3, r4
 800160c:	6829      	ldr	r1, [r5, #0]
 800160e:	464a      	mov	r2, r9
 8001610:	4648      	mov	r0, r9
 8001612:	f001 fb8c 	bl	8002d2e <cmox_ModularBN_Mul>
 8001616:	69a0      	ldr	r0, [r4, #24]
 8001618:	6801      	ldr	r1, [r0, #0]
 800161a:	680a      	ldr	r2, [r1, #0]
 800161c:	464b      	mov	r3, r9
 800161e:	4641      	mov	r1, r8
 8001620:	4648      	mov	r0, r9
 8001622:	f001 f990 	bl	8002946 <cmox_ModSubBN>
 8001626:	69a0      	ldr	r0, [r4, #24]
 8001628:	6801      	ldr	r1, [r0, #0]
 800162a:	680a      	ldr	r2, [r1, #0]
 800162c:	6869      	ldr	r1, [r5, #4]
 800162e:	464b      	mov	r3, r9
 8001630:	4648      	mov	r0, r9
 8001632:	f001 f988 	bl	8002946 <cmox_ModSubBN>
 8001636:	6a20      	ldr	r0, [r4, #32]
 8001638:	9000      	str	r0, [sp, #0]
 800163a:	4623      	mov	r3, r4
 800163c:	69a0      	ldr	r0, [r4, #24]
 800163e:	6806      	ldr	r6, [r0, #0]
 8001640:	6930      	ldr	r0, [r6, #16]
 8001642:	4642      	mov	r2, r8
 8001644:	4641      	mov	r1, r8
 8001646:	f001 fb72 	bl	8002d2e <cmox_ModularBN_Mul>
 800164a:	69a1      	ldr	r1, [r4, #24]
 800164c:	680a      	ldr	r2, [r1, #0]
 800164e:	6868      	ldr	r0, [r5, #4]
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	4603      	mov	r3, r0
 8001654:	4641      	mov	r1, r8
 8001656:	f001 f976 	bl	8002946 <cmox_ModSubBN>
 800165a:	6a23      	ldr	r3, [r4, #32]
 800165c:	6829      	ldr	r1, [r5, #0]
 800165e:	68b8      	ldr	r0, [r7, #8]
 8001660:	4622      	mov	r2, r4
 8001662:	f001 fb87 	bl	8002d74 <cmox_ModularBN_Sqr>
 8001666:	69a0      	ldr	r0, [r4, #24]
 8001668:	6801      	ldr	r1, [r0, #0]
 800166a:	680a      	ldr	r2, [r1, #0]
 800166c:	6828      	ldr	r0, [r5, #0]
 800166e:	4643      	mov	r3, r8
 8001670:	4651      	mov	r1, sl
 8001672:	f001 f968 	bl	8002946 <cmox_ModSubBN>
 8001676:	69a0      	ldr	r0, [r4, #24]
 8001678:	6801      	ldr	r1, [r0, #0]
 800167a:	680a      	ldr	r2, [r1, #0]
 800167c:	6828      	ldr	r0, [r5, #0]
 800167e:	4653      	mov	r3, sl
 8001680:	4651      	mov	r1, sl
 8001682:	f001 f8cf 	bl	8002824 <cmox_ModAddBN>
 8001686:	6a20      	ldr	r0, [r4, #32]
 8001688:	9000      	str	r0, [sp, #0]
 800168a:	4623      	mov	r3, r4
 800168c:	464a      	mov	r2, r9
 800168e:	4649      	mov	r1, r9
 8001690:	4640      	mov	r0, r8
 8001692:	f001 fb4c 	bl	8002d2e <cmox_ModularBN_Mul>
 8001696:	6a20      	ldr	r0, [r4, #32]
 8001698:	9000      	str	r0, [sp, #0]
 800169a:	4623      	mov	r3, r4
 800169c:	682a      	ldr	r2, [r5, #0]
 800169e:	68b8      	ldr	r0, [r7, #8]
 80016a0:	4649      	mov	r1, r9
 80016a2:	f001 fb44 	bl	8002d2e <cmox_ModularBN_Mul>
 80016a6:	6a20      	ldr	r0, [r4, #32]
 80016a8:	9000      	str	r0, [sp, #0]
 80016aa:	4623      	mov	r3, r4
 80016ac:	6869      	ldr	r1, [r5, #4]
 80016ae:	464a      	mov	r2, r9
 80016b0:	4650      	mov	r0, sl
 80016b2:	f001 fb3c 	bl	8002d2e <cmox_ModularBN_Mul>
 80016b6:	6a20      	ldr	r0, [r4, #32]
 80016b8:	9000      	str	r0, [sp, #0]
 80016ba:	4623      	mov	r3, r4
 80016bc:	686a      	ldr	r2, [r5, #4]
 80016be:	68b8      	ldr	r0, [r7, #8]
 80016c0:	4649      	mov	r1, r9
 80016c2:	f001 fb34 	bl	8002d2e <cmox_ModularBN_Mul>
 80016c6:	6a20      	ldr	r0, [r4, #32]
 80016c8:	9000      	str	r0, [sp, #0]
 80016ca:	4623      	mov	r3, r4
 80016cc:	68aa      	ldr	r2, [r5, #8]
 80016ce:	4651      	mov	r1, sl
 80016d0:	4640      	mov	r0, r8
 80016d2:	f001 fb2c 	bl	8002d2e <cmox_ModularBN_Mul>
 80016d6:	e8bd 87f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, pc}

080016da <cmox_ECC_EDW_AddPoints_Proj>:
 80016da:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80016de:	4604      	mov	r4, r0
 80016e0:	460d      	mov	r5, r1
 80016e2:	6960      	ldr	r0, [r4, #20]
 80016e4:	f8d0 a000 	ldr.w	sl, [r0]
 80016e8:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80016ec:	f8d0 9008 	ldr.w	r9, [r0, #8]
 80016f0:	6a20      	ldr	r0, [r4, #32]
 80016f2:	9000      	str	r0, [sp, #0]
 80016f4:	4617      	mov	r7, r2
 80016f6:	461e      	mov	r6, r3
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	68a8      	ldr	r0, [r5, #8]
 80016fc:	4623      	mov	r3, r4
 80016fe:	4652      	mov	r2, sl
 8001700:	f001 fb15 	bl	8002d2e <cmox_ModularBN_Mul>
 8001704:	6a20      	ldr	r0, [r4, #32]
 8001706:	9000      	str	r0, [sp, #0]
 8001708:	68b2      	ldr	r2, [r6, #8]
 800170a:	6839      	ldr	r1, [r7, #0]
 800170c:	6828      	ldr	r0, [r5, #0]
 800170e:	4623      	mov	r3, r4
 8001710:	f001 fb0d 	bl	8002d2e <cmox_ModularBN_Mul>
 8001714:	69a0      	ldr	r0, [r4, #24]
 8001716:	6801      	ldr	r1, [r0, #0]
 8001718:	680a      	ldr	r2, [r1, #0]
 800171a:	6869      	ldr	r1, [r5, #4]
 800171c:	6828      	ldr	r0, [r5, #0]
 800171e:	4643      	mov	r3, r8
 8001720:	f001 f880 	bl	8002824 <cmox_ModAddBN>
 8001724:	69a0      	ldr	r0, [r4, #24]
 8001726:	6801      	ldr	r1, [r0, #0]
 8001728:	680a      	ldr	r2, [r1, #0]
 800172a:	6833      	ldr	r3, [r6, #0]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	6838      	ldr	r0, [r7, #0]
 8001730:	f001 f878 	bl	8002824 <cmox_ModAddBN>
 8001734:	6a20      	ldr	r0, [r4, #32]
 8001736:	9000      	str	r0, [sp, #0]
 8001738:	6872      	ldr	r2, [r6, #4]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	6868      	ldr	r0, [r5, #4]
 800173e:	4623      	mov	r3, r4
 8001740:	f001 faf5 	bl	8002d2e <cmox_ModularBN_Mul>
 8001744:	6a20      	ldr	r0, [r4, #32]
 8001746:	9000      	str	r0, [sp, #0]
 8001748:	4623      	mov	r3, r4
 800174a:	6871      	ldr	r1, [r6, #4]
 800174c:	68b0      	ldr	r0, [r6, #8]
 800174e:	464a      	mov	r2, r9
 8001750:	f001 faed 	bl	8002d2e <cmox_ModularBN_Mul>
 8001754:	6a20      	ldr	r0, [r4, #32]
 8001756:	9000      	str	r0, [sp, #0]
 8001758:	4623      	mov	r3, r4
 800175a:	69a0      	ldr	r0, [r4, #24]
 800175c:	6805      	ldr	r5, [r0, #0]
 800175e:	6968      	ldr	r0, [r5, #20]
 8001760:	464a      	mov	r2, r9
 8001762:	4649      	mov	r1, r9
 8001764:	f001 fae3 	bl	8002d2e <cmox_ModularBN_Mul>
 8001768:	6a20      	ldr	r0, [r4, #32]
 800176a:	9000      	str	r0, [sp, #0]
 800176c:	4623      	mov	r3, r4
 800176e:	6831      	ldr	r1, [r6, #0]
 8001770:	4642      	mov	r2, r8
 8001772:	4640      	mov	r0, r8
 8001774:	f001 fadb 	bl	8002d2e <cmox_ModularBN_Mul>
 8001778:	69a0      	ldr	r0, [r4, #24]
 800177a:	6801      	ldr	r1, [r0, #0]
 800177c:	680a      	ldr	r2, [r1, #0]
 800177e:	68b1      	ldr	r1, [r6, #8]
 8001780:	4643      	mov	r3, r8
 8001782:	4640      	mov	r0, r8
 8001784:	f001 f8df 	bl	8002946 <cmox_ModSubBN>
 8001788:	69a0      	ldr	r0, [r4, #24]
 800178a:	6801      	ldr	r1, [r0, #0]
 800178c:	680a      	ldr	r2, [r1, #0]
 800178e:	6871      	ldr	r1, [r6, #4]
 8001790:	4643      	mov	r3, r8
 8001792:	4640      	mov	r0, r8
 8001794:	f001 f8d7 	bl	8002946 <cmox_ModSubBN>
 8001798:	68b1      	ldr	r1, [r6, #8]
 800179a:	6a20      	ldr	r0, [r4, #32]
 800179c:	9000      	str	r0, [sp, #0]
 800179e:	4623      	mov	r3, r4
 80017a0:	69a0      	ldr	r0, [r4, #24]
 80017a2:	6805      	ldr	r5, [r0, #0]
 80017a4:	6928      	ldr	r0, [r5, #16]
 80017a6:	460a      	mov	r2, r1
 80017a8:	f001 fac1 	bl	8002d2e <cmox_ModularBN_Mul>
 80017ac:	69a1      	ldr	r1, [r4, #24]
 80017ae:	680a      	ldr	r2, [r1, #0]
 80017b0:	6870      	ldr	r0, [r6, #4]
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	68b1      	ldr	r1, [r6, #8]
 80017b6:	4603      	mov	r3, r0
 80017b8:	f001 f8c5 	bl	8002946 <cmox_ModSubBN>
 80017bc:	6a23      	ldr	r3, [r4, #32]
 80017be:	6831      	ldr	r1, [r6, #0]
 80017c0:	4622      	mov	r2, r4
 80017c2:	4650      	mov	r0, sl
 80017c4:	f001 fad6 	bl	8002d74 <cmox_ModularBN_Sqr>
 80017c8:	69a0      	ldr	r0, [r4, #24]
 80017ca:	6801      	ldr	r1, [r0, #0]
 80017cc:	680a      	ldr	r2, [r1, #0]
 80017ce:	68b3      	ldr	r3, [r6, #8]
 80017d0:	6830      	ldr	r0, [r6, #0]
 80017d2:	4649      	mov	r1, r9
 80017d4:	f001 f8b7 	bl	8002946 <cmox_ModSubBN>
 80017d8:	69a0      	ldr	r0, [r4, #24]
 80017da:	6801      	ldr	r1, [r0, #0]
 80017dc:	680a      	ldr	r2, [r1, #0]
 80017de:	6830      	ldr	r0, [r6, #0]
 80017e0:	464b      	mov	r3, r9
 80017e2:	4649      	mov	r1, r9
 80017e4:	f001 f81e 	bl	8002824 <cmox_ModAddBN>
 80017e8:	6a20      	ldr	r0, [r4, #32]
 80017ea:	9000      	str	r0, [sp, #0]
 80017ec:	4623      	mov	r3, r4
 80017ee:	68b0      	ldr	r0, [r6, #8]
 80017f0:	4642      	mov	r2, r8
 80017f2:	4641      	mov	r1, r8
 80017f4:	f001 fa9b 	bl	8002d2e <cmox_ModularBN_Mul>
 80017f8:	6a20      	ldr	r0, [r4, #32]
 80017fa:	9000      	str	r0, [sp, #0]
 80017fc:	4623      	mov	r3, r4
 80017fe:	6832      	ldr	r2, [r6, #0]
 8001800:	4641      	mov	r1, r8
 8001802:	4650      	mov	r0, sl
 8001804:	f001 fa93 	bl	8002d2e <cmox_ModularBN_Mul>
 8001808:	6a20      	ldr	r0, [r4, #32]
 800180a:	9000      	str	r0, [sp, #0]
 800180c:	4623      	mov	r3, r4
 800180e:	6871      	ldr	r1, [r6, #4]
 8001810:	4642      	mov	r2, r8
 8001812:	4648      	mov	r0, r9
 8001814:	f001 fa8b 	bl	8002d2e <cmox_ModularBN_Mul>
 8001818:	6a20      	ldr	r0, [r4, #32]
 800181a:	9000      	str	r0, [sp, #0]
 800181c:	4623      	mov	r3, r4
 800181e:	6872      	ldr	r2, [r6, #4]
 8001820:	4641      	mov	r1, r8
 8001822:	4650      	mov	r0, sl
 8001824:	f001 fa83 	bl	8002d2e <cmox_ModularBN_Mul>
 8001828:	68b0      	ldr	r0, [r6, #8]
 800182a:	6a21      	ldr	r1, [r4, #32]
 800182c:	9100      	str	r1, [sp, #0]
 800182e:	4623      	mov	r3, r4
 8001830:	4602      	mov	r2, r0
 8001832:	4649      	mov	r1, r9
 8001834:	f001 fa7b 	bl	8002d2e <cmox_ModularBN_Mul>
 8001838:	e8bd 87f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, pc}

0800183c <cmox_ECC_EDW_DblPoint_Proj>:
 800183c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001840:	4604      	mov	r4, r0
 8001842:	460d      	mov	r5, r1
 8001844:	6960      	ldr	r0, [r4, #20]
 8001846:	6806      	ldr	r6, [r0, #0]
 8001848:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800184c:	4617      	mov	r7, r2
 800184e:	469b      	mov	fp, r3
 8001850:	6839      	ldr	r1, [r7, #0]
 8001852:	4632      	mov	r2, r6
 8001854:	4658      	mov	r0, fp
 8001856:	f002 ff3d 	bl	80046d4 <cmox_bn_mux>
 800185a:	4680      	mov	r8, r0
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	4632      	mov	r2, r6
 8001860:	4658      	mov	r0, fp
 8001862:	f002 ff37 	bl	80046d4 <cmox_bn_mux>
 8001866:	4681      	mov	r9, r0
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	4632      	mov	r2, r6
 800186c:	4658      	mov	r0, fp
 800186e:	f002 ff31 	bl	80046d4 <cmox_bn_mux>
 8001872:	4607      	mov	r7, r0
 8001874:	69a0      	ldr	r0, [r4, #24]
 8001876:	6801      	ldr	r1, [r0, #0]
 8001878:	680a      	ldr	r2, [r1, #0]
 800187a:	6869      	ldr	r1, [r5, #4]
 800187c:	6828      	ldr	r0, [r5, #0]
 800187e:	4633      	mov	r3, r6
 8001880:	f000 ffd0 	bl	8002824 <cmox_ModAddBN>
 8001884:	6a23      	ldr	r3, [r4, #32]
 8001886:	6828      	ldr	r0, [r5, #0]
 8001888:	4622      	mov	r2, r4
 800188a:	4651      	mov	r1, sl
 800188c:	f001 fa72 	bl	8002d74 <cmox_ModularBN_Sqr>
 8001890:	6a20      	ldr	r0, [r4, #32]
 8001892:	9000      	str	r0, [sp, #0]
 8001894:	4623      	mov	r3, r4
 8001896:	69a0      	ldr	r0, [r4, #24]
 8001898:	f8d0 e000 	ldr.w	lr, [r0]
 800189c:	f8de 0010 	ldr.w	r0, [lr, #16]
 80018a0:	4642      	mov	r2, r8
 80018a2:	4651      	mov	r1, sl
 80018a4:	f001 fa43 	bl	8002d2e <cmox_ModularBN_Mul>
 80018a8:	6a23      	ldr	r3, [r4, #32]
 80018aa:	4622      	mov	r2, r4
 80018ac:	4631      	mov	r1, r6
 80018ae:	4630      	mov	r0, r6
 80018b0:	f001 fa60 	bl	8002d74 <cmox_ModularBN_Sqr>
 80018b4:	69a0      	ldr	r0, [r4, #24]
 80018b6:	6801      	ldr	r1, [r0, #0]
 80018b8:	680a      	ldr	r2, [r1, #0]
 80018ba:	4633      	mov	r3, r6
 80018bc:	4651      	mov	r1, sl
 80018be:	4630      	mov	r0, r6
 80018c0:	f001 f841 	bl	8002946 <cmox_ModSubBN>
 80018c4:	6a23      	ldr	r3, [r4, #32]
 80018c6:	6868      	ldr	r0, [r5, #4]
 80018c8:	4622      	mov	r2, r4
 80018ca:	4649      	mov	r1, r9
 80018cc:	f001 fa52 	bl	8002d74 <cmox_ModularBN_Sqr>
 80018d0:	69a0      	ldr	r0, [r4, #24]
 80018d2:	6801      	ldr	r1, [r0, #0]
 80018d4:	680a      	ldr	r2, [r1, #0]
 80018d6:	4653      	mov	r3, sl
 80018d8:	4649      	mov	r1, r9
 80018da:	4640      	mov	r0, r8
 80018dc:	f000 ffa2 	bl	8002824 <cmox_ModAddBN>
 80018e0:	69a0      	ldr	r0, [r4, #24]
 80018e2:	6801      	ldr	r1, [r0, #0]
 80018e4:	680a      	ldr	r2, [r1, #0]
 80018e6:	4643      	mov	r3, r8
 80018e8:	4649      	mov	r1, r9
 80018ea:	4640      	mov	r0, r8
 80018ec:	f001 f82b 	bl	8002946 <cmox_ModSubBN>
 80018f0:	69a0      	ldr	r0, [r4, #24]
 80018f2:	6801      	ldr	r1, [r0, #0]
 80018f4:	680a      	ldr	r2, [r1, #0]
 80018f6:	4633      	mov	r3, r6
 80018f8:	4649      	mov	r1, r9
 80018fa:	4630      	mov	r0, r6
 80018fc:	f001 f823 	bl	8002946 <cmox_ModSubBN>
 8001900:	6a23      	ldr	r3, [r4, #32]
 8001902:	68a8      	ldr	r0, [r5, #8]
 8001904:	4622      	mov	r2, r4
 8001906:	4639      	mov	r1, r7
 8001908:	f001 fa34 	bl	8002d74 <cmox_ModularBN_Sqr>
 800190c:	69a0      	ldr	r0, [r4, #24]
 800190e:	6801      	ldr	r1, [r0, #0]
 8001910:	6809      	ldr	r1, [r1, #0]
 8001912:	463a      	mov	r2, r7
 8001914:	4638      	mov	r0, r7
 8001916:	f001 f93a 	bl	8002b8e <cmox_FieldBN_Mul2>
 800191a:	6a20      	ldr	r0, [r4, #32]
 800191c:	9000      	str	r0, [sp, #0]
 800191e:	4623      	mov	r3, r4
 8001920:	464a      	mov	r2, r9
 8001922:	4641      	mov	r1, r8
 8001924:	4650      	mov	r0, sl
 8001926:	f001 fa02 	bl	8002d2e <cmox_ModularBN_Mul>
 800192a:	69a0      	ldr	r0, [r4, #24]
 800192c:	6801      	ldr	r1, [r0, #0]
 800192e:	680a      	ldr	r2, [r1, #0]
 8001930:	463b      	mov	r3, r7
 8001932:	4639      	mov	r1, r7
 8001934:	4650      	mov	r0, sl
 8001936:	f001 f806 	bl	8002946 <cmox_ModSubBN>
 800193a:	6a20      	ldr	r0, [r4, #32]
 800193c:	9000      	str	r0, [sp, #0]
 800193e:	4623      	mov	r3, r4
 8001940:	4642      	mov	r2, r8
 8001942:	4639      	mov	r1, r7
 8001944:	4630      	mov	r0, r6
 8001946:	f001 f9f2 	bl	8002d2e <cmox_ModularBN_Mul>
 800194a:	6a20      	ldr	r0, [r4, #32]
 800194c:	9000      	str	r0, [sp, #0]
 800194e:	4623      	mov	r3, r4
 8001950:	463a      	mov	r2, r7
 8001952:	4639      	mov	r1, r7
 8001954:	4650      	mov	r0, sl
 8001956:	f001 f9ea 	bl	8002d2e <cmox_ModularBN_Mul>
 800195a:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800195e <cmox_ECC_EDW_AddPnts_ExtAff_a_1>:
 800195e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001962:	460d      	mov	r5, r1
 8001964:	4604      	mov	r4, r0
 8001966:	6961      	ldr	r1, [r4, #20]
 8001968:	9808      	ldr	r0, [sp, #32]
 800196a:	f8d1 8000 	ldr.w	r8, [r1]
 800196e:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8001972:	4617      	mov	r7, r2
 8001974:	461e      	mov	r6, r3
 8001976:	b108      	cbz	r0, 800197c <cmox_ECC_EDW_AddPnts_ExtAff_a_1+0x1e>
 8001978:	2100      	movs	r1, #0
 800197a:	6001      	str	r1, [r0, #0]
 800197c:	4643      	mov	r3, r8
 800197e:	69a0      	ldr	r0, [r4, #24]
 8001980:	6800      	ldr	r0, [r0, #0]
 8001982:	6802      	ldr	r2, [r0, #0]
 8001984:	6829      	ldr	r1, [r5, #0]
 8001986:	6868      	ldr	r0, [r5, #4]
 8001988:	f000 ffdd 	bl	8002946 <cmox_ModSubBN>
 800198c:	69a0      	ldr	r0, [r4, #24]
 800198e:	6801      	ldr	r1, [r0, #0]
 8001990:	680a      	ldr	r2, [r1, #0]
 8001992:	6839      	ldr	r1, [r7, #0]
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	464b      	mov	r3, r9
 8001998:	f000 ff44 	bl	8002824 <cmox_ModAddBN>
 800199c:	6a20      	ldr	r0, [r4, #32]
 800199e:	9000      	str	r0, [sp, #0]
 80019a0:	4623      	mov	r3, r4
 80019a2:	4642      	mov	r2, r8
 80019a4:	4649      	mov	r1, r9
 80019a6:	4640      	mov	r0, r8
 80019a8:	f001 f9c1 	bl	8002d2e <cmox_ModularBN_Mul>
 80019ac:	69a0      	ldr	r0, [r4, #24]
 80019ae:	6801      	ldr	r1, [r0, #0]
 80019b0:	680a      	ldr	r2, [r1, #0]
 80019b2:	6829      	ldr	r1, [r5, #0]
 80019b4:	6868      	ldr	r0, [r5, #4]
 80019b6:	464b      	mov	r3, r9
 80019b8:	f000 ff34 	bl	8002824 <cmox_ModAddBN>
 80019bc:	69a0      	ldr	r0, [r4, #24]
 80019be:	6801      	ldr	r1, [r0, #0]
 80019c0:	680a      	ldr	r2, [r1, #0]
 80019c2:	6833      	ldr	r3, [r6, #0]
 80019c4:	6839      	ldr	r1, [r7, #0]
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 ffbd 	bl	8002946 <cmox_ModSubBN>
 80019cc:	6a20      	ldr	r0, [r4, #32]
 80019ce:	9000      	str	r0, [sp, #0]
 80019d0:	4623      	mov	r3, r4
 80019d2:	6831      	ldr	r1, [r6, #0]
 80019d4:	464a      	mov	r2, r9
 80019d6:	4648      	mov	r0, r9
 80019d8:	f001 f9a9 	bl	8002d2e <cmox_ModularBN_Mul>
 80019dc:	69a0      	ldr	r0, [r4, #24]
 80019de:	6801      	ldr	r1, [r0, #0]
 80019e0:	680a      	ldr	r2, [r1, #0]
 80019e2:	6833      	ldr	r3, [r6, #0]
 80019e4:	4641      	mov	r1, r8
 80019e6:	4648      	mov	r0, r9
 80019e8:	f000 ffad 	bl	8002946 <cmox_ModSubBN>
 80019ec:	69a0      	ldr	r0, [r4, #24]
 80019ee:	6801      	ldr	r1, [r0, #0]
 80019f0:	680a      	ldr	r2, [r1, #0]
 80019f2:	464b      	mov	r3, r9
 80019f4:	4641      	mov	r1, r8
 80019f6:	4648      	mov	r0, r9
 80019f8:	f000 ff14 	bl	8002824 <cmox_ModAddBN>
 80019fc:	69a0      	ldr	r0, [r4, #24]
 80019fe:	6801      	ldr	r1, [r0, #0]
 8001a00:	6872      	ldr	r2, [r6, #4]
 8001a02:	6809      	ldr	r1, [r1, #0]
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f001 f8c2 	bl	8002b8e <cmox_FieldBN_Mul2>
 8001a0a:	6871      	ldr	r1, [r6, #4]
 8001a0c:	6a20      	ldr	r0, [r4, #32]
 8001a0e:	9000      	str	r0, [sp, #0]
 8001a10:	4623      	mov	r3, r4
 8001a12:	68a8      	ldr	r0, [r5, #8]
 8001a14:	460a      	mov	r2, r1
 8001a16:	f001 f98a 	bl	8002d2e <cmox_ModularBN_Mul>
 8001a1a:	69a0      	ldr	r0, [r4, #24]
 8001a1c:	6801      	ldr	r1, [r0, #0]
 8001a1e:	68f2      	ldr	r2, [r6, #12]
 8001a20:	6809      	ldr	r1, [r1, #0]
 8001a22:	68e8      	ldr	r0, [r5, #12]
 8001a24:	f001 f8b3 	bl	8002b8e <cmox_FieldBN_Mul2>
 8001a28:	69a0      	ldr	r0, [r4, #24]
 8001a2a:	6801      	ldr	r1, [r0, #0]
 8001a2c:	680a      	ldr	r2, [r1, #0]
 8001a2e:	6871      	ldr	r1, [r6, #4]
 8001a30:	68f0      	ldr	r0, [r6, #12]
 8001a32:	4643      	mov	r3, r8
 8001a34:	f000 fef6 	bl	8002824 <cmox_ModAddBN>
 8001a38:	69a1      	ldr	r1, [r4, #24]
 8001a3a:	680a      	ldr	r2, [r1, #0]
 8001a3c:	68f0      	ldr	r0, [r6, #12]
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	6871      	ldr	r1, [r6, #4]
 8001a42:	4603      	mov	r3, r0
 8001a44:	f000 ff7f 	bl	8002946 <cmox_ModSubBN>
 8001a48:	6a20      	ldr	r0, [r4, #32]
 8001a4a:	9000      	str	r0, [sp, #0]
 8001a4c:	4623      	mov	r3, r4
 8001a4e:	68b2      	ldr	r2, [r6, #8]
 8001a50:	6830      	ldr	r0, [r6, #0]
 8001a52:	4649      	mov	r1, r9
 8001a54:	f001 f96b 	bl	8002d2e <cmox_ModularBN_Mul>
 8001a58:	6831      	ldr	r1, [r6, #0]
 8001a5a:	6a20      	ldr	r0, [r4, #32]
 8001a5c:	9000      	str	r0, [sp, #0]
 8001a5e:	4623      	mov	r3, r4
 8001a60:	460a      	mov	r2, r1
 8001a62:	4640      	mov	r0, r8
 8001a64:	f001 f963 	bl	8002d2e <cmox_ModularBN_Mul>
 8001a68:	6a20      	ldr	r0, [r4, #32]
 8001a6a:	9000      	str	r0, [sp, #0]
 8001a6c:	6872      	ldr	r2, [r6, #4]
 8001a6e:	68f1      	ldr	r1, [r6, #12]
 8001a70:	4623      	mov	r3, r4
 8001a72:	4648      	mov	r0, r9
 8001a74:	f001 f95b 	bl	8002d2e <cmox_ModularBN_Mul>
 8001a78:	68f1      	ldr	r1, [r6, #12]
 8001a7a:	6a20      	ldr	r0, [r4, #32]
 8001a7c:	9000      	str	r0, [sp, #0]
 8001a7e:	4623      	mov	r3, r4
 8001a80:	460a      	mov	r2, r1
 8001a82:	4640      	mov	r0, r8
 8001a84:	f001 f953 	bl	8002d2e <cmox_ModularBN_Mul>
 8001a88:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}

08001a8c <cmox_ECC_EDW_AddPoints_Ext_a_1>:
 8001a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a90:	4604      	mov	r4, r0
 8001a92:	4617      	mov	r7, r2
 8001a94:	6960      	ldr	r0, [r4, #20]
 8001a96:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8001a9a:	f8d0 8000 	ldr.w	r8, [r0]
 8001a9e:	69a0      	ldr	r0, [r4, #24]
 8001aa0:	6800      	ldr	r0, [r0, #0]
 8001aa2:	6802      	ldr	r2, [r0, #0]
 8001aa4:	460d      	mov	r5, r1
 8001aa6:	461e      	mov	r6, r3
 8001aa8:	6829      	ldr	r1, [r5, #0]
 8001aaa:	6868      	ldr	r0, [r5, #4]
 8001aac:	4643      	mov	r3, r8
 8001aae:	f000 ff4a 	bl	8002946 <cmox_ModSubBN>
 8001ab2:	69a0      	ldr	r0, [r4, #24]
 8001ab4:	6801      	ldr	r1, [r0, #0]
 8001ab6:	680a      	ldr	r2, [r1, #0]
 8001ab8:	6839      	ldr	r1, [r7, #0]
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	464b      	mov	r3, r9
 8001abe:	f000 feb1 	bl	8002824 <cmox_ModAddBN>
 8001ac2:	6a20      	ldr	r0, [r4, #32]
 8001ac4:	9000      	str	r0, [sp, #0]
 8001ac6:	4623      	mov	r3, r4
 8001ac8:	4642      	mov	r2, r8
 8001aca:	4649      	mov	r1, r9
 8001acc:	4640      	mov	r0, r8
 8001ace:	f001 f92e 	bl	8002d2e <cmox_ModularBN_Mul>
 8001ad2:	69a0      	ldr	r0, [r4, #24]
 8001ad4:	6801      	ldr	r1, [r0, #0]
 8001ad6:	680a      	ldr	r2, [r1, #0]
 8001ad8:	6829      	ldr	r1, [r5, #0]
 8001ada:	6868      	ldr	r0, [r5, #4]
 8001adc:	464b      	mov	r3, r9
 8001ade:	f000 fea1 	bl	8002824 <cmox_ModAddBN>
 8001ae2:	69a0      	ldr	r0, [r4, #24]
 8001ae4:	6801      	ldr	r1, [r0, #0]
 8001ae6:	680a      	ldr	r2, [r1, #0]
 8001ae8:	6833      	ldr	r3, [r6, #0]
 8001aea:	6839      	ldr	r1, [r7, #0]
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 ff2a 	bl	8002946 <cmox_ModSubBN>
 8001af2:	6a20      	ldr	r0, [r4, #32]
 8001af4:	9000      	str	r0, [sp, #0]
 8001af6:	4623      	mov	r3, r4
 8001af8:	6831      	ldr	r1, [r6, #0]
 8001afa:	464a      	mov	r2, r9
 8001afc:	4648      	mov	r0, r9
 8001afe:	f001 f916 	bl	8002d2e <cmox_ModularBN_Mul>
 8001b02:	69a0      	ldr	r0, [r4, #24]
 8001b04:	6801      	ldr	r1, [r0, #0]
 8001b06:	680a      	ldr	r2, [r1, #0]
 8001b08:	6833      	ldr	r3, [r6, #0]
 8001b0a:	4641      	mov	r1, r8
 8001b0c:	4648      	mov	r0, r9
 8001b0e:	f000 ff1a 	bl	8002946 <cmox_ModSubBN>
 8001b12:	69a0      	ldr	r0, [r4, #24]
 8001b14:	6801      	ldr	r1, [r0, #0]
 8001b16:	680a      	ldr	r2, [r1, #0]
 8001b18:	464b      	mov	r3, r9
 8001b1a:	4641      	mov	r1, r8
 8001b1c:	4648      	mov	r0, r9
 8001b1e:	f000 fe81 	bl	8002824 <cmox_ModAddBN>
 8001b22:	69a0      	ldr	r0, [r4, #24]
 8001b24:	6801      	ldr	r1, [r0, #0]
 8001b26:	6872      	ldr	r2, [r6, #4]
 8001b28:	6809      	ldr	r1, [r1, #0]
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f001 f82f 	bl	8002b8e <cmox_FieldBN_Mul2>
 8001b30:	6871      	ldr	r1, [r6, #4]
 8001b32:	6a20      	ldr	r0, [r4, #32]
 8001b34:	9000      	str	r0, [sp, #0]
 8001b36:	4623      	mov	r3, r4
 8001b38:	68a8      	ldr	r0, [r5, #8]
 8001b3a:	460a      	mov	r2, r1
 8001b3c:	f001 f8f7 	bl	8002d2e <cmox_ModularBN_Mul>
 8001b40:	69a0      	ldr	r0, [r4, #24]
 8001b42:	6801      	ldr	r1, [r0, #0]
 8001b44:	68b2      	ldr	r2, [r6, #8]
 8001b46:	6809      	ldr	r1, [r1, #0]
 8001b48:	68b8      	ldr	r0, [r7, #8]
 8001b4a:	f001 f820 	bl	8002b8e <cmox_FieldBN_Mul2>
 8001b4e:	6a20      	ldr	r0, [r4, #32]
 8001b50:	9000      	str	r0, [sp, #0]
 8001b52:	68f2      	ldr	r2, [r6, #12]
 8001b54:	68b1      	ldr	r1, [r6, #8]
 8001b56:	68e8      	ldr	r0, [r5, #12]
 8001b58:	4623      	mov	r3, r4
 8001b5a:	f001 f8e8 	bl	8002d2e <cmox_ModularBN_Mul>
 8001b5e:	69a0      	ldr	r0, [r4, #24]
 8001b60:	6801      	ldr	r1, [r0, #0]
 8001b62:	680a      	ldr	r2, [r1, #0]
 8001b64:	6871      	ldr	r1, [r6, #4]
 8001b66:	68f0      	ldr	r0, [r6, #12]
 8001b68:	4643      	mov	r3, r8
 8001b6a:	f000 fe5b 	bl	8002824 <cmox_ModAddBN>
 8001b6e:	69a1      	ldr	r1, [r4, #24]
 8001b70:	680a      	ldr	r2, [r1, #0]
 8001b72:	68f0      	ldr	r0, [r6, #12]
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	6871      	ldr	r1, [r6, #4]
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f000 fee4 	bl	8002946 <cmox_ModSubBN>
 8001b7e:	6a20      	ldr	r0, [r4, #32]
 8001b80:	9000      	str	r0, [sp, #0]
 8001b82:	4623      	mov	r3, r4
 8001b84:	68b2      	ldr	r2, [r6, #8]
 8001b86:	6830      	ldr	r0, [r6, #0]
 8001b88:	4649      	mov	r1, r9
 8001b8a:	f001 f8d0 	bl	8002d2e <cmox_ModularBN_Mul>
 8001b8e:	6831      	ldr	r1, [r6, #0]
 8001b90:	6a20      	ldr	r0, [r4, #32]
 8001b92:	9000      	str	r0, [sp, #0]
 8001b94:	4623      	mov	r3, r4
 8001b96:	460a      	mov	r2, r1
 8001b98:	4640      	mov	r0, r8
 8001b9a:	f001 f8c8 	bl	8002d2e <cmox_ModularBN_Mul>
 8001b9e:	6a20      	ldr	r0, [r4, #32]
 8001ba0:	9000      	str	r0, [sp, #0]
 8001ba2:	6872      	ldr	r2, [r6, #4]
 8001ba4:	68f1      	ldr	r1, [r6, #12]
 8001ba6:	4623      	mov	r3, r4
 8001ba8:	4648      	mov	r0, r9
 8001baa:	f001 f8c0 	bl	8002d2e <cmox_ModularBN_Mul>
 8001bae:	68f1      	ldr	r1, [r6, #12]
 8001bb0:	6a20      	ldr	r0, [r4, #32]
 8001bb2:	9000      	str	r0, [sp, #0]
 8001bb4:	4623      	mov	r3, r4
 8001bb6:	460a      	mov	r2, r1
 8001bb8:	4640      	mov	r0, r8
 8001bba:	f001 f8b8 	bl	8002d2e <cmox_ModularBN_Mul>
 8001bbe:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}

08001bc2 <cmox_ECC_EDW_DblPoint_Ext_a_1>:
 8001bc2:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	4698      	mov	r8, r3
 8001bca:	6960      	ldr	r0, [r4, #20]
 8001bcc:	6807      	ldr	r7, [r0, #0]
 8001bce:	6843      	ldr	r3, [r0, #4]
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	460d      	mov	r5, r1
 8001bd4:	4616      	mov	r6, r2
 8001bd6:	463a      	mov	r2, r7
 8001bd8:	6831      	ldr	r1, [r6, #0]
 8001bda:	4640      	mov	r0, r8
 8001bdc:	f002 fd7a 	bl	80046d4 <cmox_bn_mux>
 8001be0:	4681      	mov	r9, r0
 8001be2:	6871      	ldr	r1, [r6, #4]
 8001be4:	463a      	mov	r2, r7
 8001be6:	4640      	mov	r0, r8
 8001be8:	f002 fd74 	bl	80046d4 <cmox_bn_mux>
 8001bec:	4682      	mov	sl, r0
 8001bee:	68b1      	ldr	r1, [r6, #8]
 8001bf0:	463a      	mov	r2, r7
 8001bf2:	4640      	mov	r0, r8
 8001bf4:	f002 fd6e 	bl	80046d4 <cmox_bn_mux>
 8001bf8:	4683      	mov	fp, r0
 8001bfa:	68f1      	ldr	r1, [r6, #12]
 8001bfc:	463a      	mov	r2, r7
 8001bfe:	4640      	mov	r0, r8
 8001c00:	f002 fd68 	bl	80046d4 <cmox_bn_mux>
 8001c04:	4606      	mov	r6, r0
 8001c06:	6a23      	ldr	r3, [r4, #32]
 8001c08:	6828      	ldr	r0, [r5, #0]
 8001c0a:	4622      	mov	r2, r4
 8001c0c:	4639      	mov	r1, r7
 8001c0e:	f001 f8b1 	bl	8002d74 <cmox_ModularBN_Sqr>
 8001c12:	6a23      	ldr	r3, [r4, #32]
 8001c14:	6868      	ldr	r0, [r5, #4]
 8001c16:	4622      	mov	r2, r4
 8001c18:	4631      	mov	r1, r6
 8001c1a:	f001 f8ab 	bl	8002d74 <cmox_ModularBN_Sqr>
 8001c1e:	6a23      	ldr	r3, [r4, #32]
 8001c20:	68a8      	ldr	r0, [r5, #8]
 8001c22:	4622      	mov	r2, r4
 8001c24:	4659      	mov	r1, fp
 8001c26:	f001 f8a5 	bl	8002d74 <cmox_ModularBN_Sqr>
 8001c2a:	69a0      	ldr	r0, [r4, #24]
 8001c2c:	6801      	ldr	r1, [r0, #0]
 8001c2e:	6809      	ldr	r1, [r1, #0]
 8001c30:	465a      	mov	r2, fp
 8001c32:	4658      	mov	r0, fp
 8001c34:	f000 ffab 	bl	8002b8e <cmox_FieldBN_Mul2>
 8001c38:	69a0      	ldr	r0, [r4, #24]
 8001c3a:	6801      	ldr	r1, [r0, #0]
 8001c3c:	680a      	ldr	r2, [r1, #0]
 8001c3e:	6869      	ldr	r1, [r5, #4]
 8001c40:	6828      	ldr	r0, [r5, #0]
 8001c42:	464b      	mov	r3, r9
 8001c44:	f000 fdee 	bl	8002824 <cmox_ModAddBN>
 8001c48:	6a23      	ldr	r3, [r4, #32]
 8001c4a:	4622      	mov	r2, r4
 8001c4c:	4649      	mov	r1, r9
 8001c4e:	4648      	mov	r0, r9
 8001c50:	f001 f890 	bl	8002d74 <cmox_ModularBN_Sqr>
 8001c54:	69a0      	ldr	r0, [r4, #24]
 8001c56:	6801      	ldr	r1, [r0, #0]
 8001c58:	680a      	ldr	r2, [r1, #0]
 8001c5a:	464b      	mov	r3, r9
 8001c5c:	4639      	mov	r1, r7
 8001c5e:	4648      	mov	r0, r9
 8001c60:	f000 fe71 	bl	8002946 <cmox_ModSubBN>
 8001c64:	69a0      	ldr	r0, [r4, #24]
 8001c66:	6803      	ldr	r3, [r0, #0]
 8001c68:	6818      	ldr	r0, [r3, #0]
 8001c6a:	4652      	mov	r2, sl
 8001c6c:	4639      	mov	r1, r7
 8001c6e:	f000 fee9 	bl	8002a44 <cmox_SubBN>
 8001c72:	69a0      	ldr	r0, [r4, #24]
 8001c74:	6801      	ldr	r1, [r0, #0]
 8001c76:	680a      	ldr	r2, [r1, #0]
 8001c78:	463b      	mov	r3, r7
 8001c7a:	4631      	mov	r1, r6
 8001c7c:	4648      	mov	r0, r9
 8001c7e:	f000 fe62 	bl	8002946 <cmox_ModSubBN>
 8001c82:	69a0      	ldr	r0, [r4, #24]
 8001c84:	6801      	ldr	r1, [r0, #0]
 8001c86:	680a      	ldr	r2, [r1, #0]
 8001c88:	9b01      	ldr	r3, [sp, #4]
 8001c8a:	4631      	mov	r1, r6
 8001c8c:	4650      	mov	r0, sl
 8001c8e:	f000 fdc9 	bl	8002824 <cmox_ModAddBN>
 8001c92:	69a0      	ldr	r0, [r4, #24]
 8001c94:	6801      	ldr	r1, [r0, #0]
 8001c96:	680a      	ldr	r2, [r1, #0]
 8001c98:	4633      	mov	r3, r6
 8001c9a:	4631      	mov	r1, r6
 8001c9c:	4650      	mov	r0, sl
 8001c9e:	f000 fe52 	bl	8002946 <cmox_ModSubBN>
 8001ca2:	69a0      	ldr	r0, [r4, #24]
 8001ca4:	6801      	ldr	r1, [r0, #0]
 8001ca6:	680a      	ldr	r2, [r1, #0]
 8001ca8:	9801      	ldr	r0, [sp, #4]
 8001caa:	4653      	mov	r3, sl
 8001cac:	4659      	mov	r1, fp
 8001cae:	f000 fe4a 	bl	8002946 <cmox_ModSubBN>
 8001cb2:	6a20      	ldr	r0, [r4, #32]
 8001cb4:	9901      	ldr	r1, [sp, #4]
 8001cb6:	9000      	str	r0, [sp, #0]
 8001cb8:	4623      	mov	r3, r4
 8001cba:	465a      	mov	r2, fp
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f001 f836 	bl	8002d2e <cmox_ModularBN_Mul>
 8001cc2:	6a20      	ldr	r0, [r4, #32]
 8001cc4:	9000      	str	r0, [sp, #0]
 8001cc6:	4623      	mov	r3, r4
 8001cc8:	464a      	mov	r2, r9
 8001cca:	4651      	mov	r1, sl
 8001ccc:	4638      	mov	r0, r7
 8001cce:	f001 f82e 	bl	8002d2e <cmox_ModularBN_Mul>
 8001cd2:	6a20      	ldr	r0, [r4, #32]
 8001cd4:	9000      	str	r0, [sp, #0]
 8001cd6:	4623      	mov	r3, r4
 8001cd8:	9801      	ldr	r0, [sp, #4]
 8001cda:	4652      	mov	r2, sl
 8001cdc:	4631      	mov	r1, r6
 8001cde:	f001 f826 	bl	8002d2e <cmox_ModularBN_Mul>
 8001ce2:	6a20      	ldr	r0, [r4, #32]
 8001ce4:	9000      	str	r0, [sp, #0]
 8001ce6:	4623      	mov	r3, r4
 8001ce8:	4632      	mov	r2, r6
 8001cea:	4631      	mov	r1, r6
 8001cec:	4638      	mov	r0, r7
 8001cee:	f001 f81e 	bl	8002d2e <cmox_ModularBN_Mul>
 8001cf2:	e8bd 8ff7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001cf6 <cmox_ECC_MONTY_Ladder_XzAff>:
 8001cf6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	4616      	mov	r6, r2
 8001cfe:	6960      	ldr	r0, [r4, #20]
 8001d00:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8001d04:	f8d0 8000 	ldr.w	r8, [r0]
 8001d08:	69a0      	ldr	r0, [r4, #24]
 8001d0a:	6800      	ldr	r0, [r0, #0]
 8001d0c:	6802      	ldr	r2, [r0, #0]
 8001d0e:	460d      	mov	r5, r1
 8001d10:	461f      	mov	r7, r3
 8001d12:	68b9      	ldr	r1, [r7, #8]
 8001d14:	6838      	ldr	r0, [r7, #0]
 8001d16:	4643      	mov	r3, r8
 8001d18:	f000 fd84 	bl	8002824 <cmox_ModAddBN>
 8001d1c:	69a0      	ldr	r0, [r4, #24]
 8001d1e:	6801      	ldr	r1, [r0, #0]
 8001d20:	680a      	ldr	r2, [r1, #0]
 8001d22:	68b9      	ldr	r1, [r7, #8]
 8001d24:	6838      	ldr	r0, [r7, #0]
 8001d26:	464b      	mov	r3, r9
 8001d28:	f000 fe0d 	bl	8002946 <cmox_ModSubBN>
 8001d2c:	69a0      	ldr	r0, [r4, #24]
 8001d2e:	6801      	ldr	r1, [r0, #0]
 8001d30:	680a      	ldr	r2, [r1, #0]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	68b1      	ldr	r1, [r6, #8]
 8001d36:	6830      	ldr	r0, [r6, #0]
 8001d38:	f000 fd74 	bl	8002824 <cmox_ModAddBN>
 8001d3c:	69a0      	ldr	r0, [r4, #24]
 8001d3e:	6801      	ldr	r1, [r0, #0]
 8001d40:	680a      	ldr	r2, [r1, #0]
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	68b1      	ldr	r1, [r6, #8]
 8001d46:	6830      	ldr	r0, [r6, #0]
 8001d48:	f000 fdfd 	bl	8002946 <cmox_ModSubBN>
 8001d4c:	68b8      	ldr	r0, [r7, #8]
 8001d4e:	6a21      	ldr	r1, [r4, #32]
 8001d50:	9100      	str	r1, [sp, #0]
 8001d52:	4623      	mov	r3, r4
 8001d54:	4602      	mov	r2, r0
 8001d56:	4641      	mov	r1, r8
 8001d58:	f000 ffe9 	bl	8002d2e <cmox_ModularBN_Mul>
 8001d5c:	6a23      	ldr	r3, [r4, #32]
 8001d5e:	4622      	mov	r2, r4
 8001d60:	4641      	mov	r1, r8
 8001d62:	4640      	mov	r0, r8
 8001d64:	f001 f806 	bl	8002d74 <cmox_ModularBN_Sqr>
 8001d68:	6838      	ldr	r0, [r7, #0]
 8001d6a:	6a21      	ldr	r1, [r4, #32]
 8001d6c:	9100      	str	r1, [sp, #0]
 8001d6e:	4623      	mov	r3, r4
 8001d70:	4602      	mov	r2, r0
 8001d72:	4649      	mov	r1, r9
 8001d74:	f000 ffdb 	bl	8002d2e <cmox_ModularBN_Mul>
 8001d78:	6a23      	ldr	r3, [r4, #32]
 8001d7a:	4622      	mov	r2, r4
 8001d7c:	4649      	mov	r1, r9
 8001d7e:	4648      	mov	r0, r9
 8001d80:	f000 fff8 	bl	8002d74 <cmox_ModularBN_Sqr>
 8001d84:	69a0      	ldr	r0, [r4, #24]
 8001d86:	6801      	ldr	r1, [r0, #0]
 8001d88:	680a      	ldr	r2, [r1, #0]
 8001d8a:	6833      	ldr	r3, [r6, #0]
 8001d8c:	6839      	ldr	r1, [r7, #0]
 8001d8e:	68b8      	ldr	r0, [r7, #8]
 8001d90:	f000 fd48 	bl	8002824 <cmox_ModAddBN>
 8001d94:	69a1      	ldr	r1, [r4, #24]
 8001d96:	680a      	ldr	r2, [r1, #0]
 8001d98:	68b8      	ldr	r0, [r7, #8]
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	6839      	ldr	r1, [r7, #0]
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f000 fdd1 	bl	8002946 <cmox_ModSubBN>
 8001da4:	6830      	ldr	r0, [r6, #0]
 8001da6:	6a23      	ldr	r3, [r4, #32]
 8001da8:	4622      	mov	r2, r4
 8001daa:	4601      	mov	r1, r0
 8001dac:	f000 ffe2 	bl	8002d74 <cmox_ModularBN_Sqr>
 8001db0:	68b8      	ldr	r0, [r7, #8]
 8001db2:	6a23      	ldr	r3, [r4, #32]
 8001db4:	4622      	mov	r2, r4
 8001db6:	4601      	mov	r1, r0
 8001db8:	f000 ffdc 	bl	8002d74 <cmox_ModularBN_Sqr>
 8001dbc:	6a20      	ldr	r0, [r4, #32]
 8001dbe:	9000      	str	r0, [sp, #0]
 8001dc0:	68b2      	ldr	r2, [r6, #8]
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	6828      	ldr	r0, [r5, #0]
 8001dc6:	4623      	mov	r3, r4
 8001dc8:	f000 ffb1 	bl	8002d2e <cmox_ModularBN_Mul>
 8001dcc:	6a20      	ldr	r0, [r4, #32]
 8001dce:	9000      	str	r0, [sp, #0]
 8001dd0:	4623      	mov	r3, r4
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	4649      	mov	r1, r9
 8001dd6:	4640      	mov	r0, r8
 8001dd8:	f000 ffa9 	bl	8002d2e <cmox_ModularBN_Mul>
 8001ddc:	69a0      	ldr	r0, [r4, #24]
 8001dde:	6801      	ldr	r1, [r0, #0]
 8001de0:	680a      	ldr	r2, [r1, #0]
 8001de2:	464b      	mov	r3, r9
 8001de4:	4649      	mov	r1, r9
 8001de6:	4640      	mov	r0, r8
 8001de8:	f000 fdad 	bl	8002946 <cmox_ModSubBN>
 8001dec:	6a20      	ldr	r0, [r4, #32]
 8001dee:	9000      	str	r0, [sp, #0]
 8001df0:	4623      	mov	r3, r4
 8001df2:	69a0      	ldr	r0, [r4, #24]
 8001df4:	6801      	ldr	r1, [r0, #0]
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	6909      	ldr	r1, [r1, #16]
 8001dfa:	4648      	mov	r0, r9
 8001dfc:	f000 ff97 	bl	8002d2e <cmox_ModularBN_Mul>
 8001e00:	69a0      	ldr	r0, [r4, #24]
 8001e02:	6801      	ldr	r1, [r0, #0]
 8001e04:	680a      	ldr	r2, [r1, #0]
 8001e06:	68b9      	ldr	r1, [r7, #8]
 8001e08:	4643      	mov	r3, r8
 8001e0a:	4640      	mov	r0, r8
 8001e0c:	f000 fd0a 	bl	8002824 <cmox_ModAddBN>
 8001e10:	6a20      	ldr	r0, [r4, #32]
 8001e12:	9000      	str	r0, [sp, #0]
 8001e14:	4623      	mov	r3, r4
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	4649      	mov	r1, r9
 8001e1a:	4640      	mov	r0, r8
 8001e1c:	f000 ff87 	bl	8002d2e <cmox_ModularBN_Mul>
 8001e20:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}

08001e24 <cmox_ECC_CompleteMADD>:
 8001e24:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001e26:	4606      	mov	r6, r0
 8001e28:	460c      	mov	r4, r1
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	4617      	mov	r7, r2
 8001e2e:	9001      	str	r0, [sp, #4]
 8001e30:	461d      	mov	r5, r3
 8001e32:	6922      	ldr	r2, [r4, #16]
 8001e34:	612a      	str	r2, [r5, #16]
 8001e36:	2100      	movs	r1, #0
 8001e38:	7c20      	ldrb	r0, [r4, #16]
 8001e3a:	f000 0001 	and.w	r0, r0, #1
 8001e3e:	f000 ffe6 	bl	8002e0e <cmox_mathUtils_neq>
 8001e42:	2801      	cmp	r0, #1
 8001e44:	d107      	bne.n	8001e56 <cmox_ECC_CompleteMADD+0x32>
 8001e46:	7c38      	ldrb	r0, [r7, #16]
 8001e48:	2100      	movs	r1, #0
 8001e4a:	f000 0001 	and.w	r0, r0, #1
 8001e4e:	f000 ffde 	bl	8002e0e <cmox_mathUtils_neq>
 8001e52:	2801      	cmp	r0, #1
 8001e54:	d036      	beq.n	8001ec4 <cmox_ECC_CompleteMADD+0xa0>
 8001e56:	7c20      	ldrb	r0, [r4, #16]
 8001e58:	2100      	movs	r1, #0
 8001e5a:	f000 0001 	and.w	r0, r0, #1
 8001e5e:	f000 ffd6 	bl	8002e0e <cmox_mathUtils_neq>
 8001e62:	2801      	cmp	r0, #1
 8001e64:	d102      	bne.n	8001e6c <cmox_ECC_CompleteMADD+0x48>
 8001e66:	462a      	mov	r2, r5
 8001e68:	4639      	mov	r1, r7
 8001e6a:	e009      	b.n	8001e80 <cmox_ECC_CompleteMADD+0x5c>
 8001e6c:	7c38      	ldrb	r0, [r7, #16]
 8001e6e:	2100      	movs	r1, #0
 8001e70:	f000 0001 	and.w	r0, r0, #1
 8001e74:	f000 ffcb 	bl	8002e0e <cmox_mathUtils_neq>
 8001e78:	2801      	cmp	r0, #1
 8001e7a:	d104      	bne.n	8001e86 <cmox_ECC_CompleteMADD+0x62>
 8001e7c:	462a      	mov	r2, r5
 8001e7e:	4621      	mov	r1, r4
 8001e80:	f7fe faac 	bl	80003dc <cmox_ECC_CondCopyPoint>
 8001e84:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001e86:	463a      	mov	r2, r7
 8001e88:	a801      	add	r0, sp, #4
 8001e8a:	9000      	str	r0, [sp, #0]
 8001e8c:	462b      	mov	r3, r5
 8001e8e:	69b7      	ldr	r7, [r6, #24]
 8001e90:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8001e94:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8001e98:	4621      	mov	r1, r4
 8001e9a:	4630      	mov	r0, r6
 8001e9c:	47b8      	blx	r7
 8001e9e:	9801      	ldr	r0, [sp, #4]
 8001ea0:	07c1      	lsls	r1, r0, #31
 8001ea2:	d513      	bpl.n	8001ecc <cmox_ECC_CompleteMADD+0xa8>
 8001ea4:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001ea8:	b160      	cbz	r0, 8001ec4 <cmox_ECC_CompleteMADD+0xa0>
 8001eaa:	4630      	mov	r0, r6
 8001eac:	69b6      	ldr	r6, [r6, #24]
 8001eae:	6877      	ldr	r7, [r6, #4]
 8001eb0:	f8d7 c000 	ldr.w	ip, [r7]
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	462a      	mov	r2, r5
 8001eb8:	4621      	mov	r1, r4
 8001eba:	47e0      	blx	ip
 8001ebc:	6920      	ldr	r0, [r4, #16]
 8001ebe:	0840      	lsrs	r0, r0, #1
 8001ec0:	0040      	lsls	r0, r0, #1
 8001ec2:	e002      	b.n	8001eca <cmox_ECC_CompleteMADD+0xa6>
 8001ec4:	6928      	ldr	r0, [r5, #16]
 8001ec6:	f040 0001 	orr.w	r0, r0, #1
 8001eca:	6128      	str	r0, [r5, #16]
 8001ecc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001ece <cmox_ECC_CompleteADD>:
 8001ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed0:	460f      	mov	r7, r1
 8001ed2:	4606      	mov	r6, r0
 8001ed4:	461d      	mov	r5, r3
 8001ed6:	6938      	ldr	r0, [r7, #16]
 8001ed8:	6128      	str	r0, [r5, #16]
 8001eda:	4614      	mov	r4, r2
 8001edc:	7c38      	ldrb	r0, [r7, #16]
 8001ede:	2100      	movs	r1, #0
 8001ee0:	f000 0001 	and.w	r0, r0, #1
 8001ee4:	f000 ff93 	bl	8002e0e <cmox_mathUtils_neq>
 8001ee8:	2801      	cmp	r0, #1
 8001eea:	d107      	bne.n	8001efc <cmox_ECC_CompleteADD+0x2e>
 8001eec:	7c20      	ldrb	r0, [r4, #16]
 8001eee:	2100      	movs	r1, #0
 8001ef0:	f000 0001 	and.w	r0, r0, #1
 8001ef4:	f000 ff8b 	bl	8002e0e <cmox_mathUtils_neq>
 8001ef8:	2801      	cmp	r0, #1
 8001efa:	d03b      	beq.n	8001f74 <cmox_ECC_CompleteADD+0xa6>
 8001efc:	7c38      	ldrb	r0, [r7, #16]
 8001efe:	2100      	movs	r1, #0
 8001f00:	f000 0001 	and.w	r0, r0, #1
 8001f04:	f000 ff83 	bl	8002e0e <cmox_mathUtils_neq>
 8001f08:	2801      	cmp	r0, #1
 8001f0a:	d102      	bne.n	8001f12 <cmox_ECC_CompleteADD+0x44>
 8001f0c:	462a      	mov	r2, r5
 8001f0e:	4621      	mov	r1, r4
 8001f10:	e009      	b.n	8001f26 <cmox_ECC_CompleteADD+0x58>
 8001f12:	7c20      	ldrb	r0, [r4, #16]
 8001f14:	2100      	movs	r1, #0
 8001f16:	f000 0001 	and.w	r0, r0, #1
 8001f1a:	f000 ff78 	bl	8002e0e <cmox_mathUtils_neq>
 8001f1e:	2801      	cmp	r0, #1
 8001f20:	d105      	bne.n	8001f2e <cmox_ECC_CompleteADD+0x60>
 8001f22:	462a      	mov	r2, r5
 8001f24:	4639      	mov	r1, r7
 8001f26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001f2a:	f7fe ba57 	b.w	80003dc <cmox_ECC_CondCopyPoint>
 8001f2e:	4639      	mov	r1, r7
 8001f30:	69b7      	ldr	r7, [r6, #24]
 8001f32:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8001f36:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8001f3a:	462b      	mov	r3, r5
 8001f3c:	4622      	mov	r2, r4
 8001f3e:	4630      	mov	r0, r6
 8001f40:	47b8      	blx	r7
 8001f42:	68a8      	ldr	r0, [r5, #8]
 8001f44:	2100      	movs	r1, #0
 8001f46:	f002 fc0b 	bl	8004760 <cmox_bn_cmpUint>
 8001f4a:	2801      	cmp	r0, #1
 8001f4c:	d116      	bne.n	8001f7c <cmox_ECC_CompleteADD+0xae>
 8001f4e:	6828      	ldr	r0, [r5, #0]
 8001f50:	2100      	movs	r1, #0
 8001f52:	f002 fc05 	bl	8004760 <cmox_bn_cmpUint>
 8001f56:	2801      	cmp	r0, #1
 8001f58:	d10c      	bne.n	8001f74 <cmox_ECC_CompleteADD+0xa6>
 8001f5a:	4630      	mov	r0, r6
 8001f5c:	69b6      	ldr	r6, [r6, #24]
 8001f5e:	6877      	ldr	r7, [r6, #4]
 8001f60:	f8d7 c000 	ldr.w	ip, [r7]
 8001f64:	2301      	movs	r3, #1
 8001f66:	462a      	mov	r2, r5
 8001f68:	4621      	mov	r1, r4
 8001f6a:	47e0      	blx	ip
 8001f6c:	6920      	ldr	r0, [r4, #16]
 8001f6e:	0840      	lsrs	r0, r0, #1
 8001f70:	0040      	lsls	r0, r0, #1
 8001f72:	e002      	b.n	8001f7a <cmox_ECC_CompleteADD+0xac>
 8001f74:	6928      	ldr	r0, [r5, #16]
 8001f76:	f040 0001 	orr.w	r0, r0, #1
 8001f7a:	6128      	str	r0, [r5, #16]
 8001f7c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001f7e <cmox_ECC_CompleteDBL>:
 8001f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f80:	460e      	mov	r6, r1
 8001f82:	4605      	mov	r5, r0
 8001f84:	4614      	mov	r4, r2
 8001f86:	6930      	ldr	r0, [r6, #16]
 8001f88:	6120      	str	r0, [r4, #16]
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	7c30      	ldrb	r0, [r6, #16]
 8001f8e:	f000 0001 	and.w	r0, r0, #1
 8001f92:	f000 ff3c 	bl	8002e0e <cmox_mathUtils_neq>
 8001f96:	2801      	cmp	r0, #1
 8001f98:	d103      	bne.n	8001fa2 <cmox_ECC_CompleteDBL+0x24>
 8001f9a:	6920      	ldr	r0, [r4, #16]
 8001f9c:	f040 0001 	orr.w	r0, r0, #1
 8001fa0:	e00a      	b.n	8001fb8 <cmox_ECC_CompleteDBL+0x3a>
 8001fa2:	4628      	mov	r0, r5
 8001fa4:	69ad      	ldr	r5, [r5, #24]
 8001fa6:	4631      	mov	r1, r6
 8001fa8:	686e      	ldr	r6, [r5, #4]
 8001faa:	6837      	ldr	r7, [r6, #0]
 8001fac:	2301      	movs	r3, #1
 8001fae:	4622      	mov	r2, r4
 8001fb0:	47b8      	blx	r7
 8001fb2:	6920      	ldr	r0, [r4, #16]
 8001fb4:	0840      	lsrs	r0, r0, #1
 8001fb6:	0040      	lsls	r0, r0, #1
 8001fb8:	6120      	str	r0, [r4, #16]
 8001fba:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001fbc:	0101b004 	.word	0x0101b004
 8001fc0:	45011700 	.word	0x45011700

08001fc4 <cmox_ecdsa_keyGen>:
 8001fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fc8:	b08d      	sub	sp, #52	@ 0x34
 8001fca:	460c      	mov	r4, r1
 8001fcc:	2100      	movs	r1, #0
 8001fce:	9100      	str	r1, [sp, #0]
 8001fd0:	9102      	str	r1, [sp, #8]
 8001fd2:	2c00      	cmp	r4, #0
 8001fd4:	bf1c      	itt	ne
 8001fd6:	9203      	strne	r2, [sp, #12]
 8001fd8:	2a00      	cmpne	r2, #0
 8001fda:	469b      	mov	fp, r3
 8001fdc:	f44f 2ac0 	mov.w	sl, #393216	@ 0x60000
 8001fe0:	d00b      	beq.n	8001ffa <cmox_ecdsa_keyGen+0x36>
 8001fe2:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8001fe4:	2900      	cmp	r1, #0
 8001fe6:	bf1c      	itt	ne
 8001fe8:	9d18      	ldrne	r5, [sp, #96]	@ 0x60
 8001fea:	2d00      	cmpne	r5, #0
 8001fec:	d005      	beq.n	8001ffa <cmox_ecdsa_keyGen+0x36>
 8001fee:	9001      	str	r0, [sp, #4]
 8001ff0:	b118      	cbz	r0, 8001ffa <cmox_ecdsa_keyGen+0x36>
 8001ff2:	6941      	ldr	r1, [r0, #20]
 8001ff4:	4a56      	ldr	r2, [pc, #344]	@ (8002150 <cmox_ecdsa_keyGen+0x18c>)
 8001ff6:	4291      	cmp	r1, r2
 8001ff8:	d002      	beq.n	8002000 <cmox_ecdsa_keyGen+0x3c>
 8001ffa:	f8df a158 	ldr.w	sl, [pc, #344]	@ 8002154 <cmox_ecdsa_keyGen+0x190>
 8001ffe:	e0a2      	b.n	8002146 <cmox_ecdsa_keyGen+0x182>
 8002000:	6901      	ldr	r1, [r0, #16]
 8002002:	69c8      	ldr	r0, [r1, #28]
 8002004:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002006:	4208      	tst	r0, r1
 8002008:	bf08      	it	eq
 800200a:	f8df a14c 	ldreq.w	sl, [pc, #332]	@ 8002158 <cmox_ecdsa_keyGen+0x194>
 800200e:	d0f6      	beq.n	8001ffe <cmox_ecdsa_keyGen+0x3a>
 8002010:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8002014:	07c1      	lsls	r1, r0, #31
 8002016:	bf58      	it	pl
 8002018:	f8df a140 	ldrpl.w	sl, [pc, #320]	@ 800215c <cmox_ecdsa_keyGen+0x198>
 800201c:	d5ef      	bpl.n	8001ffe <cmox_ecdsa_keyGen+0x3a>
 800201e:	6820      	ldr	r0, [r4, #0]
 8002020:	6880      	ldr	r0, [r0, #8]
 8002022:	6801      	ldr	r1, [r0, #0]
 8002024:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8002028:	f000 fefd 	bl	8002e26 <cmox_mathUtils_bitLength>
 800202c:	4680      	mov	r8, r0
 800202e:	6820      	ldr	r0, [r4, #0]
 8002030:	6881      	ldr	r1, [r0, #8]
 8002032:	680a      	ldr	r2, [r1, #0]
 8002034:	6800      	ldr	r0, [r0, #0]
 8002036:	1e52      	subs	r2, r2, #1
 8002038:	eb08 1942 	add.w	r9, r8, r2, lsl #5
 800203c:	f002 fba6 	bl	800478c <cmox_bn_countBits>
 8002040:	1dc6      	adds	r6, r0, #7
 8002042:	f109 0707 	add.w	r7, r9, #7
 8002046:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8002048:	08f6      	lsrs	r6, r6, #3
 800204a:	08ff      	lsrs	r7, r7, #3
 800204c:	b100      	cbz	r0, 8002050 <cmox_ecdsa_keyGen+0x8c>
 800204e:	6007      	str	r7, [r0, #0]
 8002050:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8002052:	b108      	cbz	r0, 8002058 <cmox_ecdsa_keyGen+0x94>
 8002054:	0071      	lsls	r1, r6, #1
 8002056:	6001      	str	r1, [r0, #0]
 8002058:	4658      	mov	r0, fp
 800205a:	00c0      	lsls	r0, r0, #3
 800205c:	f8df b100 	ldr.w	fp, [pc, #256]	@ 8002160 <cmox_ecdsa_keyGen+0x19c>
 8002060:	4548      	cmp	r0, r9
 8002062:	bf38      	it	cc
 8002064:	46da      	movcc	sl, fp
 8002066:	d36e      	bcc.n	8002146 <cmox_ecdsa_keyGen+0x182>
 8002068:	9801      	ldr	r0, [sp, #4]
 800206a:	6903      	ldr	r3, [r0, #16]
 800206c:	4602      	mov	r2, r0
 800206e:	4621      	mov	r1, r4
 8002070:	a804      	add	r0, sp, #16
 8002072:	f7fe f905 	bl	8000280 <cmox_ECC_InitCurve>
 8002076:	a804      	add	r0, sp, #16
 8002078:	f7fe f910 	bl	800029c <cmox_ECC_InitCurveModDomainP>
 800207c:	4c39      	ldr	r4, [pc, #228]	@ (8002164 <cmox_ecdsa_keyGen+0x1a0>)
 800207e:	b108      	cbz	r0, 8002084 <cmox_ecdsa_keyGen+0xc0>
 8002080:	46a2      	mov	sl, r4
 8002082:	e060      	b.n	8002146 <cmox_ecdsa_keyGen+0x182>
 8002084:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8002086:	6801      	ldr	r1, [r0, #0]
 8002088:	688a      	ldr	r2, [r1, #8]
 800208a:	9801      	ldr	r0, [sp, #4]
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	4669      	mov	r1, sp
 8002090:	f002 faa2 	bl	80045d8 <cmox_bn_alloc>
 8002094:	b108      	cbz	r0, 800209a <cmox_ecdsa_keyGen+0xd6>
 8002096:	46a2      	mov	sl, r4
 8002098:	e052      	b.n	8002140 <cmox_ecdsa_keyGen+0x17c>
 800209a:	a902      	add	r1, sp, #8
 800209c:	a804      	add	r0, sp, #16
 800209e:	f7fe f910 	bl	80002c2 <cmox_ECC_AllocPoint>
 80020a2:	b108      	cbz	r0, 80020a8 <cmox_ecdsa_keyGen+0xe4>
 80020a4:	46a2      	mov	sl, r4
 80020a6:	e047      	b.n	8002138 <cmox_ecdsa_keyGen+0x174>
 80020a8:	9a00      	ldr	r2, [sp, #0]
 80020aa:	9803      	ldr	r0, [sp, #12]
 80020ac:	4639      	mov	r1, r7
 80020ae:	f002 fbf5 	bl	800489c <cmox_bn_fromU8BE>
 80020b2:	9a00      	ldr	r2, [sp, #0]
 80020b4:	f1c8 0820 	rsb	r8, r8, #32
 80020b8:	f008 0107 	and.w	r1, r8, #7
 80020bc:	4610      	mov	r0, r2
 80020be:	f000 fb86 	bl	80027ce <cmox_RightShiftBN>
 80020c2:	9a00      	ldr	r2, [sp, #0]
 80020c4:	2102      	movs	r1, #2
 80020c6:	4610      	mov	r0, r2
 80020c8:	f000 fcf0 	bl	8002aac <cmox_AddBN_Int>
 80020cc:	b938      	cbnz	r0, 80020de <cmox_ecdsa_keyGen+0x11a>
 80020ce:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80020d0:	6801      	ldr	r1, [r0, #0]
 80020d2:	9800      	ldr	r0, [sp, #0]
 80020d4:	6889      	ldr	r1, [r1, #8]
 80020d6:	f002 fb02 	bl	80046de <cmox_bn_cmp>
 80020da:	2801      	cmp	r0, #1
 80020dc:	db01      	blt.n	80020e2 <cmox_ecdsa_keyGen+0x11e>
 80020de:	46da      	mov	sl, fp
 80020e0:	e026      	b.n	8002130 <cmox_ecdsa_keyGen+0x16c>
 80020e2:	9a00      	ldr	r2, [sp, #0]
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	4610      	mov	r0, r2
 80020ea:	f000 fcdf 	bl	8002aac <cmox_AddBN_Int>
 80020ee:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80020f0:	9800      	ldr	r0, [sp, #0]
 80020f2:	463a      	mov	r2, r7
 80020f4:	f002 fc15 	bl	8004922 <cmox_bn_toU8BE>
 80020f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	9a02      	ldr	r2, [sp, #8]
 80020fe:	9900      	ldr	r1, [sp, #0]
 8002100:	f8d3 c000 	ldr.w	ip, [r3]
 8002104:	a804      	add	r0, sp, #16
 8002106:	47e0      	blx	ip
 8002108:	b920      	cbnz	r0, 8002114 <cmox_ecdsa_keyGen+0x150>
 800210a:	9902      	ldr	r1, [sp, #8]
 800210c:	a804      	add	r0, sp, #16
 800210e:	f7fe fb8b 	bl	8000828 <cmox_ECC_PointToAffine>
 8002112:	b108      	cbz	r0, 8002118 <cmox_ecdsa_keyGen+0x154>
 8002114:	46a2      	mov	sl, r4
 8002116:	e00b      	b.n	8002130 <cmox_ecdsa_keyGen+0x16c>
 8002118:	9802      	ldr	r0, [sp, #8]
 800211a:	6800      	ldr	r0, [r0, #0]
 800211c:	4632      	mov	r2, r6
 800211e:	4629      	mov	r1, r5
 8002120:	f002 fbff 	bl	8004922 <cmox_bn_toU8BE>
 8002124:	9802      	ldr	r0, [sp, #8]
 8002126:	6840      	ldr	r0, [r0, #4]
 8002128:	4632      	mov	r2, r6
 800212a:	19a9      	adds	r1, r5, r6
 800212c:	f002 fbf9 	bl	8004922 <cmox_bn_toU8BE>
 8002130:	a902      	add	r1, sp, #8
 8002132:	a804      	add	r0, sp, #16
 8002134:	f7fe f921 	bl	800037a <cmox_ECC_FreePoint>
 8002138:	9801      	ldr	r0, [sp, #4]
 800213a:	4669      	mov	r1, sp
 800213c:	f002 fa57 	bl	80045ee <cmox_bn_free>
 8002140:	a804      	add	r0, sp, #16
 8002142:	f7fe f8bb 	bl	80002bc <cmox_ECC_DeInitCurveModDomain>
 8002146:	4650      	mov	r0, sl
 8002148:	b00d      	add	sp, #52	@ 0x34
 800214a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800214e:	bf00      	nop
 8002150:	5e1caffe 	.word	0x5e1caffe
 8002154:	00060003 	.word	0x00060003
 8002158:	0006000e 	.word	0x0006000e
 800215c:	0006000f 	.word	0x0006000f
 8002160:	0006000b 	.word	0x0006000b
 8002164:	0006000c 	.word	0x0006000c

08002168 <cmox_ecdsa_sign>:
 8002168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800216c:	b08f      	sub	sp, #60	@ 0x3c
 800216e:	461c      	mov	r4, r3
 8002170:	2300      	movs	r3, #0
 8002172:	460e      	mov	r6, r1
 8002174:	9305      	str	r3, [sp, #20]
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	9302      	str	r3, [sp, #8]
 800217a:	f44f 28c0 	mov.w	r8, #393216	@ 0x60000
 800217e:	9303      	str	r3, [sp, #12]
 8002180:	b3be      	cbz	r6, 80021f2 <cmox_ecdsa_sign+0x8a>
 8002182:	9200      	str	r2, [sp, #0]
 8002184:	0011      	movs	r1, r2
 8002186:	bf1c      	itt	ne
 8002188:	9918      	ldrne	r1, [sp, #96]	@ 0x60
 800218a:	2900      	cmpne	r1, #0
 800218c:	d031      	beq.n	80021f2 <cmox_ecdsa_sign+0x8a>
 800218e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8002190:	2900      	cmp	r1, #0
 8002192:	bf1c      	itt	ne
 8002194:	f8dd 9070 	ldrne.w	r9, [sp, #112]	@ 0x70
 8002198:	f1b9 0f00 	cmpne.w	r9, #0
 800219c:	d029      	beq.n	80021f2 <cmox_ecdsa_sign+0x8a>
 800219e:	0005      	movs	r5, r0
 80021a0:	d027      	beq.n	80021f2 <cmox_ecdsa_sign+0x8a>
 80021a2:	6968      	ldr	r0, [r5, #20]
 80021a4:	4992      	ldr	r1, [pc, #584]	@ (80023f0 <cmox_ecdsa_sign+0x288>)
 80021a6:	4288      	cmp	r0, r1
 80021a8:	d123      	bne.n	80021f2 <cmox_ecdsa_sign+0x8a>
 80021aa:	6928      	ldr	r0, [r5, #16]
 80021ac:	69c1      	ldr	r1, [r0, #28]
 80021ae:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80021b0:	4201      	tst	r1, r0
 80021b2:	bf08      	it	eq
 80021b4:	f8df 823c 	ldreq.w	r8, [pc, #572]	@ 80023f4 <cmox_ecdsa_sign+0x28c>
 80021b8:	d01d      	beq.n	80021f6 <cmox_ecdsa_sign+0x8e>
 80021ba:	f896 0028 	ldrb.w	r0, [r6, #40]	@ 0x28
 80021be:	07c1      	lsls	r1, r0, #31
 80021c0:	bf58      	it	pl
 80021c2:	f8df 8234 	ldrpl.w	r8, [pc, #564]	@ 80023f8 <cmox_ecdsa_sign+0x290>
 80021c6:	d516      	bpl.n	80021f6 <cmox_ecdsa_sign+0x8e>
 80021c8:	6830      	ldr	r0, [r6, #0]
 80021ca:	6880      	ldr	r0, [r0, #8]
 80021cc:	6801      	ldr	r1, [r0, #0]
 80021ce:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 80021d2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80021d6:	f000 fe26 	bl	8002e26 <cmox_mathUtils_bitLength>
 80021da:	6831      	ldr	r1, [r6, #0]
 80021dc:	4683      	mov	fp, r0
 80021de:	6888      	ldr	r0, [r1, #8]
 80021e0:	6802      	ldr	r2, [r0, #0]
 80021e2:	1e51      	subs	r1, r2, #1
 80021e4:	eb0b 1341 	add.w	r3, fp, r1, lsl #5
 80021e8:	1ddf      	adds	r7, r3, #7
 80021ea:	08ff      	lsrs	r7, r7, #3
 80021ec:	45ba      	cmp	sl, r7
 80021ee:	9304      	str	r3, [sp, #16]
 80021f0:	d002      	beq.n	80021f8 <cmox_ecdsa_sign+0x90>
 80021f2:	f8df 8208 	ldr.w	r8, [pc, #520]	@ 80023fc <cmox_ecdsa_sign+0x294>
 80021f6:	e0f6      	b.n	80023e6 <cmox_ecdsa_sign+0x27e>
 80021f8:	4620      	mov	r0, r4
 80021fa:	00c0      	lsls	r0, r0, #3
 80021fc:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 80021fe:	4298      	cmp	r0, r3
 8002200:	d204      	bcs.n	800220c <cmox_ecdsa_sign+0xa4>
 8002202:	b104      	cbz	r4, 8002206 <cmox_ecdsa_sign+0x9e>
 8002204:	6027      	str	r7, [r4, #0]
 8002206:	f8df 81f8 	ldr.w	r8, [pc, #504]	@ 8002400 <cmox_ecdsa_sign+0x298>
 800220a:	e0ec      	b.n	80023e6 <cmox_ecdsa_sign+0x27e>
 800220c:	a905      	add	r1, sp, #20
 800220e:	4628      	mov	r0, r5
 8002210:	f002 f9e2 	bl	80045d8 <cmox_bn_alloc>
 8002214:	f8df a1ec 	ldr.w	sl, [pc, #492]	@ 8002404 <cmox_ecdsa_sign+0x29c>
 8002218:	b108      	cbz	r0, 800221e <cmox_ecdsa_sign+0xb6>
 800221a:	46d0      	mov	r8, sl
 800221c:	e0e3      	b.n	80023e6 <cmox_ecdsa_sign+0x27e>
 800221e:	6830      	ldr	r0, [r6, #0]
 8002220:	6881      	ldr	r1, [r0, #8]
 8002222:	680a      	ldr	r2, [r1, #0]
 8002224:	a901      	add	r1, sp, #4
 8002226:	4628      	mov	r0, r5
 8002228:	f002 f9d6 	bl	80045d8 <cmox_bn_alloc>
 800222c:	b108      	cbz	r0, 8002232 <cmox_ecdsa_sign+0xca>
 800222e:	46d0      	mov	r8, sl
 8002230:	e0d5      	b.n	80023de <cmox_ecdsa_sign+0x276>
 8002232:	6830      	ldr	r0, [r6, #0]
 8002234:	6881      	ldr	r1, [r0, #8]
 8002236:	680a      	ldr	r2, [r1, #0]
 8002238:	a902      	add	r1, sp, #8
 800223a:	4628      	mov	r0, r5
 800223c:	f002 f9cc 	bl	80045d8 <cmox_bn_alloc>
 8002240:	b108      	cbz	r0, 8002246 <cmox_ecdsa_sign+0xde>
 8002242:	46d0      	mov	r8, sl
 8002244:	e0c7      	b.n	80023d6 <cmox_ecdsa_sign+0x26e>
 8002246:	9a02      	ldr	r2, [sp, #8]
 8002248:	9800      	ldr	r0, [sp, #0]
 800224a:	4639      	mov	r1, r7
 800224c:	f002 fb26 	bl	800489c <cmox_bn_fromU8BE>
 8002250:	9a02      	ldr	r2, [sp, #8]
 8002252:	f1cb 0b20 	rsb	fp, fp, #32
 8002256:	f00b 0107 	and.w	r1, fp, #7
 800225a:	4610      	mov	r0, r2
 800225c:	f000 fab7 	bl	80027ce <cmox_RightShiftBN>
 8002260:	6830      	ldr	r0, [r6, #0]
 8002262:	9a01      	ldr	r2, [sp, #4]
 8002264:	6880      	ldr	r0, [r0, #8]
 8002266:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8002400 <cmox_ecdsa_sign+0x298>
 800226a:	f06f 0101 	mvn.w	r1, #1
 800226e:	f000 fc1d 	bl	8002aac <cmox_AddBN_Int>
 8002272:	9901      	ldr	r1, [sp, #4]
 8002274:	9802      	ldr	r0, [sp, #8]
 8002276:	f002 fa32 	bl	80046de <cmox_bn_cmp>
 800227a:	2801      	cmp	r0, #1
 800227c:	bfa8      	it	ge
 800227e:	46d8      	movge	r8, fp
 8002280:	da10      	bge.n	80022a4 <cmox_ecdsa_sign+0x13c>
 8002282:	9a02      	ldr	r2, [sp, #8]
 8002284:	2101      	movs	r1, #1
 8002286:	4610      	mov	r0, r2
 8002288:	f000 fc10 	bl	8002aac <cmox_AddBN_Int>
 800228c:	692b      	ldr	r3, [r5, #16]
 800228e:	462a      	mov	r2, r5
 8002290:	4631      	mov	r1, r6
 8002292:	a806      	add	r0, sp, #24
 8002294:	f7fd fff4 	bl	8000280 <cmox_ECC_InitCurve>
 8002298:	a903      	add	r1, sp, #12
 800229a:	a806      	add	r0, sp, #24
 800229c:	f7fe f811 	bl	80002c2 <cmox_ECC_AllocPoint>
 80022a0:	b108      	cbz	r0, 80022a6 <cmox_ecdsa_sign+0x13e>
 80022a2:	46d0      	mov	r8, sl
 80022a4:	e093      	b.n	80023ce <cmox_ecdsa_sign+0x266>
 80022a6:	a806      	add	r0, sp, #24
 80022a8:	f7fd fff8 	bl	800029c <cmox_ECC_InitCurveModDomainP>
 80022ac:	b108      	cbz	r0, 80022b2 <cmox_ecdsa_sign+0x14a>
 80022ae:	46d0      	mov	r8, sl
 80022b0:	e089      	b.n	80023c6 <cmox_ecdsa_sign+0x25e>
 80022b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80022b4:	691e      	ldr	r6, [r3, #16]
 80022b6:	9a03      	ldr	r2, [sp, #12]
 80022b8:	9902      	ldr	r1, [sp, #8]
 80022ba:	f8d6 c000 	ldr.w	ip, [r6]
 80022be:	a806      	add	r0, sp, #24
 80022c0:	47e0      	blx	ip
 80022c2:	b9b0      	cbnz	r0, 80022f2 <cmox_ecdsa_sign+0x18a>
 80022c4:	9903      	ldr	r1, [sp, #12]
 80022c6:	a806      	add	r0, sp, #24
 80022c8:	f7fe faae 	bl	8000828 <cmox_ECC_PointToAffine>
 80022cc:	b988      	cbnz	r0, 80022f2 <cmox_ecdsa_sign+0x18a>
 80022ce:	a806      	add	r0, sp, #24
 80022d0:	f7fd fff4 	bl	80002bc <cmox_ECC_DeInitCurveModDomain>
 80022d4:	a806      	add	r0, sp, #24
 80022d6:	f7fd ffe9 	bl	80002ac <cmox_ECC_InitCurveModDomainN>
 80022da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80022dc:	9802      	ldr	r0, [sp, #8]
 80022de:	a906      	add	r1, sp, #24
 80022e0:	f000 fcfb 	bl	8002cda <cmox_ModularBN_Enter>
 80022e4:	9b01      	ldr	r3, [sp, #4]
 80022e6:	9a05      	ldr	r2, [sp, #20]
 80022e8:	9902      	ldr	r1, [sp, #8]
 80022ea:	a806      	add	r0, sp, #24
 80022ec:	f7fd ff9a 	bl	8000224 <cmox_ECC_InvertModN>
 80022f0:	b108      	cbz	r0, 80022f6 <cmox_ecdsa_sign+0x18e>
 80022f2:	46d0      	mov	r8, sl
 80022f4:	e064      	b.n	80023c0 <cmox_ecdsa_sign+0x258>
 80022f6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80022f8:	6801      	ldr	r1, [r0, #0]
 80022fa:	9803      	ldr	r0, [sp, #12]
 80022fc:	6889      	ldr	r1, [r1, #8]
 80022fe:	9b02      	ldr	r3, [sp, #8]
 8002300:	6800      	ldr	r0, [r0, #0]
 8002302:	460a      	mov	r2, r1
 8002304:	f000 fb1f 	bl	8002946 <cmox_ModSubBN>
 8002308:	9802      	ldr	r0, [sp, #8]
 800230a:	2100      	movs	r1, #0
 800230c:	f002 fa28 	bl	8004760 <cmox_bn_cmpUint>
 8002310:	2801      	cmp	r0, #1
 8002312:	d04a      	beq.n	80023aa <cmox_ecdsa_sign+0x242>
 8002314:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 8002316:	9802      	ldr	r0, [sp, #8]
 8002318:	463a      	mov	r2, r7
 800231a:	4649      	mov	r1, r9
 800231c:	f002 fb01 	bl	8004922 <cmox_bn_toU8BE>
 8002320:	9a01      	ldr	r2, [sp, #4]
 8002322:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8002324:	4639      	mov	r1, r7
 8002326:	f002 fab9 	bl	800489c <cmox_bn_fromU8BE>
 800232a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800232c:	9802      	ldr	r0, [sp, #8]
 800232e:	a906      	add	r1, sp, #24
 8002330:	f000 fcd3 	bl	8002cda <cmox_ModularBN_Enter>
 8002334:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8002336:	9a02      	ldr	r2, [sp, #8]
 8002338:	9901      	ldr	r1, [sp, #4]
 800233a:	9000      	str	r0, [sp, #0]
 800233c:	ab06      	add	r3, sp, #24
 800233e:	4610      	mov	r0, r2
 8002340:	f000 fcf5 	bl	8002d2e <cmox_ModularBN_Mul>
 8002344:	9804      	ldr	r0, [sp, #16]
 8002346:	9a01      	ldr	r2, [sp, #4]
 8002348:	ebb0 0fc6 	cmp.w	r0, r6, lsl #3
 800234c:	d20b      	bcs.n	8002366 <cmox_ecdsa_sign+0x1fe>
 800234e:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8002350:	4639      	mov	r1, r7
 8002352:	f002 faa3 	bl	800489c <cmox_bn_fromU8BE>
 8002356:	9a01      	ldr	r2, [sp, #4]
 8002358:	9904      	ldr	r1, [sp, #16]
 800235a:	ebc1 01c7 	rsb	r1, r1, r7, lsl #3
 800235e:	4610      	mov	r0, r2
 8002360:	f000 fa35 	bl	80027ce <cmox_RightShiftBN>
 8002364:	e003      	b.n	800236e <cmox_ecdsa_sign+0x206>
 8002366:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8002368:	4631      	mov	r1, r6
 800236a:	f002 fa97 	bl	800489c <cmox_bn_fromU8BE>
 800236e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8002370:	6801      	ldr	r1, [r0, #0]
 8002372:	9b01      	ldr	r3, [sp, #4]
 8002374:	6889      	ldr	r1, [r1, #8]
 8002376:	460a      	mov	r2, r1
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fae4 	bl	8002946 <cmox_ModSubBN>
 800237e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8002380:	6801      	ldr	r1, [r0, #0]
 8002382:	688a      	ldr	r2, [r1, #8]
 8002384:	9b01      	ldr	r3, [sp, #4]
 8002386:	9902      	ldr	r1, [sp, #8]
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fa4b 	bl	8002824 <cmox_ModAddBN>
 800238e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8002390:	9a01      	ldr	r2, [sp, #4]
 8002392:	9000      	str	r0, [sp, #0]
 8002394:	ab06      	add	r3, sp, #24
 8002396:	9805      	ldr	r0, [sp, #20]
 8002398:	4611      	mov	r1, r2
 800239a:	f000 fcc8 	bl	8002d2e <cmox_ModularBN_Mul>
 800239e:	9801      	ldr	r0, [sp, #4]
 80023a0:	2100      	movs	r1, #0
 80023a2:	f002 f9dd 	bl	8004760 <cmox_bn_cmpUint>
 80023a6:	2801      	cmp	r0, #1
 80023a8:	d101      	bne.n	80023ae <cmox_ecdsa_sign+0x246>
 80023aa:	46d8      	mov	r8, fp
 80023ac:	e008      	b.n	80023c0 <cmox_ecdsa_sign+0x258>
 80023ae:	9801      	ldr	r0, [sp, #4]
 80023b0:	463a      	mov	r2, r7
 80023b2:	eb09 0107 	add.w	r1, r9, r7
 80023b6:	f002 fab4 	bl	8004922 <cmox_bn_toU8BE>
 80023ba:	b10c      	cbz	r4, 80023c0 <cmox_ecdsa_sign+0x258>
 80023bc:	007f      	lsls	r7, r7, #1
 80023be:	6027      	str	r7, [r4, #0]
 80023c0:	a806      	add	r0, sp, #24
 80023c2:	f7fd ff7b 	bl	80002bc <cmox_ECC_DeInitCurveModDomain>
 80023c6:	a903      	add	r1, sp, #12
 80023c8:	a806      	add	r0, sp, #24
 80023ca:	f7fd ffd6 	bl	800037a <cmox_ECC_FreePoint>
 80023ce:	a902      	add	r1, sp, #8
 80023d0:	4628      	mov	r0, r5
 80023d2:	f002 f90c 	bl	80045ee <cmox_bn_free>
 80023d6:	a901      	add	r1, sp, #4
 80023d8:	4628      	mov	r0, r5
 80023da:	f002 f908 	bl	80045ee <cmox_bn_free>
 80023de:	a905      	add	r1, sp, #20
 80023e0:	4628      	mov	r0, r5
 80023e2:	f002 f904 	bl	80045ee <cmox_bn_free>
 80023e6:	4640      	mov	r0, r8
 80023e8:	b00f      	add	sp, #60	@ 0x3c
 80023ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023ee:	bf00      	nop
 80023f0:	5e1caffe 	.word	0x5e1caffe
 80023f4:	0006000e 	.word	0x0006000e
 80023f8:	0006000f 	.word	0x0006000f
 80023fc:	00060003 	.word	0x00060003
 8002400:	0006000b 	.word	0x0006000b
 8002404:	0006000c 	.word	0x0006000c

08002408 <cmox_ecdsa_verify>:
 8002408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800240c:	b092      	sub	sp, #72	@ 0x48
 800240e:	2400      	movs	r4, #0
 8002410:	460d      	mov	r5, r1
 8002412:	9405      	str	r4, [sp, #20]
 8002414:	9404      	str	r4, [sp, #16]
 8002416:	9408      	str	r4, [sp, #32]
 8002418:	9407      	str	r4, [sp, #28]
 800241a:	9406      	str	r4, [sp, #24]
 800241c:	b3a5      	cbz	r5, 8002488 <cmox_ecdsa_verify+0x80>
 800241e:	0016      	movs	r6, r2
 8002420:	bf1f      	itttt	ne
 8002422:	9f1c      	ldrne	r7, [sp, #112]	@ 0x70
 8002424:	2f00      	cmpne	r7, #0
 8002426:	f8dd 8078 	ldrne.w	r8, [sp, #120]	@ 0x78
 800242a:	f1b8 0f00 	cmpne.w	r8, #0
 800242e:	d02b      	beq.n	8002488 <cmox_ecdsa_verify+0x80>
 8002430:	0004      	movs	r4, r0
 8002432:	d029      	beq.n	8002488 <cmox_ecdsa_verify+0x80>
 8002434:	6960      	ldr	r0, [r4, #20]
 8002436:	49a4      	ldr	r1, [pc, #656]	@ (80026c8 <cmox_ecdsa_verify+0x2c0>)
 8002438:	4288      	cmp	r0, r1
 800243a:	d125      	bne.n	8002488 <cmox_ecdsa_verify+0x80>
 800243c:	6920      	ldr	r0, [r4, #16]
 800243e:	69c1      	ldr	r1, [r0, #28]
 8002440:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002442:	4201      	tst	r1, r0
 8002444:	bf08      	it	eq
 8002446:	4ea1      	ldreq	r6, [pc, #644]	@ (80026cc <cmox_ecdsa_verify+0x2c4>)
 8002448:	d01f      	beq.n	800248a <cmox_ecdsa_verify+0x82>
 800244a:	f895 0028 	ldrb.w	r0, [r5, #40]	@ 0x28
 800244e:	07c1      	lsls	r1, r0, #31
 8002450:	bf58      	it	pl
 8002452:	4e9f      	ldrpl	r6, [pc, #636]	@ (80026d0 <cmox_ecdsa_verify+0x2c8>)
 8002454:	d57a      	bpl.n	800254c <cmox_ecdsa_verify+0x144>
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	6829      	ldr	r1, [r5, #0]
 800245a:	6888      	ldr	r0, [r1, #8]
 800245c:	f002 f996 	bl	800478c <cmox_bn_countBits>
 8002460:	4681      	mov	r9, r0
 8002462:	f109 0007 	add.w	r0, r9, #7
 8002466:	ea4f 0ad0 	mov.w	sl, r0, lsr #3
 800246a:	6828      	ldr	r0, [r5, #0]
 800246c:	6800      	ldr	r0, [r0, #0]
 800246e:	f002 f98d 	bl	800478c <cmox_bn_countBits>
 8002472:	1dc0      	adds	r0, r0, #7
 8002474:	ea4f 0bd0 	mov.w	fp, r0, lsr #3
 8002478:	9800      	ldr	r0, [sp, #0]
 800247a:	ebb0 0f4b 	cmp.w	r0, fp, lsl #1
 800247e:	bf04      	itt	eq
 8002480:	981f      	ldreq	r0, [sp, #124]	@ 0x7c
 8002482:	ebb0 0f4a 	cmpeq.w	r0, sl, lsl #1
 8002486:	d001      	beq.n	800248c <cmox_ecdsa_verify+0x84>
 8002488:	4e92      	ldr	r6, [pc, #584]	@ (80026d4 <cmox_ecdsa_verify+0x2cc>)
 800248a:	e05f      	b.n	800254c <cmox_ecdsa_verify+0x144>
 800248c:	6923      	ldr	r3, [r4, #16]
 800248e:	4622      	mov	r2, r4
 8002490:	4629      	mov	r1, r5
 8002492:	a809      	add	r0, sp, #36	@ 0x24
 8002494:	f7fd fef4 	bl	8000280 <cmox_ECC_InitCurve>
 8002498:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800249a:	4d8f      	ldr	r5, [pc, #572]	@ (80026d8 <cmox_ecdsa_verify+0x2d0>)
 800249c:	6801      	ldr	r1, [r0, #0]
 800249e:	688a      	ldr	r2, [r1, #8]
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	a905      	add	r1, sp, #20
 80024a4:	4620      	mov	r0, r4
 80024a6:	f002 f897 	bl	80045d8 <cmox_bn_alloc>
 80024aa:	b108      	cbz	r0, 80024b0 <cmox_ecdsa_verify+0xa8>
 80024ac:	462e      	mov	r6, r5
 80024ae:	e04d      	b.n	800254c <cmox_ecdsa_verify+0x144>
 80024b0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80024b2:	6801      	ldr	r1, [r0, #0]
 80024b4:	688a      	ldr	r2, [r1, #8]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	a904      	add	r1, sp, #16
 80024ba:	4620      	mov	r0, r4
 80024bc:	f002 f88c 	bl	80045d8 <cmox_bn_alloc>
 80024c0:	b108      	cbz	r0, 80024c6 <cmox_ecdsa_verify+0xbe>
 80024c2:	462e      	mov	r6, r5
 80024c4:	e03e      	b.n	8002544 <cmox_ecdsa_verify+0x13c>
 80024c6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80024c8:	6801      	ldr	r1, [r0, #0]
 80024ca:	688a      	ldr	r2, [r1, #8]
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	a908      	add	r1, sp, #32
 80024d0:	4620      	mov	r0, r4
 80024d2:	f002 f881 	bl	80045d8 <cmox_bn_alloc>
 80024d6:	2800      	cmp	r0, #0
 80024d8:	f040 8088 	bne.w	80025ec <cmox_ecdsa_verify+0x1e4>
 80024dc:	9a05      	ldr	r2, [sp, #20]
 80024de:	4651      	mov	r1, sl
 80024e0:	eb08 000a 	add.w	r0, r8, sl
 80024e4:	f002 f9da 	bl	800489c <cmox_bn_fromU8BE>
 80024e8:	9805      	ldr	r0, [sp, #20]
 80024ea:	2100      	movs	r1, #0
 80024ec:	f002 f938 	bl	8004760 <cmox_bn_cmpUint>
 80024f0:	2801      	cmp	r0, #1
 80024f2:	d007      	beq.n	8002504 <cmox_ecdsa_verify+0xfc>
 80024f4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80024f6:	6801      	ldr	r1, [r0, #0]
 80024f8:	9805      	ldr	r0, [sp, #20]
 80024fa:	6889      	ldr	r1, [r1, #8]
 80024fc:	f002 f8ef 	bl	80046de <cmox_bn_cmp>
 8002500:	2800      	cmp	r0, #0
 8002502:	d401      	bmi.n	8002508 <cmox_ecdsa_verify+0x100>
 8002504:	4e75      	ldr	r6, [pc, #468]	@ (80026dc <cmox_ecdsa_verify+0x2d4>)
 8002506:	e015      	b.n	8002534 <cmox_ecdsa_verify+0x12c>
 8002508:	a809      	add	r0, sp, #36	@ 0x24
 800250a:	f7fd fecf 	bl	80002ac <cmox_ECC_InitCurveModDomainN>
 800250e:	b108      	cbz	r0, 8002514 <cmox_ecdsa_verify+0x10c>
 8002510:	462e      	mov	r6, r5
 8002512:	e00f      	b.n	8002534 <cmox_ecdsa_verify+0x12c>
 8002514:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8002516:	9805      	ldr	r0, [sp, #20]
 8002518:	a909      	add	r1, sp, #36	@ 0x24
 800251a:	f000 fbde 	bl	8002cda <cmox_ModularBN_Enter>
 800251e:	9b04      	ldr	r3, [sp, #16]
 8002520:	9a08      	ldr	r2, [sp, #32]
 8002522:	9905      	ldr	r1, [sp, #20]
 8002524:	a809      	add	r0, sp, #36	@ 0x24
 8002526:	f7fd fe7d 	bl	8000224 <cmox_ECC_InvertModN>
 800252a:	b198      	cbz	r0, 8002554 <cmox_ecdsa_verify+0x14c>
 800252c:	462e      	mov	r6, r5
 800252e:	a809      	add	r0, sp, #36	@ 0x24
 8002530:	f7fd fec4 	bl	80002bc <cmox_ECC_DeInitCurveModDomain>
 8002534:	a908      	add	r1, sp, #32
 8002536:	4620      	mov	r0, r4
 8002538:	f002 f859 	bl	80045ee <cmox_bn_free>
 800253c:	a904      	add	r1, sp, #16
 800253e:	4620      	mov	r0, r4
 8002540:	f002 f855 	bl	80045ee <cmox_bn_free>
 8002544:	a905      	add	r1, sp, #20
 8002546:	4620      	mov	r0, r4
 8002548:	f002 f851 	bl	80045ee <cmox_bn_free>
 800254c:	4630      	mov	r0, r6
 800254e:	b013      	add	sp, #76	@ 0x4c
 8002550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002554:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8002556:	9a04      	ldr	r2, [sp, #16]
 8002558:	ebb9 0fc1 	cmp.w	r9, r1, lsl #3
 800255c:	d20b      	bcs.n	8002576 <cmox_ecdsa_verify+0x16e>
 800255e:	4651      	mov	r1, sl
 8002560:	4638      	mov	r0, r7
 8002562:	f002 f99b 	bl	800489c <cmox_bn_fromU8BE>
 8002566:	9a04      	ldr	r2, [sp, #16]
 8002568:	ebc9 09ca 	rsb	r9, r9, sl, lsl #3
 800256c:	4649      	mov	r1, r9
 800256e:	4610      	mov	r0, r2
 8002570:	f000 f92d 	bl	80027ce <cmox_RightShiftBN>
 8002574:	e002      	b.n	800257c <cmox_ecdsa_verify+0x174>
 8002576:	4638      	mov	r0, r7
 8002578:	f002 f990 	bl	800489c <cmox_bn_fromU8BE>
 800257c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800257e:	6801      	ldr	r1, [r0, #0]
 8002580:	9b04      	ldr	r3, [sp, #16]
 8002582:	6889      	ldr	r1, [r1, #8]
 8002584:	460a      	mov	r2, r1
 8002586:	4618      	mov	r0, r3
 8002588:	f000 f9dd 	bl	8002946 <cmox_ModSubBN>
 800258c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800258e:	9a04      	ldr	r2, [sp, #16]
 8002590:	9908      	ldr	r1, [sp, #32]
 8002592:	9000      	str	r0, [sp, #0]
 8002594:	ab09      	add	r3, sp, #36	@ 0x24
 8002596:	4610      	mov	r0, r2
 8002598:	f000 fbc9 	bl	8002d2e <cmox_ModularBN_Mul>
 800259c:	9a05      	ldr	r2, [sp, #20]
 800259e:	4651      	mov	r1, sl
 80025a0:	4640      	mov	r0, r8
 80025a2:	f002 f97b 	bl	800489c <cmox_bn_fromU8BE>
 80025a6:	9805      	ldr	r0, [sp, #20]
 80025a8:	2100      	movs	r1, #0
 80025aa:	f002 f8d9 	bl	8004760 <cmox_bn_cmpUint>
 80025ae:	2801      	cmp	r0, #1
 80025b0:	d007      	beq.n	80025c2 <cmox_ecdsa_verify+0x1ba>
 80025b2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80025b4:	6801      	ldr	r1, [r0, #0]
 80025b6:	9805      	ldr	r0, [sp, #20]
 80025b8:	6889      	ldr	r1, [r1, #8]
 80025ba:	f002 f890 	bl	80046de <cmox_bn_cmp>
 80025be:	2800      	cmp	r0, #0
 80025c0:	d401      	bmi.n	80025c6 <cmox_ecdsa_verify+0x1be>
 80025c2:	4e46      	ldr	r6, [pc, #280]	@ (80026dc <cmox_ecdsa_verify+0x2d4>)
 80025c4:	e7b3      	b.n	800252e <cmox_ecdsa_verify+0x126>
 80025c6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80025c8:	9a05      	ldr	r2, [sp, #20]
 80025ca:	9908      	ldr	r1, [sp, #32]
 80025cc:	9000      	str	r0, [sp, #0]
 80025ce:	ab09      	add	r3, sp, #36	@ 0x24
 80025d0:	4610      	mov	r0, r2
 80025d2:	f000 fbac 	bl	8002d2e <cmox_ModularBN_Mul>
 80025d6:	a809      	add	r0, sp, #36	@ 0x24
 80025d8:	f7fd fe70 	bl	80002bc <cmox_ECC_DeInitCurveModDomain>
 80025dc:	a908      	add	r1, sp, #32
 80025de:	4620      	mov	r0, r4
 80025e0:	f002 f805 	bl	80045ee <cmox_bn_free>
 80025e4:	a809      	add	r0, sp, #36	@ 0x24
 80025e6:	f7fd fe59 	bl	800029c <cmox_ECC_InitCurveModDomainP>
 80025ea:	b108      	cbz	r0, 80025f0 <cmox_ecdsa_verify+0x1e8>
 80025ec:	462e      	mov	r6, r5
 80025ee:	e7a5      	b.n	800253c <cmox_ecdsa_verify+0x134>
 80025f0:	a907      	add	r1, sp, #28
 80025f2:	a809      	add	r0, sp, #36	@ 0x24
 80025f4:	f7fd fe65 	bl	80002c2 <cmox_ECC_AllocPoint>
 80025f8:	b108      	cbz	r0, 80025fe <cmox_ecdsa_verify+0x1f6>
 80025fa:	462e      	mov	r6, r5
 80025fc:	e05f      	b.n	80026be <cmox_ecdsa_verify+0x2b6>
 80025fe:	a906      	add	r1, sp, #24
 8002600:	a809      	add	r0, sp, #36	@ 0x24
 8002602:	f7fd fe5e 	bl	80002c2 <cmox_ECC_AllocPoint>
 8002606:	b108      	cbz	r0, 800260c <cmox_ecdsa_verify+0x204>
 8002608:	462e      	mov	r6, r5
 800260a:	e054      	b.n	80026b6 <cmox_ecdsa_verify+0x2ae>
 800260c:	9806      	ldr	r0, [sp, #24]
 800260e:	6802      	ldr	r2, [r0, #0]
 8002610:	4659      	mov	r1, fp
 8002612:	4630      	mov	r0, r6
 8002614:	f002 f942 	bl	800489c <cmox_bn_fromU8BE>
 8002618:	9806      	ldr	r0, [sp, #24]
 800261a:	6842      	ldr	r2, [r0, #4]
 800261c:	4659      	mov	r1, fp
 800261e:	eb06 000b 	add.w	r0, r6, fp
 8002622:	f002 f93b 	bl	800489c <cmox_bn_fromU8BE>
 8002626:	9806      	ldr	r0, [sp, #24]
 8002628:	6880      	ldr	r0, [r0, #8]
 800262a:	2101      	movs	r1, #1
 800262c:	f002 f80b 	bl	8004646 <cmox_bn_init>
 8002630:	9806      	ldr	r0, [sp, #24]
 8002632:	6901      	ldr	r1, [r0, #16]
 8002634:	f041 0102 	orr.w	r1, r1, #2
 8002638:	6101      	str	r1, [r0, #16]
 800263a:	a809      	add	r0, sp, #36	@ 0x24
 800263c:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800263e:	9907      	ldr	r1, [sp, #28]
 8002640:	9b04      	ldr	r3, [sp, #16]
 8002642:	9a06      	ldr	r2, [sp, #24]
 8002644:	9100      	str	r1, [sp, #0]
 8002646:	6977      	ldr	r7, [r6, #20]
 8002648:	9905      	ldr	r1, [sp, #20]
 800264a:	f8d7 c000 	ldr.w	ip, [r7]
 800264e:	47e0      	blx	ip
 8002650:	b118      	cbz	r0, 800265a <cmox_ecdsa_verify+0x252>
 8002652:	2804      	cmp	r0, #4
 8002654:	d110      	bne.n	8002678 <cmox_ecdsa_verify+0x270>
 8002656:	4e22      	ldr	r6, [pc, #136]	@ (80026e0 <cmox_ecdsa_verify+0x2d8>)
 8002658:	e029      	b.n	80026ae <cmox_ecdsa_verify+0x2a6>
 800265a:	9807      	ldr	r0, [sp, #28]
 800265c:	4e21      	ldr	r6, [pc, #132]	@ (80026e4 <cmox_ecdsa_verify+0x2dc>)
 800265e:	7c00      	ldrb	r0, [r0, #16]
 8002660:	2100      	movs	r1, #0
 8002662:	f000 0001 	and.w	r0, r0, #1
 8002666:	f000 fbd2 	bl	8002e0e <cmox_mathUtils_neq>
 800266a:	2801      	cmp	r0, #1
 800266c:	d01f      	beq.n	80026ae <cmox_ecdsa_verify+0x2a6>
 800266e:	9907      	ldr	r1, [sp, #28]
 8002670:	a809      	add	r0, sp, #36	@ 0x24
 8002672:	f7fe f8d9 	bl	8000828 <cmox_ECC_PointToAffine>
 8002676:	b108      	cbz	r0, 800267c <cmox_ecdsa_verify+0x274>
 8002678:	462e      	mov	r6, r5
 800267a:	e018      	b.n	80026ae <cmox_ecdsa_verify+0x2a6>
 800267c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800267e:	6801      	ldr	r1, [r0, #0]
 8002680:	9807      	ldr	r0, [sp, #28]
 8002682:	6889      	ldr	r1, [r1, #8]
 8002684:	9b04      	ldr	r3, [sp, #16]
 8002686:	6800      	ldr	r0, [r0, #0]
 8002688:	460a      	mov	r2, r1
 800268a:	f000 f95c 	bl	8002946 <cmox_ModSubBN>
 800268e:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8002690:	4a15      	ldr	r2, [pc, #84]	@ (80026e8 <cmox_ecdsa_verify+0x2e0>)
 8002692:	4916      	ldr	r1, [pc, #88]	@ (80026ec <cmox_ecdsa_verify+0x2e4>)
 8002694:	6813      	ldr	r3, [r2, #0]
 8002696:	9003      	str	r0, [sp, #12]
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	9602      	str	r6, [sp, #8]
 800269c:	9101      	str	r1, [sp, #4]
 800269e:	4651      	mov	r1, sl
 80026a0:	9804      	ldr	r0, [sp, #16]
 80026a2:	6803      	ldr	r3, [r0, #0]
 80026a4:	1d02      	adds	r2, r0, #4
 80026a6:	4640      	mov	r0, r8
 80026a8:	f001 ff1e 	bl	80044e8 <cmox_utils_robustCmp>
 80026ac:	4606      	mov	r6, r0
 80026ae:	a906      	add	r1, sp, #24
 80026b0:	a809      	add	r0, sp, #36	@ 0x24
 80026b2:	f7fd fe62 	bl	800037a <cmox_ECC_FreePoint>
 80026b6:	a907      	add	r1, sp, #28
 80026b8:	a809      	add	r0, sp, #36	@ 0x24
 80026ba:	f7fd fe5e 	bl	800037a <cmox_ECC_FreePoint>
 80026be:	a809      	add	r0, sp, #36	@ 0x24
 80026c0:	f7fd fdfc 	bl	80002bc <cmox_ECC_DeInitCurveModDomain>
 80026c4:	e73a      	b.n	800253c <cmox_ecdsa_verify+0x134>
 80026c6:	bf00      	nop
 80026c8:	5e1caffe 	.word	0x5e1caffe
 80026cc:	0006000e 	.word	0x0006000e
 80026d0:	0006000f 	.word	0x0006000f
 80026d4:	00060003 	.word	0x00060003
 80026d8:	0006000c 	.word	0x0006000c
 80026dc:	00060009 	.word	0x00060009
 80026e0:	00060008 	.word	0x00060008
 80026e4:	00066e93 	.word	0x00066e93
 80026e8:	0800acec 	.word	0x0800acec
 80026ec:	0006c726 	.word	0x0006c726

080026f0 <cmox_hash_compute>:
 80026f0:	b538      	push	{r3, r4, r5, lr}
 80026f2:	460c      	mov	r4, r1
 80026f4:	4611      	mov	r1, r2
 80026f6:	2800      	cmp	r0, #0
 80026f8:	461a      	mov	r2, r3
 80026fa:	bf1c      	itt	ne
 80026fc:	6805      	ldrne	r5, [r0, #0]
 80026fe:	2d00      	cmpne	r5, #0
 8002700:	4b07      	ldr	r3, [pc, #28]	@ (8002720 <cmox_hash_compute+0x30>)
 8002702:	d00a      	beq.n	800271a <cmox_hash_compute+0x2a>
 8002704:	b14a      	cbz	r2, 800271a <cmox_hash_compute+0x2a>
 8002706:	b904      	cbnz	r4, 800270a <cmox_hash_compute+0x1a>
 8002708:	b939      	cbnz	r1, 800271a <cmox_hash_compute+0x2a>
 800270a:	9804      	ldr	r0, [sp, #16]
 800270c:	b128      	cbz	r0, 800271a <cmox_hash_compute+0x2a>
 800270e:	9b05      	ldr	r3, [sp, #20]
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	4603      	mov	r3, r0
 8002714:	4620      	mov	r0, r4
 8002716:	47a8      	blx	r5
 8002718:	4603      	mov	r3, r0
 800271a:	4618      	mov	r0, r3
 800271c:	bd32      	pop	{r1, r4, r5, pc}
 800271e:	bf00      	nop
 8002720:	00020003 	.word	0x00020003

08002724 <cmox_hash_common_compute>:
 8002724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002728:	4604      	mov	r4, r0
 800272a:	460e      	mov	r6, r1
 800272c:	6821      	ldr	r1, [r4, #0]
 800272e:	4617      	mov	r7, r2
 8002730:	684a      	ldr	r2, [r1, #4]
 8002732:	461d      	mov	r5, r3
 8002734:	4790      	blx	r2
 8002736:	4680      	mov	r8, r0
 8002738:	f5b8 3f00 	cmp.w	r8, #131072	@ 0x20000
 800273c:	d119      	bne.n	8002772 <cmox_hash_common_compute+0x4e>
 800273e:	6822      	ldr	r2, [r4, #0]
 8002740:	9906      	ldr	r1, [sp, #24]
 8002742:	6893      	ldr	r3, [r2, #8]
 8002744:	4620      	mov	r0, r4
 8002746:	4798      	blx	r3
 8002748:	4680      	mov	r8, r0
 800274a:	f5b8 3f00 	cmp.w	r8, #131072	@ 0x20000
 800274e:	d110      	bne.n	8002772 <cmox_hash_common_compute+0x4e>
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	4631      	mov	r1, r6
 8002754:	68de      	ldr	r6, [r3, #12]
 8002756:	463a      	mov	r2, r7
 8002758:	4620      	mov	r0, r4
 800275a:	47b0      	blx	r6
 800275c:	4680      	mov	r8, r0
 800275e:	f5b8 3f00 	cmp.w	r8, #131072	@ 0x20000
 8002762:	d106      	bne.n	8002772 <cmox_hash_common_compute+0x4e>
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	9a07      	ldr	r2, [sp, #28]
 8002768:	4629      	mov	r1, r5
 800276a:	691d      	ldr	r5, [r3, #16]
 800276c:	4620      	mov	r0, r4
 800276e:	47a8      	blx	r5
 8002770:	4680      	mov	r8, r0
 8002772:	6821      	ldr	r1, [r4, #0]
 8002774:	680a      	ldr	r2, [r1, #0]
 8002776:	4620      	mov	r0, r4
 8002778:	4790      	blx	r2
 800277a:	4640      	mov	r0, r8
 800277c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002780 <cmox_red_fake_copy_in_to_out>:
 8002780:	b510      	push	{r4, lr}
 8002782:	2200      	movs	r2, #0
 8002784:	e004      	b.n	8002790 <cmox_red_fake_copy_in_to_out+0x10>
 8002786:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 800278a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800278e:	1c52      	adds	r2, r2, #1
 8002790:	428a      	cmp	r2, r1
 8002792:	d3f8      	bcc.n	8002786 <cmox_red_fake_copy_in_to_out+0x6>
 8002794:	bd10      	pop	{r4, pc}

08002796 <basic_type_modinv>:
 8002796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002798:	4603      	mov	r3, r0
 800279a:	460e      	mov	r6, r1
 800279c:	2701      	movs	r7, #1
 800279e:	f04f 0c03 	mov.w	ip, #3
 80027a2:	2402      	movs	r4, #2
 80027a4:	221f      	movs	r2, #31
 80027a6:	2500      	movs	r5, #0
 80027a8:	fb07 f003 	mul.w	r0, r7, r3
 80027ac:	ea0c 0000 	and.w	r0, ip, r0
 80027b0:	2100      	movs	r1, #0
 80027b2:	1b00      	subs	r0, r0, r4
 80027b4:	41a9      	sbcs	r1, r5
 80027b6:	ea24 0101 	bic.w	r1, r4, r1
 80027ba:	19cf      	adds	r7, r1, r7
 80027bc:	0064      	lsls	r4, r4, #1
 80027be:	ea4f 004c 	mov.w	r0, ip, lsl #1
 80027c2:	1e52      	subs	r2, r2, #1
 80027c4:	f080 0c01 	eor.w	ip, r0, #1
 80027c8:	d1ee      	bne.n	80027a8 <basic_type_modinv+0x12>
 80027ca:	6037      	str	r7, [r6, #0]
 80027cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027ce <cmox_RightShiftBN>:
 80027ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d0:	2300      	movs	r3, #0
 80027d2:	2920      	cmp	r1, #32
 80027d4:	bf28      	it	cs
 80027d6:	2301      	movcs	r3, #1
 80027d8:	d222      	bcs.n	8002820 <cmox_RightShiftBN+0x52>
 80027da:	6814      	ldr	r4, [r2, #0]
 80027dc:	6805      	ldr	r5, [r0, #0]
 80027de:	42ac      	cmp	r4, r5
 80027e0:	bf38      	it	cc
 80027e2:	2303      	movcc	r3, #3
 80027e4:	d31c      	bcc.n	8002820 <cmox_RightShiftBN+0x52>
 80027e6:	2401      	movs	r4, #1
 80027e8:	e00a      	b.n	8002800 <cmox_RightShiftBN+0x32>
 80027ea:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 80027ee:	f1c1 0e20 	rsb	lr, r1, #32
 80027f2:	687f      	ldr	r7, [r7, #4]
 80027f4:	fa07 f70e 	lsl.w	r7, r7, lr
 80027f8:	433e      	orrs	r6, r7
 80027fa:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
 80027fe:	462c      	mov	r4, r5
 8002800:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8002804:	6807      	ldr	r7, [r0, #0]
 8002806:	40ce      	lsrs	r6, r1
 8002808:	1c65      	adds	r5, r4, #1
 800280a:	42bc      	cmp	r4, r7
 800280c:	d3ed      	bcc.n	80027ea <cmox_RightShiftBN+0x1c>
 800280e:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
 8002812:	e002      	b.n	800281a <cmox_RightShiftBN+0x4c>
 8002814:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8002818:	1c6d      	adds	r5, r5, #1
 800281a:	6810      	ldr	r0, [r2, #0]
 800281c:	42a8      	cmp	r0, r5
 800281e:	d2f9      	bcs.n	8002814 <cmox_RightShiftBN+0x46>
 8002820:	4618      	mov	r0, r3
 8002822:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002824 <cmox_ModAddBN>:
 8002824:	e92d 4eff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
 8002828:	4682      	mov	sl, r0
 800282a:	2000      	movs	r0, #0
 800282c:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8002830:	4617      	mov	r7, r2
 8002832:	469c      	mov	ip, r3
 8002834:	460e      	mov	r6, r1
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	f8dc 3000 	ldr.w	r3, [ip]
 800283c:	2100      	movs	r1, #0
 800283e:	4293      	cmp	r3, r2
 8002840:	bf21      	itttt	cs
 8002842:	f8da b000 	ldrcs.w	fp, [sl]
 8002846:	4593      	cmpcs	fp, r2
 8002848:	6835      	ldrcs	r5, [r6, #0]
 800284a:	4295      	cmpcs	r5, r2
 800284c:	d201      	bcs.n	8002852 <cmox_ModAddBN+0x2e>
 800284e:	2003      	movs	r0, #3
 8002850:	e076      	b.n	8002940 <cmox_ModAddBN+0x11c>
 8002852:	45ab      	cmp	fp, r5
 8002854:	d303      	bcc.n	800285e <cmox_ModAddBN+0x3a>
 8002856:	f8cd a004 	str.w	sl, [sp, #4]
 800285a:	9500      	str	r5, [sp, #0]
 800285c:	e003      	b.n	8002866 <cmox_ModAddBN+0x42>
 800285e:	f8cd b000 	str.w	fp, [sp]
 8002862:	9601      	str	r6, [sp, #4]
 8002864:	46ab      	mov	fp, r5
 8002866:	455b      	cmp	r3, fp
 8002868:	bf38      	it	cc
 800286a:	469b      	movcc	fp, r3
 800286c:	f04f 0e01 	mov.w	lr, #1
 8002870:	2500      	movs	r5, #0
 8002872:	e015      	b.n	80028a0 <cmox_ModAddBN+0x7c>
 8002874:	f85a 202e 	ldr.w	r2, [sl, lr, lsl #2]
 8002878:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 800287c:	1880      	adds	r0, r0, r2
 800287e:	eb41 0905 	adc.w	r9, r1, r5
 8002882:	1902      	adds	r2, r0, r4
 8002884:	eb49 0305 	adc.w	r3, r9, r5
 8002888:	f857 002e 	ldr.w	r0, [r7, lr, lsl #2]
 800288c:	2100      	movs	r1, #0
 800288e:	1a10      	subs	r0, r2, r0
 8002890:	f84c 002e 	str.w	r0, [ip, lr, lsl #2]
 8002894:	eb63 0101 	sbc.w	r1, r3, r1
 8002898:	4608      	mov	r0, r1
 800289a:	17c9      	asrs	r1, r1, #31
 800289c:	f10e 0e01 	add.w	lr, lr, #1
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	4572      	cmp	r2, lr
 80028a4:	d2e6      	bcs.n	8002874 <cmox_ModAddBN+0x50>
 80028a6:	9c00      	ldr	r4, [sp, #0]
 80028a8:	4574      	cmp	r4, lr
 80028aa:	d31c      	bcc.n	80028e6 <cmox_ModAddBN+0xc2>
 80028ac:	f85a 202e 	ldr.w	r2, [sl, lr, lsl #2]
 80028b0:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80028b4:	2300      	movs	r3, #0
 80028b6:	2500      	movs	r5, #0
 80028b8:	1914      	adds	r4, r2, r4
 80028ba:	415d      	adcs	r5, r3
 80028bc:	1900      	adds	r0, r0, r4
 80028be:	f84c 002e 	str.w	r0, [ip, lr, lsl #2]
 80028c2:	4169      	adcs	r1, r5
 80028c4:	4608      	mov	r0, r1
 80028c6:	17c9      	asrs	r1, r1, #31
 80028c8:	f10e 0e01 	add.w	lr, lr, #1
 80028cc:	e7eb      	b.n	80028a6 <cmox_ModAddBN+0x82>
 80028ce:	9c01      	ldr	r4, [sp, #4]
 80028d0:	f854 202e 	ldr.w	r2, [r4, lr, lsl #2]
 80028d4:	2300      	movs	r3, #0
 80028d6:	1880      	adds	r0, r0, r2
 80028d8:	f84c 002e 	str.w	r0, [ip, lr, lsl #2]
 80028dc:	4159      	adcs	r1, r3
 80028de:	4608      	mov	r0, r1
 80028e0:	17c9      	asrs	r1, r1, #31
 80028e2:	f10e 0e01 	add.w	lr, lr, #1
 80028e6:	45f3      	cmp	fp, lr
 80028e8:	d2f1      	bcs.n	80028ce <cmox_ModAddBN+0xaa>
 80028ea:	4686      	mov	lr, r0
 80028ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80028f0:	4666      	mov	r6, ip
 80028f2:	f04f 0c01 	mov.w	ip, #1
 80028f6:	2500      	movs	r5, #0
 80028f8:	e010      	b.n	800291c <cmox_ModAddBN+0xf8>
 80028fa:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
 80028fe:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8002902:	ea02 020e 	and.w	r2, r2, lr
 8002906:	2300      	movs	r3, #0
 8002908:	18a2      	adds	r2, r4, r2
 800290a:	416b      	adcs	r3, r5
 800290c:	1880      	adds	r0, r0, r2
 800290e:	f846 002c 	str.w	r0, [r6, ip, lsl #2]
 8002912:	4159      	adcs	r1, r3
 8002914:	4608      	mov	r0, r1
 8002916:	2100      	movs	r1, #0
 8002918:	f10c 0c01 	add.w	ip, ip, #1
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	4562      	cmp	r2, ip
 8002920:	d2eb      	bcs.n	80028fa <cmox_ModAddBN+0xd6>
 8002922:	6834      	ldr	r4, [r6, #0]
 8002924:	4564      	cmp	r4, ip
 8002926:	d30a      	bcc.n	800293e <cmox_ModAddBN+0x11a>
 8002928:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 800292c:	1880      	adds	r0, r0, r2
 800292e:	f846 002c 	str.w	r0, [r6, ip, lsl #2]
 8002932:	4169      	adcs	r1, r5
 8002934:	4608      	mov	r0, r1
 8002936:	2100      	movs	r1, #0
 8002938:	f10c 0c01 	add.w	ip, ip, #1
 800293c:	e7f1      	b.n	8002922 <cmox_ModAddBN+0xfe>
 800293e:	2000      	movs	r0, #0
 8002940:	b004      	add	sp, #16
 8002942:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

08002946 <cmox_ModSubBN>:
 8002946:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	468e      	mov	lr, r1
 800294e:	2100      	movs	r1, #0
 8002950:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002954:	9a04      	ldr	r2, [sp, #16]
 8002956:	681c      	ldr	r4, [r3, #0]
 8002958:	6815      	ldr	r5, [r2, #0]
 800295a:	4683      	mov	fp, r0
 800295c:	42ac      	cmp	r4, r5
 800295e:	bf38      	it	cc
 8002960:	2003      	movcc	r0, #3
 8002962:	d36c      	bcc.n	8002a3e <cmox_ModSubBN+0xf8>
 8002964:	f8de 5000 	ldr.w	r5, [lr]
 8002968:	f8db 9000 	ldr.w	r9, [fp]
 800296c:	45a9      	cmp	r9, r5
 800296e:	d306      	bcc.n	800297e <cmox_ModSubBN+0x38>
 8002970:	f8cd 9000 	str.w	r9, [sp]
 8002974:	f8cd b004 	str.w	fp, [sp, #4]
 8002978:	46a9      	mov	r9, r5
 800297a:	468c      	mov	ip, r1
 800297c:	e004      	b.n	8002988 <cmox_ModSubBN+0x42>
 800297e:	f8cd e004 	str.w	lr, [sp, #4]
 8002982:	9500      	str	r5, [sp, #0]
 8002984:	f04f 3cff 	mov.w	ip, #4294967295
 8002988:	9d00      	ldr	r5, [sp, #0]
 800298a:	42ac      	cmp	r4, r5
 800298c:	bf38      	it	cc
 800298e:	9400      	strcc	r4, [sp, #0]
 8002990:	4698      	mov	r8, r3
 8002992:	f04f 0a01 	mov.w	sl, #1
 8002996:	2200      	movs	r2, #0
 8002998:	2300      	movs	r3, #0
 800299a:	2500      	movs	r5, #0
 800299c:	e00f      	b.n	80029be <cmox_ModSubBN+0x78>
 800299e:	f85b 002a 	ldr.w	r0, [fp, sl, lsl #2]
 80029a2:	f85e 402a 	ldr.w	r4, [lr, sl, lsl #2]
 80029a6:	1816      	adds	r6, r2, r0
 80029a8:	eb43 0701 	adc.w	r7, r3, r1
 80029ac:	1b32      	subs	r2, r6, r4
 80029ae:	f848 202a 	str.w	r2, [r8, sl, lsl #2]
 80029b2:	eb67 0305 	sbc.w	r3, r7, r5
 80029b6:	461a      	mov	r2, r3
 80029b8:	17db      	asrs	r3, r3, #31
 80029ba:	f10a 0a01 	add.w	sl, sl, #1
 80029be:	45d1      	cmp	r9, sl
 80029c0:	d2ed      	bcs.n	800299e <cmox_ModSubBN+0x58>
 80029c2:	9800      	ldr	r0, [sp, #0]
 80029c4:	4550      	cmp	r0, sl
 80029c6:	d311      	bcc.n	80029ec <cmox_ModSubBN+0xa6>
 80029c8:	9e01      	ldr	r6, [sp, #4]
 80029ca:	f856 002a 	ldr.w	r0, [r6, sl, lsl #2]
 80029ce:	ea20 040c 	bic.w	r4, r0, ip
 80029d2:	1912      	adds	r2, r2, r4
 80029d4:	416b      	adcs	r3, r5
 80029d6:	ea00 000c 	and.w	r0, r0, ip
 80029da:	1a12      	subs	r2, r2, r0
 80029dc:	f848 202a 	str.w	r2, [r8, sl, lsl #2]
 80029e0:	418b      	sbcs	r3, r1
 80029e2:	461a      	mov	r2, r3
 80029e4:	17db      	asrs	r3, r3, #31
 80029e6:	f10a 0a01 	add.w	sl, sl, #1
 80029ea:	e7ea      	b.n	80029c2 <cmox_ModSubBN+0x7c>
 80029ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80029f0:	f8dd c010 	ldr.w	ip, [sp, #16]
 80029f4:	4616      	mov	r6, r2
 80029f6:	2701      	movs	r7, #1
 80029f8:	e00e      	b.n	8002a18 <cmox_ModSubBN+0xd2>
 80029fa:	f85c 2027 	ldr.w	r2, [ip, r7, lsl #2]
 80029fe:	f858 4027 	ldr.w	r4, [r8, r7, lsl #2]
 8002a02:	4032      	ands	r2, r6
 8002a04:	2300      	movs	r3, #0
 8002a06:	18a2      	adds	r2, r4, r2
 8002a08:	416b      	adcs	r3, r5
 8002a0a:	1880      	adds	r0, r0, r2
 8002a0c:	f848 0027 	str.w	r0, [r8, r7, lsl #2]
 8002a10:	4159      	adcs	r1, r3
 8002a12:	4608      	mov	r0, r1
 8002a14:	2100      	movs	r1, #0
 8002a16:	1c7f      	adds	r7, r7, #1
 8002a18:	f8dc 2000 	ldr.w	r2, [ip]
 8002a1c:	42ba      	cmp	r2, r7
 8002a1e:	d2ec      	bcs.n	80029fa <cmox_ModSubBN+0xb4>
 8002a20:	f8d8 4000 	ldr.w	r4, [r8]
 8002a24:	42bc      	cmp	r4, r7
 8002a26:	d309      	bcc.n	8002a3c <cmox_ModSubBN+0xf6>
 8002a28:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
 8002a2c:	1880      	adds	r0, r0, r2
 8002a2e:	f848 0027 	str.w	r0, [r8, r7, lsl #2]
 8002a32:	4169      	adcs	r1, r5
 8002a34:	4608      	mov	r0, r1
 8002a36:	2100      	movs	r1, #0
 8002a38:	1c7f      	adds	r7, r7, #1
 8002a3a:	e7f1      	b.n	8002a20 <cmox_ModSubBN+0xda>
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	b005      	add	sp, #20
 8002a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002a44 <cmox_SubBN>:
 8002a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a46:	6813      	ldr	r3, [r2, #0]
 8002a48:	6806      	ldr	r6, [r0, #0]
 8002a4a:	2400      	movs	r4, #0
 8002a4c:	2500      	movs	r5, #0
 8002a4e:	42b3      	cmp	r3, r6
 8002a50:	d201      	bcs.n	8002a56 <cmox_SubBN+0x12>
 8002a52:	2003      	movs	r0, #3
 8002a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a56:	468e      	mov	lr, r1
 8002a58:	f04f 0c01 	mov.w	ip, #1
 8002a5c:	4606      	mov	r6, r0
 8002a5e:	4617      	mov	r7, r2
 8002a60:	2100      	movs	r1, #0
 8002a62:	e00f      	b.n	8002a84 <cmox_SubBN+0x40>
 8002a64:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 8002a68:	f85e 002c 	ldr.w	r0, [lr, ip, lsl #2]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	18a2      	adds	r2, r4, r2
 8002a70:	416b      	adcs	r3, r5
 8002a72:	1a14      	subs	r4, r2, r0
 8002a74:	f847 402c 	str.w	r4, [r7, ip, lsl #2]
 8002a78:	eb63 0501 	sbc.w	r5, r3, r1
 8002a7c:	462c      	mov	r4, r5
 8002a7e:	17ed      	asrs	r5, r5, #31
 8002a80:	f10c 0c01 	add.w	ip, ip, #1
 8002a84:	f8de 0000 	ldr.w	r0, [lr]
 8002a88:	4560      	cmp	r0, ip
 8002a8a:	d2eb      	bcs.n	8002a64 <cmox_SubBN+0x20>
 8002a8c:	6832      	ldr	r2, [r6, #0]
 8002a8e:	4562      	cmp	r2, ip
 8002a90:	d30a      	bcc.n	8002aa8 <cmox_SubBN+0x64>
 8002a92:	f856 002c 	ldr.w	r0, [r6, ip, lsl #2]
 8002a96:	1824      	adds	r4, r4, r0
 8002a98:	f847 402c 	str.w	r4, [r7, ip, lsl #2]
 8002a9c:	414d      	adcs	r5, r1
 8002a9e:	462c      	mov	r4, r5
 8002aa0:	17ed      	asrs	r5, r5, #31
 8002aa2:	f10c 0c01 	add.w	ip, ip, #1
 8002aa6:	e7f1      	b.n	8002a8c <cmox_SubBN+0x48>
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002aac <cmox_AddBN_Int>:
 8002aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aae:	4604      	mov	r4, r0
 8002ab0:	4615      	mov	r5, r2
 8002ab2:	6866      	ldr	r6, [r4, #4]
 8002ab4:	2700      	movs	r7, #0
 8002ab6:	1872      	adds	r2, r6, r1
 8002ab8:	606a      	str	r2, [r5, #4]
 8002aba:	eb47 73e1 	adc.w	r3, r7, r1, asr #31
 8002abe:	461a      	mov	r2, r3
 8002ac0:	17db      	asrs	r3, r3, #31
 8002ac2:	2602      	movs	r6, #2
 8002ac4:	e008      	b.n	8002ad8 <cmox_AddBN_Int+0x2c>
 8002ac6:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8002aca:	1812      	adds	r2, r2, r0
 8002acc:	f845 2026 	str.w	r2, [r5, r6, lsl #2]
 8002ad0:	417b      	adcs	r3, r7
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	17db      	asrs	r3, r3, #31
 8002ad6:	1c76      	adds	r6, r6, #1
 8002ad8:	6820      	ldr	r0, [r4, #0]
 8002ada:	42b0      	cmp	r0, r6
 8002adc:	d2f3      	bcs.n	8002ac6 <cmox_AddBN_Int+0x1a>
 8002ade:	4610      	mov	r0, r2
 8002ae0:	4252      	negs	r2, r2
 8002ae2:	ea22 0000 	bic.w	r0, r2, r0
 8002ae6:	0fc0      	lsrs	r0, r0, #31
 8002ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002aea <cmox_FieldBN_Div2>:
 8002aea:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8002aee:	4615      	mov	r5, r2
 8002af0:	6842      	ldr	r2, [r0, #4]
 8002af2:	468e      	mov	lr, r1
 8002af4:	f002 0601 	and.w	r6, r2, #1
 8002af8:	6801      	ldr	r1, [r0, #0]
 8002afa:	f8de 3000 	ldr.w	r3, [lr]
 8002afe:	4276      	negs	r6, r6
 8002b00:	4299      	cmp	r1, r3
 8002b02:	d102      	bne.n	8002b0a <cmox_FieldBN_Div2+0x20>
 8002b04:	682c      	ldr	r4, [r5, #0]
 8002b06:	428c      	cmp	r4, r1
 8002b08:	d201      	bcs.n	8002b0e <cmox_FieldBN_Div2+0x24>
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	e03d      	b.n	8002b8a <cmox_FieldBN_Div2+0xa0>
 8002b0e:	f8de 7004 	ldr.w	r7, [lr, #4]
 8002b12:	2300      	movs	r3, #0
 8002b14:	4037      	ands	r7, r6
 8002b16:	2400      	movs	r4, #0
 8002b18:	19d2      	adds	r2, r2, r7
 8002b1a:	4163      	adcs	r3, r4
 8002b1c:	4604      	mov	r4, r0
 8002b1e:	606a      	str	r2, [r5, #4]
 8002b20:	2100      	movs	r1, #0
 8002b22:	f04f 0802 	mov.w	r8, #2
 8002b26:	4618      	mov	r0, r3
 8002b28:	e018      	b.n	8002b5c <cmox_FieldBN_Div2+0x72>
 8002b2a:	4607      	mov	r7, r0
 8002b2c:	f85e 0028 	ldr.w	r0, [lr, r8, lsl #2]
 8002b30:	f854 2028 	ldr.w	r2, [r4, r8, lsl #2]
 8002b34:	2300      	movs	r3, #0
 8002b36:	4030      	ands	r0, r6
 8002b38:	1810      	adds	r0, r2, r0
 8002b3a:	4159      	adcs	r1, r3
 8002b3c:	1838      	adds	r0, r7, r0
 8002b3e:	f845 0028 	str.w	r0, [r5, r8, lsl #2]
 8002b42:	4159      	adcs	r1, r3
 8002b44:	f855 3028 	ldr.w	r3, [r5, r8, lsl #2]
 8002b48:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 8002b4c:	07db      	lsls	r3, r3, #31
 8002b4e:	4608      	mov	r0, r1
 8002b50:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8002b54:	2100      	movs	r1, #0
 8002b56:	f84c 3c04 	str.w	r3, [ip, #-4]
 8002b5a:	46d0      	mov	r8, sl
 8002b5c:	6822      	ldr	r2, [r4, #0]
 8002b5e:	4542      	cmp	r2, r8
 8002b60:	eb05 0c88 	add.w	ip, r5, r8, lsl #2
 8002b64:	f108 0a01 	add.w	sl, r8, #1
 8002b68:	d2df      	bcs.n	8002b2a <cmox_FieldBN_Div2+0x40>
 8002b6a:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8002b6e:	07c0      	lsls	r0, r0, #31
 8002b70:	ea40 0053 	orr.w	r0, r0, r3, lsr #1
 8002b74:	f84c 0c04 	str.w	r0, [ip, #-4]
 8002b78:	e003      	b.n	8002b82 <cmox_FieldBN_Div2+0x98>
 8002b7a:	f845 102a 	str.w	r1, [r5, sl, lsl #2]
 8002b7e:	f10a 0a01 	add.w	sl, sl, #1
 8002b82:	6828      	ldr	r0, [r5, #0]
 8002b84:	4550      	cmp	r0, sl
 8002b86:	d2f8      	bcs.n	8002b7a <cmox_FieldBN_Div2+0x90>
 8002b88:	2000      	movs	r0, #0
 8002b8a:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}

08002b8e <cmox_FieldBN_Mul2>:
 8002b8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b92:	4690      	mov	r8, r2
 8002b94:	6802      	ldr	r2, [r0, #0]
 8002b96:	680b      	ldr	r3, [r1, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d103      	bne.n	8002ba4 <cmox_FieldBN_Mul2+0x16>
 8002b9c:	f8d8 4000 	ldr.w	r4, [r8]
 8002ba0:	4294      	cmp	r4, r2
 8002ba2:	d201      	bcs.n	8002ba8 <cmox_FieldBN_Mul2+0x1a>
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	e04f      	b.n	8002c48 <cmox_FieldBN_Mul2+0xba>
 8002ba8:	6844      	ldr	r4, [r0, #4]
 8002baa:	684a      	ldr	r2, [r1, #4]
 8002bac:	0064      	lsls	r4, r4, #1
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f04f 0900 	mov.w	r9, #0
 8002bb4:	1aa2      	subs	r2, r4, r2
 8002bb6:	eb69 0303 	sbc.w	r3, r9, r3
 8002bba:	4615      	mov	r5, r2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	17db      	asrs	r3, r3, #31
 8002bc0:	2702      	movs	r7, #2
 8002bc2:	4684      	mov	ip, r0
 8002bc4:	468e      	mov	lr, r1
 8002bc6:	e018      	b.n	8002bfa <cmox_FieldBN_Mul2+0x6c>
 8002bc8:	eb0c 0487 	add.w	r4, ip, r7, lsl #2
 8002bcc:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8002bd0:	f85c 1027 	ldr.w	r1, [ip, r7, lsl #2]
 8002bd4:	f85e 4027 	ldr.w	r4, [lr, r7, lsl #2]
 8002bd8:	0fc0      	lsrs	r0, r0, #31
 8002bda:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
 8002bde:	1816      	adds	r6, r2, r0
 8002be0:	eb08 0087 	add.w	r0, r8, r7, lsl #2
 8002be4:	eb43 0a09 	adc.w	sl, r3, r9
 8002be8:	f840 5c04 	str.w	r5, [r0, #-4]
 8002bec:	1b32      	subs	r2, r6, r4
 8002bee:	eb6a 0309 	sbc.w	r3, sl, r9
 8002bf2:	4615      	mov	r5, r2
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	17db      	asrs	r3, r3, #31
 8002bf8:	1c7f      	adds	r7, r7, #1
 8002bfa:	f8dc 0000 	ldr.w	r0, [ip]
 8002bfe:	42b8      	cmp	r0, r7
 8002c00:	d2e2      	bcs.n	8002bc8 <cmox_FieldBN_Mul2+0x3a>
 8002c02:	4646      	mov	r6, r8
 8002c04:	4664      	mov	r4, ip
 8002c06:	46c8      	mov	r8, r9
 8002c08:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8002c0c:	f846 5020 	str.w	r5, [r6, r0, lsl #2]
 8002c10:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8002c14:	2500      	movs	r5, #0
 8002c16:	f04f 0c01 	mov.w	ip, #1
 8002c1a:	e011      	b.n	8002c40 <cmox_FieldBN_Mul2+0xb2>
 8002c1c:	f85e 002c 	ldr.w	r0, [lr, ip, lsl #2]
 8002c20:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 8002c24:	4018      	ands	r0, r3
 8002c26:	2100      	movs	r1, #0
 8002c28:	1810      	adds	r0, r2, r0
 8002c2a:	eb49 0101 	adc.w	r1, r9, r1
 8002c2e:	eb18 0000 	adds.w	r0, r8, r0
 8002c32:	414d      	adcs	r5, r1
 8002c34:	f846 002c 	str.w	r0, [r6, ip, lsl #2]
 8002c38:	46a8      	mov	r8, r5
 8002c3a:	17ed      	asrs	r5, r5, #31
 8002c3c:	f10c 0c01 	add.w	ip, ip, #1
 8002c40:	6820      	ldr	r0, [r4, #0]
 8002c42:	4560      	cmp	r0, ip
 8002c44:	d2ea      	bcs.n	8002c1c <cmox_FieldBN_Mul2+0x8e>
 8002c46:	2000      	movs	r0, #0
 8002c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002c4c <cmox_FieldBN_CondNegate>:
 8002c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c50:	2400      	movs	r4, #0
 8002c52:	2500      	movs	r5, #0
 8002c54:	2900      	cmp	r1, #0
 8002c56:	bf18      	it	ne
 8002c58:	2a00      	cmpne	r2, #0
 8002c5a:	d003      	beq.n	8002c64 <cmox_FieldBN_CondNegate+0x18>
 8002c5c:	680b      	ldr	r3, [r1, #0]
 8002c5e:	6816      	ldr	r6, [r2, #0]
 8002c60:	42b3      	cmp	r3, r6
 8002c62:	d201      	bcs.n	8002c68 <cmox_FieldBN_CondNegate+0x1c>
 8002c64:	2001      	movs	r0, #1
 8002c66:	e01d      	b.n	8002ca4 <cmox_FieldBN_CondNegate+0x58>
 8002c68:	2701      	movs	r7, #1
 8002c6a:	4681      	mov	r9, r0
 8002c6c:	460e      	mov	r6, r1
 8002c6e:	4690      	mov	r8, r2
 8002c70:	e013      	b.n	8002c9a <cmox_FieldBN_CondNegate+0x4e>
 8002c72:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
 8002c76:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	1820      	adds	r0, r4, r0
 8002c7e:	4169      	adcs	r1, r5
 8002c80:	2300      	movs	r3, #0
 8002c82:	1a84      	subs	r4, r0, r2
 8002c84:	eb61 0503 	sbc.w	r5, r1, r3
 8002c88:	4621      	mov	r1, r4
 8002c8a:	4648      	mov	r0, r9
 8002c8c:	f000 f8b7 	bl	8002dfe <cmox_mathUtils_mux>
 8002c90:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
 8002c94:	462c      	mov	r4, r5
 8002c96:	17ed      	asrs	r5, r5, #31
 8002c98:	1c7f      	adds	r7, r7, #1
 8002c9a:	f8d8 0000 	ldr.w	r0, [r8]
 8002c9e:	42b8      	cmp	r0, r7
 8002ca0:	d2e7      	bcs.n	8002c72 <cmox_FieldBN_CondNegate+0x26>
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08002ca8 <cmox_ModularBN_InitWithR2>:
 8002ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002caa:	4617      	mov	r7, r2
 8002cac:	4605      	mov	r5, r0
 8002cae:	460e      	mov	r6, r1
 8002cb0:	682a      	ldr	r2, [r5, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	0052      	lsls	r2, r2, #1
 8002cb6:	f107 0108 	add.w	r1, r7, #8
 8002cba:	f001 fc8d 	bl	80045d8 <cmox_bn_alloc>
 8002cbe:	0004      	movs	r4, r0
 8002cc0:	d109      	bne.n	8002cd6 <cmox_ModularBN_InitWithR2+0x2e>
 8002cc2:	607e      	str	r6, [r7, #4]
 8002cc4:	603d      	str	r5, [r7, #0]
 8002cc6:	f107 010c 	add.w	r1, r7, #12
 8002cca:	6868      	ldr	r0, [r5, #4]
 8002ccc:	f7ff fd63 	bl	8002796 <basic_type_modinv>
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	4240      	negs	r0, r0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08002cda <cmox_ModularBN_Enter>:
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	460b      	mov	r3, r1
 8002cde:	9200      	str	r2, [sp, #0]
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	6859      	ldr	r1, [r3, #4]
 8002ce4:	f000 f823 	bl	8002d2e <cmox_ModularBN_Mul>
 8002ce8:	bd02      	pop	{r1, pc}

08002cea <cmox_ModularBN_Exit>:
 8002cea:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8002cee:	461f      	mov	r7, r3
 8002cf0:	4605      	mov	r5, r0
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	4690      	mov	r8, r2
 8002cf6:	9301      	str	r3, [sp, #4]
 8002cf8:	460e      	mov	r6, r1
 8002cfa:	682a      	ldr	r2, [r5, #0]
 8002cfc:	a901      	add	r1, sp, #4
 8002cfe:	4640      	mov	r0, r8
 8002d00:	f001 fc6a 	bl	80045d8 <cmox_bn_alloc>
 8002d04:	0004      	movs	r4, r0
 8002d06:	d10f      	bne.n	8002d28 <cmox_ModularBN_Exit+0x3e>
 8002d08:	9801      	ldr	r0, [sp, #4]
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	f001 fc9b 	bl	8004646 <cmox_bn_init>
 8002d10:	9700      	str	r7, [sp, #0]
 8002d12:	4633      	mov	r3, r6
 8002d14:	9901      	ldr	r1, [sp, #4]
 8002d16:	462a      	mov	r2, r5
 8002d18:	4628      	mov	r0, r5
 8002d1a:	f000 f808 	bl	8002d2e <cmox_ModularBN_Mul>
 8002d1e:	4604      	mov	r4, r0
 8002d20:	a901      	add	r1, sp, #4
 8002d22:	4640      	mov	r0, r8
 8002d24:	f001 fc63 	bl	80045ee <cmox_bn_free>
 8002d28:	4620      	mov	r0, r4
 8002d2a:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

08002d2e <cmox_ModularBN_Mul>:
 8002d2e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8002d30:	461d      	mov	r5, r3
 8002d32:	4614      	mov	r4, r2
 8002d34:	682a      	ldr	r2, [r5, #0]
 8002d36:	6823      	ldr	r3, [r4, #0]
 8002d38:	6816      	ldr	r6, [r2, #0]
 8002d3a:	42b3      	cmp	r3, r6
 8002d3c:	d201      	bcs.n	8002d42 <cmox_ModularBN_Mul+0x14>
 8002d3e:	2003      	movs	r0, #3
 8002d40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d42:	68eb      	ldr	r3, [r5, #12]
 8002d44:	9f08      	ldr	r7, [sp, #32]
 8002d46:	9301      	str	r3, [sp, #4]
 8002d48:	1d12      	adds	r2, r2, #4
 8002d4a:	9200      	str	r2, [sp, #0]
 8002d4c:	1d09      	adds	r1, r1, #4
 8002d4e:	68aa      	ldr	r2, [r5, #8]
 8002d50:	f8d7 c000 	ldr.w	ip, [r7]
 8002d54:	1d13      	adds	r3, r2, #4
 8002d56:	4632      	mov	r2, r6
 8002d58:	1d00      	adds	r0, r0, #4
 8002d5a:	47e0      	blx	ip
 8002d5c:	68e8      	ldr	r0, [r5, #12]
 8002d5e:	9000      	str	r0, [sp, #0]
 8002d60:	1d23      	adds	r3, r4, #4
 8002d62:	6829      	ldr	r1, [r5, #0]
 8002d64:	68a8      	ldr	r0, [r5, #8]
 8002d66:	687c      	ldr	r4, [r7, #4]
 8002d68:	1d0a      	adds	r2, r1, #4
 8002d6a:	4631      	mov	r1, r6
 8002d6c:	1d00      	adds	r0, r0, #4
 8002d6e:	47a0      	blx	r4
 8002d70:	2000      	movs	r0, #0
 8002d72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08002d74 <cmox_ModularBN_Sqr>:
 8002d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d76:	4615      	mov	r5, r2
 8002d78:	460c      	mov	r4, r1
 8002d7a:	6829      	ldr	r1, [r5, #0]
 8002d7c:	6822      	ldr	r2, [r4, #0]
 8002d7e:	680e      	ldr	r6, [r1, #0]
 8002d80:	42b2      	cmp	r2, r6
 8002d82:	461f      	mov	r7, r3
 8002d84:	d201      	bcs.n	8002d8a <cmox_ModularBN_Sqr+0x16>
 8002d86:	2003      	movs	r0, #3
 8002d88:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8002d8a:	68ea      	ldr	r2, [r5, #12]
 8002d8c:	9200      	str	r2, [sp, #0]
 8002d8e:	1d0b      	adds	r3, r1, #4
 8002d90:	68a9      	ldr	r1, [r5, #8]
 8002d92:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8002d96:	1d0a      	adds	r2, r1, #4
 8002d98:	4631      	mov	r1, r6
 8002d9a:	1d00      	adds	r0, r0, #4
 8002d9c:	47e0      	blx	ip
 8002d9e:	68e8      	ldr	r0, [r5, #12]
 8002da0:	9000      	str	r0, [sp, #0]
 8002da2:	1d23      	adds	r3, r4, #4
 8002da4:	6829      	ldr	r1, [r5, #0]
 8002da6:	68a8      	ldr	r0, [r5, #8]
 8002da8:	68fc      	ldr	r4, [r7, #12]
 8002daa:	1d0a      	adds	r2, r1, #4
 8002dac:	4631      	mov	r1, r6
 8002dae:	1d00      	adds	r0, r0, #4
 8002db0:	47a0      	blx	r4
 8002db2:	2000      	movs	r0, #0
 8002db4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08002db6 <cmox_ModularBN_DeinitWithR2>:
 8002db6:	460a      	mov	r2, r1
 8002db8:	2100      	movs	r1, #0
 8002dba:	6001      	str	r1, [r0, #0]
 8002dbc:	60c1      	str	r1, [r0, #12]
 8002dbe:	6881      	ldr	r1, [r0, #8]
 8002dc0:	b121      	cbz	r1, 8002dcc <cmox_ModularBN_DeinitWithR2+0x16>
 8002dc2:	f100 0108 	add.w	r1, r0, #8
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f001 bc11 	b.w	80045ee <cmox_bn_free>
 8002dcc:	4770      	bx	lr

08002dce <cmox_asm_montymul_fast256__sqr>:
 8002dce:	b510      	push	{r4, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	9c04      	ldr	r4, [sp, #16]
 8002dd8:	9401      	str	r4, [sp, #4]
 8002dda:	460a      	mov	r2, r1
 8002ddc:	4601      	mov	r1, r0
 8002dde:	f001 fe27 	bl	8004a30 <cmox_asm_montymul_fast256>
 8002de2:	b002      	add	sp, #8
 8002de4:	bd10      	pop	{r4, pc}

08002de6 <cmox_asm_montymul_x128__sqr>:
 8002de6:	b510      	push	{r4, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	9c04      	ldr	r4, [sp, #16]
 8002df0:	9401      	str	r4, [sp, #4]
 8002df2:	460a      	mov	r2, r1
 8002df4:	4601      	mov	r1, r0
 8002df6:	f002 f9a0 	bl	800513a <cmox_asm_montymul_x128>
 8002dfa:	b002      	add	sp, #8
 8002dfc:	bd10      	pop	{r4, pc}

08002dfe <cmox_mathUtils_mux>:
 8002dfe:	4240      	negs	r0, r0
 8002e00:	4051      	eors	r1, r2
 8002e02:	4008      	ands	r0, r1
 8002e04:	4050      	eors	r0, r2
 8002e06:	4770      	bx	lr

08002e08 <cmox_mathUtils_not>:
 8002e08:	f080 0001 	eor.w	r0, r0, #1
 8002e0c:	4770      	bx	lr

08002e0e <cmox_mathUtils_neq>:
 8002e0e:	4048      	eors	r0, r1
 8002e10:	4241      	negs	r1, r0
 8002e12:	4308      	orrs	r0, r1
 8002e14:	0fc0      	lsrs	r0, r0, #31
 8002e16:	4770      	bx	lr

08002e18 <cmox_mathUtils_gt>:
 8002e18:	1a0a      	subs	r2, r1, r0
 8002e1a:	4041      	eors	r1, r0
 8002e1c:	4050      	eors	r0, r2
 8002e1e:	4008      	ands	r0, r1
 8002e20:	4050      	eors	r0, r2
 8002e22:	0fc0      	lsrs	r0, r0, #31
 8002e24:	4770      	bx	lr

08002e26 <cmox_mathUtils_bitLength>:
 8002e26:	b510      	push	{r4, lr}
 8002e28:	4601      	mov	r1, r0
 8002e2a:	2020      	movs	r0, #32
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	231f      	movs	r3, #31
 8002e30:	fa21 f403 	lsr.w	r4, r1, r3
 8002e34:	f004 0401 	and.w	r4, r4, #1
 8002e38:	f084 0401 	eor.w	r4, r4, #1
 8002e3c:	4022      	ands	r2, r4
 8002e3e:	1a80      	subs	r0, r0, r2
 8002e40:	1e5b      	subs	r3, r3, #1
 8002e42:	f113 0f01 	cmn.w	r3, #1
 8002e46:	d1f3      	bne.n	8002e30 <cmox_mathUtils_bitLength+0xa>
 8002e48:	bd10      	pop	{r4, pc}

08002e4a <cmox_mathUtils_abs>:
 8002e4a:	4601      	mov	r1, r0
 8002e4c:	4248      	negs	r0, r1
 8002e4e:	ea01 72e0 	and.w	r2, r1, r0, asr #31
 8002e52:	ea00 70e1 	and.w	r0, r0, r1, asr #31
 8002e56:	4310      	orrs	r0, r2
 8002e58:	4770      	bx	lr

08002e5a <cmox_membuf_init>:
 8002e5a:	2300      	movs	r3, #0

08002e5c <cmox_membuf_set>:
 8002e5c:	2900      	cmp	r1, #0
 8002e5e:	bf18      	it	ne
 8002e60:	2a00      	cmpne	r2, #0
 8002e62:	d004      	beq.n	8002e6e <cmox_membuf_set+0x12>
 8002e64:	6001      	str	r1, [r0, #0]
 8002e66:	6042      	str	r2, [r0, #4]
 8002e68:	2100      	movs	r1, #0
 8002e6a:	6083      	str	r3, [r0, #8]
 8002e6c:	60c1      	str	r1, [r0, #12]
 8002e6e:	4770      	bx	lr

08002e70 <cmox_membuf_getFree>:
 8002e70:	4601      	mov	r1, r0
 8002e72:	6848      	ldr	r0, [r1, #4]
 8002e74:	6889      	ldr	r1, [r1, #8]
 8002e76:	1a40      	subs	r0, r0, r1
 8002e78:	4770      	bx	lr

08002e7a <cmox_membuf_alloc>:
 8002e7a:	b520      	push	{r5, lr}
 8002e7c:	b111      	cbz	r1, 8002e84 <cmox_membuf_alloc+0xa>
 8002e7e:	b91a      	cbnz	r2, 8002e88 <cmox_membuf_alloc+0xe>
 8002e80:	2000      	movs	r0, #0
 8002e82:	6008      	str	r0, [r1, #0]
 8002e84:	2001      	movs	r0, #1
 8002e86:	bd20      	pop	{r5, pc}
 8002e88:	6883      	ldr	r3, [r0, #8]
 8002e8a:	6845      	ldr	r5, [r0, #4]
 8002e8c:	1cd2      	adds	r2, r2, #3
 8002e8e:	0892      	lsrs	r2, r2, #2
 8002e90:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8002e94:	4295      	cmp	r5, r2
 8002e96:	d203      	bcs.n	8002ea0 <cmox_membuf_alloc+0x26>
 8002e98:	2000      	movs	r0, #0
 8002e9a:	6008      	str	r0, [r1, #0]
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	bd20      	pop	{r5, pc}
 8002ea0:	6805      	ldr	r5, [r0, #0]
 8002ea2:	442b      	add	r3, r5
 8002ea4:	600b      	str	r3, [r1, #0]
 8002ea6:	6082      	str	r2, [r0, #8]
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	68c2      	ldr	r2, [r0, #12]
 8002eac:	4291      	cmp	r1, r2
 8002eae:	bf38      	it	cc
 8002eb0:	4611      	movcc	r1, r2
 8002eb2:	60c1      	str	r1, [r0, #12]
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	bd20      	pop	{r5, pc}

08002eb8 <cmox_membuf_free>:
 8002eb8:	b510      	push	{r4, lr}
 8002eba:	4604      	mov	r4, r0
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	2900      	cmp	r1, #0
 8002ec0:	bf1c      	itt	ne
 8002ec2:	680b      	ldrne	r3, [r1, #0]
 8002ec4:	2b00      	cmpne	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <cmox_membuf_free+0x18>
 8002ec8:	b112      	cbz	r2, 8002ed0 <cmox_membuf_free+0x18>
 8002eca:	68a3      	ldr	r3, [r4, #8]
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d201      	bcs.n	8002ed4 <cmox_membuf_free+0x1c>
 8002ed0:	2001      	movs	r0, #1
 8002ed2:	bd10      	pop	{r4, pc}
 8002ed4:	1cd2      	adds	r2, r2, #3
 8002ed6:	0892      	lsrs	r2, r2, #2
 8002ed8:	6008      	str	r0, [r1, #0]
 8002eda:	eba3 0282 	sub.w	r2, r3, r2, lsl #2
 8002ede:	60a2      	str	r2, [r4, #8]
 8002ee0:	bd10      	pop	{r4, pc}

08002ee2 <cmox_membuf_cleanup>:
 8002ee2:	b510      	push	{r4, lr}
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	6861      	ldr	r1, [r4, #4]
 8002ee8:	6820      	ldr	r0, [r4, #0]
 8002eea:	f006 fe3f 	bl	8009b6c <__aeabi_memclr>
 8002eee:	2000      	movs	r0, #0
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002efa:	bd10      	pop	{r4, pc}
 8002efc:	0101b004 	.word	0x0101b004
 8002f00:	45011700 	.word	0x45011700

08002f04 <.text_19>:
	...

08002f0c <cmox_ModExpBN_SW>:
 8002f0c:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f10:	b08a      	sub	sp, #40	@ 0x28
 8002f12:	4683      	mov	fp, r0
 8002f14:	2001      	movs	r0, #1
 8002f16:	f88d 0008 	strb.w	r0, [sp, #8]
 8002f1a:	2400      	movs	r4, #0
 8002f1c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8002f1e:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
 8002f22:	2601      	movs	r6, #1
 8002f24:	4617      	mov	r7, r2
 8002f26:	2500      	movs	r5, #0
 8002f28:	9507      	str	r5, [sp, #28]
 8002f2a:	9501      	str	r5, [sp, #4]
 8002f2c:	46aa      	mov	sl, r5
 8002f2e:	6801      	ldr	r1, [r0, #0]
 8002f30:	2901      	cmp	r1, #1
 8002f32:	bf88      	it	hi
 8002f34:	b2de      	uxtbhi	r6, r3
 8002f36:	2101      	movs	r1, #1
 8002f38:	1e70      	subs	r0, r6, #1
 8002f3a:	4081      	lsls	r1, r0
 8002f3c:	0089      	lsls	r1, r1, #2
 8002f3e:	9109      	str	r1, [sp, #36]	@ 0x24
 8002f40:	460a      	mov	r2, r1
 8002f42:	a901      	add	r1, sp, #4
 8002f44:	4648      	mov	r0, r9
 8002f46:	f7ff ff98 	bl	8002e7a <cmox_membuf_alloc>
 8002f4a:	2800      	cmp	r0, #0
 8002f4c:	9004      	str	r0, [sp, #16]
 8002f4e:	f040 80ef 	bne.w	8003130 <cmox_ModExpBN_SW+0x224>
 8002f52:	46a8      	mov	r8, r5
 8002f54:	e00c      	b.n	8002f70 <cmox_ModExpBN_SW+0x64>
 8002f56:	6838      	ldr	r0, [r7, #0]
 8002f58:	9901      	ldr	r1, [sp, #4]
 8002f5a:	6802      	ldr	r2, [r0, #0]
 8002f5c:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8002f60:	4648      	mov	r0, r9
 8002f62:	f001 fb39 	bl	80045d8 <cmox_bn_alloc>
 8002f66:	2800      	cmp	r0, #0
 8002f68:	9004      	str	r0, [sp, #16]
 8002f6a:	d175      	bne.n	8003058 <cmox_ModExpBN_SW+0x14c>
 8002f6c:	f108 0801 	add.w	r8, r8, #1
 8002f70:	2001      	movs	r0, #1
 8002f72:	1e72      	subs	r2, r6, #1
 8002f74:	4090      	lsls	r0, r2
 8002f76:	4580      	cmp	r8, r0
 8002f78:	9006      	str	r0, [sp, #24]
 8002f7a:	d3ec      	bcc.n	8002f56 <cmox_ModExpBN_SW+0x4a>
 8002f7c:	9801      	ldr	r0, [sp, #4]
 8002f7e:	f8cd b00c 	str.w	fp, [sp, #12]
 8002f82:	2100      	movs	r1, #0
 8002f84:	6800      	ldr	r0, [r0, #0]
 8002f86:	f001 fb5e 	bl	8004646 <cmox_bn_init>
 8002f8a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	f001 fb5a 	bl	8004646 <cmox_bn_init>
 8002f92:	9801      	ldr	r0, [sp, #4]
 8002f94:	6802      	ldr	r2, [r0, #0]
 8002f96:	9903      	ldr	r1, [sp, #12]
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f001 fb63 	bl	8004664 <cmox_bn_cCopy>
 8002f9e:	f8dd b058 	ldr.w	fp, [sp, #88]	@ 0x58
 8002fa2:	9700      	str	r7, [sp, #0]
 8002fa4:	2700      	movs	r7, #0
 8002fa6:	e007      	b.n	8002fb8 <cmox_ModExpBN_SW+0xac>
 8002fa8:	9801      	ldr	r0, [sp, #4]
 8002faa:	6800      	ldr	r0, [r0, #0]
 8002fac:	9a00      	ldr	r2, [sp, #0]
 8002fae:	465b      	mov	r3, fp
 8002fb0:	4601      	mov	r1, r0
 8002fb2:	f7ff fedf 	bl	8002d74 <cmox_ModularBN_Sqr>
 8002fb6:	1c7f      	adds	r7, r7, #1
 8002fb8:	1e70      	subs	r0, r6, #1
 8002fba:	4287      	cmp	r7, r0
 8002fbc:	d3f4      	bcc.n	8002fa8 <cmox_ModExpBN_SW+0x9c>
 8002fbe:	9900      	ldr	r1, [sp, #0]
 8002fc0:	9605      	str	r6, [sp, #20]
 8002fc2:	4658      	mov	r0, fp
 8002fc4:	1e73      	subs	r3, r6, #1
 8002fc6:	2701      	movs	r7, #1
 8002fc8:	f88d 3009 	strb.w	r3, [sp, #9]
 8002fcc:	468b      	mov	fp, r1
 8002fce:	4606      	mov	r6, r0
 8002fd0:	e00c      	b.n	8002fec <cmox_ModExpBN_SW+0xe0>
 8002fd2:	9600      	str	r6, [sp, #0]
 8002fd4:	465b      	mov	r3, fp
 8002fd6:	9801      	ldr	r0, [sp, #4]
 8002fd8:	9903      	ldr	r1, [sp, #12]
 8002fda:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
 8002fde:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8002fe2:	1c7f      	adds	r7, r7, #1
 8002fe4:	f85c 0c04 	ldr.w	r0, [ip, #-4]
 8002fe8:	f7ff fea1 	bl	8002d2e <cmox_ModularBN_Mul>
 8002fec:	9806      	ldr	r0, [sp, #24]
 8002fee:	4287      	cmp	r7, r0
 8002ff0:	d3ef      	bcc.n	8002fd2 <cmox_ModExpBN_SW+0xc6>
 8002ff2:	9616      	str	r6, [sp, #88]	@ 0x58
 8002ff4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8002ff6:	6801      	ldr	r1, [r0, #0]
 8002ff8:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8002ffa:	9106      	str	r1, [sp, #24]
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	f001 fb22 	bl	8004646 <cmox_bn_init>
 8003002:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8003004:	9903      	ldr	r1, [sp, #12]
 8003006:	2001      	movs	r0, #1
 8003008:	f001 fb2c 	bl	8004664 <cmox_bn_cCopy>
 800300c:	2001      	movs	r0, #1
 800300e:	9008      	str	r0, [sp, #32]
 8003010:	e015      	b.n	800303e <cmox_ModExpBN_SW+0x132>
 8003012:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003014:	9906      	ldr	r1, [sp, #24]
 8003016:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800301a:	9906      	ldr	r1, [sp, #24]
 800301c:	1e49      	subs	r1, r1, #1
 800301e:	2220      	movs	r2, #32
 8003020:	9007      	str	r0, [sp, #28]
 8003022:	9106      	str	r1, [sp, #24]
 8003024:	f88d 2008 	strb.w	r2, [sp, #8]
 8003028:	9807      	ldr	r0, [sp, #28]
 800302a:	9907      	ldr	r1, [sp, #28]
 800302c:	0fc0      	lsrs	r0, r0, #31
 800302e:	0049      	lsls	r1, r1, #1
 8003030:	002a      	movs	r2, r5
 8003032:	9107      	str	r1, [sp, #28]
 8003034:	d13b      	bne.n	80030ae <cmox_ModExpBN_SW+0x1a2>
 8003036:	2800      	cmp	r0, #0
 8003038:	d001      	beq.n	800303e <cmox_ModExpBN_SW+0x132>
 800303a:	d043      	beq.n	80030c4 <cmox_ModExpBN_SW+0x1b8>
 800303c:	2501      	movs	r5, #1
 800303e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003042:	1e41      	subs	r1, r0, #1
 8003044:	f88d 1008 	strb.w	r1, [sp, #8]
 8003048:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800304c:	2800      	cmp	r0, #0
 800304e:	d1eb      	bne.n	8003028 <cmox_ModExpBN_SW+0x11c>
 8003050:	9806      	ldr	r0, [sp, #24]
 8003052:	2800      	cmp	r0, #0
 8003054:	d1dd      	bne.n	8003012 <cmox_ModExpBN_SW+0x106>
 8003056:	2d02      	cmp	r5, #2
 8003058:	d11c      	bne.n	8003094 <cmox_ModExpBN_SW+0x188>
 800305a:	b2e0      	uxtb	r0, r4
 800305c:	b1d0      	cbz	r0, 8003094 <cmox_ModExpBN_SW+0x188>
 800305e:	b2e5      	uxtb	r5, r4
 8003060:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8003062:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8003064:	9f05      	ldr	r7, [sp, #20]
 8003066:	4633      	mov	r3, r6
 8003068:	465a      	mov	r2, fp
 800306a:	4621      	mov	r1, r4
 800306c:	4620      	mov	r0, r4
 800306e:	f7ff fe81 	bl	8002d74 <cmox_ModularBN_Sqr>
 8003072:	9908      	ldr	r1, [sp, #32]
 8003074:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8003078:	40b9      	lsls	r1, r7
 800307a:	fa5f f08a 	uxtb.w	r0, sl
 800307e:	4208      	tst	r0, r1
 8003080:	d006      	beq.n	8003090 <cmox_ModExpBN_SW+0x184>
 8003082:	9600      	str	r6, [sp, #0]
 8003084:	465b      	mov	r3, fp
 8003086:	9903      	ldr	r1, [sp, #12]
 8003088:	4622      	mov	r2, r4
 800308a:	4620      	mov	r0, r4
 800308c:	f7ff fe4f 	bl	8002d2e <cmox_ModularBN_Mul>
 8003090:	1e6d      	subs	r5, r5, #1
 8003092:	d1e8      	bne.n	8003066 <cmox_ModExpBN_SW+0x15a>
 8003094:	f1b8 0f00 	cmp.w	r8, #0
 8003098:	d045      	beq.n	8003126 <cmox_ModExpBN_SW+0x21a>
 800309a:	9801      	ldr	r0, [sp, #4]
 800309c:	eb00 0188 	add.w	r1, r0, r8, lsl #2
 80030a0:	1f09      	subs	r1, r1, #4
 80030a2:	4648      	mov	r0, r9
 80030a4:	f001 faa3 	bl	80045ee <cmox_bn_free>
 80030a8:	f1a8 0801 	sub.w	r8, r8, #1
 80030ac:	e7f2      	b.n	8003094 <cmox_ModExpBN_SW+0x188>
 80030ae:	2d01      	cmp	r5, #1
 80030b0:	bf08      	it	eq
 80030b2:	2800      	cmpeq	r0, #0
 80030b4:	d106      	bne.n	80030c4 <cmox_ModExpBN_SW+0x1b8>
 80030b6:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80030b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80030ba:	465a      	mov	r2, fp
 80030bc:	4608      	mov	r0, r1
 80030be:	f7ff fe59 	bl	8002d74 <cmox_ModularBN_Sqr>
 80030c2:	e7bc      	b.n	800303e <cmox_ModExpBN_SW+0x132>
 80030c4:	9905      	ldr	r1, [sp, #20]
 80030c6:	9a05      	ldr	r2, [sp, #20]
 80030c8:	1c64      	adds	r4, r4, #1
 80030ca:	1b09      	subs	r1, r1, r4
 80030cc:	4088      	lsls	r0, r1
 80030ce:	ea40 0a0a 	orr.w	sl, r0, sl
 80030d2:	2502      	movs	r5, #2
 80030d4:	b2e0      	uxtb	r0, r4
 80030d6:	4290      	cmp	r0, r2
 80030d8:	d1b1      	bne.n	800303e <cmox_ModExpBN_SW+0x132>
 80030da:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80030dc:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80030de:	2700      	movs	r7, #0
 80030e0:	4616      	mov	r6, r2
 80030e2:	e006      	b.n	80030f2 <cmox_ModExpBN_SW+0x1e6>
 80030e4:	4623      	mov	r3, r4
 80030e6:	465a      	mov	r2, fp
 80030e8:	4629      	mov	r1, r5
 80030ea:	4628      	mov	r0, r5
 80030ec:	f7ff fe42 	bl	8002d74 <cmox_ModularBN_Sqr>
 80030f0:	1c7f      	adds	r7, r7, #1
 80030f2:	42b7      	cmp	r7, r6
 80030f4:	d3f6      	bcc.n	80030e4 <cmox_ModExpBN_SW+0x1d8>
 80030f6:	9514      	str	r5, [sp, #80]	@ 0x50
 80030f8:	9416      	str	r4, [sp, #88]	@ 0x58
 80030fa:	9605      	str	r6, [sp, #20]
 80030fc:	fa5f f48a 	uxtb.w	r4, sl
 8003100:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8003102:	9d08      	ldr	r5, [sp, #32]
 8003104:	f99d 0009 	ldrsb.w	r0, [sp, #9]
 8003108:	9901      	ldr	r1, [sp, #4]
 800310a:	9200      	str	r2, [sp, #0]
 800310c:	4085      	lsls	r5, r0
 800310e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8003110:	ea24 0a05 	bic.w	sl, r4, r5
 8003114:	f851 102a 	ldr.w	r1, [r1, sl, lsl #2]
 8003118:	465b      	mov	r3, fp
 800311a:	4610      	mov	r0, r2
 800311c:	f7ff fe07 	bl	8002d2e <cmox_ModularBN_Mul>
 8003120:	2400      	movs	r4, #0
 8003122:	46a2      	mov	sl, r4
 8003124:	e78a      	b.n	800303c <cmox_ModExpBN_SW+0x130>
 8003126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003128:	a901      	add	r1, sp, #4
 800312a:	4648      	mov	r0, r9
 800312c:	f7ff fec4 	bl	8002eb8 <cmox_membuf_free>
 8003130:	9804      	ldr	r0, [sp, #16]
 8003132:	b00b      	add	sp, #44	@ 0x2c
 8003134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003138 <cmox_ScalarMul_FW>:
 8003138:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800313c:	b08c      	sub	sp, #48	@ 0x30
 800313e:	4607      	mov	r7, r0
 8003140:	2001      	movs	r0, #1
 8003142:	468b      	mov	fp, r1
 8003144:	9009      	str	r0, [sp, #36]	@ 0x24
 8003146:	2200      	movs	r2, #0
 8003148:	69b9      	ldr	r1, [r7, #24]
 800314a:	6988      	ldr	r0, [r1, #24]
 800314c:	6846      	ldr	r6, [r0, #4]
 800314e:	9204      	str	r2, [sp, #16]
 8003150:	461c      	mov	r4, r3
 8003152:	2100      	movs	r1, #0
 8003154:	4658      	mov	r0, fp
 8003156:	f001 fb03 	bl	8004760 <cmox_bn_cmpUint>
 800315a:	b950      	cbnz	r0, 8003172 <cmox_ScalarMul_FW+0x3a>
 800315c:	69b8      	ldr	r0, [r7, #24]
 800315e:	6800      	ldr	r0, [r0, #0]
 8003160:	69c1      	ldr	r1, [r0, #28]
 8003162:	2901      	cmp	r1, #1
 8003164:	d008      	beq.n	8003178 <cmox_ScalarMul_FW+0x40>
 8003166:	6881      	ldr	r1, [r0, #8]
 8003168:	4658      	mov	r0, fp
 800316a:	f001 fab8 	bl	80046de <cmox_bn_cmp>
 800316e:	2800      	cmp	r0, #0
 8003170:	d402      	bmi.n	8003178 <cmox_ScalarMul_FW+0x40>
 8003172:	f04f 0801 	mov.w	r8, #1
 8003176:	e1d7      	b.n	8003528 <cmox_ScalarMul_FW+0x3f0>
 8003178:	69b8      	ldr	r0, [r7, #24]
 800317a:	6841      	ldr	r1, [r0, #4]
 800317c:	698a      	ldr	r2, [r1, #24]
 800317e:	69f8      	ldr	r0, [r7, #28]
 8003180:	0092      	lsls	r2, r2, #2
 8003182:	f107 0114 	add.w	r1, r7, #20
 8003186:	f7ff fe78 	bl	8002e7a <cmox_membuf_alloc>
 800318a:	ea5f 0800 	movs.w	r8, r0
 800318e:	d1f2      	bne.n	8003176 <cmox_ScalarMul_FW+0x3e>
 8003190:	2500      	movs	r5, #0
 8003192:	e00c      	b.n	80031ae <cmox_ScalarMul_FW+0x76>
 8003194:	6809      	ldr	r1, [r1, #0]
 8003196:	680a      	ldr	r2, [r1, #0]
 8003198:	6979      	ldr	r1, [r7, #20]
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80031a0:	f001 fa1a 	bl	80045d8 <cmox_bn_alloc>
 80031a4:	ea5f 0800 	movs.w	r8, r0
 80031a8:	f040 81b3 	bne.w	8003512 <cmox_ScalarMul_FW+0x3da>
 80031ac:	1c6d      	adds	r5, r5, #1
 80031ae:	69b9      	ldr	r1, [r7, #24]
 80031b0:	684a      	ldr	r2, [r1, #4]
 80031b2:	6993      	ldr	r3, [r2, #24]
 80031b4:	69f8      	ldr	r0, [r7, #28]
 80031b6:	429d      	cmp	r5, r3
 80031b8:	d3ec      	bcc.n	8003194 <cmox_ScalarMul_FW+0x5c>
 80031ba:	f04f 0901 	mov.w	r9, #1
 80031be:	1e72      	subs	r2, r6, #1
 80031c0:	fa09 f202 	lsl.w	r2, r9, r2
 80031c4:	0092      	lsls	r2, r2, #2
 80031c6:	9208      	str	r2, [sp, #32]
 80031c8:	a901      	add	r1, sp, #4
 80031ca:	f7ff fe56 	bl	8002e7a <cmox_membuf_alloc>
 80031ce:	ea5f 0800 	movs.w	r8, r0
 80031d2:	46aa      	mov	sl, r5
 80031d4:	f040 8194 	bne.w	8003500 <cmox_ScalarMul_FW+0x3c8>
 80031d8:	2500      	movs	r5, #0
 80031da:	e010      	b.n	80031fe <cmox_ScalarMul_FW+0xc6>
 80031dc:	9801      	ldr	r0, [sp, #4]
 80031de:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80031e2:	4638      	mov	r0, r7
 80031e4:	f7fd f86d 	bl	80002c2 <cmox_ECC_AllocPoint>
 80031e8:	ea5f 0800 	movs.w	r8, r0
 80031ec:	f040 8181 	bne.w	80034f2 <cmox_ScalarMul_FW+0x3ba>
 80031f0:	9801      	ldr	r0, [sp, #4]
 80031f2:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
 80031f6:	4638      	mov	r0, r7
 80031f8:	f7fd f94a 	bl	8000490 <cmox_ECC_SetPointAtInfinity>
 80031fc:	1c6d      	adds	r5, r5, #1
 80031fe:	1e71      	subs	r1, r6, #1
 8003200:	fa09 f101 	lsl.w	r1, r9, r1
 8003204:	428d      	cmp	r5, r1
 8003206:	d3e9      	bcc.n	80031dc <cmox_ScalarMul_FW+0xa4>
 8003208:	9702      	str	r7, [sp, #8]
 800320a:	950b      	str	r5, [sp, #44]	@ 0x2c
 800320c:	9403      	str	r4, [sp, #12]
 800320e:	4621      	mov	r1, r4
 8003210:	9802      	ldr	r0, [sp, #8]
 8003212:	f7fd f93d 	bl	8000490 <cmox_ECC_SetPointAtInfinity>
 8003216:	f89b 0004 	ldrb.w	r0, [fp, #4]
 800321a:	f000 0001 	and.w	r0, r0, #1
 800321e:	9007      	str	r0, [sp, #28]
 8003220:	f04f 0800 	mov.w	r8, #0
 8003224:	9802      	ldr	r0, [sp, #8]
 8003226:	6981      	ldr	r1, [r0, #24]
 8003228:	680a      	ldr	r2, [r1, #0]
 800322a:	9807      	ldr	r0, [sp, #28]
 800322c:	6892      	ldr	r2, [r2, #8]
 800322e:	4659      	mov	r1, fp
 8003230:	f1c0 0001 	rsb	r0, r0, #1
 8003234:	f7ff fd0a 	bl	8002c4c <cmox_FieldBN_CondNegate>
 8003238:	f8db 0000 	ldr.w	r0, [fp]
 800323c:	ebc6 1540 	rsb	r5, r6, r0, lsl #5
 8003240:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 8003244:	f7ff fdef 	bl	8002e26 <cmox_mathUtils_bitLength>
 8003248:	f8db 1000 	ldr.w	r1, [fp]
 800324c:	1e49      	subs	r1, r1, #1
 800324e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8003252:	1e71      	subs	r1, r6, #1
 8003254:	fa09 f101 	lsl.w	r1, r9, r1
 8003258:	1e49      	subs	r1, r1, #1
 800325a:	9105      	str	r1, [sp, #20]
 800325c:	fa09 f206 	lsl.w	r2, r9, r6
 8003260:	9206      	str	r2, [sp, #24]
 8003262:	4634      	mov	r4, r6
 8003264:	900a      	str	r0, [sp, #40]	@ 0x28
 8003266:	e02d      	b.n	80032c4 <cmox_ScalarMul_FW+0x18c>
 8003268:	4642      	mov	r2, r8
 800326a:	1c61      	adds	r1, r4, #1
 800326c:	4658      	mov	r0, fp
 800326e:	f001 faa6 	bl	80047be <cmox_bn_getBits>
 8003272:	4606      	mov	r6, r0
 8003274:	9806      	ldr	r0, [sp, #24]
 8003276:	1a30      	subs	r0, r6, r0
 8003278:	f7ff fde7 	bl	8002e4a <cmox_mathUtils_abs>
 800327c:	4607      	mov	r7, r0
 800327e:	eb04 0008 	add.w	r0, r4, r8
 8003282:	9000      	str	r0, [sp, #0]
 8003284:	4601      	mov	r1, r0
 8003286:	4628      	mov	r0, r5
 8003288:	f7ff fdc6 	bl	8002e18 <cmox_mathUtils_gt>
 800328c:	9906      	ldr	r1, [sp, #24]
 800328e:	2200      	movs	r2, #0
 8003290:	f7ff fdb5 	bl	8002dfe <cmox_mathUtils_mux>
 8003294:	ea40 0757 	orr.w	r7, r0, r7, lsr #1
 8003298:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800329a:	4641      	mov	r1, r8
 800329c:	f7ff fdbc 	bl	8002e18 <cmox_mathUtils_gt>
 80032a0:	40e6      	lsrs	r6, r4
 80032a2:	f006 0601 	and.w	r6, r6, #1
 80032a6:	1e63      	subs	r3, r4, #1
 80032a8:	9a05      	ldr	r2, [sp, #20]
 80032aa:	409e      	lsls	r6, r3
 80032ac:	ea46 0107 	orr.w	r1, r6, r7
 80032b0:	f7ff fda5 	bl	8002dfe <cmox_mathUtils_mux>
 80032b4:	4603      	mov	r3, r0
 80032b6:	4642      	mov	r2, r8
 80032b8:	1c61      	adds	r1, r4, #1
 80032ba:	4658      	mov	r0, fp
 80032bc:	f001 faa3 	bl	8004806 <cmox_bn_setBits>
 80032c0:	f8dd 8000 	ldr.w	r8, [sp]
 80032c4:	45a8      	cmp	r8, r5
 80032c6:	d3cf      	bcc.n	8003268 <cmox_ScalarMul_FW+0x130>
 80032c8:	1c65      	adds	r5, r4, #1
 80032ca:	4642      	mov	r2, r8
 80032cc:	4629      	mov	r1, r5
 80032ce:	4658      	mov	r0, fp
 80032d0:	f001 fa75 	bl	80047be <cmox_bn_getBits>
 80032d4:	0843      	lsrs	r3, r0, #1
 80032d6:	4642      	mov	r2, r8
 80032d8:	4629      	mov	r1, r5
 80032da:	4658      	mov	r0, fp
 80032dc:	f001 fa93 	bl	8004806 <cmox_bn_setBits>
 80032e0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80032e2:	7c00      	ldrb	r0, [r0, #16]
 80032e4:	2100      	movs	r1, #0
 80032e6:	f000 0004 	and.w	r0, r0, #4
 80032ea:	f7ff fd90 	bl	8002e0e <cmox_mathUtils_neq>
 80032ee:	b920      	cbnz	r0, 80032fa <cmox_ScalarMul_FW+0x1c2>
 80032f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80032f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80032f4:	9802      	ldr	r0, [sp, #8]
 80032f6:	f7fd f98b 	bl	8000610 <cmox_ECC_PointToModularDomain>
 80032fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80032fc:	9802      	ldr	r0, [sp, #8]
 80032fe:	f7fd f9df 	bl	80006c0 <cmox_ECC_PointValidation>
 8003302:	ea5f 0800 	movs.w	r8, r0
 8003306:	f040 80e9 	bne.w	80034dc <cmox_ScalarMul_FW+0x3a4>
 800330a:	9801      	ldr	r0, [sp, #4]
 800330c:	6802      	ldr	r2, [r0, #0]
 800330e:	9802      	ldr	r0, [sp, #8]
 8003310:	6986      	ldr	r6, [r0, #24]
 8003312:	6875      	ldr	r5, [r6, #4]
 8003314:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003316:	682e      	ldr	r6, [r5, #0]
 8003318:	2301      	movs	r3, #1
 800331a:	47b0      	blx	r6
 800331c:	9901      	ldr	r1, [sp, #4]
 800331e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003320:	2000      	movs	r0, #0
 8003322:	9000      	str	r0, [sp, #0]
 8003324:	9802      	ldr	r0, [sp, #8]
 8003326:	6986      	ldr	r6, [r0, #24]
 8003328:	6875      	ldr	r5, [r6, #4]
 800332a:	684b      	ldr	r3, [r1, #4]
 800332c:	6809      	ldr	r1, [r1, #0]
 800332e:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8003332:	47e0      	blx	ip
 8003334:	1e61      	subs	r1, r4, #1
 8003336:	f88d 1000 	strb.w	r1, [sp]
 800333a:	2502      	movs	r5, #2
 800333c:	f89d 0000 	ldrb.w	r0, [sp]
 8003340:	9f02      	ldr	r7, [sp, #8]
 8003342:	fa09 f600 	lsl.w	r6, r9, r0
 8003346:	e00e      	b.n	8003366 <cmox_ScalarMul_FW+0x22e>
 8003348:	f8d7 c018 	ldr.w	ip, [r7, #24]
 800334c:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 8003350:	f8dc e004 	ldr.w	lr, [ip, #4]
 8003354:	f8de c008 	ldr.w	ip, [lr, #8]
 8003358:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800335c:	4638      	mov	r0, r7
 800335e:	f851 1c04 	ldr.w	r1, [r1, #-4]
 8003362:	47e0      	blx	ip
 8003364:	1c6d      	adds	r5, r5, #1
 8003366:	9801      	ldr	r0, [sp, #4]
 8003368:	6802      	ldr	r2, [r0, #0]
 800336a:	42b5      	cmp	r5, r6
 800336c:	d3ec      	bcc.n	8003348 <cmox_ScalarMul_FW+0x210>
 800336e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003370:	2001      	movs	r0, #1
 8003372:	f7fd f833 	bl	80003dc <cmox_ECC_CondCopyPoint>
 8003376:	f8db 5000 	ldr.w	r5, [fp]
 800337a:	016d      	lsls	r5, r5, #5
 800337c:	1b2a      	subs	r2, r5, r4
 800337e:	1e61      	subs	r1, r4, #1
 8003380:	4658      	mov	r0, fp
 8003382:	f001 fa1c 	bl	80047be <cmox_bn_getBits>
 8003386:	9901      	ldr	r1, [sp, #4]
 8003388:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800338c:	9a03      	ldr	r2, [sp, #12]
 800338e:	2001      	movs	r0, #1
 8003390:	f7fd f824 	bl	80003dc <cmox_ECC_CondCopyPoint>
 8003394:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 8003398:	9502      	str	r5, [sp, #8]
 800339a:	e02e      	b.n	80033fa <cmox_ScalarMul_FW+0x2c2>
 800339c:	f8d7 c018 	ldr.w	ip, [r7, #24]
 80033a0:	f8dc e004 	ldr.w	lr, [ip, #4]
 80033a4:	f8de c000 	ldr.w	ip, [lr]
 80033a8:	2301      	movs	r3, #1
 80033aa:	464a      	mov	r2, r9
 80033ac:	4649      	mov	r1, r9
 80033ae:	4638      	mov	r0, r7
 80033b0:	47e0      	blx	ip
 80033b2:	1e6d      	subs	r5, r5, #1
 80033b4:	d1f2      	bne.n	800339c <cmox_ScalarMul_FW+0x264>
 80033b6:	9d04      	ldr	r5, [sp, #16]
 80033b8:	9901      	ldr	r1, [sp, #4]
 80033ba:	9806      	ldr	r0, [sp, #24]
 80033bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80033c0:	40f5      	lsrs	r5, r6
 80033c2:	f005 0501 	and.w	r5, r5, #1
 80033c6:	4045      	eors	r5, r0
 80033c8:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
 80033cc:	f085 0501 	eor.w	r5, r5, #1
 80033d0:	4639      	mov	r1, r7
 80033d2:	4628      	mov	r0, r5
 80033d4:	f7fd f835 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 80033d8:	9804      	ldr	r0, [sp, #16]
 80033da:	9b03      	ldr	r3, [sp, #12]
 80033dc:	40b5      	lsls	r5, r6
 80033de:	4045      	eors	r5, r0
 80033e0:	9801      	ldr	r0, [sp, #4]
 80033e2:	9504      	str	r5, [sp, #16]
 80033e4:	4619      	mov	r1, r3
 80033e6:	69bd      	ldr	r5, [r7, #24]
 80033e8:	f850 2026 	ldr.w	r2, [r0, r6, lsl #2]
 80033ec:	686e      	ldr	r6, [r5, #4]
 80033ee:	68b5      	ldr	r5, [r6, #8]
 80033f0:	4638      	mov	r0, r7
 80033f2:	47a8      	blx	r5
 80033f4:	9802      	ldr	r0, [sp, #8]
 80033f6:	1b00      	subs	r0, r0, r4
 80033f8:	9002      	str	r0, [sp, #8]
 80033fa:	9802      	ldr	r0, [sp, #8]
 80033fc:	42a0      	cmp	r0, r4
 80033fe:	d310      	bcc.n	8003422 <cmox_ScalarMul_FW+0x2ea>
 8003400:	4602      	mov	r2, r0
 8003402:	4621      	mov	r1, r4
 8003404:	4658      	mov	r0, fp
 8003406:	f001 f9da 	bl	80047be <cmox_bn_getBits>
 800340a:	f89d 2000 	ldrb.w	r2, [sp]
 800340e:	9905      	ldr	r1, [sp, #20]
 8003410:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003414:	fa20 f302 	lsr.w	r3, r0, r2
 8003418:	9306      	str	r3, [sp, #24]
 800341a:	ea01 0600 	and.w	r6, r1, r0
 800341e:	0025      	movs	r5, r4
 8003420:	e7c8      	b.n	80033b4 <cmox_ScalarMul_FW+0x27c>
 8003422:	2200      	movs	r2, #0
 8003424:	4621      	mov	r1, r4
 8003426:	4658      	mov	r0, fp
 8003428:	f001 f9c9 	bl	80047be <cmox_bn_getBits>
 800342c:	f89d 2000 	ldrb.w	r2, [sp]
 8003430:	9905      	ldr	r1, [sp, #20]
 8003432:	fa20 f302 	lsr.w	r3, r0, r2
 8003436:	ea01 0b00 	and.w	fp, r1, r0
 800343a:	9801      	ldr	r0, [sp, #4]
 800343c:	f850 202b 	ldr.w	r2, [r0, fp, lsl #2]
 8003440:	9804      	ldr	r0, [sp, #16]
 8003442:	fa20 f00b 	lsr.w	r0, r0, fp
 8003446:	f000 0001 	and.w	r0, r0, #1
 800344a:	4043      	eors	r3, r0
 800344c:	4639      	mov	r1, r7
 800344e:	f083 0001 	eor.w	r0, r3, #1
 8003452:	f7fc fff6 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 8003456:	4625      	mov	r5, r4
 8003458:	9c03      	ldr	r4, [sp, #12]
 800345a:	e007      	b.n	800346c <cmox_ScalarMul_FW+0x334>
 800345c:	f8d6 c000 	ldr.w	ip, [r6]
 8003460:	2301      	movs	r3, #1
 8003462:	4622      	mov	r2, r4
 8003464:	4621      	mov	r1, r4
 8003466:	4638      	mov	r0, r7
 8003468:	47e0      	blx	ip
 800346a:	1e6d      	subs	r5, r5, #1
 800346c:	69b8      	ldr	r0, [r7, #24]
 800346e:	6846      	ldr	r6, [r0, #4]
 8003470:	2d00      	cmp	r5, #0
 8003472:	d1f3      	bne.n	800345c <cmox_ScalarMul_FW+0x324>
 8003474:	9702      	str	r7, [sp, #8]
 8003476:	4621      	mov	r1, r4
 8003478:	9801      	ldr	r0, [sp, #4]
 800347a:	6803      	ldr	r3, [r0, #0]
 800347c:	f850 202b 	ldr.w	r2, [r0, fp, lsl #2]
 8003480:	68b5      	ldr	r5, [r6, #8]
 8003482:	4638      	mov	r0, r7
 8003484:	47a8      	blx	r5
 8003486:	9801      	ldr	r0, [sp, #4]
 8003488:	6802      	ldr	r2, [r0, #0]
 800348a:	6890      	ldr	r0, [r2, #8]
 800348c:	2100      	movs	r1, #0
 800348e:	f001 f967 	bl	8004760 <cmox_bn_cmpUint>
 8003492:	4603      	mov	r3, r0
 8003494:	9801      	ldr	r0, [sp, #4]
 8003496:	6802      	ldr	r2, [r0, #0]
 8003498:	9802      	ldr	r0, [sp, #8]
 800349a:	6986      	ldr	r6, [r0, #24]
 800349c:	6875      	ldr	r5, [r6, #4]
 800349e:	f8d5 c000 	ldr.w	ip, [r5]
 80034a2:	4621      	mov	r1, r4
 80034a4:	47e0      	blx	ip
 80034a6:	9801      	ldr	r0, [sp, #4]
 80034a8:	6801      	ldr	r1, [r0, #0]
 80034aa:	4622      	mov	r2, r4
 80034ac:	2001      	movs	r0, #1
 80034ae:	f7fc ff95 	bl	80003dc <cmox_ECC_CondCopyPoint>
 80034b2:	9807      	ldr	r0, [sp, #28]
 80034b4:	9902      	ldr	r1, [sp, #8]
 80034b6:	4622      	mov	r2, r4
 80034b8:	f1c0 0001 	rsb	r0, r0, #1
 80034bc:	f7fc ffc1 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 80034c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80034c2:	b958      	cbnz	r0, 80034dc <cmox_ScalarMul_FW+0x3a4>
 80034c4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80034c6:	9802      	ldr	r0, [sp, #8]
 80034c8:	f7fd f8cc 	bl	8000664 <cmox_ECC_PointFromModularDomain>
 80034cc:	4680      	mov	r8, r0
 80034ce:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80034d0:	42a0      	cmp	r0, r4
 80034d2:	d003      	beq.n	80034dc <cmox_ScalarMul_FW+0x3a4>
 80034d4:	9802      	ldr	r0, [sp, #8]
 80034d6:	4621      	mov	r1, r4
 80034d8:	f7fd f8c4 	bl	8000664 <cmox_ECC_PointFromModularDomain>
 80034dc:	9f02      	ldr	r7, [sp, #8]
 80034de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80034e0:	e007      	b.n	80034f2 <cmox_ScalarMul_FW+0x3ba>
 80034e2:	9801      	ldr	r0, [sp, #4]
 80034e4:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80034e8:	1f09      	subs	r1, r1, #4
 80034ea:	4638      	mov	r0, r7
 80034ec:	f7fc ff45 	bl	800037a <cmox_ECC_FreePoint>
 80034f0:	1e6d      	subs	r5, r5, #1
 80034f2:	2d00      	cmp	r5, #0
 80034f4:	d1f5      	bne.n	80034e2 <cmox_ScalarMul_FW+0x3aa>
 80034f6:	9a08      	ldr	r2, [sp, #32]
 80034f8:	69f8      	ldr	r0, [r7, #28]
 80034fa:	a901      	add	r1, sp, #4
 80034fc:	f7ff fcdc 	bl	8002eb8 <cmox_membuf_free>
 8003500:	4655      	mov	r5, sl
 8003502:	e006      	b.n	8003512 <cmox_ScalarMul_FW+0x3da>
 8003504:	6979      	ldr	r1, [r7, #20]
 8003506:	eb01 0285 	add.w	r2, r1, r5, lsl #2
 800350a:	1f11      	subs	r1, r2, #4
 800350c:	f001 f86f 	bl	80045ee <cmox_bn_free>
 8003510:	1e6d      	subs	r5, r5, #1
 8003512:	69f8      	ldr	r0, [r7, #28]
 8003514:	2d00      	cmp	r5, #0
 8003516:	d1f5      	bne.n	8003504 <cmox_ScalarMul_FW+0x3cc>
 8003518:	69b9      	ldr	r1, [r7, #24]
 800351a:	684a      	ldr	r2, [r1, #4]
 800351c:	6992      	ldr	r2, [r2, #24]
 800351e:	0092      	lsls	r2, r2, #2
 8003520:	f107 0114 	add.w	r1, r7, #20
 8003524:	f7ff fcc8 	bl	8002eb8 <cmox_membuf_free>
 8003528:	4640      	mov	r0, r8
 800352a:	b00d      	add	sp, #52	@ 0x34
 800352c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003530 <cmox_ScalarMul_SC>:
 8003530:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003534:	4606      	mov	r6, r0
 8003536:	b08b      	sub	sp, #44	@ 0x2c
 8003538:	4689      	mov	r9, r1
 800353a:	69b1      	ldr	r1, [r6, #24]
 800353c:	680a      	ldr	r2, [r1, #0]
 800353e:	6890      	ldr	r0, [r2, #8]
 8003540:	f001 f924 	bl	800478c <cmox_bn_countBits>
 8003544:	69b1      	ldr	r1, [r6, #24]
 8003546:	688a      	ldr	r2, [r1, #8]
 8003548:	6813      	ldr	r3, [r2, #0]
 800354a:	fbb0 f8f3 	udiv	r8, r0, r3
 800354e:	461d      	mov	r5, r3
 8003550:	1e5a      	subs	r2, r3, #1
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	fb05 0518 	mls	r5, r5, r8, r0
 8003558:	f88d 2010 	strb.w	r2, [sp, #16]
 800355c:	2301      	movs	r3, #1
 800355e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8003562:	4083      	lsls	r3, r0
 8003564:	1e5b      	subs	r3, r3, #1
 8003566:	9309      	str	r3, [sp, #36]	@ 0x24
 8003568:	2700      	movs	r7, #0
 800356a:	680a      	ldr	r2, [r1, #0]
 800356c:	6813      	ldr	r3, [r2, #0]
 800356e:	681c      	ldr	r4, [r3, #0]
 8003570:	9405      	str	r4, [sp, #20]
 8003572:	2302      	movs	r3, #2
 8003574:	9702      	str	r7, [sp, #8]
 8003576:	9307      	str	r3, [sp, #28]
 8003578:	688a      	ldr	r2, [r1, #8]
 800357a:	9206      	str	r2, [sp, #24]
 800357c:	6848      	ldr	r0, [r1, #4]
 800357e:	69c1      	ldr	r1, [r0, #28]
 8003580:	2902      	cmp	r1, #2
 8003582:	bf04      	itt	eq
 8003584:	2003      	moveq	r0, #3
 8003586:	9007      	streq	r0, [sp, #28]
 8003588:	2100      	movs	r1, #0
 800358a:	4648      	mov	r0, r9
 800358c:	f001 f8e8 	bl	8004760 <cmox_bn_cmpUint>
 8003590:	b950      	cbnz	r0, 80035a8 <cmox_ScalarMul_SC+0x78>
 8003592:	69b0      	ldr	r0, [r6, #24]
 8003594:	6800      	ldr	r0, [r0, #0]
 8003596:	69c1      	ldr	r1, [r0, #28]
 8003598:	2901      	cmp	r1, #1
 800359a:	d007      	beq.n	80035ac <cmox_ScalarMul_SC+0x7c>
 800359c:	6881      	ldr	r1, [r0, #8]
 800359e:	4648      	mov	r0, r9
 80035a0:	f001 f89d 	bl	80046de <cmox_bn_cmp>
 80035a4:	2800      	cmp	r0, #0
 80035a6:	d401      	bmi.n	80035ac <cmox_ScalarMul_SC+0x7c>
 80035a8:	2401      	movs	r4, #1
 80035aa:	e193      	b.n	80038d4 <cmox_ScalarMul_SC+0x3a4>
 80035ac:	69b0      	ldr	r0, [r6, #24]
 80035ae:	6841      	ldr	r1, [r0, #4]
 80035b0:	698a      	ldr	r2, [r1, #24]
 80035b2:	69f0      	ldr	r0, [r6, #28]
 80035b4:	0092      	lsls	r2, r2, #2
 80035b6:	f106 0114 	add.w	r1, r6, #20
 80035ba:	f7ff fc5e 	bl	8002e7a <cmox_membuf_alloc>
 80035be:	0004      	movs	r4, r0
 80035c0:	d1f3      	bne.n	80035aa <cmox_ScalarMul_SC+0x7a>
 80035c2:	46ba      	mov	sl, r7
 80035c4:	e00d      	b.n	80035e2 <cmox_ScalarMul_SC+0xb2>
 80035c6:	6800      	ldr	r0, [r0, #0]
 80035c8:	6801      	ldr	r1, [r0, #0]
 80035ca:	6970      	ldr	r0, [r6, #20]
 80035cc:	680a      	ldr	r2, [r1, #0]
 80035ce:	eb00 018a 	add.w	r1, r0, sl, lsl #2
 80035d2:	69f0      	ldr	r0, [r6, #28]
 80035d4:	f001 f800 	bl	80045d8 <cmox_bn_alloc>
 80035d8:	0004      	movs	r4, r0
 80035da:	f040 816f 	bne.w	80038bc <cmox_ScalarMul_SC+0x38c>
 80035de:	f10a 0a01 	add.w	sl, sl, #1
 80035e2:	69b0      	ldr	r0, [r6, #24]
 80035e4:	6841      	ldr	r1, [r0, #4]
 80035e6:	698a      	ldr	r2, [r1, #24]
 80035e8:	4592      	cmp	sl, r2
 80035ea:	dbec      	blt.n	80035c6 <cmox_ScalarMul_SC+0x96>
 80035ec:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 80035f0:	a902      	add	r1, sp, #8
 80035f2:	4630      	mov	r0, r6
 80035f4:	f7fc fe65 	bl	80002c2 <cmox_ECC_AllocPoint>
 80035f8:	0004      	movs	r4, r0
 80035fa:	f040 8154 	bne.w	80038a6 <cmox_ScalarMul_SC+0x376>
 80035fe:	9902      	ldr	r1, [sp, #8]
 8003600:	4630      	mov	r0, r6
 8003602:	f7fc ff45 	bl	8000490 <cmox_ECC_SetPointAtInfinity>
 8003606:	f899 0004 	ldrb.w	r0, [r9, #4]
 800360a:	f000 0001 	and.w	r0, r0, #1
 800360e:	9008      	str	r0, [sp, #32]
 8003610:	4644      	mov	r4, r8
 8003612:	69b1      	ldr	r1, [r6, #24]
 8003614:	6808      	ldr	r0, [r1, #0]
 8003616:	6882      	ldr	r2, [r0, #8]
 8003618:	9808      	ldr	r0, [sp, #32]
 800361a:	4649      	mov	r1, r9
 800361c:	f1c0 0001 	rsb	r0, r0, #1
 8003620:	f7ff fb14 	bl	8002c4c <cmox_FieldBN_CondNegate>
 8003624:	f8dd a000 	ldr.w	sl, [sp]
 8003628:	46b8      	mov	r8, r7
 800362a:	e00b      	b.n	8003644 <cmox_ScalarMul_SC+0x114>
 800362c:	f108 0b01 	add.w	fp, r8, #1
 8003630:	fb04 520b 	mla	r2, r4, fp, r5
 8003634:	2101      	movs	r1, #1
 8003636:	4648      	mov	r0, r9
 8003638:	f001 f8c1 	bl	80047be <cmox_bn_getBits>
 800363c:	fa00 f008 	lsl.w	r0, r0, r8
 8003640:	4307      	orrs	r7, r0
 8003642:	46d8      	mov	r8, fp
 8003644:	f1aa 0001 	sub.w	r0, sl, #1
 8003648:	4580      	cmp	r8, r0
 800364a:	d3ef      	bcc.n	800362c <cmox_ScalarMul_SC+0xfc>
 800364c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800364e:	4630      	mov	r0, r6
 8003650:	f7fc ff1e 	bl	8000490 <cmox_ECC_SetPointAtInfinity>
 8003654:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003656:	9001      	str	r0, [sp, #4]
 8003658:	2106      	movs	r1, #6
 800365a:	9100      	str	r1, [sp, #0]
 800365c:	1c7f      	adds	r7, r7, #1
 800365e:	9a06      	ldr	r2, [sp, #24]
 8003660:	9807      	ldr	r0, [sp, #28]
 8003662:	1d13      	adds	r3, r2, #4
 8003664:	1d11      	adds	r1, r2, #4
 8003666:	9a05      	ldr	r2, [sp, #20]
 8003668:	4347      	muls	r7, r0
 800366a:	1c7f      	adds	r7, r7, #1
 800366c:	4357      	muls	r7, r2
 800366e:	eb01 0287 	add.w	r2, r1, r7, lsl #2
 8003672:	9905      	ldr	r1, [sp, #20]
 8003674:	2001      	movs	r0, #1
 8003676:	f7fc ff4e 	bl	8000516 <cmox_ECC_CondImportPoint>
 800367a:	1ea7      	subs	r7, r4, #2
 800367c:	e052      	b.n	8003724 <cmox_ScalarMul_SC+0x1f4>
 800367e:	197a      	adds	r2, r7, r5
 8003680:	fb04 220b 	mla	r2, r4, fp, r2
 8003684:	1c52      	adds	r2, r2, #1
 8003686:	2101      	movs	r1, #1
 8003688:	4648      	mov	r0, r9
 800368a:	f001 f898 	bl	80047be <cmox_bn_getBits>
 800368e:	fa00 f00b 	lsl.w	r0, r0, fp
 8003692:	ea40 0808 	orr.w	r8, r0, r8
 8003696:	f10b 0b01 	add.w	fp, fp, #1
 800369a:	45d3      	cmp	fp, sl
 800369c:	d3ef      	bcc.n	800367e <cmox_ScalarMul_SC+0x14e>
 800369e:	f8d6 e018 	ldr.w	lr, [r6, #24]
 80036a2:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80036a6:	f8de c004 	ldr.w	ip, [lr, #4]
 80036aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80036ac:	f8dc c000 	ldr.w	ip, [ip]
 80036b0:	fa28 f000 	lsr.w	r0, r8, r0
 80036b4:	f000 0b01 	and.w	fp, r0, #1
 80036b8:	2301      	movs	r3, #1
 80036ba:	4611      	mov	r1, r2
 80036bc:	4630      	mov	r0, r6
 80036be:	47e0      	blx	ip
 80036c0:	9802      	ldr	r0, [sp, #8]
 80036c2:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80036c6:	f8dd c014 	ldr.w	ip, [sp, #20]
 80036ca:	9001      	str	r0, [sp, #4]
 80036cc:	2106      	movs	r1, #6
 80036ce:	9806      	ldr	r0, [sp, #24]
 80036d0:	9100      	str	r1, [sp, #0]
 80036d2:	1d02      	adds	r2, r0, #4
 80036d4:	f1ab 0101 	sub.w	r1, fp, #1
 80036d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80036da:	ea81 0108 	eor.w	r1, r1, r8
 80036de:	4008      	ands	r0, r1
 80036e0:	1c40      	adds	r0, r0, #1
 80036e2:	fb00 f00e 	mul.w	r0, r0, lr
 80036e6:	1c40      	adds	r0, r0, #1
 80036e8:	fb00 f00c 	mul.w	r0, r0, ip
 80036ec:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80036f0:	2300      	movs	r3, #0
 80036f2:	4661      	mov	r1, ip
 80036f4:	2001      	movs	r0, #1
 80036f6:	f7fc ff0e 	bl	8000516 <cmox_ECC_CondImportPoint>
 80036fa:	9a02      	ldr	r2, [sp, #8]
 80036fc:	f1cb 0b01 	rsb	fp, fp, #1
 8003700:	4631      	mov	r1, r6
 8003702:	4658      	mov	r0, fp
 8003704:	f7fc fe9d 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 8003708:	2000      	movs	r0, #0
 800370a:	9000      	str	r0, [sp, #0]
 800370c:	4630      	mov	r0, r6
 800370e:	f8d6 c018 	ldr.w	ip, [r6, #24]
 8003712:	f8dc e004 	ldr.w	lr, [ip, #4]
 8003716:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003718:	9a02      	ldr	r2, [sp, #8]
 800371a:	f8de c004 	ldr.w	ip, [lr, #4]
 800371e:	4619      	mov	r1, r3
 8003720:	47e0      	blx	ip
 8003722:	1e7f      	subs	r7, r7, #1
 8003724:	1e68      	subs	r0, r5, #1
 8003726:	4180      	sbcs	r0, r0
 8003728:	ebb7 7fd0 	cmp.w	r7, r0, lsr #31
 800372c:	db03      	blt.n	8003736 <cmox_ScalarMul_SC+0x206>
 800372e:	f04f 0800 	mov.w	r8, #0
 8003732:	46c3      	mov	fp, r8
 8003734:	e7b1      	b.n	800369a <cmox_ScalarMul_SC+0x16a>
 8003736:	bb9d      	cbnz	r5, 80037a0 <cmox_ScalarMul_SC+0x270>
 8003738:	2700      	movs	r7, #0
 800373a:	e009      	b.n	8003750 <cmox_ScalarMul_SC+0x220>
 800373c:	fb04 f207 	mul.w	r2, r4, r7
 8003740:	1c52      	adds	r2, r2, #1
 8003742:	2101      	movs	r1, #1
 8003744:	4648      	mov	r0, r9
 8003746:	f001 f83a 	bl	80047be <cmox_bn_getBits>
 800374a:	40b8      	lsls	r0, r7
 800374c:	4305      	orrs	r5, r0
 800374e:	1c7f      	adds	r7, r7, #1
 8003750:	4557      	cmp	r7, sl
 8003752:	d3f3      	bcc.n	800373c <cmox_ScalarMul_SC+0x20c>
 8003754:	69b4      	ldr	r4, [r6, #24]
 8003756:	6864      	ldr	r4, [r4, #4]
 8003758:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800375a:	f8d4 c000 	ldr.w	ip, [r4]
 800375e:	2301      	movs	r3, #1
 8003760:	4611      	mov	r1, r2
 8003762:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8003766:	fa25 f700 	lsr.w	r7, r5, r0
 800376a:	4630      	mov	r0, r6
 800376c:	47e0      	blx	ip
 800376e:	9802      	ldr	r0, [sp, #8]
 8003770:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003774:	9c05      	ldr	r4, [sp, #20]
 8003776:	9001      	str	r0, [sp, #4]
 8003778:	2106      	movs	r1, #6
 800377a:	9806      	ldr	r0, [sp, #24]
 800377c:	9100      	str	r1, [sp, #0]
 800377e:	f007 0701 	and.w	r7, r7, #1
 8003782:	1d02      	adds	r2, r0, #4
 8003784:	1e79      	subs	r1, r7, #1
 8003786:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003788:	404d      	eors	r5, r1
 800378a:	4005      	ands	r5, r0
 800378c:	1c6d      	adds	r5, r5, #1
 800378e:	fb05 f50a 	mul.w	r5, r5, sl
 8003792:	1c6d      	adds	r5, r5, #1
 8003794:	4365      	muls	r5, r4
 8003796:	2300      	movs	r3, #0
 8003798:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800379c:	4621      	mov	r1, r4
 800379e:	e04b      	b.n	8003838 <cmox_ScalarMul_SC+0x308>
 80037a0:	9806      	ldr	r0, [sp, #24]
 80037a2:	9a05      	ldr	r2, [sp, #20]
 80037a4:	1e6f      	subs	r7, r5, #1
 80037a6:	1d01      	adds	r1, r0, #4
 80037a8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80037aa:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 80037ae:	4692      	mov	sl, r2
 80037b0:	e029      	b.n	8003806 <cmox_ScalarMul_SC+0x2d6>
 80037b2:	2301      	movs	r3, #1
 80037b4:	462a      	mov	r2, r5
 80037b6:	4629      	mov	r1, r5
 80037b8:	4630      	mov	r0, r6
 80037ba:	47e0      	blx	ip
 80037bc:	1c7a      	adds	r2, r7, #1
 80037be:	2101      	movs	r1, #1
 80037c0:	4648      	mov	r0, r9
 80037c2:	f000 fffc 	bl	80047be <cmox_bn_getBits>
 80037c6:	4680      	mov	r8, r0
 80037c8:	9802      	ldr	r0, [sp, #8]
 80037ca:	9001      	str	r0, [sp, #4]
 80037cc:	2106      	movs	r1, #6
 80037ce:	9100      	str	r1, [sp, #0]
 80037d0:	2300      	movs	r3, #0
 80037d2:	4622      	mov	r2, r4
 80037d4:	4651      	mov	r1, sl
 80037d6:	2001      	movs	r0, #1
 80037d8:	f7fc fe9d 	bl	8000516 <cmox_ECC_CondImportPoint>
 80037dc:	9a02      	ldr	r2, [sp, #8]
 80037de:	f1c8 0801 	rsb	r8, r8, #1
 80037e2:	4631      	mov	r1, r6
 80037e4:	4640      	mov	r0, r8
 80037e6:	f7fc fe2c 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 80037ea:	2000      	movs	r0, #0
 80037ec:	9000      	str	r0, [sp, #0]
 80037ee:	462b      	mov	r3, r5
 80037f0:	f8d6 c018 	ldr.w	ip, [r6, #24]
 80037f4:	f8dc e004 	ldr.w	lr, [ip, #4]
 80037f8:	9a02      	ldr	r2, [sp, #8]
 80037fa:	f8de c004 	ldr.w	ip, [lr, #4]
 80037fe:	4629      	mov	r1, r5
 8003800:	4630      	mov	r0, r6
 8003802:	47e0      	blx	ip
 8003804:	1e7f      	subs	r7, r7, #1
 8003806:	69b0      	ldr	r0, [r6, #24]
 8003808:	6841      	ldr	r1, [r0, #4]
 800380a:	f8d1 c000 	ldr.w	ip, [r1]
 800380e:	2f00      	cmp	r7, #0
 8003810:	dccf      	bgt.n	80037b2 <cmox_ScalarMul_SC+0x282>
 8003812:	462a      	mov	r2, r5
 8003814:	950c      	str	r5, [sp, #48]	@ 0x30
 8003816:	2301      	movs	r3, #1
 8003818:	4611      	mov	r1, r2
 800381a:	4630      	mov	r0, r6
 800381c:	47e0      	blx	ip
 800381e:	2201      	movs	r2, #1
 8003820:	2101      	movs	r1, #1
 8003822:	4648      	mov	r0, r9
 8003824:	f000 ffcb 	bl	80047be <cmox_bn_getBits>
 8003828:	4607      	mov	r7, r0
 800382a:	2106      	movs	r1, #6
 800382c:	9802      	ldr	r0, [sp, #8]
 800382e:	9100      	str	r1, [sp, #0]
 8003830:	9001      	str	r0, [sp, #4]
 8003832:	2300      	movs	r3, #0
 8003834:	4622      	mov	r2, r4
 8003836:	4651      	mov	r1, sl
 8003838:	2001      	movs	r0, #1
 800383a:	f7fc fe6c 	bl	8000516 <cmox_ECC_CondImportPoint>
 800383e:	9a02      	ldr	r2, [sp, #8]
 8003840:	f1c7 0701 	rsb	r7, r7, #1
 8003844:	4631      	mov	r1, r6
 8003846:	4638      	mov	r0, r7
 8003848:	f7fc fdfb 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 800384c:	a803      	add	r0, sp, #12
 800384e:	9000      	str	r0, [sp, #0]
 8003850:	4630      	mov	r0, r6
 8003852:	69b4      	ldr	r4, [r6, #24]
 8003854:	6865      	ldr	r5, [r4, #4]
 8003856:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003858:	9a02      	ldr	r2, [sp, #8]
 800385a:	686c      	ldr	r4, [r5, #4]
 800385c:	4619      	mov	r1, r3
 800385e:	47a0      	blx	r4
 8003860:	69b4      	ldr	r4, [r6, #24]
 8003862:	6865      	ldr	r5, [r4, #4]
 8003864:	9b03      	ldr	r3, [sp, #12]
 8003866:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003868:	f8d5 a000 	ldr.w	sl, [r5]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	4611      	mov	r1, r2
 8003872:	4630      	mov	r0, r6
 8003874:	47d0      	blx	sl
 8003876:	69b0      	ldr	r0, [r6, #24]
 8003878:	6801      	ldr	r1, [r0, #0]
 800387a:	9c08      	ldr	r4, [sp, #32]
 800387c:	688a      	ldr	r2, [r1, #8]
 800387e:	f1c4 0401 	rsb	r4, r4, #1
 8003882:	4649      	mov	r1, r9
 8003884:	4620      	mov	r0, r4
 8003886:	f7ff f9e1 	bl	8002c4c <cmox_FieldBN_CondNegate>
 800388a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800388c:	4631      	mov	r1, r6
 800388e:	4620      	mov	r0, r4
 8003890:	f7fc fdd7 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 8003894:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003896:	4630      	mov	r0, r6
 8003898:	f7fc fee4 	bl	8000664 <cmox_ECC_PointFromModularDomain>
 800389c:	4604      	mov	r4, r0
 800389e:	a902      	add	r1, sp, #8
 80038a0:	4630      	mov	r0, r6
 80038a2:	f7fc fd6a 	bl	800037a <cmox_ECC_FreePoint>
 80038a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80038aa:	e007      	b.n	80038bc <cmox_ScalarMul_SC+0x38c>
 80038ac:	6971      	ldr	r1, [r6, #20]
 80038ae:	eb01 028a 	add.w	r2, r1, sl, lsl #2
 80038b2:	1f11      	subs	r1, r2, #4
 80038b4:	f000 fe9b 	bl	80045ee <cmox_bn_free>
 80038b8:	f1aa 0a01 	sub.w	sl, sl, #1
 80038bc:	69f0      	ldr	r0, [r6, #28]
 80038be:	f1ba 0f00 	cmp.w	sl, #0
 80038c2:	dcf3      	bgt.n	80038ac <cmox_ScalarMul_SC+0x37c>
 80038c4:	69b1      	ldr	r1, [r6, #24]
 80038c6:	684a      	ldr	r2, [r1, #4]
 80038c8:	6992      	ldr	r2, [r2, #24]
 80038ca:	0092      	lsls	r2, r2, #2
 80038cc:	f106 0114 	add.w	r1, r6, #20
 80038d0:	f7ff faf2 	bl	8002eb8 <cmox_membuf_free>
 80038d4:	4620      	mov	r0, r4
 80038d6:	b00d      	add	sp, #52	@ 0x34
 80038d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080038dc <cmox_ScalarMul_wMOF>:
 80038dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e0:	b099      	sub	sp, #100	@ 0x64
 80038e2:	460e      	mov	r6, r1
 80038e4:	f04f 31ff 	mov.w	r1, #4294967295
 80038e8:	9112      	str	r1, [sp, #72]	@ 0x48
 80038ea:	9111      	str	r1, [sp, #68]	@ 0x44
 80038ec:	9110      	str	r1, [sp, #64]	@ 0x40
 80038ee:	9101      	str	r1, [sp, #4]
 80038f0:	4617      	mov	r7, r2
 80038f2:	2101      	movs	r1, #1
 80038f4:	4605      	mov	r5, r0
 80038f6:	9117      	str	r1, [sp, #92]	@ 0x5c
 80038f8:	2200      	movs	r2, #0
 80038fa:	9207      	str	r2, [sp, #28]
 80038fc:	9206      	str	r2, [sp, #24]
 80038fe:	461c      	mov	r4, r3
 8003900:	69a9      	ldr	r1, [r5, #24]
 8003902:	6808      	ldr	r0, [r1, #0]
 8003904:	6802      	ldr	r2, [r0, #0]
 8003906:	6813      	ldr	r3, [r2, #0]
 8003908:	930a      	str	r3, [sp, #40]	@ 0x28
 800390a:	f04f 0902 	mov.w	r9, #2
 800390e:	68ca      	ldr	r2, [r1, #12]
 8003910:	6813      	ldr	r3, [r2, #0]
 8003912:	9304      	str	r3, [sp, #16]
 8003914:	9209      	str	r2, [sp, #36]	@ 0x24
 8003916:	9804      	ldr	r0, [sp, #16]
 8003918:	f8df 2634 	ldr.w	r2, [pc, #1588]	@ 8003f50 <cmox_ScalarMul_wMOF+0x674>
 800391c:	1e40      	subs	r0, r0, #1
 800391e:	0840      	lsrs	r0, r0, #1
 8003920:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8003924:	1f1a      	subs	r2, r3, #4
 8003926:	920c      	str	r2, [sp, #48]	@ 0x30
 8003928:	f8df 2628 	ldr.w	r2, [pc, #1576]	@ 8003f54 <cmox_ScalarMul_wMOF+0x678>
 800392c:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8003930:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8003934:	1f03      	subs	r3, r0, #4
 8003936:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003938:	6848      	ldr	r0, [r1, #4]
 800393a:	69c1      	ldr	r1, [r0, #28]
 800393c:	2902      	cmp	r1, #2
 800393e:	bf08      	it	eq
 8003940:	f04f 0903 	moveq.w	r9, #3
 8003944:	4641      	mov	r1, r8
 8003946:	4628      	mov	r0, r5
 8003948:	f7fc fda2 	bl	8000490 <cmox_ECC_SetPointAtInfinity>
 800394c:	4641      	mov	r1, r8
 800394e:	4628      	mov	r0, r5
 8003950:	f7fc fe5e 	bl	8000610 <cmox_ECC_PointToModularDomain>
 8003954:	69a8      	ldr	r0, [r5, #24]
 8003956:	6800      	ldr	r0, [r0, #0]
 8003958:	9408      	str	r4, [sp, #32]
 800395a:	69c1      	ldr	r1, [r0, #28]
 800395c:	2901      	cmp	r1, #1
 800395e:	d010      	beq.n	8003982 <cmox_ScalarMul_wMOF+0xa6>
 8003960:	6881      	ldr	r1, [r0, #8]
 8003962:	4630      	mov	r0, r6
 8003964:	f000 febb 	bl	80046de <cmox_bn_cmp>
 8003968:	2800      	cmp	r0, #0
 800396a:	d507      	bpl.n	800397c <cmox_ScalarMul_wMOF+0xa0>
 800396c:	69a8      	ldr	r0, [r5, #24]
 800396e:	6801      	ldr	r1, [r0, #0]
 8003970:	9808      	ldr	r0, [sp, #32]
 8003972:	6889      	ldr	r1, [r1, #8]
 8003974:	f000 feb3 	bl	80046de <cmox_bn_cmp>
 8003978:	2800      	cmp	r0, #0
 800397a:	d402      	bmi.n	8003982 <cmox_ScalarMul_wMOF+0xa6>
 800397c:	2001      	movs	r0, #1
 800397e:	9005      	str	r0, [sp, #20]
 8003980:	e2e1      	b.n	8003f46 <cmox_ScalarMul_wMOF+0x66a>
 8003982:	69a8      	ldr	r0, [r5, #24]
 8003984:	6841      	ldr	r1, [r0, #4]
 8003986:	698a      	ldr	r2, [r1, #24]
 8003988:	69e8      	ldr	r0, [r5, #28]
 800398a:	0092      	lsls	r2, r2, #2
 800398c:	f105 0114 	add.w	r1, r5, #20
 8003990:	f7ff fa73 	bl	8002e7a <cmox_membuf_alloc>
 8003994:	2800      	cmp	r0, #0
 8003996:	9005      	str	r0, [sp, #20]
 8003998:	d1f2      	bne.n	8003980 <cmox_ScalarMul_wMOF+0xa4>
 800399a:	2400      	movs	r4, #0
 800399c:	e00c      	b.n	80039b8 <cmox_ScalarMul_wMOF+0xdc>
 800399e:	6809      	ldr	r1, [r1, #0]
 80039a0:	680a      	ldr	r2, [r1, #0]
 80039a2:	6969      	ldr	r1, [r5, #20]
 80039a4:	6812      	ldr	r2, [r2, #0]
 80039a6:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80039aa:	f000 fe15 	bl	80045d8 <cmox_bn_alloc>
 80039ae:	2800      	cmp	r0, #0
 80039b0:	9005      	str	r0, [sp, #20]
 80039b2:	f040 82bd 	bne.w	8003f30 <cmox_ScalarMul_wMOF+0x654>
 80039b6:	1c64      	adds	r4, r4, #1
 80039b8:	69a9      	ldr	r1, [r5, #24]
 80039ba:	684a      	ldr	r2, [r1, #4]
 80039bc:	6993      	ldr	r3, [r2, #24]
 80039be:	69e8      	ldr	r0, [r5, #28]
 80039c0:	429c      	cmp	r4, r3
 80039c2:	d3ec      	bcc.n	800399e <cmox_ScalarMul_wMOF+0xc2>
 80039c4:	9b04      	ldr	r3, [sp, #16]
 80039c6:	2201      	movs	r2, #1
 80039c8:	1e99      	subs	r1, r3, #2
 80039ca:	408a      	lsls	r2, r1
 80039cc:	0092      	lsls	r2, r2, #2
 80039ce:	9215      	str	r2, [sp, #84]	@ 0x54
 80039d0:	a902      	add	r1, sp, #8
 80039d2:	f7ff fa52 	bl	8002e7a <cmox_membuf_alloc>
 80039d6:	2800      	cmp	r0, #0
 80039d8:	46a3      	mov	fp, r4
 80039da:	9005      	str	r0, [sp, #20]
 80039dc:	f040 829f 	bne.w	8003f1e <cmox_ScalarMul_wMOF+0x642>
 80039e0:	9904      	ldr	r1, [sp, #16]
 80039e2:	2001      	movs	r0, #1
 80039e4:	1e89      	subs	r1, r1, #2
 80039e6:	2400      	movs	r4, #0
 80039e8:	fa00 fa01 	lsl.w	sl, r0, r1
 80039ec:	e010      	b.n	8003a10 <cmox_ScalarMul_wMOF+0x134>
 80039ee:	9802      	ldr	r0, [sp, #8]
 80039f0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 80039f4:	4628      	mov	r0, r5
 80039f6:	f7fc fc64 	bl	80002c2 <cmox_ECC_AllocPoint>
 80039fa:	2800      	cmp	r0, #0
 80039fc:	9005      	str	r0, [sp, #20]
 80039fe:	f040 8287 	bne.w	8003f10 <cmox_ScalarMul_wMOF+0x634>
 8003a02:	9802      	ldr	r0, [sp, #8]
 8003a04:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
 8003a08:	4628      	mov	r0, r5
 8003a0a:	f7fc fd41 	bl	8000490 <cmox_ECC_SetPointAtInfinity>
 8003a0e:	1c64      	adds	r4, r4, #1
 8003a10:	4554      	cmp	r4, sl
 8003a12:	d3ec      	bcc.n	80039ee <cmox_ScalarMul_wMOF+0x112>
 8003a14:	9503      	str	r5, [sp, #12]
 8003a16:	9418      	str	r4, [sp, #96]	@ 0x60
 8003a18:	2100      	movs	r1, #0
 8003a1a:	463c      	mov	r4, r7
 8003a1c:	7c20      	ldrb	r0, [r4, #16]
 8003a1e:	f000 0004 	and.w	r0, r0, #4
 8003a22:	f7ff f9f4 	bl	8002e0e <cmox_mathUtils_neq>
 8003a26:	b920      	cbnz	r0, 8003a32 <cmox_ScalarMul_wMOF+0x156>
 8003a28:	9017      	str	r0, [sp, #92]	@ 0x5c
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	9803      	ldr	r0, [sp, #12]
 8003a2e:	f7fc fdef 	bl	8000610 <cmox_ECC_PointToModularDomain>
 8003a32:	9803      	ldr	r0, [sp, #12]
 8003a34:	4621      	mov	r1, r4
 8003a36:	f7fc fe43 	bl	80006c0 <cmox_ECC_PointValidation>
 8003a3a:	2800      	cmp	r0, #0
 8003a3c:	9005      	str	r0, [sp, #20]
 8003a3e:	f040 825c 	bne.w	8003efa <cmox_ScalarMul_wMOF+0x61e>
 8003a42:	9803      	ldr	r0, [sp, #12]
 8003a44:	6985      	ldr	r5, [r0, #24]
 8003a46:	9f02      	ldr	r7, [sp, #8]
 8003a48:	686d      	ldr	r5, [r5, #4]
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	68ef      	ldr	r7, [r5, #12]
 8003a4e:	2301      	movs	r3, #1
 8003a50:	4621      	mov	r1, r4
 8003a52:	47b8      	blx	r7
 8003a54:	9902      	ldr	r1, [sp, #8]
 8003a56:	2000      	movs	r0, #0
 8003a58:	9000      	str	r0, [sp, #0]
 8003a5a:	4622      	mov	r2, r4
 8003a5c:	9803      	ldr	r0, [sp, #12]
 8003a5e:	6985      	ldr	r5, [r0, #24]
 8003a60:	686d      	ldr	r5, [r5, #4]
 8003a62:	684b      	ldr	r3, [r1, #4]
 8003a64:	6809      	ldr	r1, [r1, #0]
 8003a66:	692f      	ldr	r7, [r5, #16]
 8003a68:	47b8      	blx	r7
 8003a6a:	9f03      	ldr	r7, [sp, #12]
 8003a6c:	2502      	movs	r5, #2
 8003a6e:	e010      	b.n	8003a92 <cmox_ScalarMul_wMOF+0x1b6>
 8003a70:	9802      	ldr	r0, [sp, #8]
 8003a72:	f8d7 c018 	ldr.w	ip, [r7, #24]
 8003a76:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 8003a7a:	6802      	ldr	r2, [r0, #0]
 8003a7c:	f8dc e004 	ldr.w	lr, [ip, #4]
 8003a80:	f8de c014 	ldr.w	ip, [lr, #20]
 8003a84:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8003a88:	1c6d      	adds	r5, r5, #1
 8003a8a:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8003a8e:	4638      	mov	r0, r7
 8003a90:	47e0      	blx	ip
 8003a92:	2001      	movs	r0, #1
 8003a94:	4555      	cmp	r5, sl
 8003a96:	900e      	str	r0, [sp, #56]	@ 0x38
 8003a98:	d3ea      	bcc.n	8003a70 <cmox_ScalarMul_wMOF+0x194>
 8003a9a:	9808      	ldr	r0, [sp, #32]
 8003a9c:	f000 fe76 	bl	800478c <cmox_bn_countBits>
 8003aa0:	4605      	mov	r5, r0
 8003aa2:	4630      	mov	r0, r6
 8003aa4:	f000 fe72 	bl	800478c <cmox_bn_countBits>
 8003aa8:	4285      	cmp	r5, r0
 8003aaa:	bf2c      	ite	cs
 8003aac:	9808      	ldrcs	r0, [sp, #32]
 8003aae:	4630      	movcc	r0, r6
 8003ab0:	f000 fe6c 	bl	800478c <cmox_bn_countBits>
 8003ab4:	960d      	str	r6, [sp, #52]	@ 0x34
 8003ab6:	940f      	str	r4, [sp, #60]	@ 0x3c
 8003ab8:	9d01      	ldr	r5, [sp, #4]
 8003aba:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8003abc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8003abe:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 8003ac2:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
 8003ac6:	4681      	mov	r9, r0
 8003ac8:	e075      	b.n	8003bb6 <cmox_ScalarMul_wMOF+0x2da>
 8003aca:	f8dd c030 	ldr.w	ip, [sp, #48]	@ 0x30
 8003ace:	9a03      	ldr	r2, [sp, #12]
 8003ad0:	9806      	ldr	r0, [sp, #24]
 8003ad2:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8003ad4:	9101      	str	r1, [sp, #4]
 8003ad6:	1a10      	subs	r0, r2, r0
 8003ad8:	f1a0 0e01 	sub.w	lr, r0, #1
 8003adc:	ea4f 0ede 	mov.w	lr, lr, lsr #3
 8003ae0:	1e40      	subs	r0, r0, #1
 8003ae2:	2106      	movs	r1, #6
 8003ae4:	0080      	lsls	r0, r0, #2
 8003ae6:	9100      	str	r1, [sp, #0]
 8003ae8:	f000 001c 	and.w	r0, r0, #28
 8003aec:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
 8003af0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003af2:	fa2c f000 	lsr.w	r0, ip, r0
 8003af6:	1d13      	adds	r3, r2, #4
 8003af8:	1d11      	adds	r1, r2, #4
 8003afa:	f000 000f 	and.w	r0, r0, #15
 8003afe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003b00:	4346      	muls	r6, r0
 8003b02:	1c76      	adds	r6, r6, #1
 8003b04:	4372      	muls	r2, r6
 8003b06:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003b0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	f7fc fd02 	bl	8000516 <cmox_ECC_CondImportPoint>
 8003b12:	9802      	ldr	r0, [sp, #8]
 8003b14:	6802      	ldr	r2, [r0, #0]
 8003b16:	4639      	mov	r1, r7
 8003b18:	2001      	movs	r0, #1
 8003b1a:	f7fc fc92 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 8003b1e:	e03a      	b.n	8003b96 <cmox_ScalarMul_wMOF+0x2ba>
 8003b20:	9903      	ldr	r1, [sp, #12]
 8003b22:	1a08      	subs	r0, r1, r0
 8003b24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003b26:	1e42      	subs	r2, r0, #1
 8003b28:	08d2      	lsrs	r2, r2, #3
 8003b2a:	1e40      	subs	r0, r0, #1
 8003b2c:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 8003b30:	0080      	lsls	r0, r0, #2
 8003b32:	f000 001c 	and.w	r0, r0, #28
 8003b36:	40c5      	lsrs	r5, r0
 8003b38:	f89d 6002 	ldrb.w	r6, [sp, #2]
 8003b3c:	f005 050f 	and.w	r5, r5, #15
 8003b40:	1b76      	subs	r6, r6, r5
 8003b42:	b276      	sxtb	r6, r6
 8003b44:	bbae      	cbnz	r6, 8003bb2 <cmox_ScalarMul_wMOF+0x2d6>
 8003b46:	9802      	ldr	r0, [sp, #8]
 8003b48:	6801      	ldr	r1, [r0, #0]
 8003b4a:	9a06      	ldr	r2, [sp, #24]
 8003b4c:	9801      	ldr	r0, [sp, #4]
 8003b4e:	4282      	cmp	r2, r0
 8003b50:	dabb      	bge.n	8003aca <cmox_ScalarMul_wMOF+0x1ee>
 8003b52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003b54:	f8dd c018 	ldr.w	ip, [sp, #24]
 8003b58:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8003b5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b5c:	9101      	str	r1, [sp, #4]
 8003b5e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8003b62:	2106      	movs	r1, #6
 8003b64:	9100      	str	r1, [sp, #0]
 8003b66:	1d03      	adds	r3, r0, #4
 8003b68:	f856 602c 	ldr.w	r6, [r6, ip, lsl #2]
 8003b6c:	f8dd c018 	ldr.w	ip, [sp, #24]
 8003b70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003b72:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
 8003b76:	f00e 0e1c 	and.w	lr, lr, #28
 8003b7a:	fa26 f60e 	lsr.w	r6, r6, lr
 8003b7e:	f006 060f 	and.w	r6, r6, #15
 8003b82:	4372      	muls	r2, r6
 8003b84:	1c52      	adds	r2, r2, #1
 8003b86:	1d00      	adds	r0, r0, #4
 8003b88:	4351      	muls	r1, r2
 8003b8a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8003b8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003b90:	2001      	movs	r0, #1
 8003b92:	f7fc fcc0 	bl	8000516 <cmox_ECC_CondImportPoint>
 8003b96:	9902      	ldr	r1, [sp, #8]
 8003b98:	2000      	movs	r0, #0
 8003b9a:	9000      	str	r0, [sp, #0]
 8003b9c:	4643      	mov	r3, r8
 8003b9e:	69be      	ldr	r6, [r7, #24]
 8003ba0:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8003ba4:	680a      	ldr	r2, [r1, #0]
 8003ba6:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8003baa:	4641      	mov	r1, r8
 8003bac:	4638      	mov	r0, r7
 8003bae:	47b0      	blx	r6
 8003bb0:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003bb2:	f1a9 0901 	sub.w	r9, r9, #1
 8003bb6:	f1b9 0f00 	cmp.w	r9, #0
 8003bba:	bfd8      	it	le
 8003bbc:	2c00      	cmple	r4, #0
 8003bbe:	dc06      	bgt.n	8003bce <cmox_ScalarMul_wMOF+0x2f2>
 8003bc0:	f1ba 0f00 	cmp.w	sl, #0
 8003bc4:	bfdc      	itt	le
 8003bc6:	2e00      	cmple	r6, #0
 8003bc8:	2d00      	cmple	r5, #0
 8003bca:	f340 813a 	ble.w	8003e42 <cmox_ScalarMul_wMOF+0x566>
 8003bce:	f1b9 0f00 	cmp.w	r9, #0
 8003bd2:	d40a      	bmi.n	8003bea <cmox_ScalarMul_wMOF+0x30e>
 8003bd4:	f8d7 c018 	ldr.w	ip, [r7, #24]
 8003bd8:	f8dc e004 	ldr.w	lr, [ip, #4]
 8003bdc:	f8de c00c 	ldr.w	ip, [lr, #12]
 8003be0:	2301      	movs	r3, #1
 8003be2:	4642      	mov	r2, r8
 8003be4:	4641      	mov	r1, r8
 8003be6:	4638      	mov	r0, r7
 8003be8:	47e0      	blx	ip
 8003bea:	2c00      	cmp	r4, #0
 8003bec:	dd02      	ble.n	8003bf4 <cmox_ScalarMul_wMOF+0x318>
 8003bee:	1e64      	subs	r4, r4, #1
 8003bf0:	b264      	sxtb	r4, r4
 8003bf2:	e006      	b.n	8003c02 <cmox_ScalarMul_wMOF+0x326>
 8003bf4:	f1ba 0f00 	cmp.w	sl, #0
 8003bf8:	bfc4      	itt	gt
 8003bfa:	f1aa 0001 	subgt.w	r0, sl, #1
 8003bfe:	fa4f fa80 	sxtbgt.w	sl, r0
 8003c02:	2e00      	cmp	r6, #0
 8003c04:	dd02      	ble.n	8003c0c <cmox_ScalarMul_wMOF+0x330>
 8003c06:	1e76      	subs	r6, r6, #1
 8003c08:	b276      	sxtb	r6, r6
 8003c0a:	e003      	b.n	8003c14 <cmox_ScalarMul_wMOF+0x338>
 8003c0c:	2d00      	cmp	r5, #0
 8003c0e:	bfc4      	itt	gt
 8003c10:	1e6d      	subgt	r5, r5, #1
 8003c12:	b26d      	sxtbgt	r5, r5
 8003c14:	9904      	ldr	r1, [sp, #16]
 8003c16:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8003c18:	1c49      	adds	r1, r1, #1
 8003c1a:	4088      	lsls	r0, r1
 8003c1c:	1e40      	subs	r0, r0, #1
 8003c1e:	f88d 0003 	strb.w	r0, [sp, #3]
 8003c22:	9804      	ldr	r0, [sp, #16]
 8003c24:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003c26:	1e42      	subs	r2, r0, #1
 8003c28:	4091      	lsls	r1, r2
 8003c2a:	9101      	str	r1, [sp, #4]
 8003c2c:	9804      	ldr	r0, [sp, #16]
 8003c2e:	9a04      	ldr	r2, [sp, #16]
 8003c30:	1e41      	subs	r1, r0, #1
 8003c32:	f88d 1002 	strb.w	r1, [sp, #2]
 8003c36:	eba2 0209 	sub.w	r2, r2, r9
 8003c3a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8003c3c:	9904      	ldr	r1, [sp, #16]
 8003c3e:	f88d 2001 	strb.w	r2, [sp, #1]
 8003c42:	4088      	lsls	r0, r1
 8003c44:	9904      	ldr	r1, [sp, #16]
 8003c46:	9003      	str	r0, [sp, #12]
 8003c48:	eba9 0101 	sub.w	r1, r9, r1
 8003c4c:	9114      	str	r1, [sp, #80]	@ 0x50
 8003c4e:	f1c9 0201 	rsb	r2, r9, #1
 8003c52:	9904      	ldr	r1, [sp, #16]
 8003c54:	9804      	ldr	r0, [sp, #16]
 8003c56:	f88d 2000 	strb.w	r2, [sp]
 8003c5a:	eba9 0101 	sub.w	r1, r9, r1
 8003c5e:	9112      	str	r1, [sp, #72]	@ 0x48
 8003c60:	1c40      	adds	r0, r0, #1
 8003c62:	2c00      	cmp	r4, #0
 8003c64:	f1a9 0101 	sub.w	r1, r9, #1
 8003c68:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6c:	bfc8      	it	gt
 8003c6e:	f1ba 0f00 	cmpgt.w	sl, #0
 8003c72:	9013      	str	r0, [sp, #76]	@ 0x4c
 8003c74:	9111      	str	r1, [sp, #68]	@ 0x44
 8003c76:	9210      	str	r2, [sp, #64]	@ 0x40
 8003c78:	dc56      	bgt.n	8003d28 <cmox_ScalarMul_wMOF+0x44c>
 8003c7a:	f1b9 0f00 	cmp.w	r9, #0
 8003c7e:	dd06      	ble.n	8003c8e <cmox_ScalarMul_wMOF+0x3b2>
 8003c80:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003c82:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003c84:	2102      	movs	r1, #2
 8003c86:	f000 fd9a 	bl	80047be <cmox_bn_getBits>
 8003c8a:	b2c0      	uxtb	r0, r0
 8003c8c:	e007      	b.n	8003c9e <cmox_ScalarMul_wMOF+0x3c2>
 8003c8e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003c90:	6841      	ldr	r1, [r0, #4]
 8003c92:	f89d 0000 	ldrb.w	r0, [sp]
 8003c96:	fa01 f000 	lsl.w	r0, r1, r0
 8003c9a:	f000 0003 	and.w	r0, r0, #3
 8003c9e:	2c00      	cmp	r4, #0
 8003ca0:	d541      	bpl.n	8003d26 <cmox_ScalarMul_wMOF+0x44a>
 8003ca2:	f1ba 0f00 	cmp.w	sl, #0
 8003ca6:	dc3f      	bgt.n	8003d28 <cmox_ScalarMul_wMOF+0x44c>
 8003ca8:	f000 0101 	and.w	r1, r0, #1
 8003cac:	ea91 0f60 	teq	r1, r0, asr #1
 8003cb0:	f000 8080 	beq.w	8003db4 <cmox_ScalarMul_wMOF+0x4d8>
 8003cb4:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	d405      	bmi.n	8003cc6 <cmox_ScalarMul_wMOF+0x3ea>
 8003cba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003cbc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8003cbe:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003cc0:	f000 fd7d 	bl	80047be <cmox_bn_getBits>
 8003cc4:	e008      	b.n	8003cd8 <cmox_ScalarMul_wMOF+0x3fc>
 8003cc6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003cc8:	6841      	ldr	r1, [r0, #4]
 8003cca:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8003cce:	fa01 f000 	lsl.w	r0, r1, r0
 8003cd2:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8003cd6:	4008      	ands	r0, r1
 8003cd8:	9a01      	ldr	r2, [sp, #4]
 8003cda:	9901      	ldr	r1, [sp, #4]
 8003cdc:	1a80      	subs	r0, r0, r2
 8003cde:	b2c0      	uxtb	r0, r0
 8003ce0:	4288      	cmp	r0, r1
 8003ce2:	9007      	str	r0, [sp, #28]
 8003ce4:	da0b      	bge.n	8003cfe <cmox_ScalarMul_wMOF+0x422>
 8003ce6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003ce8:	9907      	ldr	r1, [sp, #28]
 8003cea:	08c9      	lsrs	r1, r1, #3
 8003cec:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 8003cf0:	9807      	ldr	r0, [sp, #28]
 8003cf2:	0081      	lsls	r1, r0, #2
 8003cf4:	f001 011c 	and.w	r1, r1, #28
 8003cf8:	fa22 f001 	lsr.w	r0, r2, r1
 8003cfc:	e00c      	b.n	8003d18 <cmox_ScalarMul_wMOF+0x43c>
 8003cfe:	9903      	ldr	r1, [sp, #12]
 8003d00:	1a08      	subs	r0, r1, r0
 8003d02:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003d04:	1e42      	subs	r2, r0, #1
 8003d06:	08d2      	lsrs	r2, r2, #3
 8003d08:	1e40      	subs	r0, r0, #1
 8003d0a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8003d0e:	0080      	lsls	r0, r0, #2
 8003d10:	f000 001c 	and.w	r0, r0, #28
 8003d14:	fa21 f000 	lsr.w	r0, r1, r0
 8003d18:	f89d 4002 	ldrb.w	r4, [sp, #2]
 8003d1c:	f000 0a0f 	and.w	sl, r0, #15
 8003d20:	eba4 040a 	sub.w	r4, r4, sl
 8003d24:	b264      	sxtb	r4, r4
 8003d26:	2c00      	cmp	r4, #0
 8003d28:	d144      	bne.n	8003db4 <cmox_ScalarMul_wMOF+0x4d8>
 8003d2a:	9807      	ldr	r0, [sp, #28]
 8003d2c:	9901      	ldr	r1, [sp, #4]
 8003d2e:	4288      	cmp	r0, r1
 8003d30:	da16      	bge.n	8003d60 <cmox_ScalarMul_wMOF+0x484>
 8003d32:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003d34:	9907      	ldr	r1, [sp, #28]
 8003d36:	08c9      	lsrs	r1, r1, #3
 8003d38:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8003d3c:	9907      	ldr	r1, [sp, #28]
 8003d3e:	008a      	lsls	r2, r1, #2
 8003d40:	69b9      	ldr	r1, [r7, #24]
 8003d42:	f002 021c 	and.w	r2, r2, #28
 8003d46:	40d0      	lsrs	r0, r2
 8003d48:	684a      	ldr	r2, [r1, #4]
 8003d4a:	6954      	ldr	r4, [r2, #20]
 8003d4c:	f010 000f 	ands.w	r0, r0, #15
 8003d50:	4643      	mov	r3, r8
 8003d52:	d101      	bne.n	8003d58 <cmox_ScalarMul_wMOF+0x47c>
 8003d54:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8003d56:	e029      	b.n	8003dac <cmox_ScalarMul_wMOF+0x4d0>
 8003d58:	9902      	ldr	r1, [sp, #8]
 8003d5a:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 8003d5e:	e025      	b.n	8003dac <cmox_ScalarMul_wMOF+0x4d0>
 8003d60:	9803      	ldr	r0, [sp, #12]
 8003d62:	9907      	ldr	r1, [sp, #28]
 8003d64:	1a41      	subs	r1, r0, r1
 8003d66:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003d68:	1e4a      	subs	r2, r1, #1
 8003d6a:	08d2      	lsrs	r2, r2, #3
 8003d6c:	1e49      	subs	r1, r1, #1
 8003d6e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8003d72:	0089      	lsls	r1, r1, #2
 8003d74:	f001 011c 	and.w	r1, r1, #28
 8003d78:	40c8      	lsrs	r0, r1
 8003d7a:	9902      	ldr	r1, [sp, #8]
 8003d7c:	680a      	ldr	r2, [r1, #0]
 8003d7e:	f010 000f 	ands.w	r0, r0, #15
 8003d82:	bf0c      	ite	eq
 8003d84:	990f      	ldreq	r1, [sp, #60]	@ 0x3c
 8003d86:	f851 1020 	ldrne.w	r1, [r1, r0, lsl #2]
 8003d8a:	2001      	movs	r0, #1
 8003d8c:	f7fc fb26 	bl	80003dc <cmox_ECC_CondCopyPoint>
 8003d90:	9802      	ldr	r0, [sp, #8]
 8003d92:	6802      	ldr	r2, [r0, #0]
 8003d94:	4639      	mov	r1, r7
 8003d96:	2001      	movs	r0, #1
 8003d98:	f7fc fb53 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 8003d9c:	69bc      	ldr	r4, [r7, #24]
 8003d9e:	9802      	ldr	r0, [sp, #8]
 8003da0:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8003da4:	6802      	ldr	r2, [r0, #0]
 8003da6:	f8dc 4014 	ldr.w	r4, [ip, #20]
 8003daa:	4643      	mov	r3, r8
 8003dac:	4641      	mov	r1, r8
 8003dae:	4638      	mov	r0, r7
 8003db0:	47a0      	blx	r4
 8003db2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8003db4:	2e00      	cmp	r6, #0
 8003db6:	bfc8      	it	gt
 8003db8:	2d00      	cmpgt	r5, #0
 8003dba:	dc15      	bgt.n	8003de8 <cmox_ScalarMul_wMOF+0x50c>
 8003dbc:	f1b9 0f00 	cmp.w	r9, #0
 8003dc0:	dd06      	ble.n	8003dd0 <cmox_ScalarMul_wMOF+0x4f4>
 8003dc2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003dc4:	9808      	ldr	r0, [sp, #32]
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	f000 fcf9 	bl	80047be <cmox_bn_getBits>
 8003dcc:	b2c0      	uxtb	r0, r0
 8003dce:	e007      	b.n	8003de0 <cmox_ScalarMul_wMOF+0x504>
 8003dd0:	9808      	ldr	r0, [sp, #32]
 8003dd2:	6841      	ldr	r1, [r0, #4]
 8003dd4:	f89d 0000 	ldrb.w	r0, [sp]
 8003dd8:	fa01 f000 	lsl.w	r0, r1, r0
 8003ddc:	f000 0003 	and.w	r0, r0, #3
 8003de0:	2e00      	cmp	r6, #0
 8003de2:	f57f aeaf 	bpl.w	8003b44 <cmox_ScalarMul_wMOF+0x268>
 8003de6:	2d00      	cmp	r5, #0
 8003de8:	f73f aee3 	bgt.w	8003bb2 <cmox_ScalarMul_wMOF+0x2d6>
 8003dec:	f000 0101 	and.w	r1, r0, #1
 8003df0:	ea91 0f60 	teq	r1, r0, asr #1
 8003df4:	f43f aedd 	beq.w	8003bb2 <cmox_ScalarMul_wMOF+0x2d6>
 8003df8:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8003dfa:	2800      	cmp	r0, #0
 8003dfc:	d405      	bmi.n	8003e0a <cmox_ScalarMul_wMOF+0x52e>
 8003dfe:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003e00:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8003e02:	9808      	ldr	r0, [sp, #32]
 8003e04:	f000 fcdb 	bl	80047be <cmox_bn_getBits>
 8003e08:	e008      	b.n	8003e1c <cmox_ScalarMul_wMOF+0x540>
 8003e0a:	9808      	ldr	r0, [sp, #32]
 8003e0c:	6841      	ldr	r1, [r0, #4]
 8003e0e:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8003e12:	fa01 f000 	lsl.w	r0, r1, r0
 8003e16:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8003e1a:	4008      	ands	r0, r1
 8003e1c:	9a01      	ldr	r2, [sp, #4]
 8003e1e:	9901      	ldr	r1, [sp, #4]
 8003e20:	1a80      	subs	r0, r0, r2
 8003e22:	b2c0      	uxtb	r0, r0
 8003e24:	4288      	cmp	r0, r1
 8003e26:	9006      	str	r0, [sp, #24]
 8003e28:	f6bf ae7a 	bge.w	8003b20 <cmox_ScalarMul_wMOF+0x244>
 8003e2c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003e2e:	9906      	ldr	r1, [sp, #24]
 8003e30:	08c9      	lsrs	r1, r1, #3
 8003e32:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8003e36:	9806      	ldr	r0, [sp, #24]
 8003e38:	0081      	lsls	r1, r0, #2
 8003e3a:	f001 011c 	and.w	r1, r1, #28
 8003e3e:	40cd      	lsrs	r5, r1
 8003e40:	e67a      	b.n	8003b38 <cmox_ScalarMul_wMOF+0x25c>
 8003e42:	9703      	str	r7, [sp, #12]
 8003e44:	f1b9 0f00 	cmp.w	r9, #0
 8003e48:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8003e4a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8003e4c:	9f08      	ldr	r7, [sp, #32]
 8003e4e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003e52:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8003e54:	d146      	bne.n	8003ee4 <cmox_ScalarMul_wMOF+0x608>
 8003e56:	9803      	ldr	r0, [sp, #12]
 8003e58:	f8d0 e018 	ldr.w	lr, [r0, #24]
 8003e5c:	f8de 9004 	ldr.w	r9, [lr, #4]
 8003e60:	f8d9 c00c 	ldr.w	ip, [r9, #12]
 8003e64:	2301      	movs	r3, #1
 8003e66:	4642      	mov	r2, r8
 8003e68:	4641      	mov	r1, r8
 8003e6a:	47e0      	blx	ip
 8003e6c:	7920      	ldrb	r0, [r4, #4]
 8003e6e:	07c1      	lsls	r1, r0, #31
 8003e70:	d517      	bpl.n	8003ea2 <cmox_ScalarMul_wMOF+0x5c6>
 8003e72:	9802      	ldr	r0, [sp, #8]
 8003e74:	6802      	ldr	r2, [r0, #0]
 8003e76:	4631      	mov	r1, r6
 8003e78:	2001      	movs	r0, #1
 8003e7a:	f7fc faaf 	bl	80003dc <cmox_ECC_CondCopyPoint>
 8003e7e:	9802      	ldr	r0, [sp, #8]
 8003e80:	6802      	ldr	r2, [r0, #0]
 8003e82:	9903      	ldr	r1, [sp, #12]
 8003e84:	2001      	movs	r0, #1
 8003e86:	f7fc fadc 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 8003e8a:	9803      	ldr	r0, [sp, #12]
 8003e8c:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8003e90:	9a02      	ldr	r2, [sp, #8]
 8003e92:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8003e96:	6812      	ldr	r2, [r2, #0]
 8003e98:	f8d4 c014 	ldr.w	ip, [r4, #20]
 8003e9c:	4643      	mov	r3, r8
 8003e9e:	4641      	mov	r1, r8
 8003ea0:	47e0      	blx	ip
 8003ea2:	7938      	ldrb	r0, [r7, #4]
 8003ea4:	07c1      	lsls	r1, r0, #31
 8003ea6:	d51d      	bpl.n	8003ee4 <cmox_ScalarMul_wMOF+0x608>
 8003ea8:	9802      	ldr	r0, [sp, #8]
 8003eaa:	6801      	ldr	r1, [r0, #0]
 8003eac:	9101      	str	r1, [sp, #4]
 8003eae:	2206      	movs	r2, #6
 8003eb0:	9200      	str	r2, [sp, #0]
 8003eb2:	1d28      	adds	r0, r5, #4
 8003eb4:	eb00 028a 	add.w	r2, r0, sl, lsl #2
 8003eb8:	1d2b      	adds	r3, r5, #4
 8003eba:	4651      	mov	r1, sl
 8003ebc:	2001      	movs	r0, #1
 8003ebe:	f7fc fb2a 	bl	8000516 <cmox_ECC_CondImportPoint>
 8003ec2:	9802      	ldr	r0, [sp, #8]
 8003ec4:	6802      	ldr	r2, [r0, #0]
 8003ec6:	9903      	ldr	r1, [sp, #12]
 8003ec8:	2001      	movs	r0, #1
 8003eca:	f7fc faba 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 8003ece:	9902      	ldr	r1, [sp, #8]
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	9000      	str	r0, [sp, #0]
 8003ed4:	4643      	mov	r3, r8
 8003ed6:	9803      	ldr	r0, [sp, #12]
 8003ed8:	6987      	ldr	r7, [r0, #24]
 8003eda:	687c      	ldr	r4, [r7, #4]
 8003edc:	680a      	ldr	r2, [r1, #0]
 8003ede:	6927      	ldr	r7, [r4, #16]
 8003ee0:	4641      	mov	r1, r8
 8003ee2:	47b8      	blx	r7
 8003ee4:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8003ee6:	b940      	cbnz	r0, 8003efa <cmox_ScalarMul_wMOF+0x61e>
 8003ee8:	9803      	ldr	r0, [sp, #12]
 8003eea:	4631      	mov	r1, r6
 8003eec:	f7fc fbba 	bl	8000664 <cmox_ECC_PointFromModularDomain>
 8003ef0:	9005      	str	r0, [sp, #20]
 8003ef2:	4641      	mov	r1, r8
 8003ef4:	9803      	ldr	r0, [sp, #12]
 8003ef6:	f7fc fbb5 	bl	8000664 <cmox_ECC_PointFromModularDomain>
 8003efa:	9d03      	ldr	r5, [sp, #12]
 8003efc:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8003efe:	e007      	b.n	8003f10 <cmox_ScalarMul_wMOF+0x634>
 8003f00:	9802      	ldr	r0, [sp, #8]
 8003f02:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8003f06:	1f09      	subs	r1, r1, #4
 8003f08:	4628      	mov	r0, r5
 8003f0a:	f7fc fa36 	bl	800037a <cmox_ECC_FreePoint>
 8003f0e:	1e64      	subs	r4, r4, #1
 8003f10:	2c00      	cmp	r4, #0
 8003f12:	d1f5      	bne.n	8003f00 <cmox_ScalarMul_wMOF+0x624>
 8003f14:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003f16:	69e8      	ldr	r0, [r5, #28]
 8003f18:	a902      	add	r1, sp, #8
 8003f1a:	f7fe ffcd 	bl	8002eb8 <cmox_membuf_free>
 8003f1e:	465c      	mov	r4, fp
 8003f20:	e006      	b.n	8003f30 <cmox_ScalarMul_wMOF+0x654>
 8003f22:	6969      	ldr	r1, [r5, #20]
 8003f24:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 8003f28:	1f11      	subs	r1, r2, #4
 8003f2a:	f000 fb60 	bl	80045ee <cmox_bn_free>
 8003f2e:	1e64      	subs	r4, r4, #1
 8003f30:	69e8      	ldr	r0, [r5, #28]
 8003f32:	2c00      	cmp	r4, #0
 8003f34:	d1f5      	bne.n	8003f22 <cmox_ScalarMul_wMOF+0x646>
 8003f36:	69a9      	ldr	r1, [r5, #24]
 8003f38:	684a      	ldr	r2, [r1, #4]
 8003f3a:	6992      	ldr	r2, [r2, #24]
 8003f3c:	0092      	lsls	r2, r2, #2
 8003f3e:	f105 0114 	add.w	r1, r5, #20
 8003f42:	f7fe ffb9 	bl	8002eb8 <cmox_membuf_free>
 8003f46:	9805      	ldr	r0, [sp, #20]
 8003f48:	b019      	add	sp, #100	@ 0x64
 8003f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f4e:	bf00      	nop
 8003f50:	08003f58 	.word	0x08003f58
 8003f54:	08003f64 	.word	0x08003f64

08003f58 <cmox_ScalarMul_wMOF::T_Pi>:
 8003f58:	00000110 15522440 07733661              ....@$R.a6s.

08003f64 <cmox_ScalarMul_wMOF::T_DblAfter>:
 8003f64:	00002001 20011003 40011002              . ..... ...@

08003f70 <cmox_ScalarMul_wNAFRecoding>:
 8003f70:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f74:	4681      	mov	r9, r0
 8003f76:	460f      	mov	r7, r1
 8003f78:	2000      	movs	r0, #0
 8003f7a:	4692      	mov	sl, r2
 8003f7c:	9000      	str	r0, [sp, #0]
 8003f7e:	461e      	mov	r6, r3
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	4669      	mov	r1, sp
 8003f84:	4648      	mov	r0, r9
 8003f86:	f000 fb27 	bl	80045d8 <cmox_bn_alloc>
 8003f8a:	2500      	movs	r5, #0
 8003f8c:	ea5f 0800 	movs.w	r8, r0
 8003f90:	d138      	bne.n	8004004 <cmox_ScalarMul_wNAFRecoding+0x94>
 8003f92:	9800      	ldr	r0, [sp, #0]
 8003f94:	2100      	movs	r1, #0
 8003f96:	f000 fb56 	bl	8004646 <cmox_bn_init>
 8003f9a:	9a00      	ldr	r2, [sp, #0]
 8003f9c:	4639      	mov	r1, r7
 8003f9e:	2001      	movs	r0, #1
 8003fa0:	f000 fb60 	bl	8004664 <cmox_bn_cCopy>
 8003fa4:	2401      	movs	r4, #1
 8003fa6:	f1aa 0701 	sub.w	r7, sl, #1
 8003faa:	fa04 f707 	lsl.w	r7, r4, r7
 8003fae:	e01c      	b.n	8003fea <cmox_ScalarMul_wNAFRecoding+0x7a>
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	5571      	strb	r1, [r6, r5]
 8003fb4:	e013      	b.n	8003fde <cmox_ScalarMul_wNAFRecoding+0x6e>
 8003fb6:	9800      	ldr	r0, [sp, #0]
 8003fb8:	6841      	ldr	r1, [r0, #4]
 8003fba:	07c8      	lsls	r0, r1, #31
 8003fbc:	d5f8      	bpl.n	8003fb0 <cmox_ScalarMul_wNAFRecoding+0x40>
 8003fbe:	fa04 f00a 	lsl.w	r0, r4, sl
 8003fc2:	1e42      	subs	r2, r0, #1
 8003fc4:	4011      	ands	r1, r2
 8003fc6:	b24a      	sxtb	r2, r1
 8003fc8:	b27b      	sxtb	r3, r7
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	bfa8      	it	ge
 8003fce:	1bc9      	subge	r1, r1, r7
 8003fd0:	5571      	strb	r1, [r6, r5]
 8003fd2:	b249      	sxtb	r1, r1
 8003fd4:	9a00      	ldr	r2, [sp, #0]
 8003fd6:	4249      	negs	r1, r1
 8003fd8:	4610      	mov	r0, r2
 8003fda:	f7fe fd67 	bl	8002aac <cmox_AddBN_Int>
 8003fde:	9a00      	ldr	r2, [sp, #0]
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	f7fe fbf3 	bl	80027ce <cmox_RightShiftBN>
 8003fe8:	1c6d      	adds	r5, r5, #1
 8003fea:	9800      	ldr	r0, [sp, #0]
 8003fec:	2100      	movs	r1, #0
 8003fee:	f000 fbb7 	bl	8004760 <cmox_bn_cmpUint>
 8003ff2:	2800      	cmp	r0, #0
 8003ff4:	d0df      	beq.n	8003fb6 <cmox_ScalarMul_wNAFRecoding+0x46>
 8003ff6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003ff8:	b100      	cbz	r0, 8003ffc <cmox_ScalarMul_wNAFRecoding+0x8c>
 8003ffa:	6005      	str	r5, [r0, #0]
 8003ffc:	4669      	mov	r1, sp
 8003ffe:	4648      	mov	r0, r9
 8004000:	f000 faf5 	bl	80045ee <cmox_bn_free>
 8004004:	4640      	mov	r0, r8
 8004006:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800400c <cmox_sha224_cleanup>:
 800400c:	b500      	push	{lr}
 800400e:	b081      	sub	sp, #4
 8004010:	6801      	ldr	r1, [r0, #0]
 8004012:	4a07      	ldr	r2, [pc, #28]	@ (8004030 <cmox_sha224_cleanup+0x24>)
 8004014:	4291      	cmp	r1, r2
 8004016:	d100      	bne.n	800401a <cmox_sha224_cleanup+0xe>
 8004018:	b910      	cbnz	r0, 8004020 <cmox_sha224_cleanup+0x14>
 800401a:	4806      	ldr	r0, [pc, #24]	@ (8004034 <cmox_sha224_cleanup+0x28>)
 800401c:	b001      	add	sp, #4
 800401e:	bd00      	pop	{pc}
 8004020:	217c      	movs	r1, #124	@ 0x7c
 8004022:	f005 fda3 	bl	8009b6c <__aeabi_memclr>
 8004026:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800402a:	b001      	add	sp, #4
 800402c:	bd00      	pop	{pc}
 800402e:	bf00      	nop
 8004030:	08004118 	.word	0x08004118
 8004034:	00020003 	.word	0x00020003

08004038 <cmox_sha224_init>:
 8004038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800403c:	4a0b      	ldr	r2, [pc, #44]	@ (800406c <cmox_sha224_init+0x34>)
 800403e:	e892 51f8 	ldmia.w	r2, {r3, r4, r5, r6, r7, r8, ip, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	4669      	mov	r1, sp
 8004046:	e881 51f8 	stmia.w	r1, {r3, r4, r5, r6, r7, r8, ip, lr}
 800404a:	6802      	ldr	r2, [r0, #0]
 800404c:	4b08      	ldr	r3, [pc, #32]	@ (8004070 <cmox_sha224_init+0x38>)
 800404e:	429a      	cmp	r2, r3
 8004050:	d100      	bne.n	8004054 <cmox_sha224_init+0x1c>
 8004052:	b918      	cbnz	r0, 800405c <cmox_sha224_init+0x24>
 8004054:	4807      	ldr	r0, [pc, #28]	@ (8004074 <cmox_sha224_init+0x3c>)
 8004056:	b008      	add	sp, #32
 8004058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800405c:	221c      	movs	r2, #28
 800405e:	3008      	adds	r0, #8
 8004060:	f001 fa51 	bl	8005506 <cmox_md_init>
 8004064:	b008      	add	sp, #32
 8004066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800406a:	bf00      	nop
 800406c:	080040f8 	.word	0x080040f8
 8004070:	08004118 	.word	0x08004118
 8004074:	00020003 	.word	0x00020003

08004078 <cmox_sha224_setTagLen>:
 8004078:	291d      	cmp	r1, #29
 800407a:	d204      	bcs.n	8004086 <cmox_sha224_setTagLen+0xe>
 800407c:	6802      	ldr	r2, [r0, #0]
 800407e:	4b04      	ldr	r3, [pc, #16]	@ (8004090 <cmox_sha224_setTagLen+0x18>)
 8004080:	429a      	cmp	r2, r3
 8004082:	d100      	bne.n	8004086 <cmox_sha224_setTagLen+0xe>
 8004084:	b908      	cbnz	r0, 800408a <cmox_sha224_setTagLen+0x12>
 8004086:	4803      	ldr	r0, [pc, #12]	@ (8004094 <cmox_sha224_setTagLen+0x1c>)
 8004088:	4770      	bx	lr
 800408a:	3008      	adds	r0, #8
 800408c:	f001 ba4a 	b.w	8005524 <cmox_md_setTagSize>
 8004090:	08004118 	.word	0x08004118
 8004094:	00020003 	.word	0x00020003

08004098 <cmox_sha224_append>:
 8004098:	b410      	push	{r4}
 800409a:	b081      	sub	sp, #4
 800409c:	4613      	mov	r3, r2
 800409e:	6802      	ldr	r2, [r0, #0]
 80040a0:	4c07      	ldr	r4, [pc, #28]	@ (80040c0 <cmox_sha224_append+0x28>)
 80040a2:	42a2      	cmp	r2, r4
 80040a4:	d100      	bne.n	80040a8 <cmox_sha224_append+0x10>
 80040a6:	b918      	cbnz	r0, 80040b0 <cmox_sha224_append+0x18>
 80040a8:	b001      	add	sp, #4
 80040aa:	bc10      	pop	{r4}
 80040ac:	4805      	ldr	r0, [pc, #20]	@ (80040c4 <cmox_sha224_append+0x2c>)
 80040ae:	4770      	bx	lr
 80040b0:	b001      	add	sp, #4
 80040b2:	f100 0224 	add.w	r2, r0, #36	@ 0x24
 80040b6:	bc10      	pop	{r4}
 80040b8:	3008      	adds	r0, #8
 80040ba:	f001 ba37 	b.w	800552c <cmox_md_append>
 80040be:	bf00      	nop
 80040c0:	08004118 	.word	0x08004118
 80040c4:	00020003 	.word	0x00020003

080040c8 <cmox_sha224_generateTag>:
 80040c8:	b410      	push	{r4}
 80040ca:	b081      	sub	sp, #4
 80040cc:	4613      	mov	r3, r2
 80040ce:	6802      	ldr	r2, [r0, #0]
 80040d0:	4c07      	ldr	r4, [pc, #28]	@ (80040f0 <cmox_sha224_generateTag+0x28>)
 80040d2:	42a2      	cmp	r2, r4
 80040d4:	d100      	bne.n	80040d8 <cmox_sha224_generateTag+0x10>
 80040d6:	b918      	cbnz	r0, 80040e0 <cmox_sha224_generateTag+0x18>
 80040d8:	b001      	add	sp, #4
 80040da:	bc10      	pop	{r4}
 80040dc:	4805      	ldr	r0, [pc, #20]	@ (80040f4 <cmox_sha224_generateTag+0x2c>)
 80040de:	4770      	bx	lr
 80040e0:	460a      	mov	r2, r1
 80040e2:	b001      	add	sp, #4
 80040e4:	f100 0124 	add.w	r1, r0, #36	@ 0x24
 80040e8:	bc10      	pop	{r4}
 80040ea:	3008      	adds	r0, #8
 80040ec:	f001 ba72 	b.w	80055d4 <cmox_md_generateTag>
 80040f0:	08004118 	.word	0x08004118
 80040f4:	00020003 	.word	0x00020003
 80040f8:	c1059ed8 	.word	0xc1059ed8
 80040fc:	367cd507 	.word	0x367cd507
 8004100:	3070dd17 	.word	0x3070dd17
 8004104:	f70e5939 	.word	0xf70e5939
 8004108:	ffc00b31 	.word	0xffc00b31
 800410c:	68581511 	.word	0x68581511
 8004110:	64f98fa7 	.word	0x64f98fa7
 8004114:	befa4fa4 	.word	0xbefa4fa4

08004118 <CMOX_SHA224_VTABLE>:
 8004118:	0800400d 08004039 08004079 08004099     .@..9@..y@...@..
 8004128:	080040c9                                .@..

0800412c <cmox_sha224_compute>:
 800412c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800412e:	b0a3      	sub	sp, #140	@ 0x8c
 8004130:	4604      	mov	r4, r0
 8004132:	480b      	ldr	r0, [pc, #44]	@ (8004160 <cmox_sha224_compute+0x34>)
 8004134:	9002      	str	r0, [sp, #8]
 8004136:	460d      	mov	r5, r1
 8004138:	4616      	mov	r6, r2
 800413a:	461f      	mov	r7, r3
 800413c:	4b09      	ldr	r3, [pc, #36]	@ (8004164 <cmox_sha224_compute+0x38>)
 800413e:	2208      	movs	r2, #8
 8004140:	2140      	movs	r1, #64	@ 0x40
 8004142:	a804      	add	r0, sp, #16
 8004144:	f001 f9db 	bl	80054fe <cmox_md_construct>
 8004148:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 800414a:	9001      	str	r0, [sp, #4]
 800414c:	9700      	str	r7, [sp, #0]
 800414e:	4633      	mov	r3, r6
 8004150:	462a      	mov	r2, r5
 8004152:	4621      	mov	r1, r4
 8004154:	a802      	add	r0, sp, #8
 8004156:	f7fe fae5 	bl	8002724 <cmox_hash_common_compute>
 800415a:	b023      	add	sp, #140	@ 0x8c
 800415c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800415e:	bf00      	nop
 8004160:	08004118 	.word	0x08004118
 8004164:	0800acd0 	.word	0x0800acd0

08004168 <cmox_sha256_transform>:
 8004168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800416c:	b0c1      	sub	sp, #260	@ 0x104
 800416e:	680b      	ldr	r3, [r1, #0]
 8004170:	ba1b      	rev	r3, r3
 8004172:	9301      	str	r3, [sp, #4]
 8004174:	4602      	mov	r2, r0
 8004176:	684b      	ldr	r3, [r1, #4]
 8004178:	a801      	add	r0, sp, #4
 800417a:	ba1b      	rev	r3, r3
 800417c:	6043      	str	r3, [r0, #4]
 800417e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8004182:	688b      	ldr	r3, [r1, #8]
 8004184:	ba1b      	rev	r3, r3
 8004186:	6083      	str	r3, [r0, #8]
 8004188:	68cb      	ldr	r3, [r1, #12]
 800418a:	ba1b      	rev	r3, r3
 800418c:	60c3      	str	r3, [r0, #12]
 800418e:	690b      	ldr	r3, [r1, #16]
 8004190:	ba1b      	rev	r3, r3
 8004192:	6103      	str	r3, [r0, #16]
 8004194:	694b      	ldr	r3, [r1, #20]
 8004196:	ba1b      	rev	r3, r3
 8004198:	6143      	str	r3, [r0, #20]
 800419a:	698b      	ldr	r3, [r1, #24]
 800419c:	ba1b      	rev	r3, r3
 800419e:	6183      	str	r3, [r0, #24]
 80041a0:	69cb      	ldr	r3, [r1, #28]
 80041a2:	ba1b      	rev	r3, r3
 80041a4:	61c3      	str	r3, [r0, #28]
 80041a6:	6a0b      	ldr	r3, [r1, #32]
 80041a8:	ba1b      	rev	r3, r3
 80041aa:	6203      	str	r3, [r0, #32]
 80041ac:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80041ae:	ba1b      	rev	r3, r3
 80041b0:	6243      	str	r3, [r0, #36]	@ 0x24
 80041b2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80041b4:	ba1b      	rev	r3, r3
 80041b6:	6283      	str	r3, [r0, #40]	@ 0x28
 80041b8:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80041ba:	ba1b      	rev	r3, r3
 80041bc:	62c3      	str	r3, [r0, #44]	@ 0x2c
 80041be:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80041c0:	ba1b      	rev	r3, r3
 80041c2:	6303      	str	r3, [r0, #48]	@ 0x30
 80041c4:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80041c6:	ba1b      	rev	r3, r3
 80041c8:	6343      	str	r3, [r0, #52]	@ 0x34
 80041ca:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 80041cc:	ba1b      	rev	r3, r3
 80041ce:	6383      	str	r3, [r0, #56]	@ 0x38
 80041d0:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 80041d2:	ba09      	rev	r1, r1
 80041d4:	63c1      	str	r1, [r0, #60]	@ 0x3c
 80041d6:	2018      	movs	r0, #24
 80041d8:	f85c 4c08 	ldr.w	r4, [ip, #-8]
 80041dc:	ea4f 41f4 	mov.w	r1, r4, ror #19
 80041e0:	ea91 4374 	eors.w	r3, r1, r4, ror #17
 80041e4:	f85c 1c3c 	ldr.w	r1, [ip, #-60]
 80041e8:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
 80041ec:	ea4f 47b1 	mov.w	r7, r1, ror #18
 80041f0:	f85c 4c1c 	ldr.w	r4, [ip, #-28]
 80041f4:	ea97 16f1 	eors.w	r6, r7, r1, ror #7
 80041f8:	4423      	add	r3, r4
 80041fa:	ea86 06d1 	eor.w	r6, r6, r1, lsr #3
 80041fe:	18f3      	adds	r3, r6, r3
 8004200:	f85c 6c40 	ldr.w	r6, [ip, #-64]
 8004204:	18f3      	adds	r3, r6, r3
 8004206:	f8cc 3000 	str.w	r3, [ip]
 800420a:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 800420e:	ea4f 46f4 	mov.w	r6, r4, ror #19
 8004212:	ea96 4374 	eors.w	r3, r6, r4, ror #17
 8004216:	f85c 6c38 	ldr.w	r6, [ip, #-56]
 800421a:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
 800421e:	ea4f 4ab6 	mov.w	sl, r6, ror #18
 8004222:	f85c 4c18 	ldr.w	r4, [ip, #-24]
 8004226:	ea8a 17f6 	eor.w	r7, sl, r6, ror #7
 800422a:	4423      	add	r3, r4
 800422c:	ea87 07d6 	eor.w	r7, r7, r6, lsr #3
 8004230:	18fb      	adds	r3, r7, r3
 8004232:	18c9      	adds	r1, r1, r3
 8004234:	f8cc 1004 	str.w	r1, [ip, #4]
 8004238:	1e40      	subs	r0, r0, #1
 800423a:	f10c 0c08 	add.w	ip, ip, #8
 800423e:	d1cb      	bne.n	80041d8 <cmox_sha256_transform+0x70>
 8004240:	4610      	mov	r0, r2
 8004242:	9200      	str	r2, [sp, #0]
 8004244:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 8004246:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8004248:	f8d0 e060 	ldr.w	lr, [r0, #96]	@ 0x60
 800424c:	f8d0 8070 	ldr.w	r8, [r0, #112]	@ 0x70
 8004250:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8004252:	6f44      	ldr	r4, [r0, #116]	@ 0x74
 8004254:	f8d0 a068 	ldr.w	sl, [r0, #104]	@ 0x68
 8004258:	6f85      	ldr	r5, [r0, #120]	@ 0x78
 800425a:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8004350 <cmox_sha256_transform+0x1e8>
 800425e:	f10d 0c04 	add.w	ip, sp, #4
 8004262:	2020      	movs	r0, #32
 8004264:	ea4f 16b3 	mov.w	r6, r3, ror #6
 8004268:	ea86 26f3 	eor.w	r6, r6, r3, ror #11
 800426c:	ea86 6673 	eor.w	r6, r6, r3, ror #25
 8004270:	1975      	adds	r5, r6, r5
 8004272:	ea84 0608 	eor.w	r6, r4, r8
 8004276:	401e      	ands	r6, r3
 8004278:	4066      	eors	r6, r4
 800427a:	1975      	adds	r5, r6, r5
 800427c:	f859 6b04 	ldr.w	r6, [r9], #4
 8004280:	f85c 7b04 	ldr.w	r7, [ip], #4
 8004284:	1975      	adds	r5, r6, r5
 8004286:	197e      	adds	r6, r7, r5
 8004288:	ea4f 07b1 	mov.w	r7, r1, ror #2
 800428c:	ea4e 0b01 	orr.w	fp, lr, r1
 8004290:	ea87 3771 	eor.w	r7, r7, r1, ror #13
 8004294:	ea0e 0501 	and.w	r5, lr, r1
 8004298:	ea0b 0b02 	and.w	fp, fp, r2
 800429c:	ea87 57b1 	eor.w	r7, r7, r1, ror #22
 80042a0:	ea4b 0505 	orr.w	r5, fp, r5
 80042a4:	19ef      	adds	r7, r5, r7
 80042a6:	4645      	mov	r5, r8
 80042a8:	eb06 080a 	add.w	r8, r6, sl
 80042ac:	4692      	mov	sl, r2
 80042ae:	4672      	mov	r2, lr
 80042b0:	eb07 0e06 	add.w	lr, r7, r6
 80042b4:	ea4f 16b8 	mov.w	r6, r8, ror #6
 80042b8:	ea86 26f8 	eor.w	r6, r6, r8, ror #11
 80042bc:	ea86 6678 	eor.w	r6, r6, r8, ror #25
 80042c0:	1934      	adds	r4, r6, r4
 80042c2:	ea85 0603 	eor.w	r6, r5, r3
 80042c6:	ea06 0608 	and.w	r6, r6, r8
 80042ca:	406e      	eors	r6, r5
 80042cc:	1934      	adds	r4, r6, r4
 80042ce:	f859 6b04 	ldr.w	r6, [r9], #4
 80042d2:	f85c 7b04 	ldr.w	r7, [ip], #4
 80042d6:	1934      	adds	r4, r6, r4
 80042d8:	193e      	adds	r6, r7, r4
 80042da:	ea4f 07be 	mov.w	r7, lr, ror #2
 80042de:	ea41 0b0e 	orr.w	fp, r1, lr
 80042e2:	ea87 377e 	eor.w	r7, r7, lr, ror #13
 80042e6:	ea01 040e 	and.w	r4, r1, lr
 80042ea:	ea0b 0b02 	and.w	fp, fp, r2
 80042ee:	ea87 57be 	eor.w	r7, r7, lr, ror #22
 80042f2:	ea4b 0404 	orr.w	r4, fp, r4
 80042f6:	19e7      	adds	r7, r4, r7
 80042f8:	461c      	mov	r4, r3
 80042fa:	eb06 030a 	add.w	r3, r6, sl
 80042fe:	4692      	mov	sl, r2
 8004300:	460a      	mov	r2, r1
 8004302:	19b9      	adds	r1, r7, r6
 8004304:	1e40      	subs	r0, r0, #1
 8004306:	d1ad      	bne.n	8004264 <cmox_sha256_transform+0xfc>
 8004308:	9800      	ldr	r0, [sp, #0]
 800430a:	6dc6      	ldr	r6, [r0, #92]	@ 0x5c
 800430c:	4431      	add	r1, r6
 800430e:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8004310:	9900      	ldr	r1, [sp, #0]
 8004312:	6e08      	ldr	r0, [r1, #96]	@ 0x60
 8004314:	4470      	add	r0, lr
 8004316:	6608      	str	r0, [r1, #96]	@ 0x60
 8004318:	9800      	ldr	r0, [sp, #0]
 800431a:	6e41      	ldr	r1, [r0, #100]	@ 0x64
 800431c:	1852      	adds	r2, r2, r1
 800431e:	6642      	str	r2, [r0, #100]	@ 0x64
 8004320:	9900      	ldr	r1, [sp, #0]
 8004322:	6e88      	ldr	r0, [r1, #104]	@ 0x68
 8004324:	4450      	add	r0, sl
 8004326:	6688      	str	r0, [r1, #104]	@ 0x68
 8004328:	9800      	ldr	r0, [sp, #0]
 800432a:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 800432c:	185b      	adds	r3, r3, r1
 800432e:	66c3      	str	r3, [r0, #108]	@ 0x6c
 8004330:	9900      	ldr	r1, [sp, #0]
 8004332:	6f08      	ldr	r0, [r1, #112]	@ 0x70
 8004334:	4440      	add	r0, r8
 8004336:	6708      	str	r0, [r1, #112]	@ 0x70
 8004338:	9800      	ldr	r0, [sp, #0]
 800433a:	6f41      	ldr	r1, [r0, #116]	@ 0x74
 800433c:	1864      	adds	r4, r4, r1
 800433e:	6744      	str	r4, [r0, #116]	@ 0x74
 8004340:	9900      	ldr	r1, [sp, #0]
 8004342:	6f88      	ldr	r0, [r1, #120]	@ 0x78
 8004344:	182d      	adds	r5, r5, r0
 8004346:	678d      	str	r5, [r1, #120]	@ 0x78
 8004348:	b041      	add	sp, #260	@ 0x104
 800434a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800434e:	bf00      	nop
 8004350:	0800abd0 	.word	0x0800abd0

08004354 <firstloop_bb_cmp>:
 8004354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004356:	2401      	movs	r4, #1
 8004358:	9400      	str	r4, [sp, #0]
 800435a:	2300      	movs	r3, #0
 800435c:	2400      	movs	r4, #0
 800435e:	e00d      	b.n	800437c <firstloop_bb_cmp+0x28>
 8004360:	9d00      	ldr	r5, [sp, #0]
 8004362:	5d06      	ldrb	r6, [r0, r4]
 8004364:	5d0f      	ldrb	r7, [r1, r4]
 8004366:	407e      	eors	r6, r7
 8004368:	43f6      	mvns	r6, r6
 800436a:	1c76      	adds	r6, r6, #1
 800436c:	0ff6      	lsrs	r6, r6, #31
 800436e:	f086 0601 	eor.w	r6, r6, #1
 8004372:	4035      	ands	r5, r6
 8004374:	9500      	str	r5, [sp, #0]
 8004376:	1c64      	adds	r4, r4, #1
 8004378:	9d00      	ldr	r5, [sp, #0]
 800437a:	18eb      	adds	r3, r5, r3
 800437c:	4294      	cmp	r4, r2
 800437e:	d3ef      	bcc.n	8004360 <firstloop_bb_cmp+0xc>
 8004380:	4618      	mov	r0, r3
 8004382:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004384 <secondloop_bb_cmp>:
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	2300      	movs	r3, #0
 8004388:	2401      	movs	r4, #1
 800438a:	9400      	str	r4, [sp, #0]
 800438c:	2a00      	cmp	r2, #0
 800438e:	e011      	b.n	80043b4 <secondloop_bb_cmp+0x30>
 8004390:	9c00      	ldr	r4, [sp, #0]
 8004392:	1885      	adds	r5, r0, r2
 8004394:	188f      	adds	r7, r1, r2
 8004396:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800439a:	f817 5c01 	ldrb.w	r5, [r7, #-1]
 800439e:	406e      	eors	r6, r5
 80043a0:	43f6      	mvns	r6, r6
 80043a2:	1c76      	adds	r6, r6, #1
 80043a4:	0ff6      	lsrs	r6, r6, #31
 80043a6:	f086 0601 	eor.w	r6, r6, #1
 80043aa:	4034      	ands	r4, r6
 80043ac:	9400      	str	r4, [sp, #0]
 80043ae:	9c00      	ldr	r4, [sp, #0]
 80043b0:	18e3      	adds	r3, r4, r3
 80043b2:	1e52      	subs	r2, r2, #1
 80043b4:	d1ec      	bne.n	8004390 <secondloop_bb_cmp+0xc>
 80043b6:	4618      	mov	r0, r3
 80043b8:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080043ba <firstloop_bw_be_r_cmp>:
 80043ba:	e92d 41f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, lr}
 80043be:	2401      	movs	r4, #1
 80043c0:	9400      	str	r4, [sp, #0]
 80043c2:	460b      	mov	r3, r1
 80043c4:	0895      	lsrs	r5, r2, #2
 80043c6:	2100      	movs	r1, #0
 80043c8:	eba2 0585 	sub.w	r5, r2, r5, lsl #2
 80043cc:	2400      	movs	r4, #0
 80043ce:	1f1b      	subs	r3, r3, #4
 80043d0:	e01c      	b.n	800440c <firstloop_bw_be_r_cmp+0x52>
 80043d2:	f102 0c03 	add.w	ip, r2, #3
 80043d6:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 80043da:	9e00      	ldr	r6, [sp, #0]
 80043dc:	f853 e02c 	ldr.w	lr, [r3, ip, lsl #2]
 80043e0:	5d07      	ldrb	r7, [r0, r4]
 80043e2:	eba5 0804 	sub.w	r8, r5, r4
 80043e6:	f1a8 0c01 	sub.w	ip, r8, #1
 80043ea:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80043ee:	fa2e fe0c 	lsr.w	lr, lr, ip
 80043f2:	ea8e 0707 	eor.w	r7, lr, r7
 80043f6:	b2ff      	uxtb	r7, r7
 80043f8:	43ff      	mvns	r7, r7
 80043fa:	1c7f      	adds	r7, r7, #1
 80043fc:	0fff      	lsrs	r7, r7, #31
 80043fe:	f087 0701 	eor.w	r7, r7, #1
 8004402:	403e      	ands	r6, r7
 8004404:	9600      	str	r6, [sp, #0]
 8004406:	1c64      	adds	r4, r4, #1
 8004408:	9e00      	ldr	r6, [sp, #0]
 800440a:	1871      	adds	r1, r6, r1
 800440c:	42ac      	cmp	r4, r5
 800440e:	d3e0      	bcc.n	80043d2 <firstloop_bw_be_r_cmp+0x18>
 8004410:	2500      	movs	r5, #0
 8004412:	0892      	lsrs	r2, r2, #2
 8004414:	e017      	b.n	8004446 <firstloop_bw_be_r_cmp+0x8c>
 8004416:	1906      	adds	r6, r0, r4
 8004418:	1b57      	subs	r7, r2, r5
 800441a:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
 800441e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8004422:	ba36      	rev	r6, r6
 8004424:	407e      	eors	r6, r7
 8004426:	ea6f 0e06 	mvn.w	lr, r6
 800442a:	f10e 0e01 	add.w	lr, lr, #1
 800442e:	ea4e 0606 	orr.w	r6, lr, r6
 8004432:	9f00      	ldr	r7, [sp, #0]
 8004434:	0ff6      	lsrs	r6, r6, #31
 8004436:	f086 0601 	eor.w	r6, r6, #1
 800443a:	403e      	ands	r6, r7
 800443c:	9600      	str	r6, [sp, #0]
 800443e:	1c6d      	adds	r5, r5, #1
 8004440:	9e00      	ldr	r6, [sp, #0]
 8004442:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8004446:	4295      	cmp	r5, r2
 8004448:	d3e5      	bcc.n	8004416 <firstloop_bw_be_r_cmp+0x5c>
 800444a:	4608      	mov	r0, r1
 800444c:	e8bd 81f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, pc}

08004450 <secondloop_bw_be_r_cmp>:
 8004450:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
 8004452:	2501      	movs	r5, #1
 8004454:	0896      	lsrs	r6, r2, #2
 8004456:	4603      	mov	r3, r0
 8004458:	9500      	str	r5, [sp, #0]
 800445a:	eba2 0686 	sub.w	r6, r2, r6, lsl #2
 800445e:	2400      	movs	r4, #0
 8004460:	9601      	str	r6, [sp, #4]
 8004462:	4610      	mov	r0, r2
 8004464:	e015      	b.n	8004492 <secondloop_bw_be_r_cmp+0x42>
 8004466:	181d      	adds	r5, r3, r0
 8004468:	1a16      	subs	r6, r2, r0
 800446a:	f855 5c04 	ldr.w	r5, [r5, #-4]
 800446e:	08b6      	lsrs	r6, r6, #2
 8004470:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004474:	9f00      	ldr	r7, [sp, #0]
 8004476:	ba2d      	rev	r5, r5
 8004478:	4075      	eors	r5, r6
 800447a:	43ee      	mvns	r6, r5
 800447c:	1c76      	adds	r6, r6, #1
 800447e:	4335      	orrs	r5, r6
 8004480:	0fed      	lsrs	r5, r5, #31
 8004482:	f085 0501 	eor.w	r5, r5, #1
 8004486:	403d      	ands	r5, r7
 8004488:	9500      	str	r5, [sp, #0]
 800448a:	1f00      	subs	r0, r0, #4
 800448c:	9d00      	ldr	r5, [sp, #0]
 800448e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8004492:	2803      	cmp	r0, #3
 8004494:	d8e7      	bhi.n	8004466 <secondloop_bw_be_r_cmp+0x16>
 8004496:	9801      	ldr	r0, [sp, #4]
 8004498:	2800      	cmp	r0, #0
 800449a:	e01c      	b.n	80044d6 <secondloop_bw_be_r_cmp+0x86>
 800449c:	9d01      	ldr	r5, [sp, #4]
 800449e:	9e00      	ldr	r6, [sp, #0]
 80044a0:	181f      	adds	r7, r3, r0
 80044a2:	1a2d      	subs	r5, r5, r0
 80044a4:	f817 cc01 	ldrb.w	ip, [r7, #-1]
 80044a8:	1cd7      	adds	r7, r2, #3
 80044aa:	ea4f 0e97 	mov.w	lr, r7, lsr #2
 80044ae:	eb01 078e 	add.w	r7, r1, lr, lsl #2
 80044b2:	00ed      	lsls	r5, r5, #3
 80044b4:	f857 7c04 	ldr.w	r7, [r7, #-4]
 80044b8:	fa27 f505 	lsr.w	r5, r7, r5
 80044bc:	ea85 050c 	eor.w	r5, r5, ip
 80044c0:	b2ed      	uxtb	r5, r5
 80044c2:	43ed      	mvns	r5, r5
 80044c4:	1c6d      	adds	r5, r5, #1
 80044c6:	0fed      	lsrs	r5, r5, #31
 80044c8:	f085 0501 	eor.w	r5, r5, #1
 80044cc:	402e      	ands	r6, r5
 80044ce:	9600      	str	r6, [sp, #0]
 80044d0:	9d00      	ldr	r5, [sp, #0]
 80044d2:	192c      	adds	r4, r5, r4
 80044d4:	1e40      	subs	r0, r0, #1
 80044d6:	d1e1      	bne.n	800449c <secondloop_bw_be_r_cmp+0x4c>
 80044d8:	4620      	mov	r0, r4
 80044da:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}

080044dc <bufType_bb>:
 80044dc:	4355 0800 4385 0800 0001 0000               UC...C......

080044e8 <cmox_utils_robustCmp>:
 80044e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ec:	461d      	mov	r5, r3
 80044ee:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80044f2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80044f4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80044f6:	f04f 33ff 	mov.w	r3, #4294967295
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	460e      	mov	r6, r1
 80044fe:	4692      	mov	sl, r2
 8004500:	f8d9 b000 	ldr.w	fp, [r9]
 8004504:	4680      	mov	r8, r0
 8004506:	4632      	mov	r2, r6
 8004508:	4651      	mov	r1, sl
 800450a:	47d8      	blx	fp
 800450c:	4683      	mov	fp, r0
 800450e:	b364      	cbz	r4, 800456a <cmox_utils_robustCmp+0x82>
 8004510:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004514:	4632      	mov	r2, r6
 8004516:	4651      	mov	r1, sl
 8004518:	4640      	mov	r0, r8
 800451a:	4798      	blx	r3
 800451c:	ea6f 020b 	mvn.w	r2, fp
 8004520:	1c52      	adds	r2, r2, #1
 8004522:	ea42 020b 	orr.w	r2, r2, fp
 8004526:	9900      	ldr	r1, [sp, #0]
 8004528:	ea6f 73d2 	mvn.w	r3, r2, lsr #31
 800452c:	1c5b      	adds	r3, r3, #1
 800452e:	4019      	ands	r1, r3
 8004530:	43c2      	mvns	r2, r0
 8004532:	9100      	str	r1, [sp, #0]
 8004534:	1c52      	adds	r2, r2, #1
 8004536:	4302      	orrs	r2, r0
 8004538:	9900      	ldr	r1, [sp, #0]
 800453a:	ea6f 73d2 	mvn.w	r3, r2, lsr #31
 800453e:	1c5b      	adds	r3, r3, #1
 8004540:	4019      	ands	r1, r3
 8004542:	9100      	str	r1, [sp, #0]
 8004544:	f086 3155 	eor.w	r1, r6, #1431655765	@ 0x55555555
 8004548:	4048      	eors	r0, r1
 800454a:	ea87 0100 	eor.w	r1, r7, r0
 800454e:	f081 3155 	eor.w	r1, r1, #1431655765	@ 0x55555555
 8004552:	6021      	str	r1, [r4, #0]
 8004554:	f080 3155 	eor.w	r1, r0, #1431655765	@ 0x55555555
 8004558:	43c9      	mvns	r1, r1
 800455a:	1c49      	adds	r1, r1, #1
 800455c:	4308      	orrs	r0, r1
 800455e:	9a00      	ldr	r2, [sp, #0]
 8004560:	ea6f 70d0 	mvn.w	r0, r0, lsr #31
 8004564:	1c40      	adds	r0, r0, #1
 8004566:	4382      	bics	r2, r0
 8004568:	9200      	str	r2, [sp, #0]
 800456a:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800456e:	2801      	cmp	r0, #1
 8004570:	d109      	bne.n	8004586 <cmox_utils_robustCmp+0x9e>
 8004572:	4075      	eors	r5, r6
 8004574:	43e9      	mvns	r1, r5
 8004576:	1c49      	adds	r1, r1, #1
 8004578:	430d      	orrs	r5, r1
 800457a:	9800      	ldr	r0, [sp, #0]
 800457c:	ea6f 72d5 	mvn.w	r2, r5, lsr #31
 8004580:	1c52      	adds	r2, r2, #1
 8004582:	4390      	bics	r0, r2
 8004584:	e00a      	b.n	800459c <cmox_utils_robustCmp+0xb4>
 8004586:	1cf1      	adds	r1, r6, #3
 8004588:	ea85 0291 	eor.w	r2, r5, r1, lsr #2
 800458c:	43d2      	mvns	r2, r2
 800458e:	1c52      	adds	r2, r2, #1
 8004590:	4315      	orrs	r5, r2
 8004592:	9800      	ldr	r0, [sp, #0]
 8004594:	ea6f 73d5 	mvn.w	r3, r5, lsr #31
 8004598:	1c5b      	adds	r3, r3, #1
 800459a:	4398      	bics	r0, r3
 800459c:	f086 36aa 	eor.w	r6, r6, #2863311530	@ 0xaaaaaaaa
 80045a0:	9000      	str	r0, [sp, #0]
 80045a2:	ea86 060b 	eor.w	r6, r6, fp
 80045a6:	f086 33aa 	eor.w	r3, r6, #2863311530	@ 0xaaaaaaaa
 80045aa:	43f2      	mvns	r2, r6
 80045ac:	43db      	mvns	r3, r3
 80045ae:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80045b0:	f3c2 72c0 	ubfx	r2, r2, #31, #1
 80045b4:	1c5b      	adds	r3, r3, #1
 80045b6:	ea42 72d3 	orr.w	r2, r2, r3, lsr #31
 80045ba:	9900      	ldr	r1, [sp, #0]
 80045bc:	43d2      	mvns	r2, r2
 80045be:	1c52      	adds	r2, r2, #1
 80045c0:	4391      	bics	r1, r2
 80045c2:	9100      	str	r1, [sp, #0]
 80045c4:	4077      	eors	r7, r6
 80045c6:	9900      	ldr	r1, [sp, #0]
 80045c8:	4388      	bics	r0, r1
 80045ca:	9900      	ldr	r1, [sp, #0]
 80045cc:	f087 37aa 	eor.w	r7, r7, #2863311530	@ 0xaaaaaaaa
 80045d0:	400f      	ands	r7, r1
 80045d2:	4338      	orrs	r0, r7
 80045d4:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080045d8 <cmox_bn_alloc>:
 80045d8:	b538      	push	{r3, r4, r5, lr}
 80045da:	4615      	mov	r5, r2
 80045dc:	00aa      	lsls	r2, r5, #2
 80045de:	460c      	mov	r4, r1
 80045e0:	1d12      	adds	r2, r2, #4
 80045e2:	f7fe fc4a 	bl	8002e7a <cmox_membuf_alloc>
 80045e6:	b908      	cbnz	r0, 80045ec <cmox_bn_alloc+0x14>
 80045e8:	6821      	ldr	r1, [r4, #0]
 80045ea:	600d      	str	r5, [r1, #0]
 80045ec:	bd32      	pop	{r1, r4, r5, pc}

080045ee <cmox_bn_free>:
 80045ee:	b510      	push	{r4, lr}
 80045f0:	460c      	mov	r4, r1
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	0092      	lsls	r2, r2, #2
 80045f8:	1d12      	adds	r2, r2, #4
 80045fa:	f7fe fc5d 	bl	8002eb8 <cmox_membuf_free>
 80045fe:	2300      	movs	r3, #0
 8004600:	6023      	str	r3, [r4, #0]
 8004602:	bd10      	pop	{r4, pc}

08004604 <cmox_bn_import>:
 8004604:	b570      	push	{r4, r5, r6, lr}
 8004606:	4603      	mov	r3, r0
 8004608:	2000      	movs	r0, #0
 800460a:	2b00      	cmp	r3, #0
 800460c:	bf18      	it	ne
 800460e:	2900      	cmpne	r1, #0
 8004610:	d000      	beq.n	8004614 <cmox_bn_import+0x10>
 8004612:	b90a      	cbnz	r2, 8004618 <cmox_bn_import+0x14>
 8004614:	2001      	movs	r0, #1
 8004616:	bd70      	pop	{r4, r5, r6, pc}
 8004618:	681c      	ldr	r4, [r3, #0]
 800461a:	42a2      	cmp	r2, r4
 800461c:	bf28      	it	cs
 800461e:	4622      	movcs	r2, r4
 8004620:	2401      	movs	r4, #1
 8004622:	e006      	b.n	8004632 <cmox_bn_import+0x2e>
 8004624:	eb01 0584 	add.w	r5, r1, r4, lsl #2
 8004628:	f855 6c04 	ldr.w	r6, [r5, #-4]
 800462c:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8004630:	1c64      	adds	r4, r4, #1
 8004632:	42a2      	cmp	r2, r4
 8004634:	d2f6      	bcs.n	8004624 <cmox_bn_import+0x20>
 8004636:	6819      	ldr	r1, [r3, #0]
 8004638:	42a1      	cmp	r1, r4
 800463a:	bf24      	itt	cs
 800463c:	f843 0024 	strcs.w	r0, [r3, r4, lsl #2]
 8004640:	1c64      	addcs	r4, r4, #1
 8004642:	d2f8      	bcs.n	8004636 <cmox_bn_import+0x32>
 8004644:	bd70      	pop	{r4, r5, r6, pc}

08004646 <cmox_bn_init>:
 8004646:	4602      	mov	r2, r0
 8004648:	2000      	movs	r0, #0
 800464a:	b90a      	cbnz	r2, 8004650 <cmox_bn_init+0xa>
 800464c:	2001      	movs	r0, #1
 800464e:	4770      	bx	lr
 8004650:	6051      	str	r1, [r2, #4]
 8004652:	2102      	movs	r1, #2
 8004654:	e002      	b.n	800465c <cmox_bn_init+0x16>
 8004656:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
 800465a:	1c49      	adds	r1, r1, #1
 800465c:	6813      	ldr	r3, [r2, #0]
 800465e:	428b      	cmp	r3, r1
 8004660:	d2f9      	bcs.n	8004656 <cmox_bn_init+0x10>
 8004662:	4770      	bx	lr

08004664 <cmox_bn_cCopy>:
 8004664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004668:	4616      	mov	r6, r2
 800466a:	4607      	mov	r7, r0
 800466c:	4688      	mov	r8, r1
 800466e:	6830      	ldr	r0, [r6, #0]
 8004670:	f8d8 4000 	ldr.w	r4, [r8]
 8004674:	2500      	movs	r5, #0
 8004676:	1c40      	adds	r0, r0, #1
 8004678:	427a      	negs	r2, r7
 800467a:	e004      	b.n	8004686 <cmox_bn_cCopy+0x22>
 800467c:	f858 1020 	ldr.w	r1, [r8, r0, lsl #2]
 8004680:	4011      	ands	r1, r2
 8004682:	430d      	orrs	r5, r1
 8004684:	1c40      	adds	r0, r0, #1
 8004686:	4284      	cmp	r4, r0
 8004688:	d2f8      	bcs.n	800467c <cmox_bn_cCopy+0x18>
 800468a:	6830      	ldr	r0, [r6, #0]
 800468c:	42a0      	cmp	r0, r4
 800468e:	bf38      	it	cc
 8004690:	4604      	movcc	r4, r0
 8004692:	ea5f 0904 	movs.w	r9, r4
 8004696:	e00a      	b.n	80046ae <cmox_bn_cCopy+0x4a>
 8004698:	f856 2029 	ldr.w	r2, [r6, r9, lsl #2]
 800469c:	f858 1029 	ldr.w	r1, [r8, r9, lsl #2]
 80046a0:	4638      	mov	r0, r7
 80046a2:	f7fe fbac 	bl	8002dfe <cmox_mathUtils_mux>
 80046a6:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
 80046aa:	f1b9 0901 	subs.w	r9, r9, #1
 80046ae:	d1f3      	bne.n	8004698 <cmox_bn_cCopy+0x34>
 80046b0:	1c64      	adds	r4, r4, #1
 80046b2:	1e79      	subs	r1, r7, #1
 80046b4:	e005      	b.n	80046c2 <cmox_bn_cCopy+0x5e>
 80046b6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80046ba:	4008      	ands	r0, r1
 80046bc:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 80046c0:	1c64      	adds	r4, r4, #1
 80046c2:	6830      	ldr	r0, [r6, #0]
 80046c4:	42a0      	cmp	r0, r4
 80046c6:	d2f6      	bcs.n	80046b6 <cmox_bn_cCopy+0x52>
 80046c8:	2d00      	cmp	r5, #0
 80046ca:	bf14      	ite	ne
 80046cc:	2003      	movne	r0, #3
 80046ce:	2000      	moveq	r0, #0
 80046d0:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

080046d4 <cmox_bn_mux>:
 80046d4:	4240      	negs	r0, r0
 80046d6:	4051      	eors	r1, r2
 80046d8:	4008      	ands	r0, r1
 80046da:	4050      	eors	r0, r2
 80046dc:	4770      	bx	lr

080046de <cmox_bn_cmp>:
 80046de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e2:	4684      	mov	ip, r0
 80046e4:	468e      	mov	lr, r1
 80046e6:	f8dc 1000 	ldr.w	r1, [ip]
 80046ea:	f8de 5000 	ldr.w	r5, [lr]
 80046ee:	2601      	movs	r6, #1
 80046f0:	2700      	movs	r7, #0
 80046f2:	42a9      	cmp	r1, r5
 80046f4:	46ba      	mov	sl, r7
 80046f6:	d30f      	bcc.n	8004718 <cmox_bn_cmp+0x3a>
 80046f8:	4608      	mov	r0, r1
 80046fa:	4664      	mov	r4, ip
 80046fc:	2101      	movs	r1, #1
 80046fe:	4285      	cmp	r5, r0
 8004700:	d224      	bcs.n	800474c <cmox_bn_cmp+0x6e>
 8004702:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
 8004706:	2300      	movs	r3, #0
 8004708:	4252      	negs	r2, r2
 800470a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	431f      	orrs	r7, r3
 8004714:	1e40      	subs	r0, r0, #1
 8004716:	e7f2      	b.n	80046fe <cmox_bn_cmp+0x20>
 8004718:	4628      	mov	r0, r5
 800471a:	460d      	mov	r5, r1
 800471c:	4674      	mov	r4, lr
 800471e:	f04f 31ff 	mov.w	r1, #4294967295
 8004722:	e7ee      	b.n	8004702 <cmox_bn_cmp+0x24>
 8004724:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 8004728:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800472c:	2500      	movs	r5, #0
 800472e:	2300      	movs	r3, #0
 8004730:	ebb4 0802 	subs.w	r8, r4, r2
 8004734:	eb65 0903 	sbc.w	r9, r5, r3
 8004738:	4062      	eors	r2, r4
 800473a:	1e52      	subs	r2, r2, #1
 800473c:	ea06 0509 	and.w	r5, r6, r9
 8004740:	f163 0300 	sbc.w	r3, r3, #0
 8004744:	ea45 0a0a 	orr.w	sl, r5, sl
 8004748:	401e      	ands	r6, r3
 800474a:	1e40      	subs	r0, r0, #1
 800474c:	2800      	cmp	r0, #0
 800474e:	d1e9      	bne.n	8004724 <cmox_bn_cmp+0x46>
 8004750:	4638      	mov	r0, r7
 8004752:	eb06 024a 	add.w	r2, r6, sl, lsl #1
 8004756:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800475a:	1e52      	subs	r2, r2, #1
 800475c:	f7fe bb4f 	b.w	8002dfe <cmox_mathUtils_mux>

08004760 <cmox_bn_cmpUint>:
 8004760:	b510      	push	{r4, lr}
 8004762:	460a      	mov	r2, r1
 8004764:	6801      	ldr	r1, [r0, #0]
 8004766:	2300      	movs	r3, #0
 8004768:	e003      	b.n	8004772 <cmox_bn_cmpUint+0x12>
 800476a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 800476e:	4323      	orrs	r3, r4
 8004770:	1e49      	subs	r1, r1, #1
 8004772:	2902      	cmp	r1, #2
 8004774:	d2f9      	bcs.n	800476a <cmox_bn_cmpUint+0xa>
 8004776:	6840      	ldr	r0, [r0, #4]
 8004778:	4042      	eors	r2, r0
 800477a:	2100      	movs	r1, #0
 800477c:	ea42 0003 	orr.w	r0, r2, r3
 8004780:	f7fe fb45 	bl	8002e0e <cmox_mathUtils_neq>
 8004784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004788:	f7fe bb3e 	b.w	8002e08 <cmox_mathUtils_not>

0800478c <cmox_bn_countBits>:
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478e:	4605      	mov	r5, r0
 8004790:	2200      	movs	r2, #0
 8004792:	682e      	ldr	r6, [r5, #0]
 8004794:	0034      	movs	r4, r6
 8004796:	e00b      	b.n	80047b0 <cmox_bn_countBits+0x24>
 8004798:	4257      	negs	r7, r2
 800479a:	4317      	orrs	r7, r2
 800479c:	43ff      	mvns	r7, r7
 800479e:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
 80047a2:	0ff8      	lsrs	r0, r7, #31
 80047a4:	f7fe fb2b 	bl	8002dfe <cmox_mathUtils_mux>
 80047a8:	4602      	mov	r2, r0
 80047aa:	eba6 76d7 	sub.w	r6, r6, r7, lsr #31
 80047ae:	1e64      	subs	r4, r4, #1
 80047b0:	d1f2      	bne.n	8004798 <cmox_bn_countBits+0xc>
 80047b2:	4610      	mov	r0, r2
 80047b4:	f7fe fb37 	bl	8002e26 <cmox_mathUtils_bitLength>
 80047b8:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 80047bc:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080047be <cmox_bn_getBits>:
 80047be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c0:	4606      	mov	r6, r0
 80047c2:	460c      	mov	r4, r1
 80047c4:	0957      	lsrs	r7, r2, #5
 80047c6:	6830      	ldr	r0, [r6, #0]
 80047c8:	f002 051f 	and.w	r5, r2, #31
 80047cc:	1c79      	adds	r1, r7, #1
 80047ce:	f7fe fb23 	bl	8002e18 <cmox_mathUtils_gt>
 80047d2:	1cbb      	adds	r3, r7, #2
 80047d4:	4241      	negs	r1, r0
 80047d6:	400b      	ands	r3, r1
 80047d8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80047dc:	2200      	movs	r2, #0
 80047de:	f7fe fb0e 	bl	8002dfe <cmox_mathUtils_mux>
 80047e2:	eb06 0187 	add.w	r1, r6, r7, lsl #2
 80047e6:	f004 041f 	and.w	r4, r4, #31
 80047ea:	684a      	ldr	r2, [r1, #4]
 80047ec:	40ea      	lsrs	r2, r5
 80047ee:	f1c5 0520 	rsb	r5, r5, #32
 80047f2:	fa00 f505 	lsl.w	r5, r0, r5
 80047f6:	2001      	movs	r0, #1
 80047f8:	fa00 f404 	lsl.w	r4, r0, r4
 80047fc:	4315      	orrs	r5, r2
 80047fe:	1e64      	subs	r4, r4, #1
 8004800:	ea04 0005 	and.w	r0, r4, r5
 8004804:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004806 <cmox_bn_setBits>:
 8004806:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800480a:	4680      	mov	r8, r0
 800480c:	2001      	movs	r0, #1
 800480e:	f001 061f 	and.w	r6, r1, #31
 8004812:	fa00 f606 	lsl.w	r6, r0, r6
 8004816:	0955      	lsrs	r5, r2, #5
 8004818:	1e76      	subs	r6, r6, #1
 800481a:	1c6d      	adds	r5, r5, #1
 800481c:	f8d8 0000 	ldr.w	r0, [r8]
 8004820:	ea06 0903 	and.w	r9, r6, r3
 8004824:	f002 0a1f 	and.w	sl, r2, #31
 8004828:	f001 071f 	and.w	r7, r1, #31
 800482c:	4629      	mov	r1, r5
 800482e:	f7fe faf3 	bl	8002e18 <cmox_mathUtils_gt>
 8004832:	4457      	add	r7, sl
 8004834:	3f20      	subs	r7, #32
 8004836:	4604      	mov	r4, r0
 8004838:	43f8      	mvns	r0, r7
 800483a:	f858 1025 	ldr.w	r1, [r8, r5, lsl #2]
 800483e:	f3c0 70c0 	ubfx	r0, r0, #31, #1
 8004842:	fa06 f60a 	lsl.w	r6, r6, sl
 8004846:	4004      	ands	r4, r0
 8004848:	ea21 0606 	bic.w	r6, r1, r6
 800484c:	4278      	negs	r0, r7
 800484e:	f848 6025 	str.w	r6, [r8, r5, lsl #2]
 8004852:	ea04 74d0 	and.w	r4, r4, r0, lsr #31
 8004856:	fa09 f00a 	lsl.w	r0, r9, sl
 800485a:	4306      	orrs	r6, r0
 800485c:	f848 6025 	str.w	r6, [r8, r5, lsl #2]
 8004860:	f04f 32ff 	mov.w	r2, #4294967295
 8004864:	fa02 f107 	lsl.w	r1, r2, r7
 8004868:	4620      	mov	r0, r4
 800486a:	f7fe fac8 	bl	8002dfe <cmox_mathUtils_mux>
 800486e:	1c6d      	adds	r5, r5, #1
 8004870:	4261      	negs	r1, r4
 8004872:	400d      	ands	r5, r1
 8004874:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 8004878:	4010      	ands	r0, r2
 800487a:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 800487e:	f1ca 0a20 	rsb	sl, sl, #32
 8004882:	2200      	movs	r2, #0
 8004884:	fa29 f10a 	lsr.w	r1, r9, sl
 8004888:	4620      	mov	r0, r4
 800488a:	f7fe fab8 	bl	8002dfe <cmox_mathUtils_mux>
 800488e:	f858 1025 	ldr.w	r1, [r8, r5, lsl #2]
 8004892:	4308      	orrs	r0, r1
 8004894:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 8004898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800489c <cmox_bn_fromU8BE>:
 800489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489e:	b10a      	cbz	r2, 80048a4 <cmox_bn_fromU8BE+0x8>
 80048a0:	b910      	cbnz	r0, 80048a8 <cmox_bn_fromU8BE+0xc>
 80048a2:	b109      	cbz	r1, 80048a8 <cmox_bn_fromU8BE+0xc>
 80048a4:	2001      	movs	r0, #1
 80048a6:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80048a8:	6813      	ldr	r3, [r2, #0]
 80048aa:	1ccc      	adds	r4, r1, #3
 80048ac:	ebb3 0f94 	cmp.w	r3, r4, lsr #2
 80048b0:	d201      	bcs.n	80048b6 <cmox_bn_fromU8BE+0x1a>
 80048b2:	2003      	movs	r0, #3
 80048b4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80048b6:	b379      	cbz	r1, 8004918 <cmox_bn_fromU8BE+0x7c>
 80048b8:	088b      	lsrs	r3, r1, #2
 80048ba:	1c5b      	adds	r3, r3, #1
 80048bc:	2401      	movs	r4, #1
 80048be:	e00f      	b.n	80048e0 <cmox_bn_fromU8BE+0x44>
 80048c0:	eba1 0584 	sub.w	r5, r1, r4, lsl #2
 80048c4:	4405      	add	r5, r0
 80048c6:	786f      	ldrb	r7, [r5, #1]
 80048c8:	782e      	ldrb	r6, [r5, #0]
 80048ca:	043f      	lsls	r7, r7, #16
 80048cc:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
 80048d0:	78ae      	ldrb	r6, [r5, #2]
 80048d2:	78ed      	ldrb	r5, [r5, #3]
 80048d4:	ea47 2706 	orr.w	r7, r7, r6, lsl #8
 80048d8:	432f      	orrs	r7, r5
 80048da:	f842 7024 	str.w	r7, [r2, r4, lsl #2]
 80048de:	1c64      	adds	r4, r4, #1
 80048e0:	429c      	cmp	r4, r3
 80048e2:	d3ed      	bcc.n	80048c0 <cmox_bn_fromU8BE+0x24>
 80048e4:	6815      	ldr	r5, [r2, #0]
 80048e6:	42a5      	cmp	r5, r4
 80048e8:	bf22      	ittt	cs
 80048ea:	2600      	movcs	r6, #0
 80048ec:	f842 6024 	strcs.w	r6, [r2, r4, lsl #2]
 80048f0:	1c64      	addcs	r4, r4, #1
 80048f2:	d2f7      	bcs.n	80048e4 <cmox_bn_fromU8BE+0x48>
 80048f4:	f011 0103 	ands.w	r1, r1, #3
 80048f8:	d011      	beq.n	800491e <cmox_bn_fromU8BE+0x82>
 80048fa:	7804      	ldrb	r4, [r0, #0]
 80048fc:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8004900:	2401      	movs	r4, #1
 8004902:	428c      	cmp	r4, r1
 8004904:	d20b      	bcs.n	800491e <cmox_bn_fromU8BE+0x82>
 8004906:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800490a:	5d06      	ldrb	r6, [r0, r4]
 800490c:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
 8004910:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
 8004914:	1c64      	adds	r4, r4, #1
 8004916:	e7f4      	b.n	8004902 <cmox_bn_fromU8BE+0x66>
 8004918:	4610      	mov	r0, r2
 800491a:	f7ff fe94 	bl	8004646 <cmox_bn_init>
 800491e:	2000      	movs	r0, #0
 8004920:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004922 <cmox_bn_toU8BE>:
 8004922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004926:	4605      	mov	r5, r0
 8004928:	4617      	mov	r7, r2
 800492a:	6828      	ldr	r0, [r5, #0]
 800492c:	0080      	lsls	r0, r0, #2
 800492e:	463c      	mov	r4, r7
 8004930:	1a3e      	subs	r6, r7, r0
 8004932:	42a0      	cmp	r0, r4
 8004934:	4688      	mov	r8, r1
 8004936:	d206      	bcs.n	8004946 <cmox_bn_toU8BE+0x24>
 8004938:	4631      	mov	r1, r6
 800493a:	4640      	mov	r0, r8
 800493c:	1e64      	subs	r4, r4, #1
 800493e:	f005 f915 	bl	8009b6c <__aeabi_memclr>
 8004942:	1ba4      	subs	r4, r4, r6
 8004944:	1c64      	adds	r4, r4, #1
 8004946:	f014 0003 	ands.w	r0, r4, #3
 800494a:	d021      	beq.n	8004990 <cmox_bn_toU8BE+0x6e>
 800494c:	08a1      	lsrs	r1, r4, #2
 800494e:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8004952:	6851      	ldr	r1, [r2, #4]
 8004954:	1e42      	subs	r2, r0, #1
 8004956:	00d2      	lsls	r2, r2, #3
 8004958:	fa21 f302 	lsr.w	r3, r1, r2
 800495c:	1b3a      	subs	r2, r7, r4
 800495e:	1e64      	subs	r4, r4, #1
 8004960:	f808 3002 	strb.w	r3, [r8, r2]
 8004964:	1e40      	subs	r0, r0, #1
 8004966:	d1f5      	bne.n	8004954 <cmox_bn_toU8BE+0x32>
 8004968:	e012      	b.n	8004990 <cmox_bn_toU8BE+0x6e>
 800496a:	08a1      	lsrs	r1, r4, #2
 800496c:	1b38      	subs	r0, r7, r4
 800496e:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 8004972:	4440      	add	r0, r8
 8004974:	0e12      	lsrs	r2, r2, #24
 8004976:	7002      	strb	r2, [r0, #0]
 8004978:	1f24      	subs	r4, r4, #4
 800497a:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
 800497e:	0c1b      	lsrs	r3, r3, #16
 8004980:	7043      	strb	r3, [r0, #1]
 8004982:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 8004986:	0a12      	lsrs	r2, r2, #8
 8004988:	7082      	strb	r2, [r0, #2]
 800498a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800498e:	70c1      	strb	r1, [r0, #3]
 8004990:	2c00      	cmp	r4, #0
 8004992:	d1ea      	bne.n	800496a <cmox_bn_toU8BE+0x48>
 8004994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004998 <cmox_bn_fromU8LE>:
 8004998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499a:	2300      	movs	r3, #0
 800499c:	b10a      	cbz	r2, 80049a2 <cmox_bn_fromU8LE+0xa>
 800499e:	b910      	cbnz	r0, 80049a6 <cmox_bn_fromU8LE+0xe>
 80049a0:	b109      	cbz	r1, 80049a6 <cmox_bn_fromU8LE+0xe>
 80049a2:	2001      	movs	r0, #1
 80049a4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80049a6:	6814      	ldr	r4, [r2, #0]
 80049a8:	1ccd      	adds	r5, r1, #3
 80049aa:	ebb4 0f95 	cmp.w	r4, r5, lsr #2
 80049ae:	d201      	bcs.n	80049b4 <cmox_bn_fromU8LE+0x1c>
 80049b0:	2003      	movs	r0, #3
 80049b2:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80049b4:	b3b9      	cbz	r1, 8004a26 <cmox_bn_fromU8LE+0x8e>
 80049b6:	2400      	movs	r4, #0
 80049b8:	e010      	b.n	80049dc <cmox_bn_fromU8LE+0x44>
 80049ba:	1906      	adds	r6, r0, r4
 80049bc:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80049c0:	f896 c002 	ldrb.w	ip, [r6, #2]
 80049c4:	78f7      	ldrb	r7, [r6, #3]
 80049c6:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 80049ca:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
 80049ce:	7877      	ldrb	r7, [r6, #1]
 80049d0:	7836      	ldrb	r6, [r6, #0]
 80049d2:	ea4c 2707 	orr.w	r7, ip, r7, lsl #8
 80049d6:	433e      	orrs	r6, r7
 80049d8:	606e      	str	r6, [r5, #4]
 80049da:	1d24      	adds	r4, r4, #4
 80049dc:	08a5      	lsrs	r5, r4, #2
 80049de:	1ece      	subs	r6, r1, #3
 80049e0:	42b4      	cmp	r4, r6
 80049e2:	d3ea      	bcc.n	80049ba <cmox_bn_fromU8LE+0x22>
 80049e4:	f011 0f03 	tst.w	r1, #3
 80049e8:	d011      	beq.n	8004a0e <cmox_bn_fromU8LE+0x76>
 80049ea:	1c6d      	adds	r5, r5, #1
 80049ec:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80049f0:	e00b      	b.n	8004a0a <cmox_bn_fromU8LE+0x72>
 80049f2:	5d07      	ldrb	r7, [r0, r4]
 80049f4:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 80049f8:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 80049fc:	fa07 f70c 	lsl.w	r7, r7, ip
 8004a00:	433e      	orrs	r6, r7
 8004a02:	f842 6025 	str.w	r6, [r2, r5, lsl #2]
 8004a06:	1c5b      	adds	r3, r3, #1
 8004a08:	1c64      	adds	r4, r4, #1
 8004a0a:	428c      	cmp	r4, r1
 8004a0c:	d3f1      	bcc.n	80049f2 <cmox_bn_fromU8LE+0x5a>
 8004a0e:	1ce4      	adds	r4, r4, #3
 8004a10:	08a4      	lsrs	r4, r4, #2
 8004a12:	1c64      	adds	r4, r4, #1
 8004a14:	2100      	movs	r1, #0
 8004a16:	6810      	ldr	r0, [r2, #0]
 8004a18:	42a0      	cmp	r0, r4
 8004a1a:	bf24      	itt	cs
 8004a1c:	f842 1024 	strcs.w	r1, [r2, r4, lsl #2]
 8004a20:	1c64      	addcs	r4, r4, #1
 8004a22:	d2f8      	bcs.n	8004a16 <cmox_bn_fromU8LE+0x7e>
 8004a24:	e002      	b.n	8004a2c <cmox_bn_fromU8LE+0x94>
 8004a26:	4610      	mov	r0, r2
 8004a28:	f7ff fe0d 	bl	8004646 <cmox_bn_init>
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004a30 <cmox_asm_montymul_fast256>:
 8004a30:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a34:	e891 5fc0 	ldmia.w	r1, {r6, r7, r8, r9, sl, fp, ip, lr}
 8004a38:	e92d 5000 	stmdb	sp!, {ip, lr}
 8004a3c:	469c      	mov	ip, r3
 8004a3e:	f8dd e030 	ldr.w	lr, [sp, #48]	@ 0x30
 8004a42:	c820      	ldmia	r0!, {r5}
 8004a44:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8004a46:	f8de 0000 	ldr.w	r0, [lr]
 8004a4a:	fba5 2306 	umull	r2, r3, r5, r6
 8004a4e:	fb02 f404 	mul.w	r4, r2, r4
 8004a52:	f04f 0100 	mov.w	r1, #0
 8004a56:	fbe4 2160 	umaal	r2, r1, r4, r0
 8004a5a:	f8de 0004 	ldr.w	r0, [lr, #4]
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	fbe5 3267 	umaal	r3, r2, r5, r7
 8004a66:	fbe0 1364 	umaal	r1, r3, r0, r4
 8004a6a:	f8cc 1000 	str.w	r1, [ip]
 8004a6e:	f8de 0008 	ldr.w	r0, [lr, #8]
 8004a72:	f04f 0100 	mov.w	r1, #0
 8004a76:	fbe5 2168 	umaal	r2, r1, r5, r8
 8004a7a:	fbe0 3264 	umaal	r3, r2, r0, r4
 8004a7e:	f8cc 3004 	str.w	r3, [ip, #4]
 8004a82:	f8de 000c 	ldr.w	r0, [lr, #12]
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	fbe5 1369 	umaal	r1, r3, r5, r9
 8004a8e:	fbe0 2164 	umaal	r2, r1, r0, r4
 8004a92:	f8cc 2008 	str.w	r2, [ip, #8]
 8004a96:	f8de 0010 	ldr.w	r0, [lr, #16]
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	fbe5 326a 	umaal	r3, r2, r5, sl
 8004aa2:	fbe0 1364 	umaal	r1, r3, r0, r4
 8004aa6:	f8cc 100c 	str.w	r1, [ip, #12]
 8004aaa:	f8de 0014 	ldr.w	r0, [lr, #20]
 8004aae:	f04f 0100 	mov.w	r1, #0
 8004ab2:	fbe5 216b 	umaal	r2, r1, r5, fp
 8004ab6:	fbe0 3264 	umaal	r3, r2, r0, r4
 8004aba:	f8cc 3010 	str.w	r3, [ip, #16]
 8004abe:	9800      	ldr	r0, [sp, #0]
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	fbe5 1360 	umaal	r1, r3, r5, r0
 8004ac8:	f8de 0018 	ldr.w	r0, [lr, #24]
 8004acc:	fbe0 2164 	umaal	r2, r1, r0, r4
 8004ad0:	f8cc 2014 	str.w	r2, [ip, #20]
 8004ad4:	9801      	ldr	r0, [sp, #4]
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	fbe5 3260 	umaal	r3, r2, r5, r0
 8004ade:	f8de 001c 	ldr.w	r0, [lr, #28]
 8004ae2:	fbe0 1364 	umaal	r1, r3, r0, r4
 8004ae6:	f8cc 1018 	str.w	r1, [ip, #24]
 8004aea:	18d1      	adds	r1, r2, r3
 8004aec:	f8cc 101c 	str.w	r1, [ip, #28]
 8004af0:	f04f 0100 	mov.w	r1, #0
 8004af4:	eb41 0101 	adc.w	r1, r1, r1
 8004af8:	910c      	str	r1, [sp, #48]	@ 0x30
 8004afa:	9d02      	ldr	r5, [sp, #8]
 8004afc:	f8dc 2000 	ldr.w	r2, [ip]
 8004b00:	686d      	ldr	r5, [r5, #4]
 8004b02:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8004b04:	f8de 0000 	ldr.w	r0, [lr]
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	fbe5 2366 	umaal	r2, r3, r5, r6
 8004b10:	fb02 f404 	mul.w	r4, r2, r4
 8004b14:	f04f 0100 	mov.w	r1, #0
 8004b18:	fbe4 2160 	umaal	r2, r1, r4, r0
 8004b1c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8004b20:	f8de 0004 	ldr.w	r0, [lr, #4]
 8004b24:	fbe5 3267 	umaal	r3, r2, r5, r7
 8004b28:	fbe0 1364 	umaal	r1, r3, r0, r4
 8004b2c:	f8cc 1000 	str.w	r1, [ip]
 8004b30:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8004b34:	f8de 0008 	ldr.w	r0, [lr, #8]
 8004b38:	fbe5 2168 	umaal	r2, r1, r5, r8
 8004b3c:	fbe0 3264 	umaal	r3, r2, r0, r4
 8004b40:	f8cc 3004 	str.w	r3, [ip, #4]
 8004b44:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8004b48:	f8de 000c 	ldr.w	r0, [lr, #12]
 8004b4c:	fbe5 1369 	umaal	r1, r3, r5, r9
 8004b50:	fbe0 2164 	umaal	r2, r1, r0, r4
 8004b54:	f8cc 2008 	str.w	r2, [ip, #8]
 8004b58:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8004b5c:	f8de 0010 	ldr.w	r0, [lr, #16]
 8004b60:	fbe5 326a 	umaal	r3, r2, r5, sl
 8004b64:	fbe0 1364 	umaal	r1, r3, r0, r4
 8004b68:	f8cc 100c 	str.w	r1, [ip, #12]
 8004b6c:	f8dc 1014 	ldr.w	r1, [ip, #20]
 8004b70:	f8de 0014 	ldr.w	r0, [lr, #20]
 8004b74:	fbe5 216b 	umaal	r2, r1, r5, fp
 8004b78:	fbe0 3264 	umaal	r3, r2, r0, r4
 8004b7c:	f8cc 3010 	str.w	r3, [ip, #16]
 8004b80:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8004b84:	9800      	ldr	r0, [sp, #0]
 8004b86:	fbe5 1360 	umaal	r1, r3, r5, r0
 8004b8a:	f8de 0018 	ldr.w	r0, [lr, #24]
 8004b8e:	fbe0 2164 	umaal	r2, r1, r0, r4
 8004b92:	f8cc 2014 	str.w	r2, [ip, #20]
 8004b96:	f8dc 201c 	ldr.w	r2, [ip, #28]
 8004b9a:	9801      	ldr	r0, [sp, #4]
 8004b9c:	fbe5 3260 	umaal	r3, r2, r5, r0
 8004ba0:	f8de 001c 	ldr.w	r0, [lr, #28]
 8004ba4:	fbe0 1364 	umaal	r1, r3, r0, r4
 8004ba8:	f8cc 1018 	str.w	r1, [ip, #24]
 8004bac:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004bae:	f04f 0400 	mov.w	r4, #0
 8004bb2:	1880      	adds	r0, r0, r2
 8004bb4:	eb44 0104 	adc.w	r1, r4, r4
 8004bb8:	18c0      	adds	r0, r0, r3
 8004bba:	eb44 0204 	adc.w	r2, r4, r4
 8004bbe:	f8cc 001c 	str.w	r0, [ip, #28]
 8004bc2:	eb01 0002 	add.w	r0, r1, r2
 8004bc6:	900c      	str	r0, [sp, #48]	@ 0x30
 8004bc8:	9d02      	ldr	r5, [sp, #8]
 8004bca:	f8dc 2000 	ldr.w	r2, [ip]
 8004bce:	68ad      	ldr	r5, [r5, #8]
 8004bd0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8004bd2:	f8de 0000 	ldr.w	r0, [lr]
 8004bd6:	f04f 0300 	mov.w	r3, #0
 8004bda:	fbe5 2366 	umaal	r2, r3, r5, r6
 8004bde:	fb02 f404 	mul.w	r4, r2, r4
 8004be2:	f04f 0100 	mov.w	r1, #0
 8004be6:	fbe4 2160 	umaal	r2, r1, r4, r0
 8004bea:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8004bee:	f8de 0004 	ldr.w	r0, [lr, #4]
 8004bf2:	fbe5 3267 	umaal	r3, r2, r5, r7
 8004bf6:	fbe0 1364 	umaal	r1, r3, r0, r4
 8004bfa:	f8cc 1000 	str.w	r1, [ip]
 8004bfe:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8004c02:	f8de 0008 	ldr.w	r0, [lr, #8]
 8004c06:	fbe5 2168 	umaal	r2, r1, r5, r8
 8004c0a:	fbe0 3264 	umaal	r3, r2, r0, r4
 8004c0e:	f8cc 3004 	str.w	r3, [ip, #4]
 8004c12:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8004c16:	f8de 000c 	ldr.w	r0, [lr, #12]
 8004c1a:	fbe5 1369 	umaal	r1, r3, r5, r9
 8004c1e:	fbe0 2164 	umaal	r2, r1, r0, r4
 8004c22:	f8cc 2008 	str.w	r2, [ip, #8]
 8004c26:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8004c2a:	f8de 0010 	ldr.w	r0, [lr, #16]
 8004c2e:	fbe5 326a 	umaal	r3, r2, r5, sl
 8004c32:	fbe0 1364 	umaal	r1, r3, r0, r4
 8004c36:	f8cc 100c 	str.w	r1, [ip, #12]
 8004c3a:	f8dc 1014 	ldr.w	r1, [ip, #20]
 8004c3e:	f8de 0014 	ldr.w	r0, [lr, #20]
 8004c42:	fbe5 216b 	umaal	r2, r1, r5, fp
 8004c46:	fbe0 3264 	umaal	r3, r2, r0, r4
 8004c4a:	f8cc 3010 	str.w	r3, [ip, #16]
 8004c4e:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8004c52:	9800      	ldr	r0, [sp, #0]
 8004c54:	fbe5 1360 	umaal	r1, r3, r5, r0
 8004c58:	f8de 0018 	ldr.w	r0, [lr, #24]
 8004c5c:	fbe0 2164 	umaal	r2, r1, r0, r4
 8004c60:	f8cc 2014 	str.w	r2, [ip, #20]
 8004c64:	f8dc 201c 	ldr.w	r2, [ip, #28]
 8004c68:	9801      	ldr	r0, [sp, #4]
 8004c6a:	fbe5 3260 	umaal	r3, r2, r5, r0
 8004c6e:	f8de 001c 	ldr.w	r0, [lr, #28]
 8004c72:	fbe0 1364 	umaal	r1, r3, r0, r4
 8004c76:	f8cc 1018 	str.w	r1, [ip, #24]
 8004c7a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004c7c:	f04f 0400 	mov.w	r4, #0
 8004c80:	1880      	adds	r0, r0, r2
 8004c82:	eb44 0104 	adc.w	r1, r4, r4
 8004c86:	18c0      	adds	r0, r0, r3
 8004c88:	eb44 0204 	adc.w	r2, r4, r4
 8004c8c:	f8cc 001c 	str.w	r0, [ip, #28]
 8004c90:	eb01 0002 	add.w	r0, r1, r2
 8004c94:	900c      	str	r0, [sp, #48]	@ 0x30
 8004c96:	9d02      	ldr	r5, [sp, #8]
 8004c98:	f8dc 2000 	ldr.w	r2, [ip]
 8004c9c:	68ed      	ldr	r5, [r5, #12]
 8004c9e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8004ca0:	f8de 0000 	ldr.w	r0, [lr]
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	fbe5 2366 	umaal	r2, r3, r5, r6
 8004cac:	fb02 f404 	mul.w	r4, r2, r4
 8004cb0:	f04f 0100 	mov.w	r1, #0
 8004cb4:	fbe4 2160 	umaal	r2, r1, r4, r0
 8004cb8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8004cbc:	f8de 0004 	ldr.w	r0, [lr, #4]
 8004cc0:	fbe5 3267 	umaal	r3, r2, r5, r7
 8004cc4:	fbe0 1364 	umaal	r1, r3, r0, r4
 8004cc8:	f8cc 1000 	str.w	r1, [ip]
 8004ccc:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8004cd0:	f8de 0008 	ldr.w	r0, [lr, #8]
 8004cd4:	fbe5 2168 	umaal	r2, r1, r5, r8
 8004cd8:	fbe0 3264 	umaal	r3, r2, r0, r4
 8004cdc:	f8cc 3004 	str.w	r3, [ip, #4]
 8004ce0:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8004ce4:	f8de 000c 	ldr.w	r0, [lr, #12]
 8004ce8:	fbe5 1369 	umaal	r1, r3, r5, r9
 8004cec:	fbe0 2164 	umaal	r2, r1, r0, r4
 8004cf0:	f8cc 2008 	str.w	r2, [ip, #8]
 8004cf4:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8004cf8:	f8de 0010 	ldr.w	r0, [lr, #16]
 8004cfc:	fbe5 326a 	umaal	r3, r2, r5, sl
 8004d00:	fbe0 1364 	umaal	r1, r3, r0, r4
 8004d04:	f8cc 100c 	str.w	r1, [ip, #12]
 8004d08:	f8dc 1014 	ldr.w	r1, [ip, #20]
 8004d0c:	f8de 0014 	ldr.w	r0, [lr, #20]
 8004d10:	fbe5 216b 	umaal	r2, r1, r5, fp
 8004d14:	fbe0 3264 	umaal	r3, r2, r0, r4
 8004d18:	f8cc 3010 	str.w	r3, [ip, #16]
 8004d1c:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8004d20:	9800      	ldr	r0, [sp, #0]
 8004d22:	fbe5 1360 	umaal	r1, r3, r5, r0
 8004d26:	f8de 0018 	ldr.w	r0, [lr, #24]
 8004d2a:	fbe0 2164 	umaal	r2, r1, r0, r4
 8004d2e:	f8cc 2014 	str.w	r2, [ip, #20]
 8004d32:	f8dc 201c 	ldr.w	r2, [ip, #28]
 8004d36:	9801      	ldr	r0, [sp, #4]
 8004d38:	fbe5 3260 	umaal	r3, r2, r5, r0
 8004d3c:	f8de 001c 	ldr.w	r0, [lr, #28]
 8004d40:	fbe0 1364 	umaal	r1, r3, r0, r4
 8004d44:	f8cc 1018 	str.w	r1, [ip, #24]
 8004d48:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004d4a:	f04f 0400 	mov.w	r4, #0
 8004d4e:	1880      	adds	r0, r0, r2
 8004d50:	eb44 0104 	adc.w	r1, r4, r4
 8004d54:	18c0      	adds	r0, r0, r3
 8004d56:	eb44 0204 	adc.w	r2, r4, r4
 8004d5a:	f8cc 001c 	str.w	r0, [ip, #28]
 8004d5e:	eb01 0002 	add.w	r0, r1, r2
 8004d62:	900c      	str	r0, [sp, #48]	@ 0x30
 8004d64:	9d02      	ldr	r5, [sp, #8]
 8004d66:	f8dc 2000 	ldr.w	r2, [ip]
 8004d6a:	692d      	ldr	r5, [r5, #16]
 8004d6c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8004d6e:	f8de 0000 	ldr.w	r0, [lr]
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	fbe5 2366 	umaal	r2, r3, r5, r6
 8004d7a:	fb02 f404 	mul.w	r4, r2, r4
 8004d7e:	f04f 0100 	mov.w	r1, #0
 8004d82:	fbe4 2160 	umaal	r2, r1, r4, r0
 8004d86:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8004d8a:	f8de 0004 	ldr.w	r0, [lr, #4]
 8004d8e:	fbe5 3267 	umaal	r3, r2, r5, r7
 8004d92:	fbe0 1364 	umaal	r1, r3, r0, r4
 8004d96:	f8cc 1000 	str.w	r1, [ip]
 8004d9a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8004d9e:	f8de 0008 	ldr.w	r0, [lr, #8]
 8004da2:	fbe5 2168 	umaal	r2, r1, r5, r8
 8004da6:	fbe0 3264 	umaal	r3, r2, r0, r4
 8004daa:	f8cc 3004 	str.w	r3, [ip, #4]
 8004dae:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8004db2:	f8de 000c 	ldr.w	r0, [lr, #12]
 8004db6:	fbe5 1369 	umaal	r1, r3, r5, r9
 8004dba:	fbe0 2164 	umaal	r2, r1, r0, r4
 8004dbe:	f8cc 2008 	str.w	r2, [ip, #8]
 8004dc2:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8004dc6:	f8de 0010 	ldr.w	r0, [lr, #16]
 8004dca:	fbe5 326a 	umaal	r3, r2, r5, sl
 8004dce:	fbe0 1364 	umaal	r1, r3, r0, r4
 8004dd2:	f8cc 100c 	str.w	r1, [ip, #12]
 8004dd6:	f8dc 1014 	ldr.w	r1, [ip, #20]
 8004dda:	f8de 0014 	ldr.w	r0, [lr, #20]
 8004dde:	fbe5 216b 	umaal	r2, r1, r5, fp
 8004de2:	fbe0 3264 	umaal	r3, r2, r0, r4
 8004de6:	f8cc 3010 	str.w	r3, [ip, #16]
 8004dea:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8004dee:	9800      	ldr	r0, [sp, #0]
 8004df0:	fbe5 1360 	umaal	r1, r3, r5, r0
 8004df4:	f8de 0018 	ldr.w	r0, [lr, #24]
 8004df8:	fbe0 2164 	umaal	r2, r1, r0, r4
 8004dfc:	f8cc 2014 	str.w	r2, [ip, #20]
 8004e00:	f8dc 201c 	ldr.w	r2, [ip, #28]
 8004e04:	9801      	ldr	r0, [sp, #4]
 8004e06:	fbe5 3260 	umaal	r3, r2, r5, r0
 8004e0a:	f8de 001c 	ldr.w	r0, [lr, #28]
 8004e0e:	fbe0 1364 	umaal	r1, r3, r0, r4
 8004e12:	f8cc 1018 	str.w	r1, [ip, #24]
 8004e16:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004e18:	f04f 0400 	mov.w	r4, #0
 8004e1c:	1880      	adds	r0, r0, r2
 8004e1e:	eb44 0104 	adc.w	r1, r4, r4
 8004e22:	18c0      	adds	r0, r0, r3
 8004e24:	eb44 0204 	adc.w	r2, r4, r4
 8004e28:	f8cc 001c 	str.w	r0, [ip, #28]
 8004e2c:	eb01 0002 	add.w	r0, r1, r2
 8004e30:	900c      	str	r0, [sp, #48]	@ 0x30
 8004e32:	9d02      	ldr	r5, [sp, #8]
 8004e34:	f8dc 2000 	ldr.w	r2, [ip]
 8004e38:	696d      	ldr	r5, [r5, #20]
 8004e3a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8004e3c:	f8de 0000 	ldr.w	r0, [lr]
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	fbe5 2366 	umaal	r2, r3, r5, r6
 8004e48:	fb02 f404 	mul.w	r4, r2, r4
 8004e4c:	f04f 0100 	mov.w	r1, #0
 8004e50:	fbe4 2160 	umaal	r2, r1, r4, r0
 8004e54:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8004e58:	f8de 0004 	ldr.w	r0, [lr, #4]
 8004e5c:	fbe5 3267 	umaal	r3, r2, r5, r7
 8004e60:	fbe0 1364 	umaal	r1, r3, r0, r4
 8004e64:	f8cc 1000 	str.w	r1, [ip]
 8004e68:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8004e6c:	f8de 0008 	ldr.w	r0, [lr, #8]
 8004e70:	fbe5 2168 	umaal	r2, r1, r5, r8
 8004e74:	fbe0 3264 	umaal	r3, r2, r0, r4
 8004e78:	f8cc 3004 	str.w	r3, [ip, #4]
 8004e7c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8004e80:	f8de 000c 	ldr.w	r0, [lr, #12]
 8004e84:	fbe5 1369 	umaal	r1, r3, r5, r9
 8004e88:	fbe0 2164 	umaal	r2, r1, r0, r4
 8004e8c:	f8cc 2008 	str.w	r2, [ip, #8]
 8004e90:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8004e94:	f8de 0010 	ldr.w	r0, [lr, #16]
 8004e98:	fbe5 326a 	umaal	r3, r2, r5, sl
 8004e9c:	fbe0 1364 	umaal	r1, r3, r0, r4
 8004ea0:	f8cc 100c 	str.w	r1, [ip, #12]
 8004ea4:	f8dc 1014 	ldr.w	r1, [ip, #20]
 8004ea8:	f8de 0014 	ldr.w	r0, [lr, #20]
 8004eac:	fbe5 216b 	umaal	r2, r1, r5, fp
 8004eb0:	fbe0 3264 	umaal	r3, r2, r0, r4
 8004eb4:	f8cc 3010 	str.w	r3, [ip, #16]
 8004eb8:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8004ebc:	9800      	ldr	r0, [sp, #0]
 8004ebe:	fbe5 1360 	umaal	r1, r3, r5, r0
 8004ec2:	f8de 0018 	ldr.w	r0, [lr, #24]
 8004ec6:	fbe0 2164 	umaal	r2, r1, r0, r4
 8004eca:	f8cc 2014 	str.w	r2, [ip, #20]
 8004ece:	f8dc 201c 	ldr.w	r2, [ip, #28]
 8004ed2:	9801      	ldr	r0, [sp, #4]
 8004ed4:	fbe5 3260 	umaal	r3, r2, r5, r0
 8004ed8:	f8de 001c 	ldr.w	r0, [lr, #28]
 8004edc:	fbe0 1364 	umaal	r1, r3, r0, r4
 8004ee0:	f8cc 1018 	str.w	r1, [ip, #24]
 8004ee4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004ee6:	f04f 0400 	mov.w	r4, #0
 8004eea:	1880      	adds	r0, r0, r2
 8004eec:	eb44 0104 	adc.w	r1, r4, r4
 8004ef0:	18c0      	adds	r0, r0, r3
 8004ef2:	eb44 0204 	adc.w	r2, r4, r4
 8004ef6:	f8cc 001c 	str.w	r0, [ip, #28]
 8004efa:	eb01 0002 	add.w	r0, r1, r2
 8004efe:	900c      	str	r0, [sp, #48]	@ 0x30
 8004f00:	9d02      	ldr	r5, [sp, #8]
 8004f02:	f8dc 2000 	ldr.w	r2, [ip]
 8004f06:	69ad      	ldr	r5, [r5, #24]
 8004f08:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8004f0a:	f8de 0000 	ldr.w	r0, [lr]
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	fbe5 2366 	umaal	r2, r3, r5, r6
 8004f16:	fb02 f404 	mul.w	r4, r2, r4
 8004f1a:	f04f 0100 	mov.w	r1, #0
 8004f1e:	fbe4 2160 	umaal	r2, r1, r4, r0
 8004f22:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8004f26:	f8de 0004 	ldr.w	r0, [lr, #4]
 8004f2a:	fbe5 3267 	umaal	r3, r2, r5, r7
 8004f2e:	fbe0 1364 	umaal	r1, r3, r0, r4
 8004f32:	f8cc 1000 	str.w	r1, [ip]
 8004f36:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8004f3a:	f8de 0008 	ldr.w	r0, [lr, #8]
 8004f3e:	fbe5 2168 	umaal	r2, r1, r5, r8
 8004f42:	fbe0 3264 	umaal	r3, r2, r0, r4
 8004f46:	f8cc 3004 	str.w	r3, [ip, #4]
 8004f4a:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8004f4e:	f8de 000c 	ldr.w	r0, [lr, #12]
 8004f52:	fbe5 1369 	umaal	r1, r3, r5, r9
 8004f56:	fbe0 2164 	umaal	r2, r1, r0, r4
 8004f5a:	f8cc 2008 	str.w	r2, [ip, #8]
 8004f5e:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8004f62:	f8de 0010 	ldr.w	r0, [lr, #16]
 8004f66:	fbe5 326a 	umaal	r3, r2, r5, sl
 8004f6a:	fbe0 1364 	umaal	r1, r3, r0, r4
 8004f6e:	f8cc 100c 	str.w	r1, [ip, #12]
 8004f72:	f8dc 1014 	ldr.w	r1, [ip, #20]
 8004f76:	f8de 0014 	ldr.w	r0, [lr, #20]
 8004f7a:	fbe5 216b 	umaal	r2, r1, r5, fp
 8004f7e:	fbe0 3264 	umaal	r3, r2, r0, r4
 8004f82:	f8cc 3010 	str.w	r3, [ip, #16]
 8004f86:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8004f8a:	9800      	ldr	r0, [sp, #0]
 8004f8c:	fbe5 1360 	umaal	r1, r3, r5, r0
 8004f90:	f8de 0018 	ldr.w	r0, [lr, #24]
 8004f94:	fbe0 2164 	umaal	r2, r1, r0, r4
 8004f98:	f8cc 2014 	str.w	r2, [ip, #20]
 8004f9c:	f8dc 201c 	ldr.w	r2, [ip, #28]
 8004fa0:	9801      	ldr	r0, [sp, #4]
 8004fa2:	fbe5 3260 	umaal	r3, r2, r5, r0
 8004fa6:	f8de 001c 	ldr.w	r0, [lr, #28]
 8004faa:	fbe0 1364 	umaal	r1, r3, r0, r4
 8004fae:	f8cc 1018 	str.w	r1, [ip, #24]
 8004fb2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004fb4:	f04f 0400 	mov.w	r4, #0
 8004fb8:	1880      	adds	r0, r0, r2
 8004fba:	eb44 0104 	adc.w	r1, r4, r4
 8004fbe:	18c0      	adds	r0, r0, r3
 8004fc0:	eb44 0204 	adc.w	r2, r4, r4
 8004fc4:	f8cc 001c 	str.w	r0, [ip, #28]
 8004fc8:	eb01 0002 	add.w	r0, r1, r2
 8004fcc:	900c      	str	r0, [sp, #48]	@ 0x30
 8004fce:	9d02      	ldr	r5, [sp, #8]
 8004fd0:	f8dc 2000 	ldr.w	r2, [ip]
 8004fd4:	69ed      	ldr	r5, [r5, #28]
 8004fd6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8004fd8:	f8de 0000 	ldr.w	r0, [lr]
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	fbe5 2366 	umaal	r2, r3, r5, r6
 8004fe4:	fb02 f404 	mul.w	r4, r2, r4
 8004fe8:	f04f 0100 	mov.w	r1, #0
 8004fec:	fbe4 2160 	umaal	r2, r1, r4, r0
 8004ff0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8004ff4:	f8de 0004 	ldr.w	r0, [lr, #4]
 8004ff8:	fbe5 3267 	umaal	r3, r2, r5, r7
 8004ffc:	fbe0 1364 	umaal	r1, r3, r0, r4
 8005000:	f8cc 1000 	str.w	r1, [ip]
 8005004:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8005008:	f8de 0008 	ldr.w	r0, [lr, #8]
 800500c:	fbe5 2168 	umaal	r2, r1, r5, r8
 8005010:	fbe0 3264 	umaal	r3, r2, r0, r4
 8005014:	f8cc 3004 	str.w	r3, [ip, #4]
 8005018:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800501c:	f8de 000c 	ldr.w	r0, [lr, #12]
 8005020:	fbe5 1369 	umaal	r1, r3, r5, r9
 8005024:	fbe0 2164 	umaal	r2, r1, r0, r4
 8005028:	f8cc 2008 	str.w	r2, [ip, #8]
 800502c:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8005030:	f8de 0010 	ldr.w	r0, [lr, #16]
 8005034:	fbe5 326a 	umaal	r3, r2, r5, sl
 8005038:	fbe0 1364 	umaal	r1, r3, r0, r4
 800503c:	f8cc 100c 	str.w	r1, [ip, #12]
 8005040:	f8dc 1014 	ldr.w	r1, [ip, #20]
 8005044:	f8de 0014 	ldr.w	r0, [lr, #20]
 8005048:	fbe5 216b 	umaal	r2, r1, r5, fp
 800504c:	fbe0 3264 	umaal	r3, r2, r0, r4
 8005050:	f8cc 3010 	str.w	r3, [ip, #16]
 8005054:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8005058:	9800      	ldr	r0, [sp, #0]
 800505a:	fbe5 1360 	umaal	r1, r3, r5, r0
 800505e:	f8de 0018 	ldr.w	r0, [lr, #24]
 8005062:	fbe0 2164 	umaal	r2, r1, r0, r4
 8005066:	f8cc 2014 	str.w	r2, [ip, #20]
 800506a:	f8dc 201c 	ldr.w	r2, [ip, #28]
 800506e:	9801      	ldr	r0, [sp, #4]
 8005070:	fbe5 3260 	umaal	r3, r2, r5, r0
 8005074:	f8de 001c 	ldr.w	r0, [lr, #28]
 8005078:	fbe0 1364 	umaal	r1, r3, r0, r4
 800507c:	f8cc 1018 	str.w	r1, [ip, #24]
 8005080:	f04f 0400 	mov.w	r4, #0
 8005084:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005086:	1880      	adds	r0, r0, r2
 8005088:	eb44 0104 	adc.w	r1, r4, r4
 800508c:	18c0      	adds	r0, r0, r3
 800508e:	eb44 0204 	adc.w	r2, r4, r4
 8005092:	f8cc 001c 	str.w	r0, [ip, #28]
 8005096:	eb01 0002 	add.w	r0, r1, r2
 800509a:	e8bc 00f0 	ldmia.w	ip!, {r4, r5, r6, r7}
 800509e:	e8be 0f00 	ldmia.w	lr!, {r8, r9, sl, fp}
 80050a2:	ebb4 0108 	subs.w	r1, r4, r8
 80050a6:	eb75 0109 	sbcs.w	r1, r5, r9
 80050aa:	eb76 010a 	sbcs.w	r1, r6, sl
 80050ae:	eb77 010b 	sbcs.w	r1, r7, fp
 80050b2:	e8bc 00f0 	ldmia.w	ip!, {r4, r5, r6, r7}
 80050b6:	e8be 0f00 	ldmia.w	lr!, {r8, r9, sl, fp}
 80050ba:	eb74 0108 	sbcs.w	r1, r4, r8
 80050be:	eb75 0109 	sbcs.w	r1, r5, r9
 80050c2:	eb76 010a 	sbcs.w	r1, r6, sl
 80050c6:	eb77 010b 	sbcs.w	r1, r7, fp
 80050ca:	eb61 0101 	sbc.w	r1, r1, r1
 80050ce:	4408      	add	r0, r1
 80050d0:	ea6f 0000 	mvn.w	r0, r0
 80050d4:	f1ac 0c20 	sub.w	ip, ip, #32
 80050d8:	f1ae 0e20 	sub.w	lr, lr, #32
 80050dc:	e8bc 00f0 	ldmia.w	ip!, {r4, r5, r6, r7}
 80050e0:	e8be 0f00 	ldmia.w	lr!, {r8, r9, sl, fp}
 80050e4:	ea08 0800 	and.w	r8, r8, r0
 80050e8:	ebb4 0408 	subs.w	r4, r4, r8
 80050ec:	ea09 0900 	and.w	r9, r9, r0
 80050f0:	eb75 0509 	sbcs.w	r5, r5, r9
 80050f4:	ea0a 0a00 	and.w	sl, sl, r0
 80050f8:	eb76 060a 	sbcs.w	r6, r6, sl
 80050fc:	ea0b 0b00 	and.w	fp, fp, r0
 8005100:	eb77 070b 	sbcs.w	r7, r7, fp
 8005104:	e8be 0f00 	ldmia.w	lr!, {r8, r9, sl, fp}
 8005108:	e8bc 400e 	ldmia.w	ip!, {r1, r2, r3, lr}
 800510c:	ea08 0800 	and.w	r8, r8, r0
 8005110:	eb71 0808 	sbcs.w	r8, r1, r8
 8005114:	ea09 0900 	and.w	r9, r9, r0
 8005118:	eb72 0909 	sbcs.w	r9, r2, r9
 800511c:	ea0a 0a00 	and.w	sl, sl, r0
 8005120:	eb73 0a0a 	sbcs.w	sl, r3, sl
 8005124:	ea0b 0b00 	and.w	fp, fp, r0
 8005128:	eb7e 0b0b 	sbcs.w	fp, lr, fp
 800512c:	f1ac 0c20 	sub.w	ip, ip, #32
 8005130:	e88c 0ff0 	stmia.w	ip, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005134:	b003      	add	sp, #12
 8005136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800513a <cmox_asm_montymul_x128>:
 800513a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	f851 4b04 	ldr.w	r4, [r1], #4
 8005144:	e9cd 0100 	strd	r0, r1, [sp]
 8005148:	9202      	str	r2, [sp, #8]
 800514a:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 800514e:	fba4 9a05 	umull	r9, sl, r4, r5
 8005152:	f04f 0e00 	mov.w	lr, #0
 8005156:	fbae bc0e 	umull	fp, ip, lr, lr
 800515a:	fbe4 ab66 	umaal	sl, fp, r4, r6
 800515e:	fbe4 bc67 	umaal	fp, ip, r4, r7
 8005162:	fbe4 ce68 	umaal	ip, lr, r4, r8
 8005166:	e8a3 1e00 	stmia.w	r3!, {r9, sl, fp, ip}
 800516a:	1f12      	subs	r2, r2, #4
 800516c:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 8005170:	46f1      	mov	r9, lr
 8005172:	f04f 0e00 	mov.w	lr, #0
 8005176:	fbae ab0e 	umull	sl, fp, lr, lr
 800517a:	46f4      	mov	ip, lr
 800517c:	fbe4 9a65 	umaal	r9, sl, r4, r5
 8005180:	fbe4 ab66 	umaal	sl, fp, r4, r6
 8005184:	fbe4 bc67 	umaal	fp, ip, r4, r7
 8005188:	fbe4 ce68 	umaal	ip, lr, r4, r8
 800518c:	e8a3 1e00 	stmia.w	r3!, {r9, sl, fp, ip}
 8005190:	1f12      	subs	r2, r2, #4
 8005192:	d1eb      	bne.n	800516c <cmox_asm_montymul_x128+0x32>
 8005194:	9a02      	ldr	r2, [sp, #8]
 8005196:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 800519a:	f8cd e00c 	str.w	lr, [sp, #12]
 800519e:	e9dd 040f 	ldrd	r0, r4, [sp, #60]	@ 0x3c
 80051a2:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 80051a6:	f04f 0900 	mov.w	r9, #0
 80051aa:	4619      	mov	r1, r3
 80051ac:	e8b3 5c00 	ldmia.w	r3!, {sl, fp, ip, lr}
 80051b0:	fb04 f40a 	mul.w	r4, r4, sl
 80051b4:	fbe4 9a65 	umaal	r9, sl, r4, r5
 80051b8:	fbe4 ab66 	umaal	sl, fp, r4, r6
 80051bc:	fbe4 bc67 	umaal	fp, ip, r4, r7
 80051c0:	fbe4 ce68 	umaal	ip, lr, r4, r8
 80051c4:	e8a1 1c00 	stmia.w	r1!, {sl, fp, ip}
 80051c8:	f1b2 0204 	subs.w	r2, r2, #4
 80051cc:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 80051d0:	46f1      	mov	r9, lr
 80051d2:	e8b3 5c00 	ldmia.w	r3!, {sl, fp, ip, lr}
 80051d6:	fbe4 9a65 	umaal	r9, sl, r4, r5
 80051da:	fbe4 ab66 	umaal	sl, fp, r4, r6
 80051de:	fbe4 bc67 	umaal	fp, ip, r4, r7
 80051e2:	fbe4 ce68 	umaal	ip, lr, r4, r8
 80051e6:	e8a1 1e00 	stmia.w	r1!, {r9, sl, fp, ip}
 80051ea:	1f12      	subs	r2, r2, #4
 80051ec:	d1ee      	bne.n	80051cc <cmox_asm_montymul_x128+0x92>
 80051ee:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80051f2:	f04f 0a00 	mov.w	sl, #0
 80051f6:	eb1c 0c0e 	adds.w	ip, ip, lr
 80051fa:	f14a 0b00 	adc.w	fp, sl, #0
 80051fe:	f8c1 c000 	str.w	ip, [r1]
 8005202:	f8cd b00c 	str.w	fp, [sp, #12]
 8005206:	9a02      	ldr	r2, [sp, #8]
 8005208:	f1a2 0a01 	sub.w	sl, r2, #1
 800520c:	f8cd a014 	str.w	sl, [sp, #20]
 8005210:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005214:	f851 4b04 	ldr.w	r4, [r1], #4
 8005218:	f8cd 1004 	str.w	r1, [sp, #4]
 800521c:	f04f 0e00 	mov.w	lr, #0
 8005220:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8005224:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 8005228:	46f1      	mov	r9, lr
 800522a:	e893 5c00 	ldmia.w	r3, {sl, fp, ip, lr}
 800522e:	fbe4 9a65 	umaal	r9, sl, r4, r5
 8005232:	fbe4 ab66 	umaal	sl, fp, r4, r6
 8005236:	fbe4 bc67 	umaal	fp, ip, r4, r7
 800523a:	fbe4 ce68 	umaal	ip, lr, r4, r8
 800523e:	e8a3 1e00 	stmia.w	r3!, {r9, sl, fp, ip}
 8005242:	1f12      	subs	r2, r2, #4
 8005244:	d1ee      	bne.n	8005224 <cmox_asm_montymul_x128+0xea>
 8005246:	9a02      	ldr	r2, [sp, #8]
 8005248:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 800524c:	9d03      	ldr	r5, [sp, #12]
 800524e:	f04f 0900 	mov.w	r9, #0
 8005252:	eb1e 0505 	adds.w	r5, lr, r5
 8005256:	eb49 0609 	adc.w	r6, r9, r9
 800525a:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800525e:	e9dd 040f 	ldrd	r0, r4, [sp, #60]	@ 0x3c
 8005262:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 8005266:	4619      	mov	r1, r3
 8005268:	e8b3 5c00 	ldmia.w	r3!, {sl, fp, ip, lr}
 800526c:	fb04 f40a 	mul.w	r4, r4, sl
 8005270:	fbe4 9a65 	umaal	r9, sl, r4, r5
 8005274:	fbe4 ab66 	umaal	sl, fp, r4, r6
 8005278:	fbe4 bc67 	umaal	fp, ip, r4, r7
 800527c:	fbe4 ce68 	umaal	ip, lr, r4, r8
 8005280:	e8a1 1c00 	stmia.w	r1!, {sl, fp, ip}
 8005284:	1f12      	subs	r2, r2, #4
 8005286:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 800528a:	46f1      	mov	r9, lr
 800528c:	e8b3 5c00 	ldmia.w	r3!, {sl, fp, ip, lr}
 8005290:	fbe4 9a65 	umaal	r9, sl, r4, r5
 8005294:	fbe4 ab66 	umaal	sl, fp, r4, r6
 8005298:	fbe4 bc67 	umaal	fp, ip, r4, r7
 800529c:	fbe4 ce68 	umaal	ip, lr, r4, r8
 80052a0:	e8a1 1e00 	stmia.w	r1!, {r9, sl, fp, ip}
 80052a4:	1f12      	subs	r2, r2, #4
 80052a6:	d1ee      	bne.n	8005286 <cmox_asm_montymul_x128+0x14c>
 80052a8:	e9dd bc03 	ldrd	fp, ip, [sp, #12]
 80052ac:	eb1b 0b0e 	adds.w	fp, fp, lr
 80052b0:	f15c 0c00 	adcs.w	ip, ip, #0
 80052b4:	f8c1 b000 	str.w	fp, [r1]
 80052b8:	f8cd c00c 	str.w	ip, [sp, #12]
 80052bc:	f8dd a014 	ldr.w	sl, [sp, #20]
 80052c0:	f1ba 0a01 	subs.w	sl, sl, #1
 80052c4:	f8cd a014 	str.w	sl, [sp, #20]
 80052c8:	9a02      	ldr	r2, [sp, #8]
 80052ca:	d1a1      	bne.n	8005210 <cmox_asm_montymul_x128+0xd6>
 80052cc:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 80052d0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80052d2:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
 80052d4:	e8b0 0f00 	ldmia.w	r0!, {r8, r9, sl, fp}
 80052d8:	ebb4 0408 	subs.w	r4, r4, r8
 80052dc:	eb75 0509 	sbcs.w	r5, r5, r9
 80052e0:	eb76 060a 	sbcs.w	r6, r6, sl
 80052e4:	eb77 070b 	sbcs.w	r7, r7, fp
 80052e8:	f1a2 0204 	sub.w	r2, r2, #4
 80052ec:	b16a      	cbz	r2, 800530a <cmox_asm_montymul_x128+0x1d0>
 80052ee:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
 80052f0:	e8b0 0f00 	ldmia.w	r0!, {r8, r9, sl, fp}
 80052f4:	eb74 0408 	sbcs.w	r4, r4, r8
 80052f8:	eb75 0509 	sbcs.w	r5, r5, r9
 80052fc:	eb76 060a 	sbcs.w	r6, r6, sl
 8005300:	eb77 070b 	sbcs.w	r7, r7, fp
 8005304:	f1a2 0204 	sub.w	r2, r2, #4
 8005308:	e7f0      	b.n	80052ec <cmox_asm_montymul_x128+0x1b2>
 800530a:	f17c 0c00 	sbcs.w	ip, ip, #0
 800530e:	ea6f 0c0c 	mvn.w	ip, ip
 8005312:	9a02      	ldr	r2, [sp, #8]
 8005314:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8005318:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800531c:	e893 00f0 	ldmia.w	r3, {r4, r5, r6, r7}
 8005320:	e8b0 0f00 	ldmia.w	r0!, {r8, r9, sl, fp}
 8005324:	ea08 080c 	and.w	r8, r8, ip
 8005328:	ea09 090c 	and.w	r9, r9, ip
 800532c:	ea0a 0a0c 	and.w	sl, sl, ip
 8005330:	ea0b 0b0c 	and.w	fp, fp, ip
 8005334:	ebb4 0408 	subs.w	r4, r4, r8
 8005338:	eb75 0509 	sbcs.w	r5, r5, r9
 800533c:	eb76 060a 	sbcs.w	r6, r6, sl
 8005340:	eb77 070b 	sbcs.w	r7, r7, fp
 8005344:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
 8005346:	f1a2 0204 	sub.w	r2, r2, #4
 800534a:	b1ba      	cbz	r2, 800537c <cmox_asm_montymul_x128+0x242>
 800534c:	e893 00f0 	ldmia.w	r3, {r4, r5, r6, r7}
 8005350:	e8b0 0f00 	ldmia.w	r0!, {r8, r9, sl, fp}
 8005354:	ea08 080c 	and.w	r8, r8, ip
 8005358:	ea09 090c 	and.w	r9, r9, ip
 800535c:	ea0a 0a0c 	and.w	sl, sl, ip
 8005360:	ea0b 0b0c 	and.w	fp, fp, ip
 8005364:	eb74 0408 	sbcs.w	r4, r4, r8
 8005368:	eb75 0509 	sbcs.w	r5, r5, r9
 800536c:	eb76 060a 	sbcs.w	r6, r6, sl
 8005370:	eb77 070b 	sbcs.w	r7, r7, fp
 8005374:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
 8005376:	f1a2 0204 	sub.w	r2, r2, #4
 800537a:	e7e6      	b.n	800534a <cmox_asm_montymul_x128+0x210>
 800537c:	b006      	add	sp, #24
 800537e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005382 <cmox_asm_montyred>:
 8005382:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005386:	f8dd 4024 	ldr.w	r4, [sp, #36]	@ 0x24
 800538a:	9209      	str	r2, [sp, #36]	@ 0x24
 800538c:	ea4f 0181 	mov.w	r1, r1, lsl #2
 8005390:	f04f 0b00 	mov.w	fp, #0
 8005394:	fbab a50b 	umull	sl, r5, fp, fp
 8005398:	468c      	mov	ip, r1
 800539a:	f1bc 0c04 	subs.w	ip, ip, #4
 800539e:	f850 e00c 	ldr.w	lr, [r0, ip]
 80053a2:	f843 e00c 	str.w	lr, [r3, ip]
 80053a6:	d000      	beq.n	80053aa <cmox_asm_montyred+0x28>
 80053a8:	e7f7      	b.n	800539a <cmox_asm_montyred+0x18>
 80053aa:	4408      	add	r0, r1
 80053ac:	f8d3 9000 	ldr.w	r9, [r3]
 80053b0:	fbab 780b 	umull	r7, r8, fp, fp
 80053b4:	fb09 f904 	mul.w	r9, r9, r4
 80053b8:	460e      	mov	r6, r1
 80053ba:	469e      	mov	lr, r3
 80053bc:	f8de 7000 	ldr.w	r7, [lr]
 80053c0:	f852 cb04 	ldr.w	ip, [r2], #4
 80053c4:	f1a6 0604 	sub.w	r6, r6, #4
 80053c8:	fbe9 786c 	umaal	r7, r8, r9, ip
 80053cc:	b156      	cbz	r6, 80053e4 <cmox_asm_montyred+0x62>
 80053ce:	f8de 7004 	ldr.w	r7, [lr, #4]
 80053d2:	f852 cb04 	ldr.w	ip, [r2], #4
 80053d6:	f1a6 0604 	sub.w	r6, r6, #4
 80053da:	fbe9 786c 	umaal	r7, r8, r9, ip
 80053de:	f84e 7b04 	str.w	r7, [lr], #4
 80053e2:	e7f3      	b.n	80053cc <cmox_asm_montyred+0x4a>
 80053e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053e6:	c880      	ldmia	r0!, {r7}
 80053e8:	f04f 0c01 	mov.w	ip, #1
 80053ec:	fbea 786c 	umaal	r7, r8, sl, ip
 80053f0:	f8ce 7000 	str.w	r7, [lr]
 80053f4:	46c2      	mov	sl, r8
 80053f6:	f105 0504 	add.w	r5, r5, #4
 80053fa:	428d      	cmp	r5, r1
 80053fc:	dbd6      	blt.n	80053ac <cmox_asm_montyred+0x2a>
 80053fe:	469c      	mov	ip, r3
 8005400:	4693      	mov	fp, r2
 8005402:	1e0d      	subs	r5, r1, #0
 8005404:	b135      	cbz	r5, 8005414 <cmox_asm_montyred+0x92>
 8005406:	f85c 6b04 	ldr.w	r6, [ip], #4
 800540a:	ca80      	ldmia	r2!, {r7}
 800540c:	41be      	sbcs	r6, r7
 800540e:	f1a5 0504 	sub.w	r5, r5, #4
 8005412:	e7f7      	b.n	8005404 <cmox_asm_montyred+0x82>
 8005414:	eb66 0606 	sbc.w	r6, r6, r6
 8005418:	eb0a 0c06 	add.w	ip, sl, r6
 800541c:	ea6f 0c0c 	mvn.w	ip, ip
 8005420:	469a      	mov	sl, r3
 8005422:	465a      	mov	r2, fp
 8005424:	1e0d      	subs	r5, r1, #0
 8005426:	b14d      	cbz	r5, 800543c <cmox_asm_montyred+0xba>
 8005428:	ca80      	ldmia	r2!, {r7}
 800542a:	f85a 6b04 	ldr.w	r6, [sl], #4
 800542e:	ea07 070c 	and.w	r7, r7, ip
 8005432:	41be      	sbcs	r6, r7
 8005434:	c340      	stmia	r3!, {r6}
 8005436:	f1a5 0504 	sub.w	r5, r5, #4
 800543a:	e7f4      	b.n	8005426 <cmox_asm_montyred+0xa4>
 800543c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005440 <cmox_asm_mul>:
 8005440:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8005444:	0092      	lsls	r2, r2, #2
 8005446:	f05f 0900 	movs.w	r9, #0
 800544a:	ea5f 0b42 	movs.w	fp, r2, lsl #1
 800544e:	f1ab 0b04 	sub.w	fp, fp, #4
 8005452:	d004      	beq.n	800545e <cmox_asm_mul+0x1e>
 8005454:	f1bb 0b04 	subs.w	fp, fp, #4
 8005458:	f843 900b 	str.w	r9, [r3, fp]
 800545c:	d1fa      	bne.n	8005454 <cmox_asm_mul+0x14>
 800545e:	ea5f 0b02 	movs.w	fp, r2
 8005462:	d017      	beq.n	8005494 <cmox_asm_mul+0x54>
 8005464:	2400      	movs	r4, #0
 8005466:	f850 cb04 	ldr.w	ip, [r0], #4
 800546a:	469e      	mov	lr, r3
 800546c:	4692      	mov	sl, r2
 800546e:	460e      	mov	r6, r1
 8005470:	f8de 5000 	ldr.w	r5, [lr]
 8005474:	f856 8b04 	ldr.w	r8, [r6], #4
 8005478:	fbec 5468 	umaal	r5, r4, ip, r8
 800547c:	f84e 5b04 	str.w	r5, [lr], #4
 8005480:	f1ba 0a04 	subs.w	sl, sl, #4
 8005484:	d1f4      	bne.n	8005470 <cmox_asm_mul+0x30>
 8005486:	f8ce 4000 	str.w	r4, [lr]
 800548a:	f103 0304 	add.w	r3, r3, #4
 800548e:	f1bb 0b04 	subs.w	fp, fp, #4
 8005492:	d1e7      	bne.n	8005464 <cmox_asm_mul+0x24>
 8005494:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08005498 <cmox_md_updateState_small>:
 8005498:	2220      	movs	r2, #32
 800549a:	305c      	adds	r0, #92	@ 0x5c
 800549c:	f004 bb64 	b.w	8009b68 <__aeabi_memcpy>

080054a0 <cmox_md_copyLastState_small>:
 80054a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054a2:	6884      	ldr	r4, [r0, #8]
 80054a4:	08a3      	lsrs	r3, r4, #2
 80054a6:	2200      	movs	r2, #0
 80054a8:	f004 0403 	and.w	r4, r4, #3
 80054ac:	e007      	b.n	80054be <cmox_md_copyLastState_small+0x1e>
 80054ae:	f100 055c 	add.w	r5, r0, #92	@ 0x5c
 80054b2:	f855 6022 	ldr.w	r6, [r5, r2, lsl #2]
 80054b6:	ba35      	rev	r5, r6
 80054b8:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 80054bc:	1c52      	adds	r2, r2, #1
 80054be:	429a      	cmp	r2, r3
 80054c0:	d3f5      	bcc.n	80054ae <cmox_md_copyLastState_small+0xe>
 80054c2:	2200      	movs	r2, #0
 80054c4:	e00b      	b.n	80054de <cmox_md_copyLastState_small+0x3e>
 80054c6:	f100 055c 	add.w	r5, r0, #92	@ 0x5c
 80054ca:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80054ce:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
 80054d2:	00d5      	lsls	r5, r2, #3
 80054d4:	f1c5 0518 	rsb	r5, r5, #24
 80054d8:	40ee      	lsrs	r6, r5
 80054da:	55ce      	strb	r6, [r1, r7]
 80054dc:	1c52      	adds	r2, r2, #1
 80054de:	42a2      	cmp	r2, r4
 80054e0:	d3f1      	bcc.n	80054c6 <cmox_md_copyLastState_small+0x26>
 80054e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054e4 <cmox_md_padMsgLen_small>:
 80054e4:	b530      	push	{r4, r5, lr}
 80054e6:	68c4      	ldr	r4, [r0, #12]
 80054e8:	6903      	ldr	r3, [r0, #16]
 80054ea:	2200      	movs	r2, #0
 80054ec:	1ae3      	subs	r3, r4, r3
 80054ee:	18d5      	adds	r5, r2, r3
 80054f0:	5c8c      	ldrb	r4, [r1, r2]
 80054f2:	4405      	add	r5, r0
 80054f4:	1c52      	adds	r2, r2, #1
 80054f6:	2a08      	cmp	r2, #8
 80054f8:	772c      	strb	r4, [r5, #28]
 80054fa:	d3f8      	bcc.n	80054ee <cmox_md_padMsgLen_small+0xa>
 80054fc:	bd30      	pop	{r4, r5, pc}

080054fe <cmox_md_construct>:
 80054fe:	6003      	str	r3, [r0, #0]
 8005500:	60c1      	str	r1, [r0, #12]
 8005502:	6102      	str	r2, [r0, #16]
 8005504:	4770      	bx	lr

08005506 <cmox_md_init>:
 8005506:	b538      	push	{r3, r4, r5, lr}
 8005508:	4604      	mov	r4, r0
 800550a:	4615      	mov	r5, r2
 800550c:	2200      	movs	r2, #0
 800550e:	6062      	str	r2, [r4, #4]
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	4790      	blx	r2
 8005516:	2000      	movs	r0, #0
 8005518:	6160      	str	r0, [r4, #20]
 800551a:	61a0      	str	r0, [r4, #24]
 800551c:	60a5      	str	r5, [r4, #8]
 800551e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8005522:	bd32      	pop	{r1, r4, r5, pc}

08005524 <cmox_md_setTagSize>:
 8005524:	6081      	str	r1, [r0, #8]
 8005526:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800552a:	4770      	bx	lr

0800552c <cmox_md_append>:
 800552c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005530:	4604      	mov	r4, r0
 8005532:	7920      	ldrb	r0, [r4, #4]
 8005534:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8005538:	0745      	lsls	r5, r0, #29
 800553a:	bf48      	it	mi
 800553c:	4824      	ldrmi	r0, [pc, #144]	@ (80055d0 <cmox_md_append+0xa4>)
 800553e:	d445      	bmi.n	80055cc <cmox_md_append+0xa0>
 8005540:	6966      	ldr	r6, [r4, #20]
 8005542:	461d      	mov	r5, r3
 8005544:	f1a8 0001 	sub.w	r0, r8, #1
 8005548:	ea00 03d6 	and.w	r3, r0, r6, lsr #3
 800554c:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 8005550:	ebb6 0fc5 	cmp.w	r6, r5, lsl #3
 8005554:	6166      	str	r6, [r4, #20]
 8005556:	d202      	bcs.n	800555e <cmox_md_append+0x32>
 8005558:	69a6      	ldr	r6, [r4, #24]
 800555a:	1c76      	adds	r6, r6, #1
 800555c:	61a6      	str	r6, [r4, #24]
 800555e:	4617      	mov	r7, r2
 8005560:	69a6      	ldr	r6, [r4, #24]
 8005562:	eb06 7655 	add.w	r6, r6, r5, lsr #29
 8005566:	61a6      	str	r6, [r4, #24]
 8005568:	460e      	mov	r6, r1
 800556a:	18e9      	adds	r1, r5, r3
 800556c:	4288      	cmp	r0, r1
 800556e:	d225      	bcs.n	80055bc <cmox_md_append+0x90>
 8005570:	eba8 0903 	sub.w	r9, r8, r3
 8005574:	464a      	mov	r2, r9
 8005576:	4631      	mov	r1, r6
 8005578:	18f8      	adds	r0, r7, r3
 800557a:	f004 faf5 	bl	8009b68 <__aeabi_memcpy>
 800557e:	6822      	ldr	r2, [r4, #0]
 8005580:	6813      	ldr	r3, [r2, #0]
 8005582:	4639      	mov	r1, r7
 8005584:	e00f      	b.n	80055a6 <cmox_md_append+0x7a>
 8005586:	4642      	mov	r2, r8
 8005588:	4638      	mov	r0, r7
 800558a:	f004 faed 	bl	8009b68 <__aeabi_memcpy>
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	4639      	mov	r1, r7
 8005594:	4620      	mov	r0, r4
 8005596:	4790      	blx	r2
 8005598:	e007      	b.n	80055aa <cmox_md_append+0x7e>
 800559a:	1831      	adds	r1, r6, r0
 800559c:	f011 0003 	ands.w	r0, r1, #3
 80055a0:	d1f1      	bne.n	8005586 <cmox_md_append+0x5a>
 80055a2:	6822      	ldr	r2, [r4, #0]
 80055a4:	6813      	ldr	r3, [r2, #0]
 80055a6:	4620      	mov	r0, r4
 80055a8:	4798      	blx	r3
 80055aa:	4648      	mov	r0, r9
 80055ac:	eb00 0908 	add.w	r9, r0, r8
 80055b0:	f1a9 0101 	sub.w	r1, r9, #1
 80055b4:	42a9      	cmp	r1, r5
 80055b6:	d3f0      	bcc.n	800559a <cmox_md_append+0x6e>
 80055b8:	2300      	movs	r3, #0
 80055ba:	e000      	b.n	80055be <cmox_md_append+0x92>
 80055bc:	2000      	movs	r0, #0
 80055be:	1a2a      	subs	r2, r5, r0
 80055c0:	1831      	adds	r1, r6, r0
 80055c2:	18f8      	adds	r0, r7, r3
 80055c4:	f004 fad0 	bl	8009b68 <__aeabi_memcpy>
 80055c8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80055cc:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
 80055d0:	00020004 	.word	0x00020004

080055d4 <cmox_md_generateTag>:
 80055d4:	e92d 4ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d8:	4602      	mov	r2, r0
 80055da:	b085      	sub	sp, #20
 80055dc:	68d0      	ldr	r0, [r2, #12]
 80055de:	6913      	ldr	r3, [r2, #16]
 80055e0:	f8df c16c 	ldr.w	ip, [pc, #364]	@ 8005750 <cmox_md_generateTag+0x17c>
 80055e4:	f8df 816c 	ldr.w	r8, [pc, #364]	@ 8005754 <cmox_md_generateTag+0x180>
 80055e8:	eba0 0a03 	sub.w	sl, r0, r3
 80055ec:	6850      	ldr	r0, [r2, #4]
 80055ee:	f040 0004 	orr.w	r0, r0, #4
 80055f2:	6050      	str	r0, [r2, #4]
 80055f4:	2700      	movs	r7, #0
 80055f6:	a803      	add	r0, sp, #12
 80055f8:	9002      	str	r0, [sp, #8]
 80055fa:	f10d 0e0c 	add.w	lr, sp, #12
 80055fe:	e9d8 3400 	ldrd	r3, r4, [r8]
 8005602:	a803      	add	r0, sp, #12
 8005604:	4d54      	ldr	r5, [pc, #336]	@ (8005758 <cmox_md_generateTag+0x184>)
 8005606:	e9c0 3400 	strd	r3, r4, [r0]
 800560a:	7828      	ldrb	r0, [r5, #0]
 800560c:	4d53      	ldr	r5, [pc, #332]	@ (800575c <cmox_md_generateTag+0x188>)
 800560e:	2800      	cmp	r0, #0
 8005610:	bf0c      	ite	eq
 8005612:	2300      	moveq	r3, #0
 8005614:	2304      	movne	r3, #4
 8005616:	4699      	mov	r9, r3
 8005618:	f85c 3003 	ldr.w	r3, [ip, r3]
 800561c:	f85e 4009 	ldr.w	r4, [lr, r9]
 8005620:	4423      	add	r3, r4
 8005622:	2601      	movs	r6, #1
 8005624:	601d      	str	r5, [r3, #0]
 8005626:	681c      	ldr	r4, [r3, #0]
 8005628:	609e      	str	r6, [r3, #8]
 800562a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800562e:	9d03      	ldr	r5, [sp, #12]
 8005630:	f8dc 9000 	ldr.w	r9, [ip]
 8005634:	f8de 6004 	ldr.w	r6, [lr, #4]
 8005638:	405d      	eors	r5, r3
 800563a:	4065      	eors	r5, r4
 800563c:	4c48      	ldr	r4, [pc, #288]	@ (8005760 <cmox_md_generateTag+0x18c>)
 800563e:	4065      	eors	r5, r4
 8005640:	ea89 0606 	eor.w	r6, r9, r6
 8005644:	4c47      	ldr	r4, [pc, #284]	@ (8005764 <cmox_md_generateTag+0x190>)
 8005646:	4066      	eors	r6, r4
 8005648:	1975      	adds	r5, r6, r5
 800564a:	4c47      	ldr	r4, [pc, #284]	@ (8005768 <cmox_md_generateTag+0x194>)
 800564c:	4065      	eors	r5, r4
 800564e:	e9d8 6b00 	ldrd	r6, fp, [r8]
 8005652:	ac03      	add	r4, sp, #12
 8005654:	2800      	cmp	r0, #0
 8005656:	e9c4 6b00 	strd	r6, fp, [r4]
 800565a:	bf0e      	itee	eq
 800565c:	2400      	moveq	r4, #0
 800565e:	2004      	movne	r0, #4
 8005660:	2404      	movne	r4, #4
 8005662:	9e02      	ldr	r6, [sp, #8]
 8005664:	f85c 0000 	ldr.w	r0, [ip, r0]
 8005668:	5934      	ldr	r4, [r6, r4]
 800566a:	1820      	adds	r0, r4, r0
 800566c:	4c3f      	ldr	r4, [pc, #252]	@ (800576c <cmox_md_generateTag+0x198>)
 800566e:	6004      	str	r4, [r0, #0]
 8005670:	2601      	movs	r6, #1
 8005672:	6804      	ldr	r4, [r0, #0]
 8005674:	6086      	str	r6, [r0, #8]
 8005676:	9803      	ldr	r0, [sp, #12]
 8005678:	9e02      	ldr	r6, [sp, #8]
 800567a:	4043      	eors	r3, r0
 800567c:	4063      	eors	r3, r4
 800567e:	4c38      	ldr	r4, [pc, #224]	@ (8005760 <cmox_md_generateTag+0x18c>)
 8005680:	6870      	ldr	r0, [r6, #4]
 8005682:	4063      	eors	r3, r4
 8005684:	ea89 0000 	eor.w	r0, r9, r0
 8005688:	4c36      	ldr	r4, [pc, #216]	@ (8005764 <cmox_md_generateTag+0x190>)
 800568a:	4060      	eors	r0, r4
 800568c:	4403      	add	r3, r0
 800568e:	4838      	ldr	r0, [pc, #224]	@ (8005770 <cmox_md_generateTag+0x19c>)
 8005690:	4043      	eors	r3, r0
 8005692:	0028      	movs	r0, r5
 8005694:	bf18      	it	ne
 8005696:	2001      	movne	r0, #1
 8005698:	1e5b      	subs	r3, r3, #1
 800569a:	419b      	sbcs	r3, r3
 800569c:	2f04      	cmp	r7, #4
 800569e:	bf2c      	ite	cs
 80056a0:	b2c0      	uxtbcs	r0, r0
 80056a2:	0fd8      	lsrcc	r0, r3, #31
 80056a4:	f102 0314 	add.w	r3, r2, #20
 80056a8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80056ac:	f007 0303 	and.w	r3, r7, #3
 80056b0:	f1c3 0303 	rsb	r3, r3, #3
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	40d8      	lsrs	r0, r3
 80056b8:	f80d 0007 	strb.w	r0, [sp, r7]
 80056bc:	1c7f      	adds	r7, r7, #1
 80056be:	2f08      	cmp	r7, #8
 80056c0:	d39d      	bcc.n	80055fe <cmox_md_generateTag+0x2a>
 80056c2:	4615      	mov	r5, r2
 80056c4:	460c      	mov	r4, r1
 80056c6:	696a      	ldr	r2, [r5, #20]
 80056c8:	69ab      	ldr	r3, [r5, #24]
 80056ca:	68e8      	ldr	r0, [r5, #12]
 80056cc:	08d2      	lsrs	r2, r2, #3
 80056ce:	ea42 7243 	orr.w	r2, r2, r3, lsl #29
 80056d2:	1e40      	subs	r0, r0, #1
 80056d4:	ea00 0702 	and.w	r7, r0, r2
 80056d8:	2300      	movs	r3, #0
 80056da:	4002      	ands	r2, r0
 80056dc:	429b      	cmp	r3, r3
 80056de:	d80a      	bhi.n	80056f6 <cmox_md_generateTag+0x122>
 80056e0:	4552      	cmp	r2, sl
 80056e2:	d208      	bcs.n	80056f6 <cmox_md_generateTag+0x122>
 80056e4:	2080      	movs	r0, #128	@ 0x80
 80056e6:	55e0      	strb	r0, [r4, r7]
 80056e8:	1c7f      	adds	r7, r7, #1
 80056ea:	4557      	cmp	r7, sl
 80056ec:	d216      	bcs.n	800571c <cmox_md_generateTag+0x148>
 80056ee:	ebaa 0107 	sub.w	r1, sl, r7
 80056f2:	19e0      	adds	r0, r4, r7
 80056f4:	e010      	b.n	8005718 <cmox_md_generateTag+0x144>
 80056f6:	2080      	movs	r0, #128	@ 0x80
 80056f8:	55e0      	strb	r0, [r4, r7]
 80056fa:	e000      	b.n	80056fe <cmox_md_generateTag+0x12a>
 80056fc:	55e3      	strb	r3, [r4, r7]
 80056fe:	68e8      	ldr	r0, [r5, #12]
 8005700:	1c7f      	adds	r7, r7, #1
 8005702:	4287      	cmp	r7, r0
 8005704:	d3fa      	bcc.n	80056fc <cmox_md_generateTag+0x128>
 8005706:	682a      	ldr	r2, [r5, #0]
 8005708:	6813      	ldr	r3, [r2, #0]
 800570a:	4628      	mov	r0, r5
 800570c:	4798      	blx	r3
 800570e:	f1ba 0f00 	cmp.w	sl, #0
 8005712:	d003      	beq.n	800571c <cmox_md_generateTag+0x148>
 8005714:	4651      	mov	r1, sl
 8005716:	4620      	mov	r0, r4
 8005718:	f004 fa28 	bl	8009b6c <__aeabi_memclr>
 800571c:	682a      	ldr	r2, [r5, #0]
 800571e:	9e06      	ldr	r6, [sp, #24]
 8005720:	9f05      	ldr	r7, [sp, #20]
 8005722:	6893      	ldr	r3, [r2, #8]
 8005724:	4669      	mov	r1, sp
 8005726:	4628      	mov	r0, r5
 8005728:	4798      	blx	r3
 800572a:	682a      	ldr	r2, [r5, #0]
 800572c:	f8d2 9000 	ldr.w	r9, [r2]
 8005730:	4621      	mov	r1, r4
 8005732:	4628      	mov	r0, r5
 8005734:	47c8      	blx	r9
 8005736:	682b      	ldr	r3, [r5, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	4639      	mov	r1, r7
 800573c:	4628      	mov	r0, r5
 800573e:	4790      	blx	r2
 8005740:	b10e      	cbz	r6, 8005746 <cmox_md_generateTag+0x172>
 8005742:	68a8      	ldr	r0, [r5, #8]
 8005744:	6030      	str	r0, [r6, #0]
 8005746:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800574a:	b007      	add	sp, #28
 800574c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005750:	0800ab5c 	.word	0x0800ab5c
 8005754:	08005774 	.word	0x08005774
 8005758:	20000084 	.word	0x20000084
 800575c:	9310c55f 	.word	0x9310c55f
 8005760:	12008504 	.word	0x12008504
 8005764:	7a0168fc 	.word	0x7a0168fc
 8005768:	ff24f5c0 	.word	0xff24f5c0
 800576c:	d433af24 	.word	0xd433af24
 8005770:	8b69af26 	.word	0x8b69af26
 8005774:	0101b004 	.word	0x0101b004
 8005778:	45011700 	.word	0x45011700

0800577c <strcmp>:
 800577c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005780:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005784:	2a01      	cmp	r2, #1
 8005786:	bf28      	it	cs
 8005788:	429a      	cmpcs	r2, r3
 800578a:	d0f7      	beq.n	800577c <strcmp>
 800578c:	1ad0      	subs	r0, r2, r3
 800578e:	4770      	bx	lr

08005790 <strlen>:
 8005790:	4603      	mov	r3, r0
 8005792:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005796:	2a00      	cmp	r2, #0
 8005798:	d1fb      	bne.n	8005792 <strlen+0x2>
 800579a:	1a18      	subs	r0, r3, r0
 800579c:	3801      	subs	r0, #1
 800579e:	4770      	bx	lr

080057a0 <__aeabi_memset>:
 80057a0:	b470      	push	{r4, r5, r6}
 80057a2:	0784      	lsls	r4, r0, #30
 80057a4:	d046      	beq.n	8005834 <__aeabi_memset+0x94>
 80057a6:	1e4c      	subs	r4, r1, #1
 80057a8:	2900      	cmp	r1, #0
 80057aa:	d041      	beq.n	8005830 <__aeabi_memset+0x90>
 80057ac:	b2d5      	uxtb	r5, r2
 80057ae:	4603      	mov	r3, r0
 80057b0:	e002      	b.n	80057b8 <__aeabi_memset+0x18>
 80057b2:	1e61      	subs	r1, r4, #1
 80057b4:	b3e4      	cbz	r4, 8005830 <__aeabi_memset+0x90>
 80057b6:	460c      	mov	r4, r1
 80057b8:	f803 5b01 	strb.w	r5, [r3], #1
 80057bc:	0799      	lsls	r1, r3, #30
 80057be:	d1f8      	bne.n	80057b2 <__aeabi_memset+0x12>
 80057c0:	2c03      	cmp	r4, #3
 80057c2:	d92e      	bls.n	8005822 <__aeabi_memset+0x82>
 80057c4:	b2d5      	uxtb	r5, r2
 80057c6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80057ca:	2c0f      	cmp	r4, #15
 80057cc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80057d0:	d919      	bls.n	8005806 <__aeabi_memset+0x66>
 80057d2:	4626      	mov	r6, r4
 80057d4:	f103 0110 	add.w	r1, r3, #16
 80057d8:	3e10      	subs	r6, #16
 80057da:	2e0f      	cmp	r6, #15
 80057dc:	f841 5c10 	str.w	r5, [r1, #-16]
 80057e0:	f841 5c0c 	str.w	r5, [r1, #-12]
 80057e4:	f841 5c08 	str.w	r5, [r1, #-8]
 80057e8:	f841 5c04 	str.w	r5, [r1, #-4]
 80057ec:	f101 0110 	add.w	r1, r1, #16
 80057f0:	d8f2      	bhi.n	80057d8 <__aeabi_memset+0x38>
 80057f2:	f1a4 0110 	sub.w	r1, r4, #16
 80057f6:	f021 010f 	bic.w	r1, r1, #15
 80057fa:	f004 040f 	and.w	r4, r4, #15
 80057fe:	3110      	adds	r1, #16
 8005800:	2c03      	cmp	r4, #3
 8005802:	440b      	add	r3, r1
 8005804:	d90d      	bls.n	8005822 <__aeabi_memset+0x82>
 8005806:	461e      	mov	r6, r3
 8005808:	4621      	mov	r1, r4
 800580a:	3904      	subs	r1, #4
 800580c:	2903      	cmp	r1, #3
 800580e:	f846 5b04 	str.w	r5, [r6], #4
 8005812:	d8fa      	bhi.n	800580a <__aeabi_memset+0x6a>
 8005814:	1f21      	subs	r1, r4, #4
 8005816:	f021 0103 	bic.w	r1, r1, #3
 800581a:	3104      	adds	r1, #4
 800581c:	440b      	add	r3, r1
 800581e:	f004 0403 	and.w	r4, r4, #3
 8005822:	b12c      	cbz	r4, 8005830 <__aeabi_memset+0x90>
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	441c      	add	r4, r3
 8005828:	f803 2b01 	strb.w	r2, [r3], #1
 800582c:	42a3      	cmp	r3, r4
 800582e:	d1fb      	bne.n	8005828 <__aeabi_memset+0x88>
 8005830:	bc70      	pop	{r4, r5, r6}
 8005832:	4770      	bx	lr
 8005834:	460c      	mov	r4, r1
 8005836:	4603      	mov	r3, r0
 8005838:	e7c2      	b.n	80057c0 <__aeabi_memset+0x20>
 800583a:	0000      	movs	r0, r0
 800583c:	0000      	movs	r0, r0
	...

08005840 <memchr>:
 8005840:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8005844:	2a10      	cmp	r2, #16
 8005846:	db2b      	blt.n	80058a0 <memchr+0x60>
 8005848:	f010 0f07 	tst.w	r0, #7
 800584c:	d008      	beq.n	8005860 <memchr+0x20>
 800584e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005852:	3a01      	subs	r2, #1
 8005854:	428b      	cmp	r3, r1
 8005856:	d02d      	beq.n	80058b4 <memchr+0x74>
 8005858:	f010 0f07 	tst.w	r0, #7
 800585c:	b342      	cbz	r2, 80058b0 <memchr+0x70>
 800585e:	d1f6      	bne.n	800584e <memchr+0xe>
 8005860:	b4f0      	push	{r4, r5, r6, r7}
 8005862:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005866:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800586a:	f022 0407 	bic.w	r4, r2, #7
 800586e:	f07f 0700 	mvns.w	r7, #0
 8005872:	2300      	movs	r3, #0
 8005874:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005878:	3c08      	subs	r4, #8
 800587a:	ea85 0501 	eor.w	r5, r5, r1
 800587e:	ea86 0601 	eor.w	r6, r6, r1
 8005882:	fa85 f547 	uadd8	r5, r5, r7
 8005886:	faa3 f587 	sel	r5, r3, r7
 800588a:	fa86 f647 	uadd8	r6, r6, r7
 800588e:	faa5 f687 	sel	r6, r5, r7
 8005892:	b98e      	cbnz	r6, 80058b8 <memchr+0x78>
 8005894:	d1ee      	bne.n	8005874 <memchr+0x34>
 8005896:	bcf0      	pop	{r4, r5, r6, r7}
 8005898:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800589c:	f002 0207 	and.w	r2, r2, #7
 80058a0:	b132      	cbz	r2, 80058b0 <memchr+0x70>
 80058a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80058a6:	3a01      	subs	r2, #1
 80058a8:	ea83 0301 	eor.w	r3, r3, r1
 80058ac:	b113      	cbz	r3, 80058b4 <memchr+0x74>
 80058ae:	d1f8      	bne.n	80058a2 <memchr+0x62>
 80058b0:	2000      	movs	r0, #0
 80058b2:	4770      	bx	lr
 80058b4:	3801      	subs	r0, #1
 80058b6:	4770      	bx	lr
 80058b8:	2d00      	cmp	r5, #0
 80058ba:	bf06      	itte	eq
 80058bc:	4635      	moveq	r5, r6
 80058be:	3803      	subeq	r0, #3
 80058c0:	3807      	subne	r0, #7
 80058c2:	f015 0f01 	tst.w	r5, #1
 80058c6:	d107      	bne.n	80058d8 <memchr+0x98>
 80058c8:	3001      	adds	r0, #1
 80058ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80058ce:	bf02      	ittt	eq
 80058d0:	3001      	addeq	r0, #1
 80058d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80058d6:	3001      	addeq	r0, #1
 80058d8:	bcf0      	pop	{r4, r5, r6, r7}
 80058da:	3801      	subs	r0, #1
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop

080058e0 <__aeabi_uldivmod>:
 80058e0:	b953      	cbnz	r3, 80058f8 <__aeabi_uldivmod+0x18>
 80058e2:	b94a      	cbnz	r2, 80058f8 <__aeabi_uldivmod+0x18>
 80058e4:	2900      	cmp	r1, #0
 80058e6:	bf08      	it	eq
 80058e8:	2800      	cmpeq	r0, #0
 80058ea:	bf1c      	itt	ne
 80058ec:	f04f 31ff 	movne.w	r1, #4294967295
 80058f0:	f04f 30ff 	movne.w	r0, #4294967295
 80058f4:	f000 b96a 	b.w	8005bcc <__aeabi_idiv0>
 80058f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80058fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8005900:	f000 f806 	bl	8005910 <__udivmoddi4>
 8005904:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800590c:	b004      	add	sp, #16
 800590e:	4770      	bx	lr

08005910 <__udivmoddi4>:
 8005910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005914:	9d08      	ldr	r5, [sp, #32]
 8005916:	460c      	mov	r4, r1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d14e      	bne.n	80059ba <__udivmoddi4+0xaa>
 800591c:	4694      	mov	ip, r2
 800591e:	458c      	cmp	ip, r1
 8005920:	4686      	mov	lr, r0
 8005922:	fab2 f282 	clz	r2, r2
 8005926:	d962      	bls.n	80059ee <__udivmoddi4+0xde>
 8005928:	b14a      	cbz	r2, 800593e <__udivmoddi4+0x2e>
 800592a:	f1c2 0320 	rsb	r3, r2, #32
 800592e:	4091      	lsls	r1, r2
 8005930:	fa20 f303 	lsr.w	r3, r0, r3
 8005934:	fa0c fc02 	lsl.w	ip, ip, r2
 8005938:	4319      	orrs	r1, r3
 800593a:	fa00 fe02 	lsl.w	lr, r0, r2
 800593e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8005942:	fa1f f68c 	uxth.w	r6, ip
 8005946:	fbb1 f4f7 	udiv	r4, r1, r7
 800594a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800594e:	fb07 1114 	mls	r1, r7, r4, r1
 8005952:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005956:	fb04 f106 	mul.w	r1, r4, r6
 800595a:	4299      	cmp	r1, r3
 800595c:	d90a      	bls.n	8005974 <__udivmoddi4+0x64>
 800595e:	eb1c 0303 	adds.w	r3, ip, r3
 8005962:	f104 30ff 	add.w	r0, r4, #4294967295
 8005966:	f080 8112 	bcs.w	8005b8e <__udivmoddi4+0x27e>
 800596a:	4299      	cmp	r1, r3
 800596c:	f240 810f 	bls.w	8005b8e <__udivmoddi4+0x27e>
 8005970:	3c02      	subs	r4, #2
 8005972:	4463      	add	r3, ip
 8005974:	1a59      	subs	r1, r3, r1
 8005976:	fa1f f38e 	uxth.w	r3, lr
 800597a:	fbb1 f0f7 	udiv	r0, r1, r7
 800597e:	fb07 1110 	mls	r1, r7, r0, r1
 8005982:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005986:	fb00 f606 	mul.w	r6, r0, r6
 800598a:	429e      	cmp	r6, r3
 800598c:	d90a      	bls.n	80059a4 <__udivmoddi4+0x94>
 800598e:	eb1c 0303 	adds.w	r3, ip, r3
 8005992:	f100 31ff 	add.w	r1, r0, #4294967295
 8005996:	f080 80fc 	bcs.w	8005b92 <__udivmoddi4+0x282>
 800599a:	429e      	cmp	r6, r3
 800599c:	f240 80f9 	bls.w	8005b92 <__udivmoddi4+0x282>
 80059a0:	4463      	add	r3, ip
 80059a2:	3802      	subs	r0, #2
 80059a4:	1b9b      	subs	r3, r3, r6
 80059a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80059aa:	2100      	movs	r1, #0
 80059ac:	b11d      	cbz	r5, 80059b6 <__udivmoddi4+0xa6>
 80059ae:	40d3      	lsrs	r3, r2
 80059b0:	2200      	movs	r2, #0
 80059b2:	e9c5 3200 	strd	r3, r2, [r5]
 80059b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ba:	428b      	cmp	r3, r1
 80059bc:	d905      	bls.n	80059ca <__udivmoddi4+0xba>
 80059be:	b10d      	cbz	r5, 80059c4 <__udivmoddi4+0xb4>
 80059c0:	e9c5 0100 	strd	r0, r1, [r5]
 80059c4:	2100      	movs	r1, #0
 80059c6:	4608      	mov	r0, r1
 80059c8:	e7f5      	b.n	80059b6 <__udivmoddi4+0xa6>
 80059ca:	fab3 f183 	clz	r1, r3
 80059ce:	2900      	cmp	r1, #0
 80059d0:	d146      	bne.n	8005a60 <__udivmoddi4+0x150>
 80059d2:	42a3      	cmp	r3, r4
 80059d4:	d302      	bcc.n	80059dc <__udivmoddi4+0xcc>
 80059d6:	4290      	cmp	r0, r2
 80059d8:	f0c0 80f0 	bcc.w	8005bbc <__udivmoddi4+0x2ac>
 80059dc:	1a86      	subs	r6, r0, r2
 80059de:	eb64 0303 	sbc.w	r3, r4, r3
 80059e2:	2001      	movs	r0, #1
 80059e4:	2d00      	cmp	r5, #0
 80059e6:	d0e6      	beq.n	80059b6 <__udivmoddi4+0xa6>
 80059e8:	e9c5 6300 	strd	r6, r3, [r5]
 80059ec:	e7e3      	b.n	80059b6 <__udivmoddi4+0xa6>
 80059ee:	2a00      	cmp	r2, #0
 80059f0:	f040 8090 	bne.w	8005b14 <__udivmoddi4+0x204>
 80059f4:	eba1 040c 	sub.w	r4, r1, ip
 80059f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80059fc:	fa1f f78c 	uxth.w	r7, ip
 8005a00:	2101      	movs	r1, #1
 8005a02:	fbb4 f6f8 	udiv	r6, r4, r8
 8005a06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8005a0a:	fb08 4416 	mls	r4, r8, r6, r4
 8005a0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005a12:	fb07 f006 	mul.w	r0, r7, r6
 8005a16:	4298      	cmp	r0, r3
 8005a18:	d908      	bls.n	8005a2c <__udivmoddi4+0x11c>
 8005a1a:	eb1c 0303 	adds.w	r3, ip, r3
 8005a1e:	f106 34ff 	add.w	r4, r6, #4294967295
 8005a22:	d202      	bcs.n	8005a2a <__udivmoddi4+0x11a>
 8005a24:	4298      	cmp	r0, r3
 8005a26:	f200 80cd 	bhi.w	8005bc4 <__udivmoddi4+0x2b4>
 8005a2a:	4626      	mov	r6, r4
 8005a2c:	1a1c      	subs	r4, r3, r0
 8005a2e:	fa1f f38e 	uxth.w	r3, lr
 8005a32:	fbb4 f0f8 	udiv	r0, r4, r8
 8005a36:	fb08 4410 	mls	r4, r8, r0, r4
 8005a3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005a3e:	fb00 f707 	mul.w	r7, r0, r7
 8005a42:	429f      	cmp	r7, r3
 8005a44:	d908      	bls.n	8005a58 <__udivmoddi4+0x148>
 8005a46:	eb1c 0303 	adds.w	r3, ip, r3
 8005a4a:	f100 34ff 	add.w	r4, r0, #4294967295
 8005a4e:	d202      	bcs.n	8005a56 <__udivmoddi4+0x146>
 8005a50:	429f      	cmp	r7, r3
 8005a52:	f200 80b0 	bhi.w	8005bb6 <__udivmoddi4+0x2a6>
 8005a56:	4620      	mov	r0, r4
 8005a58:	1bdb      	subs	r3, r3, r7
 8005a5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8005a5e:	e7a5      	b.n	80059ac <__udivmoddi4+0x9c>
 8005a60:	f1c1 0620 	rsb	r6, r1, #32
 8005a64:	408b      	lsls	r3, r1
 8005a66:	fa22 f706 	lsr.w	r7, r2, r6
 8005a6a:	431f      	orrs	r7, r3
 8005a6c:	fa20 fc06 	lsr.w	ip, r0, r6
 8005a70:	fa04 f301 	lsl.w	r3, r4, r1
 8005a74:	ea43 030c 	orr.w	r3, r3, ip
 8005a78:	40f4      	lsrs	r4, r6
 8005a7a:	fa00 f801 	lsl.w	r8, r0, r1
 8005a7e:	0c38      	lsrs	r0, r7, #16
 8005a80:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8005a84:	fbb4 fef0 	udiv	lr, r4, r0
 8005a88:	fa1f fc87 	uxth.w	ip, r7
 8005a8c:	fb00 441e 	mls	r4, r0, lr, r4
 8005a90:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8005a94:	fb0e f90c 	mul.w	r9, lr, ip
 8005a98:	45a1      	cmp	r9, r4
 8005a9a:	fa02 f201 	lsl.w	r2, r2, r1
 8005a9e:	d90a      	bls.n	8005ab6 <__udivmoddi4+0x1a6>
 8005aa0:	193c      	adds	r4, r7, r4
 8005aa2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8005aa6:	f080 8084 	bcs.w	8005bb2 <__udivmoddi4+0x2a2>
 8005aaa:	45a1      	cmp	r9, r4
 8005aac:	f240 8081 	bls.w	8005bb2 <__udivmoddi4+0x2a2>
 8005ab0:	f1ae 0e02 	sub.w	lr, lr, #2
 8005ab4:	443c      	add	r4, r7
 8005ab6:	eba4 0409 	sub.w	r4, r4, r9
 8005aba:	fa1f f983 	uxth.w	r9, r3
 8005abe:	fbb4 f3f0 	udiv	r3, r4, r0
 8005ac2:	fb00 4413 	mls	r4, r0, r3, r4
 8005ac6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8005aca:	fb03 fc0c 	mul.w	ip, r3, ip
 8005ace:	45a4      	cmp	ip, r4
 8005ad0:	d907      	bls.n	8005ae2 <__udivmoddi4+0x1d2>
 8005ad2:	193c      	adds	r4, r7, r4
 8005ad4:	f103 30ff 	add.w	r0, r3, #4294967295
 8005ad8:	d267      	bcs.n	8005baa <__udivmoddi4+0x29a>
 8005ada:	45a4      	cmp	ip, r4
 8005adc:	d965      	bls.n	8005baa <__udivmoddi4+0x29a>
 8005ade:	3b02      	subs	r3, #2
 8005ae0:	443c      	add	r4, r7
 8005ae2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8005ae6:	fba0 9302 	umull	r9, r3, r0, r2
 8005aea:	eba4 040c 	sub.w	r4, r4, ip
 8005aee:	429c      	cmp	r4, r3
 8005af0:	46ce      	mov	lr, r9
 8005af2:	469c      	mov	ip, r3
 8005af4:	d351      	bcc.n	8005b9a <__udivmoddi4+0x28a>
 8005af6:	d04e      	beq.n	8005b96 <__udivmoddi4+0x286>
 8005af8:	b155      	cbz	r5, 8005b10 <__udivmoddi4+0x200>
 8005afa:	ebb8 030e 	subs.w	r3, r8, lr
 8005afe:	eb64 040c 	sbc.w	r4, r4, ip
 8005b02:	fa04 f606 	lsl.w	r6, r4, r6
 8005b06:	40cb      	lsrs	r3, r1
 8005b08:	431e      	orrs	r6, r3
 8005b0a:	40cc      	lsrs	r4, r1
 8005b0c:	e9c5 6400 	strd	r6, r4, [r5]
 8005b10:	2100      	movs	r1, #0
 8005b12:	e750      	b.n	80059b6 <__udivmoddi4+0xa6>
 8005b14:	f1c2 0320 	rsb	r3, r2, #32
 8005b18:	fa20 f103 	lsr.w	r1, r0, r3
 8005b1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8005b20:	fa24 f303 	lsr.w	r3, r4, r3
 8005b24:	4094      	lsls	r4, r2
 8005b26:	430c      	orrs	r4, r1
 8005b28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8005b2c:	fa00 fe02 	lsl.w	lr, r0, r2
 8005b30:	fa1f f78c 	uxth.w	r7, ip
 8005b34:	fbb3 f0f8 	udiv	r0, r3, r8
 8005b38:	fb08 3110 	mls	r1, r8, r0, r3
 8005b3c:	0c23      	lsrs	r3, r4, #16
 8005b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005b42:	fb00 f107 	mul.w	r1, r0, r7
 8005b46:	4299      	cmp	r1, r3
 8005b48:	d908      	bls.n	8005b5c <__udivmoddi4+0x24c>
 8005b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8005b4e:	f100 36ff 	add.w	r6, r0, #4294967295
 8005b52:	d22c      	bcs.n	8005bae <__udivmoddi4+0x29e>
 8005b54:	4299      	cmp	r1, r3
 8005b56:	d92a      	bls.n	8005bae <__udivmoddi4+0x29e>
 8005b58:	3802      	subs	r0, #2
 8005b5a:	4463      	add	r3, ip
 8005b5c:	1a5b      	subs	r3, r3, r1
 8005b5e:	b2a4      	uxth	r4, r4
 8005b60:	fbb3 f1f8 	udiv	r1, r3, r8
 8005b64:	fb08 3311 	mls	r3, r8, r1, r3
 8005b68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8005b6c:	fb01 f307 	mul.w	r3, r1, r7
 8005b70:	42a3      	cmp	r3, r4
 8005b72:	d908      	bls.n	8005b86 <__udivmoddi4+0x276>
 8005b74:	eb1c 0404 	adds.w	r4, ip, r4
 8005b78:	f101 36ff 	add.w	r6, r1, #4294967295
 8005b7c:	d213      	bcs.n	8005ba6 <__udivmoddi4+0x296>
 8005b7e:	42a3      	cmp	r3, r4
 8005b80:	d911      	bls.n	8005ba6 <__udivmoddi4+0x296>
 8005b82:	3902      	subs	r1, #2
 8005b84:	4464      	add	r4, ip
 8005b86:	1ae4      	subs	r4, r4, r3
 8005b88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005b8c:	e739      	b.n	8005a02 <__udivmoddi4+0xf2>
 8005b8e:	4604      	mov	r4, r0
 8005b90:	e6f0      	b.n	8005974 <__udivmoddi4+0x64>
 8005b92:	4608      	mov	r0, r1
 8005b94:	e706      	b.n	80059a4 <__udivmoddi4+0x94>
 8005b96:	45c8      	cmp	r8, r9
 8005b98:	d2ae      	bcs.n	8005af8 <__udivmoddi4+0x1e8>
 8005b9a:	ebb9 0e02 	subs.w	lr, r9, r2
 8005b9e:	eb63 0c07 	sbc.w	ip, r3, r7
 8005ba2:	3801      	subs	r0, #1
 8005ba4:	e7a8      	b.n	8005af8 <__udivmoddi4+0x1e8>
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	e7ed      	b.n	8005b86 <__udivmoddi4+0x276>
 8005baa:	4603      	mov	r3, r0
 8005bac:	e799      	b.n	8005ae2 <__udivmoddi4+0x1d2>
 8005bae:	4630      	mov	r0, r6
 8005bb0:	e7d4      	b.n	8005b5c <__udivmoddi4+0x24c>
 8005bb2:	46d6      	mov	lr, sl
 8005bb4:	e77f      	b.n	8005ab6 <__udivmoddi4+0x1a6>
 8005bb6:	4463      	add	r3, ip
 8005bb8:	3802      	subs	r0, #2
 8005bba:	e74d      	b.n	8005a58 <__udivmoddi4+0x148>
 8005bbc:	4606      	mov	r6, r0
 8005bbe:	4623      	mov	r3, r4
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	e70f      	b.n	80059e4 <__udivmoddi4+0xd4>
 8005bc4:	3e02      	subs	r6, #2
 8005bc6:	4463      	add	r3, ip
 8005bc8:	e730      	b.n	8005a2c <__udivmoddi4+0x11c>
 8005bca:	bf00      	nop

08005bcc <__aeabi_idiv0>:
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop

08005bd0 <trimWhitespace>:
// RDFProcessor "class"
typedef struct {
    RDFGraph *graph;
} RDFProcessor;

char *trimWhitespace(const char *str) {
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
    if (!str) return NULL;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <trimWhitespace+0x12>
 8005bde:	2300      	movs	r3, #0
 8005be0:	e044      	b.n	8005c6c <trimWhitespace+0x9c>
    char *mutableStr = strdup(str);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f003 ff0e 	bl	8009a04 <strdup>
 8005be8:	4603      	mov	r3, r0
 8005bea:	60fb      	str	r3, [r7, #12]
    if (!mutableStr) return NULL;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <trimWhitespace+0x26>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e03a      	b.n	8005c6c <trimWhitespace+0x9c>

    char *start = mutableStr;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	617b      	str	r3, [r7, #20]
    char *end;

    while (isspace((unsigned char)*start)) start++;
 8005bfa:	e002      	b.n	8005c02 <trimWhitespace+0x32>
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	3301      	adds	r3, #1
 8005c08:	4a1a      	ldr	r2, [pc, #104]	@ (8005c74 <trimWhitespace+0xa4>)
 8005c0a:	4413      	add	r3, r2
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1f2      	bne.n	8005bfc <trimWhitespace+0x2c>

    if (*start == 0) {
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d104      	bne.n	8005c28 <trimWhitespace+0x58>
        *mutableStr = '\0';
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	701a      	strb	r2, [r3, #0]
        return mutableStr;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	e021      	b.n	8005c6c <trimWhitespace+0x9c>
    }

    end = start + strlen(start) - 1;
 8005c28:	6978      	ldr	r0, [r7, #20]
 8005c2a:	f7ff fdb1 	bl	8005790 <strlen>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	3b01      	subs	r3, #1
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4413      	add	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]
    while (end > start && isspace((unsigned char)*end)) end--;
 8005c38:	e002      	b.n	8005c40 <trimWhitespace+0x70>
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	613b      	str	r3, [r7, #16]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d909      	bls.n	8005c5c <trimWhitespace+0x8c>
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	4a09      	ldr	r2, [pc, #36]	@ (8005c74 <trimWhitespace+0xa4>)
 8005c50:	4413      	add	r3, r2
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1ee      	bne.n	8005c3a <trimWhitespace+0x6a>

    end[1] = '\0';
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	2200      	movs	r2, #0
 8005c62:	701a      	strb	r2, [r3, #0]
    return strdup(start);
 8005c64:	6978      	ldr	r0, [r7, #20]
 8005c66:	f003 fecd 	bl	8009a04 <strdup>
 8005c6a:	4603      	mov	r3, r0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	0800ad28 	.word	0x0800ad28

08005c78 <RDFGraph_new>:

// RDFGraph "constructor" to initialize the graph
RDFGraph *RDFGraph_new() {
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
    RDFGraph *graph = (RDFGraph *)malloc(sizeof(RDFGraph));
 8005c7e:	f240 40b4 	movw	r0, #1204	@ 0x4b4
 8005c82:	f002 ffe1 	bl	8008c48 <malloc>
 8005c86:	4603      	mov	r3, r0
 8005c88:	607b      	str	r3, [r7, #4]
    graph->size = 0;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f8c3 24b0 	str.w	r2, [r3, #1200]	@ 0x4b0
    return graph;
 8005c92:	687b      	ldr	r3, [r7, #4]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <RDFGraph_addTriple>:

// Add a triple to the RDF graph
void RDFGraph_addTriple(RDFGraph *graph, const char *subject, const char *predicate, const char *object) {
 8005c9c:	b590      	push	{r4, r7, lr}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
    if (graph->size < MAX_TRIPLES) {
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	@ 0x4b0
 8005cb0:	2b63      	cmp	r3, #99	@ 0x63
 8005cb2:	dc41      	bgt.n	8005d38 <RDFGraph_addTriple+0x9c>
        graph->triples[graph->size].subject = strdup(trimWhitespace(subject));
 8005cb4:	68b8      	ldr	r0, [r7, #8]
 8005cb6:	f7ff ff8b 	bl	8005bd0 <trimWhitespace>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f8d3 44b0 	ldr.w	r4, [r3, #1200]	@ 0x4b0
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	f003 fe9e 	bl	8009a04 <strdup>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	4619      	mov	r1, r3
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4623      	mov	r3, r4
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	4423      	add	r3, r4
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	6019      	str	r1, [r3, #0]
        graph->triples[graph->size].predicate = strdup(trimWhitespace(predicate));
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7ff ff78 	bl	8005bd0 <trimWhitespace>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f8d3 44b0 	ldr.w	r4, [r3, #1200]	@ 0x4b0
 8005ce8:	4610      	mov	r0, r2
 8005cea:	f003 fe8b 	bl	8009a04 <strdup>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4623      	mov	r3, r4
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	4423      	add	r3, r4
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	3304      	adds	r3, #4
 8005d00:	6019      	str	r1, [r3, #0]
        graph->triples[graph->size].object = strdup(trimWhitespace(object));
 8005d02:	6838      	ldr	r0, [r7, #0]
 8005d04:	f7ff ff64 	bl	8005bd0 <trimWhitespace>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8d3 44b0 	ldr.w	r4, [r3, #1200]	@ 0x4b0
 8005d10:	4610      	mov	r0, r2
 8005d12:	f003 fe77 	bl	8009a04 <strdup>
 8005d16:	4603      	mov	r3, r0
 8005d18:	4619      	mov	r1, r3
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4623      	mov	r3, r4
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	4423      	add	r3, r4
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	3308      	adds	r3, #8
 8005d28:	6019      	str	r1, [r3, #0]
        graph->size++;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	@ 0x4b0
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8c3 24b0 	str.w	r2, [r3, #1200]	@ 0x4b0
    }
}
 8005d38:	bf00      	nop
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd90      	pop	{r4, r7, pc}

08005d40 <compareTriples>:

// Sorting triples
int compareTriples(const void *a, const void *b) {
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
    RDFTriple *tripleA = (RDFTriple *)a;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	617b      	str	r3, [r7, #20]
    RDFTriple *tripleB = (RDFTriple *)b;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	613b      	str	r3, [r7, #16]
    int subjectCmp = strcmp(tripleA->subject, tripleB->subject);
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	f7ff fd0d 	bl	800577c <strcmp>
 8005d62:	60f8      	str	r0, [r7, #12]
    if (subjectCmp != 0) return subjectCmp;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <compareTriples+0x2e>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	e016      	b.n	8005d9c <compareTriples+0x5c>
    int predicateCmp = strcmp(tripleA->predicate, tripleB->predicate);
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	4619      	mov	r1, r3
 8005d78:	4610      	mov	r0, r2
 8005d7a:	f7ff fcff 	bl	800577c <strcmp>
 8005d7e:	60b8      	str	r0, [r7, #8]
    if (predicateCmp != 0) return predicateCmp;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <compareTriples+0x4a>
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	e008      	b.n	8005d9c <compareTriples+0x5c>
    return strcmp(tripleA->object, tripleB->object);
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	4619      	mov	r1, r3
 8005d94:	4610      	mov	r0, r2
 8005d96:	f7ff fcf1 	bl	800577c <strcmp>
 8005d9a:	4603      	mov	r3, r0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <RDFGraph_canonicalize>:

// Canonicalize the RDF graph
void RDFGraph_canonicalize(RDFGraph *graph) {
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
    qsort(graph->triples, graph->size, sizeof(RDFTriple), compareTriples);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	@ 0x4b0
 8005db4:	4619      	mov	r1, r3
 8005db6:	4b04      	ldr	r3, [pc, #16]	@ (8005dc8 <RDFGraph_canonicalize+0x24>)
 8005db8:	220c      	movs	r2, #12
 8005dba:	f003 f83c 	bl	8008e36 <qsort>
}
 8005dbe:	bf00      	nop
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	08005d41 	.word	0x08005d41

08005dcc <RDFGraph_serializeToJsonLD>:

// Serialize the RDF graph to JSON-LD format
void RDFGraph_serializeToJsonLD(RDFGraph *graph, char *output) {
 8005dcc:	b5b0      	push	{r4, r5, r7, lr}
 8005dce:	b09c      	sub	sp, #112	@ 0x70
 8005dd0:	af02      	add	r7, sp, #8
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
    char context[] = "[\"http://schema.org/\", \"https://w3id.org/security/v2\"]";
 8005dd6:	4b87      	ldr	r3, [pc, #540]	@ (8005ff4 <RDFGraph_serializeToJsonLD+0x228>)
 8005dd8:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8005ddc:	461d      	mov	r5, r3
 8005dde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005de0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005dee:	6020      	str	r0, [r4, #0]
 8005df0:	3404      	adds	r4, #4
 8005df2:	8021      	strh	r1, [r4, #0]
 8005df4:	3402      	adds	r4, #2
 8005df6:	0c0b      	lsrs	r3, r1, #16
 8005df8:	7023      	strb	r3, [r4, #0]
    char description[] = "\"description\": \"Hello World!\"";
 8005dfa:	4b7f      	ldr	r3, [pc, #508]	@ (8005ff8 <RDFGraph_serializeToJsonLD+0x22c>)
 8005dfc:	f107 040c 	add.w	r4, r7, #12
 8005e00:	461d      	mov	r5, r3
 8005e02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005e0a:	c407      	stmia	r4!, {r0, r1, r2}
 8005e0c:	8023      	strh	r3, [r4, #0]

    snprintf(output, MAX_MESSAGE_SIZE, "{\n  \"@context\": %s,\n  %s,\n  \"proof\": {\n", context, description);
 8005e0e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8005e12:	f107 030c 	add.w	r3, r7, #12
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	4a78      	ldr	r2, [pc, #480]	@ (8005ffc <RDFGraph_serializeToJsonLD+0x230>)
 8005e1c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e20:	6838      	ldr	r0, [r7, #0]
 8005e22:	f003 fc23 	bl	800966c <sniprintf>

    for (int i = 0; i < graph->size; i++) {
 8005e26:	2300      	movs	r3, #0
 8005e28:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e2a:	e0c6      	b.n	8005fba <RDFGraph_serializeToJsonLD+0x1ee>
        if (strcmp(graph->triples[i].predicate, "ProofCreated") == 0) {
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005e30:	4613      	mov	r3, r2
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	4413      	add	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	440b      	add	r3, r1
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4970      	ldr	r1, [pc, #448]	@ (8006000 <RDFGraph_serializeToJsonLD+0x234>)
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7ff fc9b 	bl	800577c <strcmp>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d111      	bne.n	8005e70 <RDFGraph_serializeToJsonLD+0xa4>
            snprintf(output + strlen(output), MAX_MESSAGE_SIZE - strlen(output),
 8005e4c:	6838      	ldr	r0, [r7, #0]
 8005e4e:	f7ff fc9f 	bl	8005790 <strlen>
 8005e52:	4602      	mov	r2, r0
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	189c      	adds	r4, r3, r2
 8005e58:	6838      	ldr	r0, [r7, #0]
 8005e5a:	f7ff fc99 	bl	8005790 <strlen>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	f5c3 6100 	rsb	r1, r3, #2048	@ 0x800
 8005e64:	4b67      	ldr	r3, [pc, #412]	@ (8006004 <RDFGraph_serializeToJsonLD+0x238>)
 8005e66:	4a68      	ldr	r2, [pc, #416]	@ (8006008 <RDFGraph_serializeToJsonLD+0x23c>)
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f003 fbff 	bl	800966c <sniprintf>
 8005e6e:	e0a1      	b.n	8005fb4 <RDFGraph_serializeToJsonLD+0x1e8>
                     "    \"created\": \"%s\",\n", "2025-10-23T05:50:16Z");
        } else if (strcmp(graph->triples[i].predicate, "ProofType") == 0) {
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005e74:	4613      	mov	r3, r2
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	4413      	add	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	440b      	add	r3, r1
 8005e7e:	3304      	adds	r3, #4
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4962      	ldr	r1, [pc, #392]	@ (800600c <RDFGraph_serializeToJsonLD+0x240>)
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff fc79 	bl	800577c <strcmp>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d11a      	bne.n	8005ec6 <RDFGraph_serializeToJsonLD+0xfa>
            snprintf(output + strlen(output), MAX_MESSAGE_SIZE - strlen(output),
 8005e90:	6838      	ldr	r0, [r7, #0]
 8005e92:	f7ff fc7d 	bl	8005790 <strlen>
 8005e96:	4602      	mov	r2, r0
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	189c      	adds	r4, r3, r2
 8005e9c:	6838      	ldr	r0, [r7, #0]
 8005e9e:	f7ff fc77 	bl	8005790 <strlen>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	f5c3 6000 	rsb	r0, r3, #2048	@ 0x800
 8005ea8:	6879      	ldr	r1, [r7, #4]
 8005eaa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005eac:	4613      	mov	r3, r2
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	4413      	add	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	440b      	add	r3, r1
 8005eb6:	3308      	adds	r3, #8
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a55      	ldr	r2, [pc, #340]	@ (8006010 <RDFGraph_serializeToJsonLD+0x244>)
 8005ebc:	4601      	mov	r1, r0
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f003 fbd4 	bl	800966c <sniprintf>
 8005ec4:	e076      	b.n	8005fb4 <RDFGraph_serializeToJsonLD+0x1e8>
                     "    \"type\": \"%s\",\n", graph->triples[i].object);
        } else if (strcmp(graph->triples[i].predicate, "VerificationMethod") == 0) {
 8005ec6:	6879      	ldr	r1, [r7, #4]
 8005ec8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005eca:	4613      	mov	r3, r2
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	4413      	add	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	494e      	ldr	r1, [pc, #312]	@ (8006014 <RDFGraph_serializeToJsonLD+0x248>)
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7ff fc4e 	bl	800577c <strcmp>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d11a      	bne.n	8005f1c <RDFGraph_serializeToJsonLD+0x150>
            snprintf(output + strlen(output), MAX_MESSAGE_SIZE - strlen(output),
 8005ee6:	6838      	ldr	r0, [r7, #0]
 8005ee8:	f7ff fc52 	bl	8005790 <strlen>
 8005eec:	4602      	mov	r2, r0
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	189c      	adds	r4, r3, r2
 8005ef2:	6838      	ldr	r0, [r7, #0]
 8005ef4:	f7ff fc4c 	bl	8005790 <strlen>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	f5c3 6000 	rsb	r0, r3, #2048	@ 0x800
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005f02:	4613      	mov	r3, r2
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	440b      	add	r3, r1
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a41      	ldr	r2, [pc, #260]	@ (8006018 <RDFGraph_serializeToJsonLD+0x24c>)
 8005f12:	4601      	mov	r1, r0
 8005f14:	4620      	mov	r0, r4
 8005f16:	f003 fba9 	bl	800966c <sniprintf>
 8005f1a:	e04b      	b.n	8005fb4 <RDFGraph_serializeToJsonLD+0x1e8>
                     "    \"verificationMethod\": \"%s\",\n", graph->triples[i].object);
        } else if (strcmp(graph->triples[i].predicate, "ProofPurpose") == 0) {
 8005f1c:	6879      	ldr	r1, [r7, #4]
 8005f1e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005f20:	4613      	mov	r3, r2
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	4413      	add	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	440b      	add	r3, r1
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	493b      	ldr	r1, [pc, #236]	@ (800601c <RDFGraph_serializeToJsonLD+0x250>)
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff fc23 	bl	800577c <strcmp>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d11a      	bne.n	8005f72 <RDFGraph_serializeToJsonLD+0x1a6>
            snprintf(output + strlen(output), MAX_MESSAGE_SIZE - strlen(output),
 8005f3c:	6838      	ldr	r0, [r7, #0]
 8005f3e:	f7ff fc27 	bl	8005790 <strlen>
 8005f42:	4602      	mov	r2, r0
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	189c      	adds	r4, r3, r2
 8005f48:	6838      	ldr	r0, [r7, #0]
 8005f4a:	f7ff fc21 	bl	8005790 <strlen>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	f5c3 6000 	rsb	r0, r3, #2048	@ 0x800
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005f58:	4613      	mov	r3, r2
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	440b      	add	r3, r1
 8005f62:	3308      	adds	r3, #8
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a2e      	ldr	r2, [pc, #184]	@ (8006020 <RDFGraph_serializeToJsonLD+0x254>)
 8005f68:	4601      	mov	r1, r0
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f003 fb7e 	bl	800966c <sniprintf>
 8005f70:	e020      	b.n	8005fb4 <RDFGraph_serializeToJsonLD+0x1e8>
                     "    \"proofPurpose\": \"%s\",\n", graph->triples[i].object);
        } else if (strcmp(graph->triples[i].predicate, "jws") == 0) {
 8005f72:	6879      	ldr	r1, [r7, #4]
 8005f74:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005f76:	4613      	mov	r3, r2
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	4413      	add	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	440b      	add	r3, r1
 8005f80:	3304      	adds	r3, #4
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4927      	ldr	r1, [pc, #156]	@ (8006024 <RDFGraph_serializeToJsonLD+0x258>)
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff fbf8 	bl	800577c <strcmp>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d110      	bne.n	8005fb4 <RDFGraph_serializeToJsonLD+0x1e8>
            snprintf(output + strlen(output), MAX_MESSAGE_SIZE - strlen(output),
 8005f92:	6838      	ldr	r0, [r7, #0]
 8005f94:	f7ff fbfc 	bl	8005790 <strlen>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	189c      	adds	r4, r3, r2
 8005f9e:	6838      	ldr	r0, [r7, #0]
 8005fa0:	f7ff fbf6 	bl	8005790 <strlen>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	f5c3 6100 	rsb	r1, r3, #2048	@ 0x800
 8005faa:	4b1f      	ldr	r3, [pc, #124]	@ (8006028 <RDFGraph_serializeToJsonLD+0x25c>)
 8005fac:	4a1f      	ldr	r2, [pc, #124]	@ (800602c <RDFGraph_serializeToJsonLD+0x260>)
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f003 fb5c 	bl	800966c <sniprintf>
    for (int i = 0; i < graph->size; i++) {
 8005fb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	667b      	str	r3, [r7, #100]	@ 0x64
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	@ 0x4b0
 8005fc0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	f6ff af32 	blt.w	8005e2c <RDFGraph_serializeToJsonLD+0x60>
                     "    \"jws\": \"%s\"\n", hexSignature);
        }
    }
    snprintf(output + strlen(output), MAX_MESSAGE_SIZE - strlen(output), "  }\n}\n");
 8005fc8:	6838      	ldr	r0, [r7, #0]
 8005fca:	f7ff fbe1 	bl	8005790 <strlen>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	189c      	adds	r4, r3, r2
 8005fd4:	6838      	ldr	r0, [r7, #0]
 8005fd6:	f7ff fbdb 	bl	8005790 <strlen>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8005fe0:	4a13      	ldr	r2, [pc, #76]	@ (8006030 <RDFGraph_serializeToJsonLD+0x264>)
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	f003 fb41 	bl	800966c <sniprintf>
}
 8005fea:	bf00      	nop
 8005fec:	3768      	adds	r7, #104	@ 0x68
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	0800a528 	.word	0x0800a528
 8005ff8:	0800a560 	.word	0x0800a560
 8005ffc:	0800a41c 	.word	0x0800a41c
 8006000:	0800a444 	.word	0x0800a444
 8006004:	0800a454 	.word	0x0800a454
 8006008:	0800a46c 	.word	0x0800a46c
 800600c:	0800a484 	.word	0x0800a484
 8006010:	0800a490 	.word	0x0800a490
 8006014:	0800a4a4 	.word	0x0800a4a4
 8006018:	0800a4b8 	.word	0x0800a4b8
 800601c:	0800a4dc 	.word	0x0800a4dc
 8006020:	0800a4ec 	.word	0x0800a4ec
 8006024:	0800a508 	.word	0x0800a508
 8006028:	20000088 	.word	0x20000088
 800602c:	0800a50c 	.word	0x0800a50c
 8006030:	0800a520 	.word	0x0800a520

08006034 <RDFProcessor_new>:

RDFProcessor *RDFProcessor_new(RDFGraph *graph) {
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
    RDFProcessor *processor = (RDFProcessor *)malloc(sizeof(RDFProcessor));
 800603c:	2004      	movs	r0, #4
 800603e:	f002 fe03 	bl	8008c48 <malloc>
 8006042:	4603      	mov	r3, r0
 8006044:	60fb      	str	r3, [r7, #12]
    processor->graph = graph;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	601a      	str	r2, [r3, #0]
    return processor;
 800604c:	68fb      	ldr	r3, [r7, #12]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <RDFProcessor_process>:

// Process the RDF graph using RDFProcessor
void RDFProcessor_process(RDFProcessor *processor, char *output) {
 8006056:	b580      	push	{r7, lr}
 8006058:	b082      	sub	sp, #8
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	6039      	str	r1, [r7, #0]
    RDFGraph_canonicalize(processor->graph);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff fe9d 	bl	8005da4 <RDFGraph_canonicalize>
    RDFGraph_serializeToJsonLD(processor->graph, output);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6839      	ldr	r1, [r7, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f7ff feab 	bl	8005dcc <RDFGraph_serializeToJsonLD>
}
 8006076:	bf00      	nop
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <RDFGraph_free>:

void RDFGraph_free(RDFGraph *graph) {
 800607e:	b580      	push	{r7, lr}
 8006080:	b084      	sub	sp, #16
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < graph->size; i++) {
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	e025      	b.n	80060d8 <RDFGraph_free+0x5a>
        free(graph->triples[i].subject);
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4613      	mov	r3, r2
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	4413      	add	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4618      	mov	r0, r3
 800609e:	f002 fddb 	bl	8008c58 <free>
        free(graph->triples[i].predicate);
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4613      	mov	r3, r2
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	4413      	add	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	440b      	add	r3, r1
 80060b0:	3304      	adds	r3, #4
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f002 fdcf 	bl	8008c58 <free>
        free(graph->triples[i].object);
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4613      	mov	r3, r2
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	4413      	add	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	440b      	add	r3, r1
 80060c8:	3308      	adds	r3, #8
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f002 fdc3 	bl	8008c58 <free>
    for (int i = 0; i < graph->size; i++) {
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	3301      	adds	r3, #1
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	@ 0x4b0
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	dbd3      	blt.n	800608c <RDFGraph_free+0xe>
    }
    free(graph);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f002 fdb7 	bl	8008c58 <free>
}
 80060ea:	bf00      	nop
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <RDFProcessor_free>:

void RDFProcessor_free(RDFProcessor *processor) {
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b082      	sub	sp, #8
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
    free(processor);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f002 fdac 	bl	8008c58 <free>
}
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <saveRDF>:

// Save the RDF graph to JSON file
void saveRDF(const char *output) {
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
    FILE *file = fopen(OUTPUT_FILE, "w");
 8006110:	490d      	ldr	r1, [pc, #52]	@ (8006148 <saveRDF+0x40>)
 8006112:	480e      	ldr	r0, [pc, #56]	@ (800614c <saveRDF+0x44>)
 8006114:	f003 fa2a 	bl	800956c <fopen>
 8006118:	60f8      	str	r0, [r7, #12]
    if (file != NULL) {
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00b      	beq.n	8006138 <saveRDF+0x30>
        fprintf(file, "%s", output);
 8006120:	68f9      	ldr	r1, [r7, #12]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f003 fa7a 	bl	800961c <fputs>
        fclose(file);
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f003 f821 	bl	8009170 <fclose>
        UART_Print("\nOutput saved to %s\n", OUTPUT_FILE);
 800612e:	4907      	ldr	r1, [pc, #28]	@ (800614c <saveRDF+0x44>)
 8006130:	4807      	ldr	r0, [pc, #28]	@ (8006150 <saveRDF+0x48>)
 8006132:	f000 fabb 	bl	80066ac <UART_Print>
    } else {
    	UART_Print("\nFailed to save output to file.\n");
    }
}
 8006136:	e002      	b.n	800613e <saveRDF+0x36>
    	UART_Print("\nFailed to save output to file.\n");
 8006138:	4806      	ldr	r0, [pc, #24]	@ (8006154 <saveRDF+0x4c>)
 800613a:	f000 fab7 	bl	80066ac <UART_Print>
}
 800613e:	bf00      	nop
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	0800a580 	.word	0x0800a580
 800614c:	0800a584 	.word	0x0800a584
 8006150:	0800a594 	.word	0x0800a594
 8006154:	0800a5ac 	.word	0x0800a5ac

08006158 <processRDF>:

// Function to process the RDF graph and store it in the Message variable
void processRDF(char *output) {
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
    RDFGraph *graph = RDFGraph_new();
 8006160:	f7ff fd8a 	bl	8005c78 <RDFGraph_new>
 8006164:	60f8      	str	r0, [r7, #12]

    RDFGraph_addTriple(graph, " credential1  ", " ProofType ", "EcdsaSignature2018");
 8006166:	4b18      	ldr	r3, [pc, #96]	@ (80061c8 <processRDF+0x70>)
 8006168:	4a18      	ldr	r2, [pc, #96]	@ (80061cc <processRDF+0x74>)
 800616a:	4919      	ldr	r1, [pc, #100]	@ (80061d0 <processRDF+0x78>)
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f7ff fd95 	bl	8005c9c <RDFGraph_addTriple>
    RDFGraph_addTriple(graph, " credential1 ", " ProofCreated ", "2025-10-23T05:50:16Z");
 8006172:	4b18      	ldr	r3, [pc, #96]	@ (80061d4 <processRDF+0x7c>)
 8006174:	4a18      	ldr	r2, [pc, #96]	@ (80061d8 <processRDF+0x80>)
 8006176:	4919      	ldr	r1, [pc, #100]	@ (80061dc <processRDF+0x84>)
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f7ff fd8f 	bl	8005c9c <RDFGraph_addTriple>
    RDFGraph_addTriple(graph, " credential1 ", " VerificationMethod ", "did:example:123456789abcdefghi#key1");
 800617e:	4b18      	ldr	r3, [pc, #96]	@ (80061e0 <processRDF+0x88>)
 8006180:	4a18      	ldr	r2, [pc, #96]	@ (80061e4 <processRDF+0x8c>)
 8006182:	4916      	ldr	r1, [pc, #88]	@ (80061dc <processRDF+0x84>)
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f7ff fd89 	bl	8005c9c <RDFGraph_addTriple>
    RDFGraph_addTriple(graph, " credential1 ", " ProofPurpose ", "assertionMethod");
 800618a:	4b17      	ldr	r3, [pc, #92]	@ (80061e8 <processRDF+0x90>)
 800618c:	4a17      	ldr	r2, [pc, #92]	@ (80061ec <processRDF+0x94>)
 800618e:	4913      	ldr	r1, [pc, #76]	@ (80061dc <processRDF+0x84>)
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f7ff fd83 	bl	8005c9c <RDFGraph_addTriple>
    RDFGraph_addTriple(graph, " credential1 ", " jws ", "");
 8006196:	4b16      	ldr	r3, [pc, #88]	@ (80061f0 <processRDF+0x98>)
 8006198:	4a16      	ldr	r2, [pc, #88]	@ (80061f4 <processRDF+0x9c>)
 800619a:	4910      	ldr	r1, [pc, #64]	@ (80061dc <processRDF+0x84>)
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f7ff fd7d 	bl	8005c9c <RDFGraph_addTriple>

    RDFProcessor *processor = RDFProcessor_new(graph);
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f7ff ff46 	bl	8006034 <RDFProcessor_new>
 80061a8:	60b8      	str	r0, [r7, #8]
    RDFProcessor_process(processor, output);
 80061aa:	6879      	ldr	r1, [r7, #4]
 80061ac:	68b8      	ldr	r0, [r7, #8]
 80061ae:	f7ff ff52 	bl	8006056 <RDFProcessor_process>

    RDFProcessor_free(processor);
 80061b2:	68b8      	ldr	r0, [r7, #8]
 80061b4:	f7ff ff9d 	bl	80060f2 <RDFProcessor_free>
    RDFGraph_free(graph);
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f7ff ff60 	bl	800607e <RDFGraph_free>
}
 80061be:	bf00      	nop
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	0800a5d0 	.word	0x0800a5d0
 80061cc:	0800a5e4 	.word	0x0800a5e4
 80061d0:	0800a5f0 	.word	0x0800a5f0
 80061d4:	0800a454 	.word	0x0800a454
 80061d8:	0800a600 	.word	0x0800a600
 80061dc:	0800a610 	.word	0x0800a610
 80061e0:	0800a620 	.word	0x0800a620
 80061e4:	0800a644 	.word	0x0800a644
 80061e8:	0800a65c 	.word	0x0800a65c
 80061ec:	0800a66c 	.word	0x0800a66c
 80061f0:	0800a67c 	.word	0x0800a67c
 80061f4:	0800a680 	.word	0x0800a680

080061f8 <main>:
uint8_t Computed_Signature[CMOX_ECC_SECP256R1_SIG_LEN];  // Computed signature buffer

/* Functions Definition ------------------------------------------------------*/

int main(void)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	f6ad 0d98 	subw	sp, sp, #2200	@ 0x898
 80061fe:	af06      	add	r7, sp, #24
    cmox_hash_retval_t hretval;
    cmox_ecc_retval_t retval;
    size_t computed_size;
    uint32_t fault_check = CMOX_ECC_AUTH_FAIL;
 8006200:	4b94      	ldr	r3, [pc, #592]	@ (8006454 <main+0x25c>)
 8006202:	f8c7 386c 	str.w	r3, [r7, #2156]	@ 0x86c

    HAL_Init();               // STM32 HAL initialization
 8006206:	f000 fd0f 	bl	8006c28 <HAL_Init>
    SystemClock_Config();      // System clock configuration
 800620a:	f000 fa6b 	bl	80066e4 <SystemClock_Config>
    MX_GPIO_Init();            // GPIO initialization
 800620e:	f000 fb07 	bl	8006820 <MX_GPIO_Init>
    MX_USART2_UART_Init();     // UART initialization
 8006212:	f000 fadb 	bl	80067cc <MX_USART2_UART_Init>
    MX_CRC_Init();             // CRC initialization
 8006216:	f000 fac5 	bl	80067a4 <MX_CRC_Init>

    const cmox_ecc_impl_t curveParams = CMOX_ECC_SECP256R1_HIGHMEM;
 800621a:	4b8f      	ldr	r3, [pc, #572]	@ (8006458 <main+0x260>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f8c7 387c 	str.w	r3, [r7, #2172]	@ 0x87c

    UART_Print("\r\n");
 8006222:	488e      	ldr	r0, [pc, #568]	@ (800645c <main+0x264>)
 8006224:	f000 fa42 	bl	80066ac <UART_Print>
    UART_Print("Starting ECDSA key generation...\r\n");
 8006228:	488d      	ldr	r0, [pc, #564]	@ (8006460 <main+0x268>)
 800622a:	f000 fa3f 	bl	80066ac <UART_Print>

    char Message[MAX_MESSAGE_SIZE] = {0};
 800622e:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8006232:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	3304      	adds	r3, #4
 800623c:	f240 72fc 	movw	r2, #2044	@ 0x7fc
 8006240:	2100      	movs	r1, #0
 8006242:	4618      	mov	r0, r3
 8006244:	f003 fbd5 	bl	80099f2 <memset>
    // Call the RDF processing function and pass the Message variable
    processRDF(Message);
 8006248:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff ff83 	bl	8006158 <processRDF>

    uint8_t privKey[32];
    size_t privKeyLen = sizeof(privKey);
 8006252:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8006256:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 800625a:	2220      	movs	r2, #32
 800625c:	601a      	str	r2, [r3, #0]
    uint8_t pubKey[64];
    size_t pubKeyLen = sizeof(pubKey);
 800625e:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8006262:	f6a3 037c 	subw	r3, r3, #2172	@ 0x87c
 8006266:	2240      	movs	r2, #64	@ 0x40
 8006268:	601a      	str	r2, [r3, #0]

    cmox_ecc_construct(&Ecc_Ctx, CMOX_MATH_FUNCS_FAST, Working_Buffer, Working_Buffer_Size);
 800626a:	4b7e      	ldr	r3, [pc, #504]	@ (8006464 <main+0x26c>)
 800626c:	6819      	ldr	r1, [r3, #0]
 800626e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8006272:	4a7d      	ldr	r2, [pc, #500]	@ (8006468 <main+0x270>)
 8006274:	487d      	ldr	r0, [pc, #500]	@ (800646c <main+0x274>)
 8006276:	f7f9 ffb3 	bl	80001e0 <cmox_ecc_construct>

    retval = cmox_ecdsa_keyGen(&Ecc_Ctx, curveParams, Known_Random, sizeof(Known_Random), privKey, &privKeyLen, pubKey, &pubKeyLen);
 800627a:	1d3b      	adds	r3, r7, #4
 800627c:	9303      	str	r3, [sp, #12]
 800627e:	f107 0308 	add.w	r3, r7, #8
 8006282:	9302      	str	r3, [sp, #8]
 8006284:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8006288:	9301      	str	r3, [sp, #4]
 800628a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	2320      	movs	r3, #32
 8006292:	4a77      	ldr	r2, [pc, #476]	@ (8006470 <main+0x278>)
 8006294:	f8d7 187c 	ldr.w	r1, [r7, #2172]	@ 0x87c
 8006298:	4874      	ldr	r0, [pc, #464]	@ (800646c <main+0x274>)
 800629a:	f7fb fe93 	bl	8001fc4 <cmox_ecdsa_keyGen>
 800629e:	f8c7 0878 	str.w	r0, [r7, #2168]	@ 0x878
    if (retval != CMOX_ECC_SUCCESS) {
 80062a2:	f8d7 3878 	ldr.w	r3, [r7, #2168]	@ 0x878
 80062a6:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80062aa:	d005      	beq.n	80062b8 <main+0xc0>
        UART_Print("Key generation failed");
 80062ac:	4871      	ldr	r0, [pc, #452]	@ (8006474 <main+0x27c>)
 80062ae:	f000 f9fd 	bl	80066ac <UART_Print>
        return -1;
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295
 80062b6:	e0c8      	b.n	800644a <main+0x252>
    }

    UART_Print("Private key: ");
 80062b8:	486f      	ldr	r0, [pc, #444]	@ (8006478 <main+0x280>)
 80062ba:	f000 f9f7 	bl	80066ac <UART_Print>
    Print_Computed_Keys(privKey, privKeyLen);
 80062be:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 80062c2:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80062cc:	4611      	mov	r1, r2
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 f9b0 	bl	8006634 <Print_Computed_Keys>
    UART_Print("\r\n");
 80062d4:	4861      	ldr	r0, [pc, #388]	@ (800645c <main+0x264>)
 80062d6:	f000 f9e9 	bl	80066ac <UART_Print>

    UART_Print("Public key: ");
 80062da:	4868      	ldr	r0, [pc, #416]	@ (800647c <main+0x284>)
 80062dc:	f000 f9e6 	bl	80066ac <UART_Print>
    Print_Computed_Keys(pubKey, pubKeyLen);
 80062e0:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 80062e4:	f6a3 037c 	subw	r3, r3, #2172	@ 0x87c
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	f107 0308 	add.w	r3, r7, #8
 80062ee:	4611      	mov	r1, r2
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 f99f 	bl	8006634 <Print_Computed_Keys>
    UART_Print("\r\n");
 80062f6:	4859      	ldr	r0, [pc, #356]	@ (800645c <main+0x264>)
 80062f8:	f000 f9d8 	bl	80066ac <UART_Print>

    // Compute the SHA-224 digest
    hretval = cmox_hash_compute(CMOX_SHA224_ALGO,
 80062fc:	4b60      	ldr	r3, [pc, #384]	@ (8006480 <main+0x288>)
 80062fe:	6818      	ldr	r0, [r3, #0]
 8006300:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8006304:	f507 6307 	add.w	r3, r7, #2160	@ 0x870
 8006308:	9301      	str	r3, [sp, #4]
 800630a:	231c      	movs	r3, #28
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	4b5d      	ldr	r3, [pc, #372]	@ (8006484 <main+0x28c>)
 8006310:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006314:	f7fc f9ec 	bl	80026f0 <cmox_hash_compute>
 8006318:	f8c7 0874 	str.w	r0, [r7, #2164]	@ 0x874
                                Message, sizeof(Message),
                                Computed_Hash, CMOX_SHA224_SIZE,
                                &computed_size);

    // Check if hash computation was successful
    if (hretval != CMOX_HASH_SUCCESS || computed_size != CMOX_SHA224_SIZE)
 800631c:	f8d7 3874 	ldr.w	r3, [r7, #2164]	@ 0x874
 8006320:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006324:	d103      	bne.n	800632e <main+0x136>
 8006326:	f8d7 3870 	ldr.w	r3, [r7, #2160]	@ 0x870
 800632a:	2b1c      	cmp	r3, #28
 800632c:	d004      	beq.n	8006338 <main+0x140>
    {
        UART_Print("Hash computation failed.\r\n");
 800632e:	4856      	ldr	r0, [pc, #344]	@ (8006488 <main+0x290>)
 8006330:	f000 f9bc 	bl	80066ac <UART_Print>
        Error_Handler();
 8006334:	f000 faa4 	bl	8006880 <Error_Handler>
    }


    // Construct ECC context
    cmox_ecc_construct(&Ecc_Ctx, CMOX_ECC256_MATH_FUNCS, Working_Buffer, sizeof(Working_Buffer));
 8006338:	4b54      	ldr	r3, [pc, #336]	@ (800648c <main+0x294>)
 800633a:	6819      	ldr	r1, [r3, #0]
 800633c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8006340:	4a49      	ldr	r2, [pc, #292]	@ (8006468 <main+0x270>)
 8006342:	484a      	ldr	r0, [pc, #296]	@ (800646c <main+0x274>)
 8006344:	f7f9 ff4c 	bl	80001e0 <cmox_ecc_construct>

    // Compute the ECDSA signature
    retval = cmox_ecdsa_sign(&Ecc_Ctx,
 8006348:	4b43      	ldr	r3, [pc, #268]	@ (8006458 <main+0x260>)
 800634a:	6819      	ldr	r1, [r3, #0]
 800634c:	f507 6307 	add.w	r3, r7, #2160	@ 0x870
 8006350:	9305      	str	r3, [sp, #20]
 8006352:	4b4f      	ldr	r3, [pc, #316]	@ (8006490 <main+0x298>)
 8006354:	9304      	str	r3, [sp, #16]
 8006356:	231c      	movs	r3, #28
 8006358:	9303      	str	r3, [sp, #12]
 800635a:	4b4a      	ldr	r3, [pc, #296]	@ (8006484 <main+0x28c>)
 800635c:	9302      	str	r3, [sp, #8]
 800635e:	2320      	movs	r3, #32
 8006360:	9301      	str	r3, [sp, #4]
 8006362:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	2320      	movs	r3, #32
 800636a:	4a41      	ldr	r2, [pc, #260]	@ (8006470 <main+0x278>)
 800636c:	483f      	ldr	r0, [pc, #252]	@ (800646c <main+0x274>)
 800636e:	f7fb fefb 	bl	8002168 <cmox_ecdsa_sign>
 8006372:	f8c7 0878 	str.w	r0, [r7, #2168]	@ 0x878
							 privKey, sizeof(privKey),
                             Computed_Hash, CMOX_SHA224_SIZE,
                             Computed_Signature, &computed_size);

    // Verify the signature computation
    if (retval != CMOX_ECC_SUCCESS || computed_size != sizeof(Known_Signature))
 8006376:	f8d7 3878 	ldr.w	r3, [r7, #2168]	@ 0x878
 800637a:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800637e:	d103      	bne.n	8006388 <main+0x190>
 8006380:	f8d7 3870 	ldr.w	r3, [r7, #2160]	@ 0x870
 8006384:	2b40      	cmp	r3, #64	@ 0x40
 8006386:	d00a      	beq.n	800639e <main+0x1a6>
    {
        UART_Print("Signature computation failed.\r\n");
 8006388:	4842      	ldr	r0, [pc, #264]	@ (8006494 <main+0x29c>)
 800638a:	f000 f98f 	bl	80066ac <UART_Print>
        Print_Computed_Signature(Computed_Signature, computed_size);
 800638e:	f8d7 3870 	ldr.w	r3, [r7, #2160]	@ 0x870
 8006392:	4619      	mov	r1, r3
 8006394:	483e      	ldr	r0, [pc, #248]	@ (8006490 <main+0x298>)
 8006396:	f000 f911 	bl	80065bc <Print_Computed_Signature>
        Error_Handler();
 800639a:	f000 fa71 	bl	8006880 <Error_Handler>
    }

    UART_Print("Signature computed successfully.\r\n");
 800639e:	483e      	ldr	r0, [pc, #248]	@ (8006498 <main+0x2a0>)
 80063a0:	f000 f984 	bl	80066ac <UART_Print>

    UART_Print("Computed Signature: ");
 80063a4:	483d      	ldr	r0, [pc, #244]	@ (800649c <main+0x2a4>)
 80063a6:	f000 f981 	bl	80066ac <UART_Print>
    UART_PrintSignature(Computed_Signature, computed_size);
 80063aa:	f8d7 3870 	ldr.w	r3, [r7, #2160]	@ 0x870
 80063ae:	4619      	mov	r1, r3
 80063b0:	4837      	ldr	r0, [pc, #220]	@ (8006490 <main+0x298>)
 80063b2:	f000 f8c1 	bl	8006538 <UART_PrintSignature>
    //Print_Computed_Signature(Computed_Signature, computed_size);
    UART_Print("\r\n");
 80063b6:	4829      	ldr	r0, [pc, #164]	@ (800645c <main+0x264>)
 80063b8:	f000 f978 	bl	80066ac <UART_Print>

    cmox_ecc_cleanup(&Ecc_Ctx);  // Clean up ECC context
 80063bc:	482b      	ldr	r0, [pc, #172]	@ (800646c <main+0x274>)
 80063be:	f7f9 ff25 	bl	800020c <cmox_ecc_cleanup>

    cmox_ecc_construct(&Ecc_Ctx, CMOX_ECC256_MATH_FUNCS, Working_Buffer, sizeof(Working_Buffer));
 80063c2:	4b32      	ldr	r3, [pc, #200]	@ (800648c <main+0x294>)
 80063c4:	6819      	ldr	r1, [r3, #0]
 80063c6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80063ca:	4a27      	ldr	r2, [pc, #156]	@ (8006468 <main+0x270>)
 80063cc:	4827      	ldr	r0, [pc, #156]	@ (800646c <main+0x274>)
 80063ce:	f7f9 ff07 	bl	80001e0 <cmox_ecc_construct>
    retval = cmox_ecdsa_verify(&Ecc_Ctx,                                  /* ECC context */
 80063d2:	4b21      	ldr	r3, [pc, #132]	@ (8006458 <main+0x260>)
 80063d4:	6819      	ldr	r1, [r3, #0]
 80063d6:	f107 0208 	add.w	r2, r7, #8
 80063da:	f607 036c 	addw	r3, r7, #2156	@ 0x86c
 80063de:	9304      	str	r3, [sp, #16]
 80063e0:	2340      	movs	r3, #64	@ 0x40
 80063e2:	9303      	str	r3, [sp, #12]
 80063e4:	4b2a      	ldr	r3, [pc, #168]	@ (8006490 <main+0x298>)
 80063e6:	9302      	str	r3, [sp, #8]
 80063e8:	231c      	movs	r3, #28
 80063ea:	9301      	str	r3, [sp, #4]
 80063ec:	4b25      	ldr	r3, [pc, #148]	@ (8006484 <main+0x28c>)
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	2340      	movs	r3, #64	@ 0x40
 80063f2:	481e      	ldr	r0, [pc, #120]	@ (800646c <main+0x274>)
 80063f4:	f7fc f808 	bl	8002408 <cmox_ecdsa_verify>
 80063f8:	f8c7 0878 	str.w	r0, [r7, #2168]	@ 0x878
                               Computed_Hash, CMOX_SHA224_SIZE,           /* Digest to verify */
							   Computed_Signature, sizeof(Computed_Signature),  /* Data buffer to receive signature */
                               &fault_check);                             /* Fault check variable:*/

    // Check if the verification succeeded
    if (retval != CMOX_ECC_AUTH_SUCCESS || fault_check != CMOX_ECC_AUTH_SUCCESS)
 80063fc:	f8d7 3878 	ldr.w	r3, [r7, #2168]	@ 0x878
 8006400:	4a27      	ldr	r2, [pc, #156]	@ (80064a0 <main+0x2a8>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d104      	bne.n	8006410 <main+0x218>
 8006406:	f8d7 386c 	ldr.w	r3, [r7, #2156]	@ 0x86c
 800640a:	4a25      	ldr	r2, [pc, #148]	@ (80064a0 <main+0x2a8>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d005      	beq.n	800641c <main+0x224>
    {
        UART_Print("Signature verification failed.\r\n");
 8006410:	4824      	ldr	r0, [pc, #144]	@ (80064a4 <main+0x2ac>)
 8006412:	f000 f94b 	bl	80066ac <UART_Print>
        Error_Handler();
 8006416:	f000 fa33 	bl	8006880 <Error_Handler>
 800641a:	e002      	b.n	8006422 <main+0x22a>
    }
    else
    {
        UART_Print("Signature verification successful!\r\n");
 800641c:	4822      	ldr	r0, [pc, #136]	@ (80064a8 <main+0x2b0>)
 800641e:	f000 f945 	bl	80066ac <UART_Print>
    }

    processRDF(Message);
 8006422:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8006426:	4618      	mov	r0, r3
 8006428:	f7ff fe96 	bl	8006158 <processRDF>

    // Print the Message variable
    UART_Print(Message);
 800642c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8006430:	4618      	mov	r0, r3
 8006432:	f000 f93b 	bl	80066ac <UART_Print>
    saveRDF(Message);
 8006436:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff fe64 	bl	8006108 <saveRDF>


    /* Cleanup context */
    cmox_ecc_cleanup(&Ecc_Ctx);
 8006440:	480a      	ldr	r0, [pc, #40]	@ (800646c <main+0x274>)
 8006442:	f7f9 fee3 	bl	800020c <cmox_ecc_cleanup>


    while (1) {
 8006446:	bf00      	nop
 8006448:	e7fd      	b.n	8006446 <main+0x24e>
        // Infinite loop
    }
}
 800644a:	4618      	mov	r0, r3
 800644c:	f507 6708 	add.w	r7, r7, #2176	@ 0x880
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	00066e93 	.word	0x00066e93
 8006458:	0800ab38 	.word	0x0800ab38
 800645c:	0800a688 	.word	0x0800a688
 8006460:	0800a68c 	.word	0x0800a68c
 8006464:	0800ab84 	.word	0x0800ab84
 8006468:	200004a0 	.word	0x200004a0
 800646c:	20000488 	.word	0x20000488
 8006470:	0800acf0 	.word	0x0800acf0
 8006474:	0800a6b0 	.word	0x0800a6b0
 8006478:	0800a6c8 	.word	0x0800a6c8
 800647c:	0800a6d8 	.word	0x0800a6d8
 8006480:	0800abcc 	.word	0x0800abcc
 8006484:	20000cc0 	.word	0x20000cc0
 8006488:	0800a6e8 	.word	0x0800a6e8
 800648c:	0800aba8 	.word	0x0800aba8
 8006490:	20000cdc 	.word	0x20000cdc
 8006494:	0800a704 	.word	0x0800a704
 8006498:	0800a724 	.word	0x0800a724
 800649c:	0800a748 	.word	0x0800a748
 80064a0:	0006c726 	.word	0x0006c726
 80064a4:	0800a760 	.word	0x0800a760
 80064a8:	0800a784 	.word	0x0800a784

080064ac <ByteArrayToHexString>:

/**
  * @brief Convert byte array to hex string
  */
void ByteArrayToHexString(const uint8_t *pData, size_t length, char *pStr)
{
 80064ac:	b4b0      	push	{r4, r5, r7}
 80064ae:	b08b      	sub	sp, #44	@ 0x2c
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
    const char hexDigits[] = "0123456789ABCDEF";
 80064b8:	4b1e      	ldr	r3, [pc, #120]	@ (8006534 <ByteArrayToHexString+0x88>)
 80064ba:	f107 0410 	add.w	r4, r7, #16
 80064be:	461d      	mov	r5, r3
 80064c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064c4:	682b      	ldr	r3, [r5, #0]
 80064c6:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < length; ++i)
 80064c8:	2300      	movs	r3, #0
 80064ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80064cc:	e023      	b.n	8006516 <ByteArrayToHexString+0x6a>
    {
        pStr[i * 2]     = hexDigits[(pData[i] >> 4) & 0x0F];
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d2:	4413      	add	r3, r2
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	091b      	lsrs	r3, r3, #4
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	f003 020f 	and.w	r2, r3, #15
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	440b      	add	r3, r1
 80064e6:	3228      	adds	r2, #40	@ 0x28
 80064e8:	443a      	add	r2, r7
 80064ea:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80064ee:	701a      	strb	r2, [r3, #0]
        pStr[i * 2 + 1] = hexDigits[pData[i] & 0x0F];
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	4413      	add	r3, r2
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	f003 020f 	and.w	r2, r3, #15
 80064fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	3301      	adds	r3, #1
 8006502:	6879      	ldr	r1, [r7, #4]
 8006504:	440b      	add	r3, r1
 8006506:	3228      	adds	r2, #40	@ 0x28
 8006508:	443a      	add	r2, r7
 800650a:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800650e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < length; ++i)
 8006510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006512:	3301      	adds	r3, #1
 8006514:	627b      	str	r3, [r7, #36]	@ 0x24
 8006516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	429a      	cmp	r2, r3
 800651c:	d3d7      	bcc.n	80064ce <ByteArrayToHexString+0x22>
    }
    pStr[length * 2] = '\0'; // Null-terminate the string
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	4413      	add	r3, r2
 8006526:	2200      	movs	r2, #0
 8006528:	701a      	strb	r2, [r3, #0]
}
 800652a:	bf00      	nop
 800652c:	372c      	adds	r7, #44	@ 0x2c
 800652e:	46bd      	mov	sp, r7
 8006530:	bcb0      	pop	{r4, r5, r7}
 8006532:	4770      	bx	lr
 8006534:	0800a7ac 	.word	0x0800a7ac

08006538 <UART_PrintSignature>:

void UART_PrintSignature(const uint8_t *data, size_t length) {
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
    size_t offset = 0;
 8006542:	2300      	movs	r3, #0
 8006544:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < length; i++) {
 8006546:	2300      	movs	r3, #0
 8006548:	60bb      	str	r3, [r7, #8]
 800654a:	e01d      	b.n	8006588 <UART_PrintSignature+0x50>
        if ((offset + 3) < hexSignature) {
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	3303      	adds	r3, #3
 8006550:	461a      	mov	r2, r3
 8006552:	4b16      	ldr	r3, [pc, #88]	@ (80065ac <UART_PrintSignature+0x74>)
 8006554:	429a      	cmp	r2, r3
 8006556:	d210      	bcs.n	800657a <UART_PrintSignature+0x42>
            offset += sprintf(&hexSignature[offset], "%02X", data[i]);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4a14      	ldr	r2, [pc, #80]	@ (80065ac <UART_PrintSignature+0x74>)
 800655c:	1898      	adds	r0, r3, r2
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4413      	add	r3, r2
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	461a      	mov	r2, r3
 8006568:	4911      	ldr	r1, [pc, #68]	@ (80065b0 <UART_PrintSignature+0x78>)
 800656a:	f003 f8b3 	bl	80096d4 <siprintf>
 800656e:	4603      	mov	r3, r0
 8006570:	461a      	mov	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4413      	add	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	e003      	b.n	8006582 <UART_PrintSignature+0x4a>
        } else {
            UART_Print("Error: hexSignature buffer overflow\r\n");
 800657a:	480e      	ldr	r0, [pc, #56]	@ (80065b4 <UART_PrintSignature+0x7c>)
 800657c:	f000 f896 	bl	80066ac <UART_Print>
            return;
 8006580:	e011      	b.n	80065a6 <UART_PrintSignature+0x6e>
    for (size_t i = 0; i < length; i++) {
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	3301      	adds	r3, #1
 8006586:	60bb      	str	r3, [r7, #8]
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	429a      	cmp	r2, r3
 800658e:	d3dd      	bcc.n	800654c <UART_PrintSignature+0x14>
        }
    }
    hexSignature[offset] = '\0';
 8006590:	4a06      	ldr	r2, [pc, #24]	@ (80065ac <UART_PrintSignature+0x74>)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4413      	add	r3, r2
 8006596:	2200      	movs	r2, #0
 8006598:	701a      	strb	r2, [r3, #0]
    UART_Print(hexSignature);
 800659a:	4804      	ldr	r0, [pc, #16]	@ (80065ac <UART_PrintSignature+0x74>)
 800659c:	f000 f886 	bl	80066ac <UART_Print>
    UART_Print("\r\n");
 80065a0:	4805      	ldr	r0, [pc, #20]	@ (80065b8 <UART_PrintSignature+0x80>)
 80065a2:	f000 f883 	bl	80066ac <UART_Print>
}
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	20000088 	.word	0x20000088
 80065b0:	0800a7c0 	.word	0x0800a7c0
 80065b4:	0800a7c8 	.word	0x0800a7c8
 80065b8:	0800a688 	.word	0x0800a688

080065bc <Print_Computed_Signature>:

/**
  * @brief Print computed ECDSA signature as hex
  */
void Print_Computed_Signature(const uint8_t *pSignature, size_t length)
{
 80065bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80065c0:	b085      	sub	sp, #20
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	6039      	str	r1, [r7, #0]
 80065c8:	466b      	mov	r3, sp
 80065ca:	461e      	mov	r6, r3
    char signatureHex[2 * length + 1];
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	1c59      	adds	r1, r3, #1
 80065d2:	460b      	mov	r3, r1
 80065d4:	3b01      	subs	r3, #1
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	2300      	movs	r3, #0
 80065da:	4688      	mov	r8, r1
 80065dc:	4699      	mov	r9, r3
 80065de:	f04f 0200 	mov.w	r2, #0
 80065e2:	f04f 0300 	mov.w	r3, #0
 80065e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065f2:	2300      	movs	r3, #0
 80065f4:	460c      	mov	r4, r1
 80065f6:	461d      	mov	r5, r3
 80065f8:	f04f 0200 	mov.w	r2, #0
 80065fc:	f04f 0300 	mov.w	r3, #0
 8006600:	00eb      	lsls	r3, r5, #3
 8006602:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006606:	00e2      	lsls	r2, r4, #3
 8006608:	1dcb      	adds	r3, r1, #7
 800660a:	08db      	lsrs	r3, r3, #3
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	ebad 0d03 	sub.w	sp, sp, r3
 8006612:	466b      	mov	r3, sp
 8006614:	3300      	adds	r3, #0
 8006616:	60bb      	str	r3, [r7, #8]
    ByteArrayToHexString(pSignature, length, signatureHex);
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff ff45 	bl	80064ac <ByteArrayToHexString>
    UART_Print(signatureHex);
 8006622:	68b8      	ldr	r0, [r7, #8]
 8006624:	f000 f842 	bl	80066ac <UART_Print>
 8006628:	46b5      	mov	sp, r6
}
 800662a:	bf00      	nop
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006634 <Print_Computed_Keys>:

void Print_Computed_Keys(const uint8_t *data, size_t length)
{
 8006634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006638:	b085      	sub	sp, #20
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	6039      	str	r1, [r7, #0]
 8006640:	466b      	mov	r3, sp
 8006642:	461e      	mov	r6, r3
    char keysHex[2 * length + 1];
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	1c59      	adds	r1, r3, #1
 800664a:	460b      	mov	r3, r1
 800664c:	3b01      	subs	r3, #1
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	2300      	movs	r3, #0
 8006652:	4688      	mov	r8, r1
 8006654:	4699      	mov	r9, r3
 8006656:	f04f 0200 	mov.w	r2, #0
 800665a:	f04f 0300 	mov.w	r3, #0
 800665e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800666a:	2300      	movs	r3, #0
 800666c:	460c      	mov	r4, r1
 800666e:	461d      	mov	r5, r3
 8006670:	f04f 0200 	mov.w	r2, #0
 8006674:	f04f 0300 	mov.w	r3, #0
 8006678:	00eb      	lsls	r3, r5, #3
 800667a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800667e:	00e2      	lsls	r2, r4, #3
 8006680:	1dcb      	adds	r3, r1, #7
 8006682:	08db      	lsrs	r3, r3, #3
 8006684:	00db      	lsls	r3, r3, #3
 8006686:	ebad 0d03 	sub.w	sp, sp, r3
 800668a:	466b      	mov	r3, sp
 800668c:	3300      	adds	r3, #0
 800668e:	60bb      	str	r3, [r7, #8]
    ByteArrayToHexString(data, length, keysHex);
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7ff ff09 	bl	80064ac <ByteArrayToHexString>
    UART_Print(keysHex);
 800669a:	68b8      	ldr	r0, [r7, #8]
 800669c:	f000 f806 	bl	80066ac <UART_Print>
 80066a0:	46b5      	mov	sp, r6
}
 80066a2:	bf00      	nop
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080066ac <UART_Print>:

/**
  * @brief Print string over UART
  */
void UART_Print(const char *pString)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    status = HAL_UART_Transmit(&huart2, (uint8_t *)pString, strlen(pString), HAL_MAX_DELAY);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7ff f86b 	bl	8005790 <strlen>
 80066ba:	4603      	mov	r3, r0
 80066bc:	b29a      	uxth	r2, r3
 80066be:	f04f 33ff 	mov.w	r3, #4294967295
 80066c2:	6879      	ldr	r1, [r7, #4]
 80066c4:	4806      	ldr	r0, [pc, #24]	@ (80066e0 <UART_Print+0x34>)
 80066c6:	f001 fb0d 	bl	8007ce4 <HAL_UART_Transmit>
 80066ca:	4603      	mov	r3, r0
 80066cc:	73fb      	strb	r3, [r7, #15]

    // Check if transmission was successful
    if (status != HAL_OK)
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <UART_Print+0x2c>
    {
        Error_Handler();
 80066d4:	f000 f8d4 	bl	8006880 <Error_Handler>
    }
}
 80066d8:	bf00      	nop
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	20000c70 	.word	0x20000c70

080066e4 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  */
static void SystemClock_Config(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b094      	sub	sp, #80	@ 0x50
 80066e8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80066ea:	f107 0320 	add.w	r3, r7, #32
 80066ee:	2230      	movs	r2, #48	@ 0x30
 80066f0:	2100      	movs	r1, #0
 80066f2:	4618      	mov	r0, r3
 80066f4:	f003 f97d 	bl	80099f2 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80066f8:	f107 030c 	add.w	r3, r7, #12
 80066fc:	2200      	movs	r2, #0
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	605a      	str	r2, [r3, #4]
 8006702:	609a      	str	r2, [r3, #8]
 8006704:	60da      	str	r2, [r3, #12]
 8006706:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8006708:	2300      	movs	r3, #0
 800670a:	60bb      	str	r3, [r7, #8]
 800670c:	4b23      	ldr	r3, [pc, #140]	@ (800679c <SystemClock_Config+0xb8>)
 800670e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006710:	4a22      	ldr	r2, [pc, #136]	@ (800679c <SystemClock_Config+0xb8>)
 8006712:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006716:	6413      	str	r3, [r2, #64]	@ 0x40
 8006718:	4b20      	ldr	r3, [pc, #128]	@ (800679c <SystemClock_Config+0xb8>)
 800671a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006720:	60bb      	str	r3, [r7, #8]
 8006722:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8006724:	2300      	movs	r3, #0
 8006726:	607b      	str	r3, [r7, #4]
 8006728:	4b1d      	ldr	r3, [pc, #116]	@ (80067a0 <SystemClock_Config+0xbc>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006730:	4a1b      	ldr	r2, [pc, #108]	@ (80067a0 <SystemClock_Config+0xbc>)
 8006732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	4b19      	ldr	r3, [pc, #100]	@ (80067a0 <SystemClock_Config+0xbc>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006740:	607b      	str	r3, [r7, #4]
 8006742:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006744:	2302      	movs	r3, #2
 8006746:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006748:	2301      	movs	r3, #1
 800674a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800674c:	2310      	movs	r3, #16
 800674e:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006750:	2300      	movs	r3, #0
 8006752:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006754:	f107 0320 	add.w	r3, r7, #32
 8006758:	4618      	mov	r0, r3
 800675a:	f000 fe1b 	bl	8007394 <HAL_RCC_OscConfig>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <SystemClock_Config+0x84>
    {
        Error_Handler();
 8006764:	f000 f88c 	bl	8006880 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8006768:	230f      	movs	r3, #15
 800676a:	60fb      	str	r3, [r7, #12]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800676c:	2300      	movs	r3, #0
 800676e:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006774:	2300      	movs	r3, #0
 8006776:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006778:	2300      	movs	r3, #0
 800677a:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800677c:	f107 030c 	add.w	r3, r7, #12
 8006780:	2100      	movs	r1, #0
 8006782:	4618      	mov	r0, r3
 8006784:	f001 f87e 	bl	8007884 <HAL_RCC_ClockConfig>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <SystemClock_Config+0xae>
    {
        Error_Handler();
 800678e:	f000 f877 	bl	8006880 <Error_Handler>
    }
}
 8006792:	bf00      	nop
 8006794:	3750      	adds	r7, #80	@ 0x50
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	40023800 	.word	0x40023800
 80067a0:	40007000 	.word	0x40007000

080067a4 <MX_CRC_Init>:

/**
  * @brief CRC Initialization
  */
static void MX_CRC_Init(void)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	af00      	add	r7, sp, #0
    hcrc.Instance = CRC;
 80067a8:	4b06      	ldr	r3, [pc, #24]	@ (80067c4 <MX_CRC_Init+0x20>)
 80067aa:	4a07      	ldr	r2, [pc, #28]	@ (80067c8 <MX_CRC_Init+0x24>)
 80067ac:	601a      	str	r2, [r3, #0]
    if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80067ae:	4805      	ldr	r0, [pc, #20]	@ (80067c4 <MX_CRC_Init+0x20>)
 80067b0:	f000 fbbd 	bl	8006f2e <HAL_CRC_Init>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <MX_CRC_Init+0x1a>
    {
        Error_Handler();
 80067ba:	f000 f861 	bl	8006880 <Error_Handler>
    }
}
 80067be:	bf00      	nop
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	20000cb8 	.word	0x20000cb8
 80067c8:	40023000 	.word	0x40023000

080067cc <MX_USART2_UART_Init>:

/**
  * @brief USART2 Initialization Function
  */
static void MX_USART2_UART_Init(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 80067d0:	4b11      	ldr	r3, [pc, #68]	@ (8006818 <MX_USART2_UART_Init+0x4c>)
 80067d2:	4a12      	ldr	r2, [pc, #72]	@ (800681c <MX_USART2_UART_Init+0x50>)
 80067d4:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80067d6:	4b10      	ldr	r3, [pc, #64]	@ (8006818 <MX_USART2_UART_Init+0x4c>)
 80067d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80067dc:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80067de:	4b0e      	ldr	r3, [pc, #56]	@ (8006818 <MX_USART2_UART_Init+0x4c>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80067e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006818 <MX_USART2_UART_Init+0x4c>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80067ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006818 <MX_USART2_UART_Init+0x4c>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80067f0:	4b09      	ldr	r3, [pc, #36]	@ (8006818 <MX_USART2_UART_Init+0x4c>)
 80067f2:	220c      	movs	r2, #12
 80067f4:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067f6:	4b08      	ldr	r3, [pc, #32]	@ (8006818 <MX_USART2_UART_Init+0x4c>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80067fc:	4b06      	ldr	r3, [pc, #24]	@ (8006818 <MX_USART2_UART_Init+0x4c>)
 80067fe:	2200      	movs	r2, #0
 8006800:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8006802:	4805      	ldr	r0, [pc, #20]	@ (8006818 <MX_USART2_UART_Init+0x4c>)
 8006804:	f001 fa1e 	bl	8007c44 <HAL_UART_Init>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 800680e:	f000 f837 	bl	8006880 <Error_Handler>
    }
}
 8006812:	bf00      	nop
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	20000c70 	.word	0x20000c70
 800681c:	40004400 	.word	0x40004400

08006820 <MX_GPIO_Init>:

/**
  * @brief GPIO Initialization Function
  */
static void MX_GPIO_Init(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006826:	1d3b      	adds	r3, r7, #4
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	605a      	str	r2, [r3, #4]
 800682e:	609a      	str	r2, [r3, #8]
 8006830:	60da      	str	r2, [r3, #12]
 8006832:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006834:	2300      	movs	r3, #0
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	4b0f      	ldr	r3, [pc, #60]	@ (8006878 <MX_GPIO_Init+0x58>)
 800683a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800683c:	4a0e      	ldr	r2, [pc, #56]	@ (8006878 <MX_GPIO_Init+0x58>)
 800683e:	f043 0301 	orr.w	r3, r3, #1
 8006842:	6313      	str	r3, [r2, #48]	@ 0x30
 8006844:	4b0c      	ldr	r3, [pc, #48]	@ (8006878 <MX_GPIO_Init+0x58>)
 8006846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	603b      	str	r3, [r7, #0]
 800684e:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3; // TX, RX
 8006850:	230c      	movs	r3, #12
 8006852:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006854:	2302      	movs	r3, #2
 8006856:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800685c:	2300      	movs	r3, #0
 800685e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006860:	2307      	movs	r3, #7
 8006862:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006864:	1d3b      	adds	r3, r7, #4
 8006866:	4619      	mov	r1, r3
 8006868:	4804      	ldr	r0, [pc, #16]	@ (800687c <MX_GPIO_Init+0x5c>)
 800686a:	f000 fc0f 	bl	800708c <HAL_GPIO_Init>
}
 800686e:	bf00      	nop
 8006870:	3718      	adds	r7, #24
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	40023800 	.word	0x40023800
 800687c:	40020000 	.word	0x40020000

08006880 <Error_Handler>:

/**
  * @brief Error Handler function
  */
void Error_Handler(void)
{
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006884:	b672      	cpsid	i
}
 8006886:	bf00      	nop
    __disable_irq();
    while (1) {
 8006888:	bf00      	nop
 800688a:	e7fd      	b.n	8006888 <Error_Handler+0x8>

0800688c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006892:	2300      	movs	r3, #0
 8006894:	607b      	str	r3, [r7, #4]
 8006896:	4b13      	ldr	r3, [pc, #76]	@ (80068e4 <HAL_MspInit+0x58>)
 8006898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800689a:	4a12      	ldr	r2, [pc, #72]	@ (80068e4 <HAL_MspInit+0x58>)
 800689c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80068a2:	4b10      	ldr	r3, [pc, #64]	@ (80068e4 <HAL_MspInit+0x58>)
 80068a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068aa:	607b      	str	r3, [r7, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80068ae:	2300      	movs	r3, #0
 80068b0:	603b      	str	r3, [r7, #0]
 80068b2:	4b0c      	ldr	r3, [pc, #48]	@ (80068e4 <HAL_MspInit+0x58>)
 80068b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b6:	4a0b      	ldr	r2, [pc, #44]	@ (80068e4 <HAL_MspInit+0x58>)
 80068b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80068be:	4b09      	ldr	r3, [pc, #36]	@ (80068e4 <HAL_MspInit+0x58>)
 80068c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068c6:	603b      	str	r3, [r7, #0]
 80068c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80068ca:	2200      	movs	r2, #0
 80068cc:	2100      	movs	r1, #0
 80068ce:	2005      	movs	r0, #5
 80068d0:	f000 faf7 	bl	8006ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80068d4:	2005      	movs	r0, #5
 80068d6:	f000 fb10 	bl	8006efa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80068da:	bf00      	nop
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	40023800 	.word	0x40023800

080068e8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a0b      	ldr	r2, [pc, #44]	@ (8006924 <HAL_CRC_MspInit+0x3c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d10d      	bne.n	8006916 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006928 <HAL_CRC_MspInit+0x40>)
 8006900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006902:	4a09      	ldr	r2, [pc, #36]	@ (8006928 <HAL_CRC_MspInit+0x40>)
 8006904:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006908:	6313      	str	r3, [r2, #48]	@ 0x30
 800690a:	4b07      	ldr	r3, [pc, #28]	@ (8006928 <HAL_CRC_MspInit+0x40>)
 800690c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800690e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8006916:	bf00      	nop
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	40023000 	.word	0x40023000
 8006928:	40023800 	.word	0x40023800

0800692c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08a      	sub	sp, #40	@ 0x28
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006934:	f107 0314 	add.w	r3, r7, #20
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	605a      	str	r2, [r3, #4]
 800693e:	609a      	str	r2, [r3, #8]
 8006940:	60da      	str	r2, [r3, #12]
 8006942:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a1d      	ldr	r2, [pc, #116]	@ (80069c0 <HAL_UART_MspInit+0x94>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d133      	bne.n	80069b6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800694e:	2300      	movs	r3, #0
 8006950:	613b      	str	r3, [r7, #16]
 8006952:	4b1c      	ldr	r3, [pc, #112]	@ (80069c4 <HAL_UART_MspInit+0x98>)
 8006954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006956:	4a1b      	ldr	r2, [pc, #108]	@ (80069c4 <HAL_UART_MspInit+0x98>)
 8006958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800695c:	6413      	str	r3, [r2, #64]	@ 0x40
 800695e:	4b19      	ldr	r3, [pc, #100]	@ (80069c4 <HAL_UART_MspInit+0x98>)
 8006960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800696a:	2300      	movs	r3, #0
 800696c:	60fb      	str	r3, [r7, #12]
 800696e:	4b15      	ldr	r3, [pc, #84]	@ (80069c4 <HAL_UART_MspInit+0x98>)
 8006970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006972:	4a14      	ldr	r2, [pc, #80]	@ (80069c4 <HAL_UART_MspInit+0x98>)
 8006974:	f043 0301 	orr.w	r3, r3, #1
 8006978:	6313      	str	r3, [r2, #48]	@ 0x30
 800697a:	4b12      	ldr	r3, [pc, #72]	@ (80069c4 <HAL_UART_MspInit+0x98>)
 800697c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006986:	230c      	movs	r3, #12
 8006988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800698a:	2302      	movs	r3, #2
 800698c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800698e:	2300      	movs	r3, #0
 8006990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006992:	2303      	movs	r3, #3
 8006994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006996:	2307      	movs	r3, #7
 8006998:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800699a:	f107 0314 	add.w	r3, r7, #20
 800699e:	4619      	mov	r1, r3
 80069a0:	4809      	ldr	r0, [pc, #36]	@ (80069c8 <HAL_UART_MspInit+0x9c>)
 80069a2:	f000 fb73 	bl	800708c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80069a6:	2200      	movs	r2, #0
 80069a8:	2100      	movs	r1, #0
 80069aa:	2026      	movs	r0, #38	@ 0x26
 80069ac:	f000 fa89 	bl	8006ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80069b0:	2026      	movs	r0, #38	@ 0x26
 80069b2:	f000 faa2 	bl	8006efa <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80069b6:	bf00      	nop
 80069b8:	3728      	adds	r7, #40	@ 0x28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	40004400 	.word	0x40004400
 80069c4:	40023800 	.word	0x40023800
 80069c8:	40020000 	.word	0x40020000

080069cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80069d0:	bf00      	nop
 80069d2:	e7fd      	b.n	80069d0 <NMI_Handler+0x4>

080069d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80069d8:	bf00      	nop
 80069da:	e7fd      	b.n	80069d8 <HardFault_Handler+0x4>

080069dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80069dc:	b480      	push	{r7}
 80069de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80069e0:	bf00      	nop
 80069e2:	e7fd      	b.n	80069e0 <MemManage_Handler+0x4>

080069e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80069e4:	b480      	push	{r7}
 80069e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80069e8:	bf00      	nop
 80069ea:	e7fd      	b.n	80069e8 <BusFault_Handler+0x4>

080069ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80069f0:	bf00      	nop
 80069f2:	e7fd      	b.n	80069f0 <UsageFault_Handler+0x4>

080069f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80069f4:	b480      	push	{r7}
 80069f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80069f8:	bf00      	nop
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a02:	b480      	push	{r7}
 8006a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a06:	bf00      	nop
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006a14:	bf00      	nop
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a22:	f000 f953 	bl	8006ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a26:	bf00      	nop
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8006a2e:	bf00      	nop
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006a3c:	4802      	ldr	r0, [pc, #8]	@ (8006a48 <USART2_IRQHandler+0x10>)
 8006a3e:	f001 f9dd 	bl	8007dfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006a42:	bf00      	nop
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20000c70 	.word	0x20000c70

08006a4c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a58:	2300      	movs	r3, #0
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	e00a      	b.n	8006a74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006a5e:	f3af 8000 	nop.w
 8006a62:	4601      	mov	r1, r0
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	1c5a      	adds	r2, r3, #1
 8006a68:	60ba      	str	r2, [r7, #8]
 8006a6a:	b2ca      	uxtb	r2, r1
 8006a6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	3301      	adds	r3, #1
 8006a72:	617b      	str	r3, [r7, #20]
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	dbf0      	blt.n	8006a5e <_read+0x12>
  }

  return len;
 8006a7c:	687b      	ldr	r3, [r7, #4]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b086      	sub	sp, #24
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a92:	2300      	movs	r3, #0
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	e009      	b.n	8006aac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	60ba      	str	r2, [r7, #8]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	dbf1      	blt.n	8006a98 <_write+0x12>
  }
  return len;
 8006ab4:	687b      	ldr	r3, [r7, #4]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3718      	adds	r7, #24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <_close>:

int _close(int file)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b083      	sub	sp, #12
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006ae6:	605a      	str	r2, [r3, #4]
  return 0;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <_isatty>:

int _isatty(int file)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b083      	sub	sp, #12
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006afe:	2301      	movs	r3, #1
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <_open>:

int _open(char *path, int flags, ...)
{
 8006b26:	b40e      	push	{r1, r2, r3}
 8006b28:	b480      	push	{r7}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
 8006b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	b003      	add	sp, #12
 8006b40:	4770      	bx	lr
	...

08006b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006b4c:	4a14      	ldr	r2, [pc, #80]	@ (8006ba0 <_sbrk+0x5c>)
 8006b4e:	4b15      	ldr	r3, [pc, #84]	@ (8006ba4 <_sbrk+0x60>)
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006b58:	4b13      	ldr	r3, [pc, #76]	@ (8006ba8 <_sbrk+0x64>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d102      	bne.n	8006b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006b60:	4b11      	ldr	r3, [pc, #68]	@ (8006ba8 <_sbrk+0x64>)
 8006b62:	4a12      	ldr	r2, [pc, #72]	@ (8006bac <_sbrk+0x68>)
 8006b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006b66:	4b10      	ldr	r3, [pc, #64]	@ (8006ba8 <_sbrk+0x64>)
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d207      	bcs.n	8006b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006b74:	f002 ffca 	bl	8009b0c <__errno>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	220c      	movs	r2, #12
 8006b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b82:	e009      	b.n	8006b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006b84:	4b08      	ldr	r3, [pc, #32]	@ (8006ba8 <_sbrk+0x64>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006b8a:	4b07      	ldr	r3, [pc, #28]	@ (8006ba8 <_sbrk+0x64>)
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4413      	add	r3, r2
 8006b92:	4a05      	ldr	r2, [pc, #20]	@ (8006ba8 <_sbrk+0x64>)
 8006b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006b96:	68fb      	ldr	r3, [r7, #12]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	20018000 	.word	0x20018000
 8006ba4:	00000400 	.word	0x00000400
 8006ba8:	20000d1c 	.word	0x20000d1c
 8006bac:	20000e70 	.word	0x20000e70

08006bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006bb4:	4b06      	ldr	r3, [pc, #24]	@ (8006bd0 <SystemInit+0x20>)
 8006bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bba:	4a05      	ldr	r2, [pc, #20]	@ (8006bd0 <SystemInit+0x20>)
 8006bbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006bc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006bc4:	bf00      	nop
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	e000ed00 	.word	0xe000ed00

08006bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006bd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006c0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006bd8:	f7ff ffea 	bl	8006bb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006bdc:	480c      	ldr	r0, [pc, #48]	@ (8006c10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006bde:	490d      	ldr	r1, [pc, #52]	@ (8006c14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006be0:	4a0d      	ldr	r2, [pc, #52]	@ (8006c18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006be4:	e002      	b.n	8006bec <LoopCopyDataInit>

08006be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006bea:	3304      	adds	r3, #4

08006bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006bf0:	d3f9      	bcc.n	8006be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8006c1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006bf4:	4c0a      	ldr	r4, [pc, #40]	@ (8006c20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006bf8:	e001      	b.n	8006bfe <LoopFillZerobss>

08006bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006bfc:	3204      	adds	r2, #4

08006bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006c00:	d3fb      	bcc.n	8006bfa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8006c02:	f002 ff89 	bl	8009b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006c06:	f7ff faf7 	bl	80061f8 <main>
  bx  lr    
 8006c0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006c0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8006c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006c14:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8006c18:	0800b0d0 	.word	0x0800b0d0
  ldr r2, =_sbss
 8006c1c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8006c20:	20000e70 	.word	0x20000e70

08006c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006c24:	e7fe      	b.n	8006c24 <ADC_IRQHandler>
	...

08006c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8006c68 <HAL_Init+0x40>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a0d      	ldr	r2, [pc, #52]	@ (8006c68 <HAL_Init+0x40>)
 8006c32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006c36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006c38:	4b0b      	ldr	r3, [pc, #44]	@ (8006c68 <HAL_Init+0x40>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8006c68 <HAL_Init+0x40>)
 8006c3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006c42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006c44:	4b08      	ldr	r3, [pc, #32]	@ (8006c68 <HAL_Init+0x40>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a07      	ldr	r2, [pc, #28]	@ (8006c68 <HAL_Init+0x40>)
 8006c4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c50:	2003      	movs	r0, #3
 8006c52:	f000 f92b 	bl	8006eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006c56:	200f      	movs	r0, #15
 8006c58:	f000 f808 	bl	8006c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006c5c:	f7ff fe16 	bl	800688c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	40023c00 	.word	0x40023c00

08006c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c74:	4b12      	ldr	r3, [pc, #72]	@ (8006cc0 <HAL_InitTick+0x54>)
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	4b12      	ldr	r3, [pc, #72]	@ (8006cc4 <HAL_InitTick+0x58>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 f943 	bl	8006f16 <HAL_SYSTICK_Config>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e00e      	b.n	8006cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b0f      	cmp	r3, #15
 8006c9e:	d80a      	bhi.n	8006cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	6879      	ldr	r1, [r7, #4]
 8006ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca8:	f000 f90b 	bl	8006ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006cac:	4a06      	ldr	r2, [pc, #24]	@ (8006cc8 <HAL_InitTick+0x5c>)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	e000      	b.n	8006cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	20000000 	.word	0x20000000
 8006cc4:	20000008 	.word	0x20000008
 8006cc8:	20000004 	.word	0x20000004

08006ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006cd0:	4b06      	ldr	r3, [pc, #24]	@ (8006cec <HAL_IncTick+0x20>)
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	4b06      	ldr	r3, [pc, #24]	@ (8006cf0 <HAL_IncTick+0x24>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4413      	add	r3, r2
 8006cdc:	4a04      	ldr	r2, [pc, #16]	@ (8006cf0 <HAL_IncTick+0x24>)
 8006cde:	6013      	str	r3, [r2, #0]
}
 8006ce0:	bf00      	nop
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	20000008 	.word	0x20000008
 8006cf0:	20000d20 	.word	0x20000d20

08006cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8006cf8:	4b03      	ldr	r3, [pc, #12]	@ (8006d08 <HAL_GetTick+0x14>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	20000d20 	.word	0x20000d20

08006d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f003 0307 	and.w	r3, r3, #7
 8006d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d50 <__NVIC_SetPriorityGrouping+0x44>)
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006d28:	4013      	ands	r3, r2
 8006d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d3e:	4a04      	ldr	r2, [pc, #16]	@ (8006d50 <__NVIC_SetPriorityGrouping+0x44>)
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	60d3      	str	r3, [r2, #12]
}
 8006d44:	bf00      	nop
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	e000ed00 	.word	0xe000ed00

08006d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d54:	b480      	push	{r7}
 8006d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d58:	4b04      	ldr	r3, [pc, #16]	@ (8006d6c <__NVIC_GetPriorityGrouping+0x18>)
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	0a1b      	lsrs	r3, r3, #8
 8006d5e:	f003 0307 	and.w	r3, r3, #7
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	e000ed00 	.word	0xe000ed00

08006d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	4603      	mov	r3, r0
 8006d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	db0b      	blt.n	8006d9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d82:	79fb      	ldrb	r3, [r7, #7]
 8006d84:	f003 021f 	and.w	r2, r3, #31
 8006d88:	4907      	ldr	r1, [pc, #28]	@ (8006da8 <__NVIC_EnableIRQ+0x38>)
 8006d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d8e:	095b      	lsrs	r3, r3, #5
 8006d90:	2001      	movs	r0, #1
 8006d92:	fa00 f202 	lsl.w	r2, r0, r2
 8006d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	e000e100 	.word	0xe000e100

08006dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	4603      	mov	r3, r0
 8006db4:	6039      	str	r1, [r7, #0]
 8006db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	db0a      	blt.n	8006dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	490c      	ldr	r1, [pc, #48]	@ (8006df8 <__NVIC_SetPriority+0x4c>)
 8006dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dca:	0112      	lsls	r2, r2, #4
 8006dcc:	b2d2      	uxtb	r2, r2
 8006dce:	440b      	add	r3, r1
 8006dd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006dd4:	e00a      	b.n	8006dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	4908      	ldr	r1, [pc, #32]	@ (8006dfc <__NVIC_SetPriority+0x50>)
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	f003 030f 	and.w	r3, r3, #15
 8006de2:	3b04      	subs	r3, #4
 8006de4:	0112      	lsls	r2, r2, #4
 8006de6:	b2d2      	uxtb	r2, r2
 8006de8:	440b      	add	r3, r1
 8006dea:	761a      	strb	r2, [r3, #24]
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	e000e100 	.word	0xe000e100
 8006dfc:	e000ed00 	.word	0xe000ed00

08006e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b089      	sub	sp, #36	@ 0x24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f003 0307 	and.w	r3, r3, #7
 8006e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	f1c3 0307 	rsb	r3, r3, #7
 8006e1a:	2b04      	cmp	r3, #4
 8006e1c:	bf28      	it	cs
 8006e1e:	2304      	movcs	r3, #4
 8006e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	3304      	adds	r3, #4
 8006e26:	2b06      	cmp	r3, #6
 8006e28:	d902      	bls.n	8006e30 <NVIC_EncodePriority+0x30>
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	3b03      	subs	r3, #3
 8006e2e:	e000      	b.n	8006e32 <NVIC_EncodePriority+0x32>
 8006e30:	2300      	movs	r3, #0
 8006e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e34:	f04f 32ff 	mov.w	r2, #4294967295
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3e:	43da      	mvns	r2, r3
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	401a      	ands	r2, r3
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e48:	f04f 31ff 	mov.w	r1, #4294967295
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e52:	43d9      	mvns	r1, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e58:	4313      	orrs	r3, r2
         );
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3724      	adds	r7, #36	@ 0x24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
	...

08006e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e78:	d301      	bcc.n	8006e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e00f      	b.n	8006e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8006ea8 <SysTick_Config+0x40>)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e86:	210f      	movs	r1, #15
 8006e88:	f04f 30ff 	mov.w	r0, #4294967295
 8006e8c:	f7ff ff8e 	bl	8006dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e90:	4b05      	ldr	r3, [pc, #20]	@ (8006ea8 <SysTick_Config+0x40>)
 8006e92:	2200      	movs	r2, #0
 8006e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e96:	4b04      	ldr	r3, [pc, #16]	@ (8006ea8 <SysTick_Config+0x40>)
 8006e98:	2207      	movs	r2, #7
 8006e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	e000e010 	.word	0xe000e010

08006eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7ff ff29 	bl	8006d0c <__NVIC_SetPriorityGrouping>
}
 8006eba:	bf00      	nop
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b086      	sub	sp, #24
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	4603      	mov	r3, r0
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	607a      	str	r2, [r7, #4]
 8006ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006ed4:	f7ff ff3e 	bl	8006d54 <__NVIC_GetPriorityGrouping>
 8006ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	68b9      	ldr	r1, [r7, #8]
 8006ede:	6978      	ldr	r0, [r7, #20]
 8006ee0:	f7ff ff8e 	bl	8006e00 <NVIC_EncodePriority>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eea:	4611      	mov	r1, r2
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7ff ff5d 	bl	8006dac <__NVIC_SetPriority>
}
 8006ef2:	bf00      	nop
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b082      	sub	sp, #8
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	4603      	mov	r3, r0
 8006f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff ff31 	bl	8006d70 <__NVIC_EnableIRQ>
}
 8006f0e:	bf00      	nop
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b082      	sub	sp, #8
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7ff ffa2 	bl	8006e68 <SysTick_Config>
 8006f24:	4603      	mov	r3, r0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b082      	sub	sp, #8
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e00e      	b.n	8006f5e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	795b      	ldrb	r3, [r3, #5]
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d105      	bne.n	8006f56 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7ff fcc9 	bl	80068e8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b084      	sub	sp, #16
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f72:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006f74:	f7ff febe 	bl	8006cf4 <HAL_GetTick>
 8006f78:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d008      	beq.n	8006f98 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2280      	movs	r2, #128	@ 0x80
 8006f8a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e052      	b.n	800703e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 0216 	bic.w	r2, r2, #22
 8006fa6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	695a      	ldr	r2, [r3, #20]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006fb6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d103      	bne.n	8006fc8 <HAL_DMA_Abort+0x62>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d007      	beq.n	8006fd8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 0208 	bic.w	r2, r2, #8
 8006fd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0201 	bic.w	r2, r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006fe8:	e013      	b.n	8007012 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006fea:	f7ff fe83 	bl	8006cf4 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	2b05      	cmp	r3, #5
 8006ff6:	d90c      	bls.n	8007012 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2203      	movs	r2, #3
 8007002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e015      	b.n	800703e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e4      	bne.n	8006fea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007024:	223f      	movs	r2, #63	@ 0x3f
 8007026:	409a      	lsls	r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007046:	b480      	push	{r7}
 8007048:	b083      	sub	sp, #12
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b02      	cmp	r3, #2
 8007058:	d004      	beq.n	8007064 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2280      	movs	r2, #128	@ 0x80
 800705e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e00c      	b.n	800707e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2205      	movs	r2, #5
 8007068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f022 0201 	bic.w	r2, r2, #1
 800707a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
	...

0800708c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800708c:	b480      	push	{r7}
 800708e:	b089      	sub	sp, #36	@ 0x24
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007096:	2300      	movs	r3, #0
 8007098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800709a:	2300      	movs	r3, #0
 800709c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800709e:	2300      	movs	r3, #0
 80070a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070a2:	2300      	movs	r3, #0
 80070a4:	61fb      	str	r3, [r7, #28]
 80070a6:	e159      	b.n	800735c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80070a8:	2201      	movs	r2, #1
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	fa02 f303 	lsl.w	r3, r2, r3
 80070b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	4013      	ands	r3, r2
 80070ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	f040 8148 	bne.w	8007356 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f003 0303 	and.w	r3, r3, #3
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d005      	beq.n	80070de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d130      	bne.n	8007140 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	2203      	movs	r2, #3
 80070ea:	fa02 f303 	lsl.w	r3, r2, r3
 80070ee:	43db      	mvns	r3, r3
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	4013      	ands	r3, r2
 80070f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	68da      	ldr	r2, [r3, #12]
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	4313      	orrs	r3, r2
 8007106:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	69ba      	ldr	r2, [r7, #24]
 800710c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007114:	2201      	movs	r2, #1
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	fa02 f303 	lsl.w	r3, r2, r3
 800711c:	43db      	mvns	r3, r3
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	4013      	ands	r3, r2
 8007122:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	091b      	lsrs	r3, r3, #4
 800712a:	f003 0201 	and.w	r2, r3, #1
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	fa02 f303 	lsl.w	r3, r2, r3
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	4313      	orrs	r3, r2
 8007138:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	69ba      	ldr	r2, [r7, #24]
 800713e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f003 0303 	and.w	r3, r3, #3
 8007148:	2b03      	cmp	r3, #3
 800714a:	d017      	beq.n	800717c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	2203      	movs	r2, #3
 8007158:	fa02 f303 	lsl.w	r3, r2, r3
 800715c:	43db      	mvns	r3, r3
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	4013      	ands	r3, r2
 8007162:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	005b      	lsls	r3, r3, #1
 800716c:	fa02 f303 	lsl.w	r3, r2, r3
 8007170:	69ba      	ldr	r2, [r7, #24]
 8007172:	4313      	orrs	r3, r2
 8007174:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f003 0303 	and.w	r3, r3, #3
 8007184:	2b02      	cmp	r3, #2
 8007186:	d123      	bne.n	80071d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	08da      	lsrs	r2, r3, #3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3208      	adds	r2, #8
 8007190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007194:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	f003 0307 	and.w	r3, r3, #7
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	220f      	movs	r2, #15
 80071a0:	fa02 f303 	lsl.w	r3, r2, r3
 80071a4:	43db      	mvns	r3, r3
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	4013      	ands	r3, r2
 80071aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	691a      	ldr	r2, [r3, #16]
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	f003 0307 	and.w	r3, r3, #7
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	fa02 f303 	lsl.w	r3, r2, r3
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	4313      	orrs	r3, r2
 80071c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	08da      	lsrs	r2, r3, #3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3208      	adds	r2, #8
 80071ca:	69b9      	ldr	r1, [r7, #24]
 80071cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	005b      	lsls	r3, r3, #1
 80071da:	2203      	movs	r2, #3
 80071dc:	fa02 f303 	lsl.w	r3, r2, r3
 80071e0:	43db      	mvns	r3, r3
 80071e2:	69ba      	ldr	r2, [r7, #24]
 80071e4:	4013      	ands	r3, r2
 80071e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f003 0203 	and.w	r2, r3, #3
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	fa02 f303 	lsl.w	r3, r2, r3
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 80a2 	beq.w	8007356 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	4b57      	ldr	r3, [pc, #348]	@ (8007374 <HAL_GPIO_Init+0x2e8>)
 8007218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800721a:	4a56      	ldr	r2, [pc, #344]	@ (8007374 <HAL_GPIO_Init+0x2e8>)
 800721c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007220:	6453      	str	r3, [r2, #68]	@ 0x44
 8007222:	4b54      	ldr	r3, [pc, #336]	@ (8007374 <HAL_GPIO_Init+0x2e8>)
 8007224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007226:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800722e:	4a52      	ldr	r2, [pc, #328]	@ (8007378 <HAL_GPIO_Init+0x2ec>)
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	089b      	lsrs	r3, r3, #2
 8007234:	3302      	adds	r3, #2
 8007236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800723a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	f003 0303 	and.w	r3, r3, #3
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	220f      	movs	r2, #15
 8007246:	fa02 f303 	lsl.w	r3, r2, r3
 800724a:	43db      	mvns	r3, r3
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	4013      	ands	r3, r2
 8007250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a49      	ldr	r2, [pc, #292]	@ (800737c <HAL_GPIO_Init+0x2f0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d019      	beq.n	800728e <HAL_GPIO_Init+0x202>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a48      	ldr	r2, [pc, #288]	@ (8007380 <HAL_GPIO_Init+0x2f4>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d013      	beq.n	800728a <HAL_GPIO_Init+0x1fe>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a47      	ldr	r2, [pc, #284]	@ (8007384 <HAL_GPIO_Init+0x2f8>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d00d      	beq.n	8007286 <HAL_GPIO_Init+0x1fa>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a46      	ldr	r2, [pc, #280]	@ (8007388 <HAL_GPIO_Init+0x2fc>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d007      	beq.n	8007282 <HAL_GPIO_Init+0x1f6>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a45      	ldr	r2, [pc, #276]	@ (800738c <HAL_GPIO_Init+0x300>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d101      	bne.n	800727e <HAL_GPIO_Init+0x1f2>
 800727a:	2304      	movs	r3, #4
 800727c:	e008      	b.n	8007290 <HAL_GPIO_Init+0x204>
 800727e:	2307      	movs	r3, #7
 8007280:	e006      	b.n	8007290 <HAL_GPIO_Init+0x204>
 8007282:	2303      	movs	r3, #3
 8007284:	e004      	b.n	8007290 <HAL_GPIO_Init+0x204>
 8007286:	2302      	movs	r3, #2
 8007288:	e002      	b.n	8007290 <HAL_GPIO_Init+0x204>
 800728a:	2301      	movs	r3, #1
 800728c:	e000      	b.n	8007290 <HAL_GPIO_Init+0x204>
 800728e:	2300      	movs	r3, #0
 8007290:	69fa      	ldr	r2, [r7, #28]
 8007292:	f002 0203 	and.w	r2, r2, #3
 8007296:	0092      	lsls	r2, r2, #2
 8007298:	4093      	lsls	r3, r2
 800729a:	69ba      	ldr	r2, [r7, #24]
 800729c:	4313      	orrs	r3, r2
 800729e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80072a0:	4935      	ldr	r1, [pc, #212]	@ (8007378 <HAL_GPIO_Init+0x2ec>)
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	089b      	lsrs	r3, r3, #2
 80072a6:	3302      	adds	r3, #2
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80072ae:	4b38      	ldr	r3, [pc, #224]	@ (8007390 <HAL_GPIO_Init+0x304>)
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	43db      	mvns	r3, r3
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	4013      	ands	r3, r2
 80072bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80072ca:	69ba      	ldr	r2, [r7, #24]
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80072d2:	4a2f      	ldr	r2, [pc, #188]	@ (8007390 <HAL_GPIO_Init+0x304>)
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80072d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007390 <HAL_GPIO_Init+0x304>)
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	43db      	mvns	r3, r3
 80072e2:	69ba      	ldr	r2, [r7, #24]
 80072e4:	4013      	ands	r3, r2
 80072e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80072fc:	4a24      	ldr	r2, [pc, #144]	@ (8007390 <HAL_GPIO_Init+0x304>)
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007302:	4b23      	ldr	r3, [pc, #140]	@ (8007390 <HAL_GPIO_Init+0x304>)
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	43db      	mvns	r3, r3
 800730c:	69ba      	ldr	r2, [r7, #24]
 800730e:	4013      	ands	r3, r2
 8007310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	4313      	orrs	r3, r2
 8007324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007326:	4a1a      	ldr	r2, [pc, #104]	@ (8007390 <HAL_GPIO_Init+0x304>)
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800732c:	4b18      	ldr	r3, [pc, #96]	@ (8007390 <HAL_GPIO_Init+0x304>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	43db      	mvns	r3, r3
 8007336:	69ba      	ldr	r2, [r7, #24]
 8007338:	4013      	ands	r3, r2
 800733a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007348:	69ba      	ldr	r2, [r7, #24]
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	4313      	orrs	r3, r2
 800734e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007350:	4a0f      	ldr	r2, [pc, #60]	@ (8007390 <HAL_GPIO_Init+0x304>)
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	3301      	adds	r3, #1
 800735a:	61fb      	str	r3, [r7, #28]
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	2b0f      	cmp	r3, #15
 8007360:	f67f aea2 	bls.w	80070a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007364:	bf00      	nop
 8007366:	bf00      	nop
 8007368:	3724      	adds	r7, #36	@ 0x24
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	40023800 	.word	0x40023800
 8007378:	40013800 	.word	0x40013800
 800737c:	40020000 	.word	0x40020000
 8007380:	40020400 	.word	0x40020400
 8007384:	40020800 	.word	0x40020800
 8007388:	40020c00 	.word	0x40020c00
 800738c:	40021000 	.word	0x40021000
 8007390:	40013c00 	.word	0x40013c00

08007394 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e267      	b.n	8007876 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d075      	beq.n	800749e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80073b2:	4b88      	ldr	r3, [pc, #544]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f003 030c 	and.w	r3, r3, #12
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	d00c      	beq.n	80073d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073be:	4b85      	ldr	r3, [pc, #532]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80073c6:	2b08      	cmp	r3, #8
 80073c8:	d112      	bne.n	80073f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073ca:	4b82      	ldr	r3, [pc, #520]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073d6:	d10b      	bne.n	80073f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073d8:	4b7e      	ldr	r3, [pc, #504]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d05b      	beq.n	800749c <HAL_RCC_OscConfig+0x108>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d157      	bne.n	800749c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e242      	b.n	8007876 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073f8:	d106      	bne.n	8007408 <HAL_RCC_OscConfig+0x74>
 80073fa:	4b76      	ldr	r3, [pc, #472]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a75      	ldr	r2, [pc, #468]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 8007400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007404:	6013      	str	r3, [r2, #0]
 8007406:	e01d      	b.n	8007444 <HAL_RCC_OscConfig+0xb0>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007410:	d10c      	bne.n	800742c <HAL_RCC_OscConfig+0x98>
 8007412:	4b70      	ldr	r3, [pc, #448]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a6f      	ldr	r2, [pc, #444]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 8007418:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800741c:	6013      	str	r3, [r2, #0]
 800741e:	4b6d      	ldr	r3, [pc, #436]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a6c      	ldr	r2, [pc, #432]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 8007424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007428:	6013      	str	r3, [r2, #0]
 800742a:	e00b      	b.n	8007444 <HAL_RCC_OscConfig+0xb0>
 800742c:	4b69      	ldr	r3, [pc, #420]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a68      	ldr	r2, [pc, #416]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 8007432:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007436:	6013      	str	r3, [r2, #0]
 8007438:	4b66      	ldr	r3, [pc, #408]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a65      	ldr	r2, [pc, #404]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 800743e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d013      	beq.n	8007474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800744c:	f7ff fc52 	bl	8006cf4 <HAL_GetTick>
 8007450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007452:	e008      	b.n	8007466 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007454:	f7ff fc4e 	bl	8006cf4 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	2b64      	cmp	r3, #100	@ 0x64
 8007460:	d901      	bls.n	8007466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e207      	b.n	8007876 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007466:	4b5b      	ldr	r3, [pc, #364]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d0f0      	beq.n	8007454 <HAL_RCC_OscConfig+0xc0>
 8007472:	e014      	b.n	800749e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007474:	f7ff fc3e 	bl	8006cf4 <HAL_GetTick>
 8007478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800747a:	e008      	b.n	800748e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800747c:	f7ff fc3a 	bl	8006cf4 <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b64      	cmp	r3, #100	@ 0x64
 8007488:	d901      	bls.n	800748e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e1f3      	b.n	8007876 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800748e:	4b51      	ldr	r3, [pc, #324]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1f0      	bne.n	800747c <HAL_RCC_OscConfig+0xe8>
 800749a:	e000      	b.n	800749e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800749c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0302 	and.w	r3, r3, #2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d063      	beq.n	8007572 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80074aa:	4b4a      	ldr	r3, [pc, #296]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f003 030c 	and.w	r3, r3, #12
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00b      	beq.n	80074ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074b6:	4b47      	ldr	r3, [pc, #284]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80074be:	2b08      	cmp	r3, #8
 80074c0:	d11c      	bne.n	80074fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074c2:	4b44      	ldr	r3, [pc, #272]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d116      	bne.n	80074fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074ce:	4b41      	ldr	r3, [pc, #260]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d005      	beq.n	80074e6 <HAL_RCC_OscConfig+0x152>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d001      	beq.n	80074e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e1c7      	b.n	8007876 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074e6:	4b3b      	ldr	r3, [pc, #236]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	00db      	lsls	r3, r3, #3
 80074f4:	4937      	ldr	r1, [pc, #220]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074fa:	e03a      	b.n	8007572 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d020      	beq.n	8007546 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007504:	4b34      	ldr	r3, [pc, #208]	@ (80075d8 <HAL_RCC_OscConfig+0x244>)
 8007506:	2201      	movs	r2, #1
 8007508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800750a:	f7ff fbf3 	bl	8006cf4 <HAL_GetTick>
 800750e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007510:	e008      	b.n	8007524 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007512:	f7ff fbef 	bl	8006cf4 <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	2b02      	cmp	r3, #2
 800751e:	d901      	bls.n	8007524 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	e1a8      	b.n	8007876 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007524:	4b2b      	ldr	r3, [pc, #172]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0302 	and.w	r3, r3, #2
 800752c:	2b00      	cmp	r3, #0
 800752e:	d0f0      	beq.n	8007512 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007530:	4b28      	ldr	r3, [pc, #160]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	4925      	ldr	r1, [pc, #148]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 8007540:	4313      	orrs	r3, r2
 8007542:	600b      	str	r3, [r1, #0]
 8007544:	e015      	b.n	8007572 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007546:	4b24      	ldr	r3, [pc, #144]	@ (80075d8 <HAL_RCC_OscConfig+0x244>)
 8007548:	2200      	movs	r2, #0
 800754a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800754c:	f7ff fbd2 	bl	8006cf4 <HAL_GetTick>
 8007550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007552:	e008      	b.n	8007566 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007554:	f7ff fbce 	bl	8006cf4 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	2b02      	cmp	r3, #2
 8007560:	d901      	bls.n	8007566 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e187      	b.n	8007876 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007566:	4b1b      	ldr	r3, [pc, #108]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0302 	and.w	r3, r3, #2
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1f0      	bne.n	8007554 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0308 	and.w	r3, r3, #8
 800757a:	2b00      	cmp	r3, #0
 800757c:	d036      	beq.n	80075ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d016      	beq.n	80075b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007586:	4b15      	ldr	r3, [pc, #84]	@ (80075dc <HAL_RCC_OscConfig+0x248>)
 8007588:	2201      	movs	r2, #1
 800758a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800758c:	f7ff fbb2 	bl	8006cf4 <HAL_GetTick>
 8007590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007592:	e008      	b.n	80075a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007594:	f7ff fbae 	bl	8006cf4 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d901      	bls.n	80075a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e167      	b.n	8007876 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075a6:	4b0b      	ldr	r3, [pc, #44]	@ (80075d4 <HAL_RCC_OscConfig+0x240>)
 80075a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d0f0      	beq.n	8007594 <HAL_RCC_OscConfig+0x200>
 80075b2:	e01b      	b.n	80075ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075b4:	4b09      	ldr	r3, [pc, #36]	@ (80075dc <HAL_RCC_OscConfig+0x248>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075ba:	f7ff fb9b 	bl	8006cf4 <HAL_GetTick>
 80075be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075c0:	e00e      	b.n	80075e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075c2:	f7ff fb97 	bl	8006cf4 <HAL_GetTick>
 80075c6:	4602      	mov	r2, r0
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d907      	bls.n	80075e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e150      	b.n	8007876 <HAL_RCC_OscConfig+0x4e2>
 80075d4:	40023800 	.word	0x40023800
 80075d8:	42470000 	.word	0x42470000
 80075dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075e0:	4b88      	ldr	r3, [pc, #544]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 80075e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075e4:	f003 0302 	and.w	r3, r3, #2
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1ea      	bne.n	80075c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 8097 	beq.w	8007728 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075fa:	2300      	movs	r3, #0
 80075fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075fe:	4b81      	ldr	r3, [pc, #516]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 8007600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10f      	bne.n	800762a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800760a:	2300      	movs	r3, #0
 800760c:	60bb      	str	r3, [r7, #8]
 800760e:	4b7d      	ldr	r3, [pc, #500]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 8007610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007612:	4a7c      	ldr	r2, [pc, #496]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 8007614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007618:	6413      	str	r3, [r2, #64]	@ 0x40
 800761a:	4b7a      	ldr	r3, [pc, #488]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 800761c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007622:	60bb      	str	r3, [r7, #8]
 8007624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007626:	2301      	movs	r3, #1
 8007628:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800762a:	4b77      	ldr	r3, [pc, #476]	@ (8007808 <HAL_RCC_OscConfig+0x474>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007632:	2b00      	cmp	r3, #0
 8007634:	d118      	bne.n	8007668 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007636:	4b74      	ldr	r3, [pc, #464]	@ (8007808 <HAL_RCC_OscConfig+0x474>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a73      	ldr	r2, [pc, #460]	@ (8007808 <HAL_RCC_OscConfig+0x474>)
 800763c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007642:	f7ff fb57 	bl	8006cf4 <HAL_GetTick>
 8007646:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007648:	e008      	b.n	800765c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800764a:	f7ff fb53 	bl	8006cf4 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	2b02      	cmp	r3, #2
 8007656:	d901      	bls.n	800765c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e10c      	b.n	8007876 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800765c:	4b6a      	ldr	r3, [pc, #424]	@ (8007808 <HAL_RCC_OscConfig+0x474>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007664:	2b00      	cmp	r3, #0
 8007666:	d0f0      	beq.n	800764a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d106      	bne.n	800767e <HAL_RCC_OscConfig+0x2ea>
 8007670:	4b64      	ldr	r3, [pc, #400]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 8007672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007674:	4a63      	ldr	r2, [pc, #396]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 8007676:	f043 0301 	orr.w	r3, r3, #1
 800767a:	6713      	str	r3, [r2, #112]	@ 0x70
 800767c:	e01c      	b.n	80076b8 <HAL_RCC_OscConfig+0x324>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	2b05      	cmp	r3, #5
 8007684:	d10c      	bne.n	80076a0 <HAL_RCC_OscConfig+0x30c>
 8007686:	4b5f      	ldr	r3, [pc, #380]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 8007688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800768a:	4a5e      	ldr	r2, [pc, #376]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 800768c:	f043 0304 	orr.w	r3, r3, #4
 8007690:	6713      	str	r3, [r2, #112]	@ 0x70
 8007692:	4b5c      	ldr	r3, [pc, #368]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 8007694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007696:	4a5b      	ldr	r2, [pc, #364]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 8007698:	f043 0301 	orr.w	r3, r3, #1
 800769c:	6713      	str	r3, [r2, #112]	@ 0x70
 800769e:	e00b      	b.n	80076b8 <HAL_RCC_OscConfig+0x324>
 80076a0:	4b58      	ldr	r3, [pc, #352]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 80076a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076a4:	4a57      	ldr	r2, [pc, #348]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 80076a6:	f023 0301 	bic.w	r3, r3, #1
 80076aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80076ac:	4b55      	ldr	r3, [pc, #340]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 80076ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076b0:	4a54      	ldr	r2, [pc, #336]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 80076b2:	f023 0304 	bic.w	r3, r3, #4
 80076b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d015      	beq.n	80076ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076c0:	f7ff fb18 	bl	8006cf4 <HAL_GetTick>
 80076c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076c6:	e00a      	b.n	80076de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076c8:	f7ff fb14 	bl	8006cf4 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d901      	bls.n	80076de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e0cb      	b.n	8007876 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076de:	4b49      	ldr	r3, [pc, #292]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 80076e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d0ee      	beq.n	80076c8 <HAL_RCC_OscConfig+0x334>
 80076ea:	e014      	b.n	8007716 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076ec:	f7ff fb02 	bl	8006cf4 <HAL_GetTick>
 80076f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076f2:	e00a      	b.n	800770a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076f4:	f7ff fafe 	bl	8006cf4 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007702:	4293      	cmp	r3, r2
 8007704:	d901      	bls.n	800770a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e0b5      	b.n	8007876 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800770a:	4b3e      	ldr	r3, [pc, #248]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 800770c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1ee      	bne.n	80076f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d105      	bne.n	8007728 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800771c:	4b39      	ldr	r3, [pc, #228]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 800771e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007720:	4a38      	ldr	r2, [pc, #224]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 8007722:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007726:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 80a1 	beq.w	8007874 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007732:	4b34      	ldr	r3, [pc, #208]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f003 030c 	and.w	r3, r3, #12
 800773a:	2b08      	cmp	r3, #8
 800773c:	d05c      	beq.n	80077f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	2b02      	cmp	r3, #2
 8007744:	d141      	bne.n	80077ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007746:	4b31      	ldr	r3, [pc, #196]	@ (800780c <HAL_RCC_OscConfig+0x478>)
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800774c:	f7ff fad2 	bl	8006cf4 <HAL_GetTick>
 8007750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007752:	e008      	b.n	8007766 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007754:	f7ff face 	bl	8006cf4 <HAL_GetTick>
 8007758:	4602      	mov	r2, r0
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	2b02      	cmp	r3, #2
 8007760:	d901      	bls.n	8007766 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007762:	2303      	movs	r3, #3
 8007764:	e087      	b.n	8007876 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007766:	4b27      	ldr	r3, [pc, #156]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1f0      	bne.n	8007754 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	69da      	ldr	r2, [r3, #28]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	431a      	orrs	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007780:	019b      	lsls	r3, r3, #6
 8007782:	431a      	orrs	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007788:	085b      	lsrs	r3, r3, #1
 800778a:	3b01      	subs	r3, #1
 800778c:	041b      	lsls	r3, r3, #16
 800778e:	431a      	orrs	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007794:	061b      	lsls	r3, r3, #24
 8007796:	491b      	ldr	r1, [pc, #108]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 8007798:	4313      	orrs	r3, r2
 800779a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800779c:	4b1b      	ldr	r3, [pc, #108]	@ (800780c <HAL_RCC_OscConfig+0x478>)
 800779e:	2201      	movs	r2, #1
 80077a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077a2:	f7ff faa7 	bl	8006cf4 <HAL_GetTick>
 80077a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077a8:	e008      	b.n	80077bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077aa:	f7ff faa3 	bl	8006cf4 <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d901      	bls.n	80077bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e05c      	b.n	8007876 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077bc:	4b11      	ldr	r3, [pc, #68]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d0f0      	beq.n	80077aa <HAL_RCC_OscConfig+0x416>
 80077c8:	e054      	b.n	8007874 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077ca:	4b10      	ldr	r3, [pc, #64]	@ (800780c <HAL_RCC_OscConfig+0x478>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077d0:	f7ff fa90 	bl	8006cf4 <HAL_GetTick>
 80077d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077d6:	e008      	b.n	80077ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077d8:	f7ff fa8c 	bl	8006cf4 <HAL_GetTick>
 80077dc:	4602      	mov	r2, r0
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d901      	bls.n	80077ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e045      	b.n	8007876 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077ea:	4b06      	ldr	r3, [pc, #24]	@ (8007804 <HAL_RCC_OscConfig+0x470>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1f0      	bne.n	80077d8 <HAL_RCC_OscConfig+0x444>
 80077f6:	e03d      	b.n	8007874 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d107      	bne.n	8007810 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e038      	b.n	8007876 <HAL_RCC_OscConfig+0x4e2>
 8007804:	40023800 	.word	0x40023800
 8007808:	40007000 	.word	0x40007000
 800780c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007810:	4b1b      	ldr	r3, [pc, #108]	@ (8007880 <HAL_RCC_OscConfig+0x4ec>)
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	2b01      	cmp	r3, #1
 800781c:	d028      	beq.n	8007870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007828:	429a      	cmp	r2, r3
 800782a:	d121      	bne.n	8007870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007836:	429a      	cmp	r2, r3
 8007838:	d11a      	bne.n	8007870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007840:	4013      	ands	r3, r2
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007846:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007848:	4293      	cmp	r3, r2
 800784a:	d111      	bne.n	8007870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007856:	085b      	lsrs	r3, r3, #1
 8007858:	3b01      	subs	r3, #1
 800785a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800785c:	429a      	cmp	r2, r3
 800785e:	d107      	bne.n	8007870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800786c:	429a      	cmp	r2, r3
 800786e:	d001      	beq.n	8007874 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e000      	b.n	8007876 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3718      	adds	r7, #24
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	40023800 	.word	0x40023800

08007884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e0cc      	b.n	8007a32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007898:	4b68      	ldr	r3, [pc, #416]	@ (8007a3c <HAL_RCC_ClockConfig+0x1b8>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0307 	and.w	r3, r3, #7
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d90c      	bls.n	80078c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078a6:	4b65      	ldr	r3, [pc, #404]	@ (8007a3c <HAL_RCC_ClockConfig+0x1b8>)
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	b2d2      	uxtb	r2, r2
 80078ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ae:	4b63      	ldr	r3, [pc, #396]	@ (8007a3c <HAL_RCC_ClockConfig+0x1b8>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 0307 	and.w	r3, r3, #7
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d001      	beq.n	80078c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e0b8      	b.n	8007a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d020      	beq.n	800790e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0304 	and.w	r3, r3, #4
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d005      	beq.n	80078e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078d8:	4b59      	ldr	r3, [pc, #356]	@ (8007a40 <HAL_RCC_ClockConfig+0x1bc>)
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	4a58      	ldr	r2, [pc, #352]	@ (8007a40 <HAL_RCC_ClockConfig+0x1bc>)
 80078de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80078e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0308 	and.w	r3, r3, #8
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d005      	beq.n	80078fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078f0:	4b53      	ldr	r3, [pc, #332]	@ (8007a40 <HAL_RCC_ClockConfig+0x1bc>)
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	4a52      	ldr	r2, [pc, #328]	@ (8007a40 <HAL_RCC_ClockConfig+0x1bc>)
 80078f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80078fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078fc:	4b50      	ldr	r3, [pc, #320]	@ (8007a40 <HAL_RCC_ClockConfig+0x1bc>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	494d      	ldr	r1, [pc, #308]	@ (8007a40 <HAL_RCC_ClockConfig+0x1bc>)
 800790a:	4313      	orrs	r3, r2
 800790c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	2b00      	cmp	r3, #0
 8007918:	d044      	beq.n	80079a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d107      	bne.n	8007932 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007922:	4b47      	ldr	r3, [pc, #284]	@ (8007a40 <HAL_RCC_ClockConfig+0x1bc>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d119      	bne.n	8007962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e07f      	b.n	8007a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	2b02      	cmp	r3, #2
 8007938:	d003      	beq.n	8007942 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800793e:	2b03      	cmp	r3, #3
 8007940:	d107      	bne.n	8007952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007942:	4b3f      	ldr	r3, [pc, #252]	@ (8007a40 <HAL_RCC_ClockConfig+0x1bc>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d109      	bne.n	8007962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e06f      	b.n	8007a32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007952:	4b3b      	ldr	r3, [pc, #236]	@ (8007a40 <HAL_RCC_ClockConfig+0x1bc>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0302 	and.w	r3, r3, #2
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e067      	b.n	8007a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007962:	4b37      	ldr	r3, [pc, #220]	@ (8007a40 <HAL_RCC_ClockConfig+0x1bc>)
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f023 0203 	bic.w	r2, r3, #3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	4934      	ldr	r1, [pc, #208]	@ (8007a40 <HAL_RCC_ClockConfig+0x1bc>)
 8007970:	4313      	orrs	r3, r2
 8007972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007974:	f7ff f9be 	bl	8006cf4 <HAL_GetTick>
 8007978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800797a:	e00a      	b.n	8007992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800797c:	f7ff f9ba 	bl	8006cf4 <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800798a:	4293      	cmp	r3, r2
 800798c:	d901      	bls.n	8007992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e04f      	b.n	8007a32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007992:	4b2b      	ldr	r3, [pc, #172]	@ (8007a40 <HAL_RCC_ClockConfig+0x1bc>)
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f003 020c 	and.w	r2, r3, #12
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d1eb      	bne.n	800797c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80079a4:	4b25      	ldr	r3, [pc, #148]	@ (8007a3c <HAL_RCC_ClockConfig+0x1b8>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0307 	and.w	r3, r3, #7
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d20c      	bcs.n	80079cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079b2:	4b22      	ldr	r3, [pc, #136]	@ (8007a3c <HAL_RCC_ClockConfig+0x1b8>)
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	b2d2      	uxtb	r2, r2
 80079b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079ba:	4b20      	ldr	r3, [pc, #128]	@ (8007a3c <HAL_RCC_ClockConfig+0x1b8>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0307 	and.w	r3, r3, #7
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d001      	beq.n	80079cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e032      	b.n	8007a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0304 	and.w	r3, r3, #4
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d008      	beq.n	80079ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079d8:	4b19      	ldr	r3, [pc, #100]	@ (8007a40 <HAL_RCC_ClockConfig+0x1bc>)
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	4916      	ldr	r1, [pc, #88]	@ (8007a40 <HAL_RCC_ClockConfig+0x1bc>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0308 	and.w	r3, r3, #8
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d009      	beq.n	8007a0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079f6:	4b12      	ldr	r3, [pc, #72]	@ (8007a40 <HAL_RCC_ClockConfig+0x1bc>)
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	00db      	lsls	r3, r3, #3
 8007a04:	490e      	ldr	r1, [pc, #56]	@ (8007a40 <HAL_RCC_ClockConfig+0x1bc>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007a0a:	f000 f821 	bl	8007a50 <HAL_RCC_GetSysClockFreq>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	4b0b      	ldr	r3, [pc, #44]	@ (8007a40 <HAL_RCC_ClockConfig+0x1bc>)
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	091b      	lsrs	r3, r3, #4
 8007a16:	f003 030f 	and.w	r3, r3, #15
 8007a1a:	490a      	ldr	r1, [pc, #40]	@ (8007a44 <HAL_RCC_ClockConfig+0x1c0>)
 8007a1c:	5ccb      	ldrb	r3, [r1, r3]
 8007a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a22:	4a09      	ldr	r2, [pc, #36]	@ (8007a48 <HAL_RCC_ClockConfig+0x1c4>)
 8007a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007a26:	4b09      	ldr	r3, [pc, #36]	@ (8007a4c <HAL_RCC_ClockConfig+0x1c8>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7ff f91e 	bl	8006c6c <HAL_InitTick>

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	40023c00 	.word	0x40023c00
 8007a40:	40023800 	.word	0x40023800
 8007a44:	0800ad10 	.word	0x0800ad10
 8007a48:	20000000 	.word	0x20000000
 8007a4c:	20000004 	.word	0x20000004

08007a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a54:	b090      	sub	sp, #64	@ 0x40
 8007a56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a68:	4b59      	ldr	r3, [pc, #356]	@ (8007bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f003 030c 	and.w	r3, r3, #12
 8007a70:	2b08      	cmp	r3, #8
 8007a72:	d00d      	beq.n	8007a90 <HAL_RCC_GetSysClockFreq+0x40>
 8007a74:	2b08      	cmp	r3, #8
 8007a76:	f200 80a1 	bhi.w	8007bbc <HAL_RCC_GetSysClockFreq+0x16c>
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d002      	beq.n	8007a84 <HAL_RCC_GetSysClockFreq+0x34>
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	d003      	beq.n	8007a8a <HAL_RCC_GetSysClockFreq+0x3a>
 8007a82:	e09b      	b.n	8007bbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a84:	4b53      	ldr	r3, [pc, #332]	@ (8007bd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007a86:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007a88:	e09b      	b.n	8007bc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a8a:	4b53      	ldr	r3, [pc, #332]	@ (8007bd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007a8e:	e098      	b.n	8007bc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a90:	4b4f      	ldr	r3, [pc, #316]	@ (8007bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a98:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a9a:	4b4d      	ldr	r3, [pc, #308]	@ (8007bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d028      	beq.n	8007af8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007aa6:	4b4a      	ldr	r3, [pc, #296]	@ (8007bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	099b      	lsrs	r3, r3, #6
 8007aac:	2200      	movs	r2, #0
 8007aae:	623b      	str	r3, [r7, #32]
 8007ab0:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007ab8:	2100      	movs	r1, #0
 8007aba:	4b47      	ldr	r3, [pc, #284]	@ (8007bd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007abc:	fb03 f201 	mul.w	r2, r3, r1
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	fb00 f303 	mul.w	r3, r0, r3
 8007ac6:	4413      	add	r3, r2
 8007ac8:	4a43      	ldr	r2, [pc, #268]	@ (8007bd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007aca:	fba0 1202 	umull	r1, r2, r0, r2
 8007ace:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ad0:	460a      	mov	r2, r1
 8007ad2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007ad4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ad6:	4413      	add	r3, r2
 8007ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007adc:	2200      	movs	r2, #0
 8007ade:	61bb      	str	r3, [r7, #24]
 8007ae0:	61fa      	str	r2, [r7, #28]
 8007ae2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ae6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007aea:	f7fd fef9 	bl	80058e0 <__aeabi_uldivmod>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	4613      	mov	r3, r2
 8007af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007af6:	e053      	b.n	8007ba0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007af8:	4b35      	ldr	r3, [pc, #212]	@ (8007bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	099b      	lsrs	r3, r3, #6
 8007afe:	2200      	movs	r2, #0
 8007b00:	613b      	str	r3, [r7, #16]
 8007b02:	617a      	str	r2, [r7, #20]
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007b0a:	f04f 0b00 	mov.w	fp, #0
 8007b0e:	4652      	mov	r2, sl
 8007b10:	465b      	mov	r3, fp
 8007b12:	f04f 0000 	mov.w	r0, #0
 8007b16:	f04f 0100 	mov.w	r1, #0
 8007b1a:	0159      	lsls	r1, r3, #5
 8007b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b20:	0150      	lsls	r0, r2, #5
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	ebb2 080a 	subs.w	r8, r2, sl
 8007b2a:	eb63 090b 	sbc.w	r9, r3, fp
 8007b2e:	f04f 0200 	mov.w	r2, #0
 8007b32:	f04f 0300 	mov.w	r3, #0
 8007b36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007b3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007b3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007b42:	ebb2 0408 	subs.w	r4, r2, r8
 8007b46:	eb63 0509 	sbc.w	r5, r3, r9
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	f04f 0300 	mov.w	r3, #0
 8007b52:	00eb      	lsls	r3, r5, #3
 8007b54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b58:	00e2      	lsls	r2, r4, #3
 8007b5a:	4614      	mov	r4, r2
 8007b5c:	461d      	mov	r5, r3
 8007b5e:	eb14 030a 	adds.w	r3, r4, sl
 8007b62:	603b      	str	r3, [r7, #0]
 8007b64:	eb45 030b 	adc.w	r3, r5, fp
 8007b68:	607b      	str	r3, [r7, #4]
 8007b6a:	f04f 0200 	mov.w	r2, #0
 8007b6e:	f04f 0300 	mov.w	r3, #0
 8007b72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b76:	4629      	mov	r1, r5
 8007b78:	028b      	lsls	r3, r1, #10
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b80:	4621      	mov	r1, r4
 8007b82:	028a      	lsls	r2, r1, #10
 8007b84:	4610      	mov	r0, r2
 8007b86:	4619      	mov	r1, r3
 8007b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	60bb      	str	r3, [r7, #8]
 8007b8e:	60fa      	str	r2, [r7, #12]
 8007b90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b94:	f7fd fea4 	bl	80058e0 <__aeabi_uldivmod>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8007bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	0c1b      	lsrs	r3, r3, #16
 8007ba6:	f003 0303 	and.w	r3, r3, #3
 8007baa:	3301      	adds	r3, #1
 8007bac:	005b      	lsls	r3, r3, #1
 8007bae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007bb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007bba:	e002      	b.n	8007bc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007bbc:	4b05      	ldr	r3, [pc, #20]	@ (8007bd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3740      	adds	r7, #64	@ 0x40
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bce:	bf00      	nop
 8007bd0:	40023800 	.word	0x40023800
 8007bd4:	00f42400 	.word	0x00f42400
 8007bd8:	017d7840 	.word	0x017d7840

08007bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007be0:	4b03      	ldr	r3, [pc, #12]	@ (8007bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007be2:	681b      	ldr	r3, [r3, #0]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	20000000 	.word	0x20000000

08007bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007bf8:	f7ff fff0 	bl	8007bdc <HAL_RCC_GetHCLKFreq>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	4b05      	ldr	r3, [pc, #20]	@ (8007c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	0a9b      	lsrs	r3, r3, #10
 8007c04:	f003 0307 	and.w	r3, r3, #7
 8007c08:	4903      	ldr	r1, [pc, #12]	@ (8007c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c0a:	5ccb      	ldrb	r3, [r1, r3]
 8007c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	40023800 	.word	0x40023800
 8007c18:	0800ad20 	.word	0x0800ad20

08007c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007c20:	f7ff ffdc 	bl	8007bdc <HAL_RCC_GetHCLKFreq>
 8007c24:	4602      	mov	r2, r0
 8007c26:	4b05      	ldr	r3, [pc, #20]	@ (8007c3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	0b5b      	lsrs	r3, r3, #13
 8007c2c:	f003 0307 	and.w	r3, r3, #7
 8007c30:	4903      	ldr	r1, [pc, #12]	@ (8007c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c32:	5ccb      	ldrb	r3, [r1, r3]
 8007c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	40023800 	.word	0x40023800
 8007c40:	0800ad20 	.word	0x0800ad20

08007c44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e042      	b.n	8007cdc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d106      	bne.n	8007c70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7fe fe5e 	bl	800692c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2224      	movs	r2, #36	@ 0x24
 8007c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007c86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fd69 	bl	8008760 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	691a      	ldr	r2, [r3, #16]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007c9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	695a      	ldr	r2, [r3, #20]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007cac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68da      	ldr	r2, [r3, #12]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007cbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b08a      	sub	sp, #40	@ 0x28
 8007ce8:	af02      	add	r7, sp, #8
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	603b      	str	r3, [r7, #0]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b20      	cmp	r3, #32
 8007d02:	d175      	bne.n	8007df0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d002      	beq.n	8007d10 <HAL_UART_Transmit+0x2c>
 8007d0a:	88fb      	ldrh	r3, [r7, #6]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e06e      	b.n	8007df2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2221      	movs	r2, #33	@ 0x21
 8007d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d22:	f7fe ffe7 	bl	8006cf4 <HAL_GetTick>
 8007d26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	88fa      	ldrh	r2, [r7, #6]
 8007d2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	88fa      	ldrh	r2, [r7, #6]
 8007d32:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d3c:	d108      	bne.n	8007d50 <HAL_UART_Transmit+0x6c>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d104      	bne.n	8007d50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007d46:	2300      	movs	r3, #0
 8007d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	61bb      	str	r3, [r7, #24]
 8007d4e:	e003      	b.n	8007d58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d54:	2300      	movs	r3, #0
 8007d56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007d58:	e02e      	b.n	8007db8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	2200      	movs	r2, #0
 8007d62:	2180      	movs	r1, #128	@ 0x80
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f000 fb05 	bl	8008374 <UART_WaitOnFlagUntilTimeout>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d005      	beq.n	8007d7c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2220      	movs	r2, #32
 8007d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e03a      	b.n	8007df2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10b      	bne.n	8007d9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	3302      	adds	r3, #2
 8007d96:	61bb      	str	r3, [r7, #24]
 8007d98:	e007      	b.n	8007daa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	781a      	ldrb	r2, [r3, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	3301      	adds	r3, #1
 8007da8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	3b01      	subs	r3, #1
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1cb      	bne.n	8007d5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	2140      	movs	r1, #64	@ 0x40
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 fad1 	bl	8008374 <UART_WaitOnFlagUntilTimeout>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d005      	beq.n	8007de4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e006      	b.n	8007df2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2220      	movs	r2, #32
 8007de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	e000      	b.n	8007df2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007df0:	2302      	movs	r3, #2
  }
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3720      	adds	r7, #32
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
	...

08007dfc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b0ba      	sub	sp, #232	@ 0xe8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007e22:	2300      	movs	r3, #0
 8007e24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e32:	f003 030f 	and.w	r3, r3, #15
 8007e36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10f      	bne.n	8007e62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e46:	f003 0320 	and.w	r3, r3, #32
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d009      	beq.n	8007e62 <HAL_UART_IRQHandler+0x66>
 8007e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e52:	f003 0320 	and.w	r3, r3, #32
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fbc2 	bl	80085e4 <UART_Receive_IT>
      return;
 8007e60:	e25b      	b.n	800831a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f000 80de 	beq.w	8008028 <HAL_UART_IRQHandler+0x22c>
 8007e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d106      	bne.n	8007e86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e7c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 80d1 	beq.w	8008028 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00b      	beq.n	8007eaa <HAL_UART_IRQHandler+0xae>
 8007e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d005      	beq.n	8007eaa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ea2:	f043 0201 	orr.w	r2, r3, #1
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eae:	f003 0304 	and.w	r3, r3, #4
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00b      	beq.n	8007ece <HAL_UART_IRQHandler+0xd2>
 8007eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d005      	beq.n	8007ece <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ec6:	f043 0202 	orr.w	r2, r3, #2
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ed2:	f003 0302 	and.w	r3, r3, #2
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00b      	beq.n	8007ef2 <HAL_UART_IRQHandler+0xf6>
 8007eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d005      	beq.n	8007ef2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eea:	f043 0204 	orr.w	r2, r3, #4
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ef6:	f003 0308 	and.w	r3, r3, #8
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d011      	beq.n	8007f22 <HAL_UART_IRQHandler+0x126>
 8007efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f02:	f003 0320 	and.w	r3, r3, #32
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d105      	bne.n	8007f16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d005      	beq.n	8007f22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f1a:	f043 0208 	orr.w	r2, r3, #8
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 81f2 	beq.w	8008310 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f30:	f003 0320 	and.w	r3, r3, #32
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d008      	beq.n	8007f4a <HAL_UART_IRQHandler+0x14e>
 8007f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f3c:	f003 0320 	and.w	r3, r3, #32
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d002      	beq.n	8007f4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fb4d 	bl	80085e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f54:	2b40      	cmp	r3, #64	@ 0x40
 8007f56:	bf0c      	ite	eq
 8007f58:	2301      	moveq	r3, #1
 8007f5a:	2300      	movne	r3, #0
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f66:	f003 0308 	and.w	r3, r3, #8
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d103      	bne.n	8007f76 <HAL_UART_IRQHandler+0x17a>
 8007f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d04f      	beq.n	8008016 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fa55 	bl	8008426 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f86:	2b40      	cmp	r3, #64	@ 0x40
 8007f88:	d141      	bne.n	800800e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3314      	adds	r3, #20
 8007f90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f98:	e853 3f00 	ldrex	r3, [r3]
 8007f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3314      	adds	r3, #20
 8007fb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007fb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007fba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007fc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007fc6:	e841 2300 	strex	r3, r2, [r1]
 8007fca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1d9      	bne.n	8007f8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d013      	beq.n	8008006 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fe2:	4a7e      	ldr	r2, [pc, #504]	@ (80081dc <HAL_UART_IRQHandler+0x3e0>)
 8007fe4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7ff f82b 	bl	8007046 <HAL_DMA_Abort_IT>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d016      	beq.n	8008024 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008000:	4610      	mov	r0, r2
 8008002:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008004:	e00e      	b.n	8008024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f99e 	bl	8008348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800c:	e00a      	b.n	8008024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f99a 	bl	8008348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008014:	e006      	b.n	8008024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f996 	bl	8008348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008022:	e175      	b.n	8008310 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008024:	bf00      	nop
    return;
 8008026:	e173      	b.n	8008310 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800802c:	2b01      	cmp	r3, #1
 800802e:	f040 814f 	bne.w	80082d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008036:	f003 0310 	and.w	r3, r3, #16
 800803a:	2b00      	cmp	r3, #0
 800803c:	f000 8148 	beq.w	80082d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008044:	f003 0310 	and.w	r3, r3, #16
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 8141 	beq.w	80082d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800804e:	2300      	movs	r3, #0
 8008050:	60bb      	str	r3, [r7, #8]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	60bb      	str	r3, [r7, #8]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	60bb      	str	r3, [r7, #8]
 8008062:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800806e:	2b40      	cmp	r3, #64	@ 0x40
 8008070:	f040 80b6 	bne.w	80081e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008080:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 8145 	beq.w	8008314 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800808e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008092:	429a      	cmp	r2, r3
 8008094:	f080 813e 	bcs.w	8008314 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800809e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080aa:	f000 8088 	beq.w	80081be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	330c      	adds	r3, #12
 80080b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80080bc:	e853 3f00 	ldrex	r3, [r3]
 80080c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80080c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80080c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	330c      	adds	r3, #12
 80080d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80080da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80080de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80080e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80080ea:	e841 2300 	strex	r3, r2, [r1]
 80080ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80080f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1d9      	bne.n	80080ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3314      	adds	r3, #20
 8008100:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008102:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008104:	e853 3f00 	ldrex	r3, [r3]
 8008108:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800810a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800810c:	f023 0301 	bic.w	r3, r3, #1
 8008110:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	3314      	adds	r3, #20
 800811a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800811e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008122:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008124:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008126:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800812a:	e841 2300 	strex	r3, r2, [r1]
 800812e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008130:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1e1      	bne.n	80080fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3314      	adds	r3, #20
 800813c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008140:	e853 3f00 	ldrex	r3, [r3]
 8008144:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800814c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	3314      	adds	r3, #20
 8008156:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800815a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800815c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008160:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008162:	e841 2300 	strex	r3, r2, [r1]
 8008166:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1e3      	bne.n	8008136 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2220      	movs	r2, #32
 8008172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	330c      	adds	r3, #12
 8008182:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008184:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008186:	e853 3f00 	ldrex	r3, [r3]
 800818a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800818c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800818e:	f023 0310 	bic.w	r3, r3, #16
 8008192:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	330c      	adds	r3, #12
 800819c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80081a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80081a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80081a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081a8:	e841 2300 	strex	r3, r2, [r1]
 80081ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80081ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1e3      	bne.n	800817c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fe fed4 	bl	8006f66 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2202      	movs	r2, #2
 80081c2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 f8c1 	bl	800835c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80081da:	e09b      	b.n	8008314 <HAL_UART_IRQHandler+0x518>
 80081dc:	080084ed 	.word	0x080084ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	1ad3      	subs	r3, r2, r3
 80081ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f000 808e 	beq.w	8008318 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80081fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 8089 	beq.w	8008318 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	330c      	adds	r3, #12
 800820c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008210:	e853 3f00 	ldrex	r3, [r3]
 8008214:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008218:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800821c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	330c      	adds	r3, #12
 8008226:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800822a:	647a      	str	r2, [r7, #68]	@ 0x44
 800822c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008230:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008232:	e841 2300 	strex	r3, r2, [r1]
 8008236:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e3      	bne.n	8008206 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3314      	adds	r3, #20
 8008244:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008248:	e853 3f00 	ldrex	r3, [r3]
 800824c:	623b      	str	r3, [r7, #32]
   return(result);
 800824e:	6a3b      	ldr	r3, [r7, #32]
 8008250:	f023 0301 	bic.w	r3, r3, #1
 8008254:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3314      	adds	r3, #20
 800825e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008262:	633a      	str	r2, [r7, #48]	@ 0x30
 8008264:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008266:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1e3      	bne.n	800823e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2220      	movs	r2, #32
 800827a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	330c      	adds	r3, #12
 800828a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	e853 3f00 	ldrex	r3, [r3]
 8008292:	60fb      	str	r3, [r7, #12]
   return(result);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0310 	bic.w	r3, r3, #16
 800829a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	330c      	adds	r3, #12
 80082a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80082a8:	61fa      	str	r2, [r7, #28]
 80082aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ac:	69b9      	ldr	r1, [r7, #24]
 80082ae:	69fa      	ldr	r2, [r7, #28]
 80082b0:	e841 2300 	strex	r3, r2, [r1]
 80082b4:	617b      	str	r3, [r7, #20]
   return(result);
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1e3      	bne.n	8008284 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2202      	movs	r2, #2
 80082c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f847 	bl	800835c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80082ce:	e023      	b.n	8008318 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80082d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d009      	beq.n	80082f0 <HAL_UART_IRQHandler+0x4f4>
 80082dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d003      	beq.n	80082f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f913 	bl	8008514 <UART_Transmit_IT>
    return;
 80082ee:	e014      	b.n	800831a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00e      	beq.n	800831a <HAL_UART_IRQHandler+0x51e>
 80082fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008304:	2b00      	cmp	r3, #0
 8008306:	d008      	beq.n	800831a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f953 	bl	80085b4 <UART_EndTransmit_IT>
    return;
 800830e:	e004      	b.n	800831a <HAL_UART_IRQHandler+0x51e>
    return;
 8008310:	bf00      	nop
 8008312:	e002      	b.n	800831a <HAL_UART_IRQHandler+0x51e>
      return;
 8008314:	bf00      	nop
 8008316:	e000      	b.n	800831a <HAL_UART_IRQHandler+0x51e>
      return;
 8008318:	bf00      	nop
  }
}
 800831a:	37e8      	adds	r7, #232	@ 0xe8
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	460b      	mov	r3, r1
 8008366:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	603b      	str	r3, [r7, #0]
 8008380:	4613      	mov	r3, r2
 8008382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008384:	e03b      	b.n	80083fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008386:	6a3b      	ldr	r3, [r7, #32]
 8008388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800838c:	d037      	beq.n	80083fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800838e:	f7fe fcb1 	bl	8006cf4 <HAL_GetTick>
 8008392:	4602      	mov	r2, r0
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	6a3a      	ldr	r2, [r7, #32]
 800839a:	429a      	cmp	r2, r3
 800839c:	d302      	bcc.n	80083a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e03a      	b.n	800841e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	f003 0304 	and.w	r3, r3, #4
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d023      	beq.n	80083fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2b80      	cmp	r3, #128	@ 0x80
 80083ba:	d020      	beq.n	80083fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	2b40      	cmp	r3, #64	@ 0x40
 80083c0:	d01d      	beq.n	80083fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0308 	and.w	r3, r3, #8
 80083cc:	2b08      	cmp	r3, #8
 80083ce:	d116      	bne.n	80083fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80083d0:	2300      	movs	r3, #0
 80083d2:	617b      	str	r3, [r7, #20]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	617b      	str	r3, [r7, #20]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	617b      	str	r3, [r7, #20]
 80083e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f000 f81d 	bl	8008426 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2208      	movs	r2, #8
 80083f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e00f      	b.n	800841e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	4013      	ands	r3, r2
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	429a      	cmp	r2, r3
 800840c:	bf0c      	ite	eq
 800840e:	2301      	moveq	r3, #1
 8008410:	2300      	movne	r3, #0
 8008412:	b2db      	uxtb	r3, r3
 8008414:	461a      	mov	r2, r3
 8008416:	79fb      	ldrb	r3, [r7, #7]
 8008418:	429a      	cmp	r2, r3
 800841a:	d0b4      	beq.n	8008386 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3718      	adds	r7, #24
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008426:	b480      	push	{r7}
 8008428:	b095      	sub	sp, #84	@ 0x54
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	330c      	adds	r3, #12
 8008434:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008438:	e853 3f00 	ldrex	r3, [r3]
 800843c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800843e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008440:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008444:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	330c      	adds	r3, #12
 800844c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800844e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008450:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008452:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008454:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008456:	e841 2300 	strex	r3, r2, [r1]
 800845a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800845c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1e5      	bne.n	800842e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3314      	adds	r3, #20
 8008468:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	61fb      	str	r3, [r7, #28]
   return(result);
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	f023 0301 	bic.w	r3, r3, #1
 8008478:	64bb      	str	r3, [r7, #72]	@ 0x48
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	3314      	adds	r3, #20
 8008480:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008482:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008484:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008486:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008488:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e5      	bne.n	8008462 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800849a:	2b01      	cmp	r3, #1
 800849c:	d119      	bne.n	80084d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	330c      	adds	r3, #12
 80084a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	e853 3f00 	ldrex	r3, [r3]
 80084ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	f023 0310 	bic.w	r3, r3, #16
 80084b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	330c      	adds	r3, #12
 80084bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084be:	61ba      	str	r2, [r7, #24]
 80084c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c2:	6979      	ldr	r1, [r7, #20]
 80084c4:	69ba      	ldr	r2, [r7, #24]
 80084c6:	e841 2300 	strex	r3, r2, [r1]
 80084ca:	613b      	str	r3, [r7, #16]
   return(result);
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1e5      	bne.n	800849e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2220      	movs	r2, #32
 80084d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80084e0:	bf00      	nop
 80084e2:	3754      	adds	r7, #84	@ 0x54
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2200      	movs	r2, #0
 80084fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f7ff ff1e 	bl	8008348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800850c:	bf00      	nop
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b21      	cmp	r3, #33	@ 0x21
 8008526:	d13e      	bne.n	80085a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008530:	d114      	bne.n	800855c <UART_Transmit_IT+0x48>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d110      	bne.n	800855c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	461a      	mov	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800854e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	1c9a      	adds	r2, r3, #2
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	621a      	str	r2, [r3, #32]
 800855a:	e008      	b.n	800856e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	1c59      	adds	r1, r3, #1
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	6211      	str	r1, [r2, #32]
 8008566:	781a      	ldrb	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008572:	b29b      	uxth	r3, r3
 8008574:	3b01      	subs	r3, #1
 8008576:	b29b      	uxth	r3, r3
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	4619      	mov	r1, r3
 800857c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10f      	bne.n	80085a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68da      	ldr	r2, [r3, #12]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008590:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68da      	ldr	r2, [r3, #12]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	e000      	b.n	80085a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80085a6:	2302      	movs	r3, #2
  }
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68da      	ldr	r2, [r3, #12]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2220      	movs	r2, #32
 80085d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f7ff fea3 	bl	8008320 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b08c      	sub	sp, #48	@ 0x30
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	2b22      	cmp	r3, #34	@ 0x22
 80085f6:	f040 80ae 	bne.w	8008756 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008602:	d117      	bne.n	8008634 <UART_Receive_IT+0x50>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d113      	bne.n	8008634 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800860c:	2300      	movs	r3, #0
 800860e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008614:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	b29b      	uxth	r3, r3
 800861e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008622:	b29a      	uxth	r2, r3
 8008624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008626:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800862c:	1c9a      	adds	r2, r3, #2
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	629a      	str	r2, [r3, #40]	@ 0x28
 8008632:	e026      	b.n	8008682 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008638:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800863a:	2300      	movs	r3, #0
 800863c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008646:	d007      	beq.n	8008658 <UART_Receive_IT+0x74>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10a      	bne.n	8008666 <UART_Receive_IT+0x82>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d106      	bne.n	8008666 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	b2da      	uxtb	r2, r3
 8008660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008662:	701a      	strb	r2, [r3, #0]
 8008664:	e008      	b.n	8008678 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	b2db      	uxtb	r3, r3
 800866e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008672:	b2da      	uxtb	r2, r3
 8008674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008676:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800867c:	1c5a      	adds	r2, r3, #1
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008686:	b29b      	uxth	r3, r3
 8008688:	3b01      	subs	r3, #1
 800868a:	b29b      	uxth	r3, r3
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	4619      	mov	r1, r3
 8008690:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008692:	2b00      	cmp	r3, #0
 8008694:	d15d      	bne.n	8008752 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68da      	ldr	r2, [r3, #12]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f022 0220 	bic.w	r2, r2, #32
 80086a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68da      	ldr	r2, [r3, #12]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80086b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	695a      	ldr	r2, [r3, #20]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f022 0201 	bic.w	r2, r2, #1
 80086c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2220      	movs	r2, #32
 80086ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d135      	bne.n	8008748 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	330c      	adds	r3, #12
 80086e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	e853 3f00 	ldrex	r3, [r3]
 80086f0:	613b      	str	r3, [r7, #16]
   return(result);
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	f023 0310 	bic.w	r3, r3, #16
 80086f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	330c      	adds	r3, #12
 8008700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008702:	623a      	str	r2, [r7, #32]
 8008704:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008706:	69f9      	ldr	r1, [r7, #28]
 8008708:	6a3a      	ldr	r2, [r7, #32]
 800870a:	e841 2300 	strex	r3, r2, [r1]
 800870e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1e5      	bne.n	80086e2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0310 	and.w	r3, r3, #16
 8008720:	2b10      	cmp	r3, #16
 8008722:	d10a      	bne.n	800873a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008724:	2300      	movs	r3, #0
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	60fb      	str	r3, [r7, #12]
 8008738:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7ff fe0b 	bl	800835c <HAL_UARTEx_RxEventCallback>
 8008746:	e002      	b.n	800874e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7ff fdf3 	bl	8008334 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	e002      	b.n	8008758 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	e000      	b.n	8008758 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008756:	2302      	movs	r3, #2
  }
}
 8008758:	4618      	mov	r0, r3
 800875a:	3730      	adds	r7, #48	@ 0x30
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008764:	b0c0      	sub	sp, #256	@ 0x100
 8008766:	af00      	add	r7, sp, #0
 8008768:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800876c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800877c:	68d9      	ldr	r1, [r3, #12]
 800877e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	ea40 0301 	orr.w	r3, r0, r1
 8008788:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800878a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800878e:	689a      	ldr	r2, [r3, #8]
 8008790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	431a      	orrs	r2, r3
 8008798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	431a      	orrs	r2, r3
 80087a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087a4:	69db      	ldr	r3, [r3, #28]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80087ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80087b8:	f021 010c 	bic.w	r1, r1, #12
 80087bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80087c6:	430b      	orrs	r3, r1
 80087c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80087d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087da:	6999      	ldr	r1, [r3, #24]
 80087dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	ea40 0301 	orr.w	r3, r0, r1
 80087e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	4b8f      	ldr	r3, [pc, #572]	@ (8008a2c <UART_SetConfig+0x2cc>)
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d005      	beq.n	8008800 <UART_SetConfig+0xa0>
 80087f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	4b8d      	ldr	r3, [pc, #564]	@ (8008a30 <UART_SetConfig+0x2d0>)
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d104      	bne.n	800880a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008800:	f7ff fa0c 	bl	8007c1c <HAL_RCC_GetPCLK2Freq>
 8008804:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008808:	e003      	b.n	8008812 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800880a:	f7ff f9f3 	bl	8007bf4 <HAL_RCC_GetPCLK1Freq>
 800880e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008816:	69db      	ldr	r3, [r3, #28]
 8008818:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800881c:	f040 810c 	bne.w	8008a38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008824:	2200      	movs	r2, #0
 8008826:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800882a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800882e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008832:	4622      	mov	r2, r4
 8008834:	462b      	mov	r3, r5
 8008836:	1891      	adds	r1, r2, r2
 8008838:	65b9      	str	r1, [r7, #88]	@ 0x58
 800883a:	415b      	adcs	r3, r3
 800883c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800883e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008842:	4621      	mov	r1, r4
 8008844:	eb12 0801 	adds.w	r8, r2, r1
 8008848:	4629      	mov	r1, r5
 800884a:	eb43 0901 	adc.w	r9, r3, r1
 800884e:	f04f 0200 	mov.w	r2, #0
 8008852:	f04f 0300 	mov.w	r3, #0
 8008856:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800885a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800885e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008862:	4690      	mov	r8, r2
 8008864:	4699      	mov	r9, r3
 8008866:	4623      	mov	r3, r4
 8008868:	eb18 0303 	adds.w	r3, r8, r3
 800886c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008870:	462b      	mov	r3, r5
 8008872:	eb49 0303 	adc.w	r3, r9, r3
 8008876:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800887a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008886:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800888a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800888e:	460b      	mov	r3, r1
 8008890:	18db      	adds	r3, r3, r3
 8008892:	653b      	str	r3, [r7, #80]	@ 0x50
 8008894:	4613      	mov	r3, r2
 8008896:	eb42 0303 	adc.w	r3, r2, r3
 800889a:	657b      	str	r3, [r7, #84]	@ 0x54
 800889c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80088a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80088a4:	f7fd f81c 	bl	80058e0 <__aeabi_uldivmod>
 80088a8:	4602      	mov	r2, r0
 80088aa:	460b      	mov	r3, r1
 80088ac:	4b61      	ldr	r3, [pc, #388]	@ (8008a34 <UART_SetConfig+0x2d4>)
 80088ae:	fba3 2302 	umull	r2, r3, r3, r2
 80088b2:	095b      	lsrs	r3, r3, #5
 80088b4:	011c      	lsls	r4, r3, #4
 80088b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088ba:	2200      	movs	r2, #0
 80088bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80088c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80088c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80088c8:	4642      	mov	r2, r8
 80088ca:	464b      	mov	r3, r9
 80088cc:	1891      	adds	r1, r2, r2
 80088ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80088d0:	415b      	adcs	r3, r3
 80088d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80088d8:	4641      	mov	r1, r8
 80088da:	eb12 0a01 	adds.w	sl, r2, r1
 80088de:	4649      	mov	r1, r9
 80088e0:	eb43 0b01 	adc.w	fp, r3, r1
 80088e4:	f04f 0200 	mov.w	r2, #0
 80088e8:	f04f 0300 	mov.w	r3, #0
 80088ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80088f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80088f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088f8:	4692      	mov	sl, r2
 80088fa:	469b      	mov	fp, r3
 80088fc:	4643      	mov	r3, r8
 80088fe:	eb1a 0303 	adds.w	r3, sl, r3
 8008902:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008906:	464b      	mov	r3, r9
 8008908:	eb4b 0303 	adc.w	r3, fp, r3
 800890c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800891c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008920:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008924:	460b      	mov	r3, r1
 8008926:	18db      	adds	r3, r3, r3
 8008928:	643b      	str	r3, [r7, #64]	@ 0x40
 800892a:	4613      	mov	r3, r2
 800892c:	eb42 0303 	adc.w	r3, r2, r3
 8008930:	647b      	str	r3, [r7, #68]	@ 0x44
 8008932:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008936:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800893a:	f7fc ffd1 	bl	80058e0 <__aeabi_uldivmod>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	4611      	mov	r1, r2
 8008944:	4b3b      	ldr	r3, [pc, #236]	@ (8008a34 <UART_SetConfig+0x2d4>)
 8008946:	fba3 2301 	umull	r2, r3, r3, r1
 800894a:	095b      	lsrs	r3, r3, #5
 800894c:	2264      	movs	r2, #100	@ 0x64
 800894e:	fb02 f303 	mul.w	r3, r2, r3
 8008952:	1acb      	subs	r3, r1, r3
 8008954:	00db      	lsls	r3, r3, #3
 8008956:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800895a:	4b36      	ldr	r3, [pc, #216]	@ (8008a34 <UART_SetConfig+0x2d4>)
 800895c:	fba3 2302 	umull	r2, r3, r3, r2
 8008960:	095b      	lsrs	r3, r3, #5
 8008962:	005b      	lsls	r3, r3, #1
 8008964:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008968:	441c      	add	r4, r3
 800896a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800896e:	2200      	movs	r2, #0
 8008970:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008974:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008978:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800897c:	4642      	mov	r2, r8
 800897e:	464b      	mov	r3, r9
 8008980:	1891      	adds	r1, r2, r2
 8008982:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008984:	415b      	adcs	r3, r3
 8008986:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008988:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800898c:	4641      	mov	r1, r8
 800898e:	1851      	adds	r1, r2, r1
 8008990:	6339      	str	r1, [r7, #48]	@ 0x30
 8008992:	4649      	mov	r1, r9
 8008994:	414b      	adcs	r3, r1
 8008996:	637b      	str	r3, [r7, #52]	@ 0x34
 8008998:	f04f 0200 	mov.w	r2, #0
 800899c:	f04f 0300 	mov.w	r3, #0
 80089a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80089a4:	4659      	mov	r1, fp
 80089a6:	00cb      	lsls	r3, r1, #3
 80089a8:	4651      	mov	r1, sl
 80089aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089ae:	4651      	mov	r1, sl
 80089b0:	00ca      	lsls	r2, r1, #3
 80089b2:	4610      	mov	r0, r2
 80089b4:	4619      	mov	r1, r3
 80089b6:	4603      	mov	r3, r0
 80089b8:	4642      	mov	r2, r8
 80089ba:	189b      	adds	r3, r3, r2
 80089bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089c0:	464b      	mov	r3, r9
 80089c2:	460a      	mov	r2, r1
 80089c4:	eb42 0303 	adc.w	r3, r2, r3
 80089c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80089d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80089dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80089e0:	460b      	mov	r3, r1
 80089e2:	18db      	adds	r3, r3, r3
 80089e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089e6:	4613      	mov	r3, r2
 80089e8:	eb42 0303 	adc.w	r3, r2, r3
 80089ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80089f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80089f6:	f7fc ff73 	bl	80058e0 <__aeabi_uldivmod>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008a34 <UART_SetConfig+0x2d4>)
 8008a00:	fba3 1302 	umull	r1, r3, r3, r2
 8008a04:	095b      	lsrs	r3, r3, #5
 8008a06:	2164      	movs	r1, #100	@ 0x64
 8008a08:	fb01 f303 	mul.w	r3, r1, r3
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	00db      	lsls	r3, r3, #3
 8008a10:	3332      	adds	r3, #50	@ 0x32
 8008a12:	4a08      	ldr	r2, [pc, #32]	@ (8008a34 <UART_SetConfig+0x2d4>)
 8008a14:	fba2 2303 	umull	r2, r3, r2, r3
 8008a18:	095b      	lsrs	r3, r3, #5
 8008a1a:	f003 0207 	and.w	r2, r3, #7
 8008a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4422      	add	r2, r4
 8008a26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a28:	e106      	b.n	8008c38 <UART_SetConfig+0x4d8>
 8008a2a:	bf00      	nop
 8008a2c:	40011000 	.word	0x40011000
 8008a30:	40011400 	.word	0x40011400
 8008a34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008a46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008a4a:	4642      	mov	r2, r8
 8008a4c:	464b      	mov	r3, r9
 8008a4e:	1891      	adds	r1, r2, r2
 8008a50:	6239      	str	r1, [r7, #32]
 8008a52:	415b      	adcs	r3, r3
 8008a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a5a:	4641      	mov	r1, r8
 8008a5c:	1854      	adds	r4, r2, r1
 8008a5e:	4649      	mov	r1, r9
 8008a60:	eb43 0501 	adc.w	r5, r3, r1
 8008a64:	f04f 0200 	mov.w	r2, #0
 8008a68:	f04f 0300 	mov.w	r3, #0
 8008a6c:	00eb      	lsls	r3, r5, #3
 8008a6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a72:	00e2      	lsls	r2, r4, #3
 8008a74:	4614      	mov	r4, r2
 8008a76:	461d      	mov	r5, r3
 8008a78:	4643      	mov	r3, r8
 8008a7a:	18e3      	adds	r3, r4, r3
 8008a7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008a80:	464b      	mov	r3, r9
 8008a82:	eb45 0303 	adc.w	r3, r5, r3
 8008a86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008a9a:	f04f 0200 	mov.w	r2, #0
 8008a9e:	f04f 0300 	mov.w	r3, #0
 8008aa2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	008b      	lsls	r3, r1, #2
 8008aaa:	4621      	mov	r1, r4
 8008aac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ab0:	4621      	mov	r1, r4
 8008ab2:	008a      	lsls	r2, r1, #2
 8008ab4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008ab8:	f7fc ff12 	bl	80058e0 <__aeabi_uldivmod>
 8008abc:	4602      	mov	r2, r0
 8008abe:	460b      	mov	r3, r1
 8008ac0:	4b60      	ldr	r3, [pc, #384]	@ (8008c44 <UART_SetConfig+0x4e4>)
 8008ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ac6:	095b      	lsrs	r3, r3, #5
 8008ac8:	011c      	lsls	r4, r3, #4
 8008aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008ad4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008ad8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008adc:	4642      	mov	r2, r8
 8008ade:	464b      	mov	r3, r9
 8008ae0:	1891      	adds	r1, r2, r2
 8008ae2:	61b9      	str	r1, [r7, #24]
 8008ae4:	415b      	adcs	r3, r3
 8008ae6:	61fb      	str	r3, [r7, #28]
 8008ae8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008aec:	4641      	mov	r1, r8
 8008aee:	1851      	adds	r1, r2, r1
 8008af0:	6139      	str	r1, [r7, #16]
 8008af2:	4649      	mov	r1, r9
 8008af4:	414b      	adcs	r3, r1
 8008af6:	617b      	str	r3, [r7, #20]
 8008af8:	f04f 0200 	mov.w	r2, #0
 8008afc:	f04f 0300 	mov.w	r3, #0
 8008b00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b04:	4659      	mov	r1, fp
 8008b06:	00cb      	lsls	r3, r1, #3
 8008b08:	4651      	mov	r1, sl
 8008b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b0e:	4651      	mov	r1, sl
 8008b10:	00ca      	lsls	r2, r1, #3
 8008b12:	4610      	mov	r0, r2
 8008b14:	4619      	mov	r1, r3
 8008b16:	4603      	mov	r3, r0
 8008b18:	4642      	mov	r2, r8
 8008b1a:	189b      	adds	r3, r3, r2
 8008b1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b20:	464b      	mov	r3, r9
 8008b22:	460a      	mov	r2, r1
 8008b24:	eb42 0303 	adc.w	r3, r2, r3
 8008b28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008b36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008b38:	f04f 0200 	mov.w	r2, #0
 8008b3c:	f04f 0300 	mov.w	r3, #0
 8008b40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008b44:	4649      	mov	r1, r9
 8008b46:	008b      	lsls	r3, r1, #2
 8008b48:	4641      	mov	r1, r8
 8008b4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b4e:	4641      	mov	r1, r8
 8008b50:	008a      	lsls	r2, r1, #2
 8008b52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008b56:	f7fc fec3 	bl	80058e0 <__aeabi_uldivmod>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	4611      	mov	r1, r2
 8008b60:	4b38      	ldr	r3, [pc, #224]	@ (8008c44 <UART_SetConfig+0x4e4>)
 8008b62:	fba3 2301 	umull	r2, r3, r3, r1
 8008b66:	095b      	lsrs	r3, r3, #5
 8008b68:	2264      	movs	r2, #100	@ 0x64
 8008b6a:	fb02 f303 	mul.w	r3, r2, r3
 8008b6e:	1acb      	subs	r3, r1, r3
 8008b70:	011b      	lsls	r3, r3, #4
 8008b72:	3332      	adds	r3, #50	@ 0x32
 8008b74:	4a33      	ldr	r2, [pc, #204]	@ (8008c44 <UART_SetConfig+0x4e4>)
 8008b76:	fba2 2303 	umull	r2, r3, r2, r3
 8008b7a:	095b      	lsrs	r3, r3, #5
 8008b7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008b80:	441c      	add	r4, r3
 8008b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b86:	2200      	movs	r2, #0
 8008b88:	673b      	str	r3, [r7, #112]	@ 0x70
 8008b8a:	677a      	str	r2, [r7, #116]	@ 0x74
 8008b8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008b90:	4642      	mov	r2, r8
 8008b92:	464b      	mov	r3, r9
 8008b94:	1891      	adds	r1, r2, r2
 8008b96:	60b9      	str	r1, [r7, #8]
 8008b98:	415b      	adcs	r3, r3
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ba0:	4641      	mov	r1, r8
 8008ba2:	1851      	adds	r1, r2, r1
 8008ba4:	6039      	str	r1, [r7, #0]
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	414b      	adcs	r3, r1
 8008baa:	607b      	str	r3, [r7, #4]
 8008bac:	f04f 0200 	mov.w	r2, #0
 8008bb0:	f04f 0300 	mov.w	r3, #0
 8008bb4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008bb8:	4659      	mov	r1, fp
 8008bba:	00cb      	lsls	r3, r1, #3
 8008bbc:	4651      	mov	r1, sl
 8008bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bc2:	4651      	mov	r1, sl
 8008bc4:	00ca      	lsls	r2, r1, #3
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	4619      	mov	r1, r3
 8008bca:	4603      	mov	r3, r0
 8008bcc:	4642      	mov	r2, r8
 8008bce:	189b      	adds	r3, r3, r2
 8008bd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bd2:	464b      	mov	r3, r9
 8008bd4:	460a      	mov	r2, r1
 8008bd6:	eb42 0303 	adc.w	r3, r2, r3
 8008bda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	663b      	str	r3, [r7, #96]	@ 0x60
 8008be6:	667a      	str	r2, [r7, #100]	@ 0x64
 8008be8:	f04f 0200 	mov.w	r2, #0
 8008bec:	f04f 0300 	mov.w	r3, #0
 8008bf0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008bf4:	4649      	mov	r1, r9
 8008bf6:	008b      	lsls	r3, r1, #2
 8008bf8:	4641      	mov	r1, r8
 8008bfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bfe:	4641      	mov	r1, r8
 8008c00:	008a      	lsls	r2, r1, #2
 8008c02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008c06:	f7fc fe6b 	bl	80058e0 <__aeabi_uldivmod>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c44 <UART_SetConfig+0x4e4>)
 8008c10:	fba3 1302 	umull	r1, r3, r3, r2
 8008c14:	095b      	lsrs	r3, r3, #5
 8008c16:	2164      	movs	r1, #100	@ 0x64
 8008c18:	fb01 f303 	mul.w	r3, r1, r3
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	011b      	lsls	r3, r3, #4
 8008c20:	3332      	adds	r3, #50	@ 0x32
 8008c22:	4a08      	ldr	r2, [pc, #32]	@ (8008c44 <UART_SetConfig+0x4e4>)
 8008c24:	fba2 2303 	umull	r2, r3, r2, r3
 8008c28:	095b      	lsrs	r3, r3, #5
 8008c2a:	f003 020f 	and.w	r2, r3, #15
 8008c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4422      	add	r2, r4
 8008c36:	609a      	str	r2, [r3, #8]
}
 8008c38:	bf00      	nop
 8008c3a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c44:	51eb851f 	.word	0x51eb851f

08008c48 <malloc>:
 8008c48:	4b02      	ldr	r3, [pc, #8]	@ (8008c54 <malloc+0xc>)
 8008c4a:	4601      	mov	r1, r0
 8008c4c:	6818      	ldr	r0, [r3, #0]
 8008c4e:	f000 b82d 	b.w	8008cac <_malloc_r>
 8008c52:	bf00      	nop
 8008c54:	20000018 	.word	0x20000018

08008c58 <free>:
 8008c58:	4b02      	ldr	r3, [pc, #8]	@ (8008c64 <free+0xc>)
 8008c5a:	4601      	mov	r1, r0
 8008c5c:	6818      	ldr	r0, [r3, #0]
 8008c5e:	f000 bf97 	b.w	8009b90 <_free_r>
 8008c62:	bf00      	nop
 8008c64:	20000018 	.word	0x20000018

08008c68 <sbrk_aligned>:
 8008c68:	b570      	push	{r4, r5, r6, lr}
 8008c6a:	4e0f      	ldr	r6, [pc, #60]	@ (8008ca8 <sbrk_aligned+0x40>)
 8008c6c:	460c      	mov	r4, r1
 8008c6e:	6831      	ldr	r1, [r6, #0]
 8008c70:	4605      	mov	r5, r0
 8008c72:	b911      	cbnz	r1, 8008c7a <sbrk_aligned+0x12>
 8008c74:	f000 ff28 	bl	8009ac8 <_sbrk_r>
 8008c78:	6030      	str	r0, [r6, #0]
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	f000 ff23 	bl	8009ac8 <_sbrk_r>
 8008c82:	1c43      	adds	r3, r0, #1
 8008c84:	d103      	bne.n	8008c8e <sbrk_aligned+0x26>
 8008c86:	f04f 34ff 	mov.w	r4, #4294967295
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	bd70      	pop	{r4, r5, r6, pc}
 8008c8e:	1cc4      	adds	r4, r0, #3
 8008c90:	f024 0403 	bic.w	r4, r4, #3
 8008c94:	42a0      	cmp	r0, r4
 8008c96:	d0f8      	beq.n	8008c8a <sbrk_aligned+0x22>
 8008c98:	1a21      	subs	r1, r4, r0
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	f000 ff14 	bl	8009ac8 <_sbrk_r>
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	d1f2      	bne.n	8008c8a <sbrk_aligned+0x22>
 8008ca4:	e7ef      	b.n	8008c86 <sbrk_aligned+0x1e>
 8008ca6:	bf00      	nop
 8008ca8:	20000d24 	.word	0x20000d24

08008cac <_malloc_r>:
 8008cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cb0:	1ccd      	adds	r5, r1, #3
 8008cb2:	f025 0503 	bic.w	r5, r5, #3
 8008cb6:	3508      	adds	r5, #8
 8008cb8:	2d0c      	cmp	r5, #12
 8008cba:	bf38      	it	cc
 8008cbc:	250c      	movcc	r5, #12
 8008cbe:	2d00      	cmp	r5, #0
 8008cc0:	4606      	mov	r6, r0
 8008cc2:	db01      	blt.n	8008cc8 <_malloc_r+0x1c>
 8008cc4:	42a9      	cmp	r1, r5
 8008cc6:	d904      	bls.n	8008cd2 <_malloc_r+0x26>
 8008cc8:	230c      	movs	r3, #12
 8008cca:	6033      	str	r3, [r6, #0]
 8008ccc:	2000      	movs	r0, #0
 8008cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008da8 <_malloc_r+0xfc>
 8008cd6:	f000 f869 	bl	8008dac <__malloc_lock>
 8008cda:	f8d8 3000 	ldr.w	r3, [r8]
 8008cde:	461c      	mov	r4, r3
 8008ce0:	bb44      	cbnz	r4, 8008d34 <_malloc_r+0x88>
 8008ce2:	4629      	mov	r1, r5
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	f7ff ffbf 	bl	8008c68 <sbrk_aligned>
 8008cea:	1c43      	adds	r3, r0, #1
 8008cec:	4604      	mov	r4, r0
 8008cee:	d158      	bne.n	8008da2 <_malloc_r+0xf6>
 8008cf0:	f8d8 4000 	ldr.w	r4, [r8]
 8008cf4:	4627      	mov	r7, r4
 8008cf6:	2f00      	cmp	r7, #0
 8008cf8:	d143      	bne.n	8008d82 <_malloc_r+0xd6>
 8008cfa:	2c00      	cmp	r4, #0
 8008cfc:	d04b      	beq.n	8008d96 <_malloc_r+0xea>
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	4639      	mov	r1, r7
 8008d02:	4630      	mov	r0, r6
 8008d04:	eb04 0903 	add.w	r9, r4, r3
 8008d08:	f000 fede 	bl	8009ac8 <_sbrk_r>
 8008d0c:	4581      	cmp	r9, r0
 8008d0e:	d142      	bne.n	8008d96 <_malloc_r+0xea>
 8008d10:	6821      	ldr	r1, [r4, #0]
 8008d12:	1a6d      	subs	r5, r5, r1
 8008d14:	4629      	mov	r1, r5
 8008d16:	4630      	mov	r0, r6
 8008d18:	f7ff ffa6 	bl	8008c68 <sbrk_aligned>
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	d03a      	beq.n	8008d96 <_malloc_r+0xea>
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	442b      	add	r3, r5
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	f8d8 3000 	ldr.w	r3, [r8]
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	bb62      	cbnz	r2, 8008d88 <_malloc_r+0xdc>
 8008d2e:	f8c8 7000 	str.w	r7, [r8]
 8008d32:	e00f      	b.n	8008d54 <_malloc_r+0xa8>
 8008d34:	6822      	ldr	r2, [r4, #0]
 8008d36:	1b52      	subs	r2, r2, r5
 8008d38:	d420      	bmi.n	8008d7c <_malloc_r+0xd0>
 8008d3a:	2a0b      	cmp	r2, #11
 8008d3c:	d917      	bls.n	8008d6e <_malloc_r+0xc2>
 8008d3e:	1961      	adds	r1, r4, r5
 8008d40:	42a3      	cmp	r3, r4
 8008d42:	6025      	str	r5, [r4, #0]
 8008d44:	bf18      	it	ne
 8008d46:	6059      	strne	r1, [r3, #4]
 8008d48:	6863      	ldr	r3, [r4, #4]
 8008d4a:	bf08      	it	eq
 8008d4c:	f8c8 1000 	streq.w	r1, [r8]
 8008d50:	5162      	str	r2, [r4, r5]
 8008d52:	604b      	str	r3, [r1, #4]
 8008d54:	4630      	mov	r0, r6
 8008d56:	f000 f82f 	bl	8008db8 <__malloc_unlock>
 8008d5a:	f104 000b 	add.w	r0, r4, #11
 8008d5e:	1d23      	adds	r3, r4, #4
 8008d60:	f020 0007 	bic.w	r0, r0, #7
 8008d64:	1ac2      	subs	r2, r0, r3
 8008d66:	bf1c      	itt	ne
 8008d68:	1a1b      	subne	r3, r3, r0
 8008d6a:	50a3      	strne	r3, [r4, r2]
 8008d6c:	e7af      	b.n	8008cce <_malloc_r+0x22>
 8008d6e:	6862      	ldr	r2, [r4, #4]
 8008d70:	42a3      	cmp	r3, r4
 8008d72:	bf0c      	ite	eq
 8008d74:	f8c8 2000 	streq.w	r2, [r8]
 8008d78:	605a      	strne	r2, [r3, #4]
 8008d7a:	e7eb      	b.n	8008d54 <_malloc_r+0xa8>
 8008d7c:	4623      	mov	r3, r4
 8008d7e:	6864      	ldr	r4, [r4, #4]
 8008d80:	e7ae      	b.n	8008ce0 <_malloc_r+0x34>
 8008d82:	463c      	mov	r4, r7
 8008d84:	687f      	ldr	r7, [r7, #4]
 8008d86:	e7b6      	b.n	8008cf6 <_malloc_r+0x4a>
 8008d88:	461a      	mov	r2, r3
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	42a3      	cmp	r3, r4
 8008d8e:	d1fb      	bne.n	8008d88 <_malloc_r+0xdc>
 8008d90:	2300      	movs	r3, #0
 8008d92:	6053      	str	r3, [r2, #4]
 8008d94:	e7de      	b.n	8008d54 <_malloc_r+0xa8>
 8008d96:	230c      	movs	r3, #12
 8008d98:	6033      	str	r3, [r6, #0]
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f000 f80c 	bl	8008db8 <__malloc_unlock>
 8008da0:	e794      	b.n	8008ccc <_malloc_r+0x20>
 8008da2:	6005      	str	r5, [r0, #0]
 8008da4:	e7d6      	b.n	8008d54 <_malloc_r+0xa8>
 8008da6:	bf00      	nop
 8008da8:	20000d28 	.word	0x20000d28

08008dac <__malloc_lock>:
 8008dac:	4801      	ldr	r0, [pc, #4]	@ (8008db4 <__malloc_lock+0x8>)
 8008dae:	f000 bed9 	b.w	8009b64 <__retarget_lock_acquire_recursive>
 8008db2:	bf00      	nop
 8008db4:	20000e6c 	.word	0x20000e6c

08008db8 <__malloc_unlock>:
 8008db8:	4801      	ldr	r0, [pc, #4]	@ (8008dc0 <__malloc_unlock+0x8>)
 8008dba:	f000 bed4 	b.w	8009b66 <__retarget_lock_release_recursive>
 8008dbe:	bf00      	nop
 8008dc0:	20000e6c 	.word	0x20000e6c

08008dc4 <swapfunc>:
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	b510      	push	{r4, lr}
 8008dc8:	d00a      	beq.n	8008de0 <swapfunc+0x1c>
 8008dca:	0892      	lsrs	r2, r2, #2
 8008dcc:	3a01      	subs	r2, #1
 8008dce:	6803      	ldr	r3, [r0, #0]
 8008dd0:	680c      	ldr	r4, [r1, #0]
 8008dd2:	f840 4b04 	str.w	r4, [r0], #4
 8008dd6:	2a00      	cmp	r2, #0
 8008dd8:	f841 3b04 	str.w	r3, [r1], #4
 8008ddc:	dcf6      	bgt.n	8008dcc <swapfunc+0x8>
 8008dde:	bd10      	pop	{r4, pc}
 8008de0:	4402      	add	r2, r0
 8008de2:	780c      	ldrb	r4, [r1, #0]
 8008de4:	7803      	ldrb	r3, [r0, #0]
 8008de6:	f800 4b01 	strb.w	r4, [r0], #1
 8008dea:	f801 3b01 	strb.w	r3, [r1], #1
 8008dee:	1a13      	subs	r3, r2, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	dcf6      	bgt.n	8008de2 <swapfunc+0x1e>
 8008df4:	e7f3      	b.n	8008dde <swapfunc+0x1a>

08008df6 <med3.constprop.0>:
 8008df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df8:	460f      	mov	r7, r1
 8008dfa:	4616      	mov	r6, r2
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	461d      	mov	r5, r3
 8008e00:	4798      	blx	r3
 8008e02:	2800      	cmp	r0, #0
 8008e04:	4631      	mov	r1, r6
 8008e06:	4638      	mov	r0, r7
 8008e08:	da0c      	bge.n	8008e24 <med3.constprop.0+0x2e>
 8008e0a:	47a8      	blx	r5
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	da02      	bge.n	8008e16 <med3.constprop.0+0x20>
 8008e10:	463c      	mov	r4, r7
 8008e12:	4620      	mov	r0, r4
 8008e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e16:	4631      	mov	r1, r6
 8008e18:	4620      	mov	r0, r4
 8008e1a:	47a8      	blx	r5
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	daf8      	bge.n	8008e12 <med3.constprop.0+0x1c>
 8008e20:	4634      	mov	r4, r6
 8008e22:	e7f6      	b.n	8008e12 <med3.constprop.0+0x1c>
 8008e24:	47a8      	blx	r5
 8008e26:	2800      	cmp	r0, #0
 8008e28:	dcf2      	bgt.n	8008e10 <med3.constprop.0+0x1a>
 8008e2a:	4631      	mov	r1, r6
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	47a8      	blx	r5
 8008e30:	2800      	cmp	r0, #0
 8008e32:	daf5      	bge.n	8008e20 <med3.constprop.0+0x2a>
 8008e34:	e7ed      	b.n	8008e12 <med3.constprop.0+0x1c>

08008e36 <qsort>:
 8008e36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3a:	b095      	sub	sp, #84	@ 0x54
 8008e3c:	4606      	mov	r6, r0
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	ea40 0302 	orr.w	r3, r0, r2
 8008e44:	079b      	lsls	r3, r3, #30
 8008e46:	4614      	mov	r4, r2
 8008e48:	d118      	bne.n	8008e7c <qsort+0x46>
 8008e4a:	f1b2 0804 	subs.w	r8, r2, #4
 8008e4e:	bf18      	it	ne
 8008e50:	f04f 0801 	movne.w	r8, #1
 8008e54:	2300      	movs	r3, #0
 8008e56:	9301      	str	r3, [sp, #4]
 8008e58:	fb04 f701 	mul.w	r7, r4, r1
 8008e5c:	19f3      	adds	r3, r6, r7
 8008e5e:	2906      	cmp	r1, #6
 8008e60:	eb06 0b04 	add.w	fp, r6, r4
 8008e64:	9302      	str	r3, [sp, #8]
 8008e66:	d828      	bhi.n	8008eba <qsort+0x84>
 8008e68:	9b02      	ldr	r3, [sp, #8]
 8008e6a:	459b      	cmp	fp, r3
 8008e6c:	d310      	bcc.n	8008e90 <qsort+0x5a>
 8008e6e:	9b01      	ldr	r3, [sp, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f040 8117 	bne.w	80090a4 <qsort+0x26e>
 8008e76:	b015      	add	sp, #84	@ 0x54
 8008e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e7c:	f04f 0802 	mov.w	r8, #2
 8008e80:	e7e8      	b.n	8008e54 <qsort+0x1e>
 8008e82:	4643      	mov	r3, r8
 8008e84:	4622      	mov	r2, r4
 8008e86:	4639      	mov	r1, r7
 8008e88:	4628      	mov	r0, r5
 8008e8a:	f7ff ff9b 	bl	8008dc4 <swapfunc>
 8008e8e:	e00f      	b.n	8008eb0 <qsort+0x7a>
 8008e90:	465d      	mov	r5, fp
 8008e92:	e00e      	b.n	8008eb2 <qsort+0x7c>
 8008e94:	1b2f      	subs	r7, r5, r4
 8008e96:	9b00      	ldr	r3, [sp, #0]
 8008e98:	4629      	mov	r1, r5
 8008e9a:	4638      	mov	r0, r7
 8008e9c:	4798      	blx	r3
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	dd09      	ble.n	8008eb6 <qsort+0x80>
 8008ea2:	f1b8 0f00 	cmp.w	r8, #0
 8008ea6:	d1ec      	bne.n	8008e82 <qsort+0x4c>
 8008ea8:	682b      	ldr	r3, [r5, #0]
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	602a      	str	r2, [r5, #0]
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	463d      	mov	r5, r7
 8008eb2:	42ae      	cmp	r6, r5
 8008eb4:	d3ee      	bcc.n	8008e94 <qsort+0x5e>
 8008eb6:	44a3      	add	fp, r4
 8008eb8:	e7d6      	b.n	8008e68 <qsort+0x32>
 8008eba:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8008ebe:	1b3f      	subs	r7, r7, r4
 8008ec0:	2907      	cmp	r1, #7
 8008ec2:	fb04 6909 	mla	r9, r4, r9, r6
 8008ec6:	4437      	add	r7, r6
 8008ec8:	d021      	beq.n	8008f0e <qsort+0xd8>
 8008eca:	2928      	cmp	r1, #40	@ 0x28
 8008ecc:	d944      	bls.n	8008f58 <qsort+0x122>
 8008ece:	08cd      	lsrs	r5, r1, #3
 8008ed0:	4365      	muls	r5, r4
 8008ed2:	9b00      	ldr	r3, [sp, #0]
 8008ed4:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8008ed8:	1971      	adds	r1, r6, r5
 8008eda:	4630      	mov	r0, r6
 8008edc:	f7ff ff8b 	bl	8008df6 <med3.constprop.0>
 8008ee0:	4649      	mov	r1, r9
 8008ee2:	eb09 0205 	add.w	r2, r9, r5
 8008ee6:	9b00      	ldr	r3, [sp, #0]
 8008ee8:	4682      	mov	sl, r0
 8008eea:	1b48      	subs	r0, r1, r5
 8008eec:	f7ff ff83 	bl	8008df6 <med3.constprop.0>
 8008ef0:	463a      	mov	r2, r7
 8008ef2:	9b00      	ldr	r3, [sp, #0]
 8008ef4:	4681      	mov	r9, r0
 8008ef6:	1b79      	subs	r1, r7, r5
 8008ef8:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8008efc:	f7ff ff7b 	bl	8008df6 <med3.constprop.0>
 8008f00:	4602      	mov	r2, r0
 8008f02:	4649      	mov	r1, r9
 8008f04:	9b00      	ldr	r3, [sp, #0]
 8008f06:	4650      	mov	r0, sl
 8008f08:	f7ff ff75 	bl	8008df6 <med3.constprop.0>
 8008f0c:	4681      	mov	r9, r0
 8008f0e:	f1b8 0f00 	cmp.w	r8, #0
 8008f12:	d124      	bne.n	8008f5e <qsort+0x128>
 8008f14:	6833      	ldr	r3, [r6, #0]
 8008f16:	f8d9 2000 	ldr.w	r2, [r9]
 8008f1a:	6032      	str	r2, [r6, #0]
 8008f1c:	f8c9 3000 	str.w	r3, [r9]
 8008f20:	46d9      	mov	r9, fp
 8008f22:	46ba      	mov	sl, r7
 8008f24:	465d      	mov	r5, fp
 8008f26:	2300      	movs	r3, #0
 8008f28:	45b9      	cmp	r9, r7
 8008f2a:	d857      	bhi.n	8008fdc <qsort+0x1a6>
 8008f2c:	9303      	str	r3, [sp, #12]
 8008f2e:	4631      	mov	r1, r6
 8008f30:	9b00      	ldr	r3, [sp, #0]
 8008f32:	4648      	mov	r0, r9
 8008f34:	4798      	blx	r3
 8008f36:	2800      	cmp	r0, #0
 8008f38:	9b03      	ldr	r3, [sp, #12]
 8008f3a:	dc2c      	bgt.n	8008f96 <qsort+0x160>
 8008f3c:	d10a      	bne.n	8008f54 <qsort+0x11e>
 8008f3e:	f1b8 0f00 	cmp.w	r8, #0
 8008f42:	d113      	bne.n	8008f6c <qsort+0x136>
 8008f44:	682b      	ldr	r3, [r5, #0]
 8008f46:	f8d9 2000 	ldr.w	r2, [r9]
 8008f4a:	602a      	str	r2, [r5, #0]
 8008f4c:	f8c9 3000 	str.w	r3, [r9]
 8008f50:	4425      	add	r5, r4
 8008f52:	2301      	movs	r3, #1
 8008f54:	44a1      	add	r9, r4
 8008f56:	e7e7      	b.n	8008f28 <qsort+0xf2>
 8008f58:	463a      	mov	r2, r7
 8008f5a:	46b2      	mov	sl, r6
 8008f5c:	e7d1      	b.n	8008f02 <qsort+0xcc>
 8008f5e:	4643      	mov	r3, r8
 8008f60:	4622      	mov	r2, r4
 8008f62:	4649      	mov	r1, r9
 8008f64:	4630      	mov	r0, r6
 8008f66:	f7ff ff2d 	bl	8008dc4 <swapfunc>
 8008f6a:	e7d9      	b.n	8008f20 <qsort+0xea>
 8008f6c:	4643      	mov	r3, r8
 8008f6e:	4622      	mov	r2, r4
 8008f70:	4649      	mov	r1, r9
 8008f72:	4628      	mov	r0, r5
 8008f74:	f7ff ff26 	bl	8008dc4 <swapfunc>
 8008f78:	e7ea      	b.n	8008f50 <qsort+0x11a>
 8008f7a:	d10b      	bne.n	8008f94 <qsort+0x15e>
 8008f7c:	f1b8 0f00 	cmp.w	r8, #0
 8008f80:	d11e      	bne.n	8008fc0 <qsort+0x18a>
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	f8da 2000 	ldr.w	r2, [sl]
 8008f88:	603a      	str	r2, [r7, #0]
 8008f8a:	f8ca 3000 	str.w	r3, [sl]
 8008f8e:	ebaa 0a04 	sub.w	sl, sl, r4
 8008f92:	2301      	movs	r3, #1
 8008f94:	1b3f      	subs	r7, r7, r4
 8008f96:	45b9      	cmp	r9, r7
 8008f98:	d820      	bhi.n	8008fdc <qsort+0x1a6>
 8008f9a:	9303      	str	r3, [sp, #12]
 8008f9c:	4631      	mov	r1, r6
 8008f9e:	9b00      	ldr	r3, [sp, #0]
 8008fa0:	4638      	mov	r0, r7
 8008fa2:	4798      	blx	r3
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	9b03      	ldr	r3, [sp, #12]
 8008fa8:	dae7      	bge.n	8008f7a <qsort+0x144>
 8008faa:	f1b8 0f00 	cmp.w	r8, #0
 8008fae:	d10e      	bne.n	8008fce <qsort+0x198>
 8008fb0:	f8d9 3000 	ldr.w	r3, [r9]
 8008fb4:	683a      	ldr	r2, [r7, #0]
 8008fb6:	f8c9 2000 	str.w	r2, [r9]
 8008fba:	603b      	str	r3, [r7, #0]
 8008fbc:	1b3f      	subs	r7, r7, r4
 8008fbe:	e7c8      	b.n	8008f52 <qsort+0x11c>
 8008fc0:	4643      	mov	r3, r8
 8008fc2:	4622      	mov	r2, r4
 8008fc4:	4651      	mov	r1, sl
 8008fc6:	4638      	mov	r0, r7
 8008fc8:	f7ff fefc 	bl	8008dc4 <swapfunc>
 8008fcc:	e7df      	b.n	8008f8e <qsort+0x158>
 8008fce:	4643      	mov	r3, r8
 8008fd0:	4622      	mov	r2, r4
 8008fd2:	4639      	mov	r1, r7
 8008fd4:	4648      	mov	r0, r9
 8008fd6:	f7ff fef5 	bl	8008dc4 <swapfunc>
 8008fda:	e7ef      	b.n	8008fbc <qsort+0x186>
 8008fdc:	b9fb      	cbnz	r3, 800901e <qsort+0x1e8>
 8008fde:	9b02      	ldr	r3, [sp, #8]
 8008fe0:	459b      	cmp	fp, r3
 8008fe2:	f4bf af44 	bcs.w	8008e6e <qsort+0x38>
 8008fe6:	465d      	mov	r5, fp
 8008fe8:	e015      	b.n	8009016 <qsort+0x1e0>
 8008fea:	4643      	mov	r3, r8
 8008fec:	4622      	mov	r2, r4
 8008fee:	4639      	mov	r1, r7
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	f7ff fee7 	bl	8008dc4 <swapfunc>
 8008ff6:	e00d      	b.n	8009014 <qsort+0x1de>
 8008ff8:	1b2f      	subs	r7, r5, r4
 8008ffa:	9b00      	ldr	r3, [sp, #0]
 8008ffc:	4629      	mov	r1, r5
 8008ffe:	4638      	mov	r0, r7
 8009000:	4798      	blx	r3
 8009002:	2800      	cmp	r0, #0
 8009004:	dd09      	ble.n	800901a <qsort+0x1e4>
 8009006:	f1b8 0f00 	cmp.w	r8, #0
 800900a:	d1ee      	bne.n	8008fea <qsort+0x1b4>
 800900c:	682b      	ldr	r3, [r5, #0]
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	602a      	str	r2, [r5, #0]
 8009012:	603b      	str	r3, [r7, #0]
 8009014:	463d      	mov	r5, r7
 8009016:	42ae      	cmp	r6, r5
 8009018:	d3ee      	bcc.n	8008ff8 <qsort+0x1c2>
 800901a:	44a3      	add	fp, r4
 800901c:	e7df      	b.n	8008fde <qsort+0x1a8>
 800901e:	eba9 0b05 	sub.w	fp, r9, r5
 8009022:	1baa      	subs	r2, r5, r6
 8009024:	455a      	cmp	r2, fp
 8009026:	bfa8      	it	ge
 8009028:	465a      	movge	r2, fp
 800902a:	b12a      	cbz	r2, 8009038 <qsort+0x202>
 800902c:	4643      	mov	r3, r8
 800902e:	eba9 0102 	sub.w	r1, r9, r2
 8009032:	4630      	mov	r0, r6
 8009034:	f7ff fec6 	bl	8008dc4 <swapfunc>
 8009038:	9b02      	ldr	r3, [sp, #8]
 800903a:	eba3 020a 	sub.w	r2, r3, sl
 800903e:	ebaa 0507 	sub.w	r5, sl, r7
 8009042:	1b12      	subs	r2, r2, r4
 8009044:	42aa      	cmp	r2, r5
 8009046:	bf28      	it	cs
 8009048:	462a      	movcs	r2, r5
 800904a:	b12a      	cbz	r2, 8009058 <qsort+0x222>
 800904c:	9902      	ldr	r1, [sp, #8]
 800904e:	4643      	mov	r3, r8
 8009050:	1a89      	subs	r1, r1, r2
 8009052:	4648      	mov	r0, r9
 8009054:	f7ff feb6 	bl	8008dc4 <swapfunc>
 8009058:	9b02      	ldr	r3, [sp, #8]
 800905a:	455d      	cmp	r5, fp
 800905c:	465f      	mov	r7, fp
 800905e:	eba3 0005 	sub.w	r0, r3, r5
 8009062:	d904      	bls.n	800906e <qsort+0x238>
 8009064:	4633      	mov	r3, r6
 8009066:	462f      	mov	r7, r5
 8009068:	4606      	mov	r6, r0
 800906a:	465d      	mov	r5, fp
 800906c:	4618      	mov	r0, r3
 800906e:	42a5      	cmp	r5, r4
 8009070:	d921      	bls.n	80090b6 <qsort+0x280>
 8009072:	fbb5 f1f4 	udiv	r1, r5, r4
 8009076:	9b01      	ldr	r3, [sp, #4]
 8009078:	2b07      	cmp	r3, #7
 800907a:	d80d      	bhi.n	8009098 <qsort+0x262>
 800907c:	fbb7 f7f4 	udiv	r7, r7, r4
 8009080:	aa14      	add	r2, sp, #80	@ 0x50
 8009082:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009086:	f843 6c40 	str.w	r6, [r3, #-64]
 800908a:	f843 7c3c 	str.w	r7, [r3, #-60]
 800908e:	9b01      	ldr	r3, [sp, #4]
 8009090:	3301      	adds	r3, #1
 8009092:	9301      	str	r3, [sp, #4]
 8009094:	4606      	mov	r6, r0
 8009096:	e6df      	b.n	8008e58 <qsort+0x22>
 8009098:	9b00      	ldr	r3, [sp, #0]
 800909a:	4622      	mov	r2, r4
 800909c:	f7ff fecb 	bl	8008e36 <qsort>
 80090a0:	42a7      	cmp	r7, r4
 80090a2:	d80b      	bhi.n	80090bc <qsort+0x286>
 80090a4:	9b01      	ldr	r3, [sp, #4]
 80090a6:	aa14      	add	r2, sp, #80	@ 0x50
 80090a8:	3b01      	subs	r3, #1
 80090aa:	9301      	str	r3, [sp, #4]
 80090ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80090b0:	e953 0110 	ldrd	r0, r1, [r3, #-64]	@ 0x40
 80090b4:	e7ee      	b.n	8009094 <qsort+0x25e>
 80090b6:	42a7      	cmp	r7, r4
 80090b8:	f67f aed9 	bls.w	8008e6e <qsort+0x38>
 80090bc:	fbb7 f1f4 	udiv	r1, r7, r4
 80090c0:	4630      	mov	r0, r6
 80090c2:	e7e7      	b.n	8009094 <qsort+0x25e>

080090c4 <_fclose_r>:
 80090c4:	b570      	push	{r4, r5, r6, lr}
 80090c6:	4605      	mov	r5, r0
 80090c8:	460c      	mov	r4, r1
 80090ca:	b1b1      	cbz	r1, 80090fa <_fclose_r+0x36>
 80090cc:	b118      	cbz	r0, 80090d6 <_fclose_r+0x12>
 80090ce:	6a03      	ldr	r3, [r0, #32]
 80090d0:	b90b      	cbnz	r3, 80090d6 <_fclose_r+0x12>
 80090d2:	f000 f9df 	bl	8009494 <__sinit>
 80090d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090d8:	07de      	lsls	r6, r3, #31
 80090da:	d405      	bmi.n	80090e8 <_fclose_r+0x24>
 80090dc:	89a3      	ldrh	r3, [r4, #12]
 80090de:	0598      	lsls	r0, r3, #22
 80090e0:	d402      	bmi.n	80090e8 <_fclose_r+0x24>
 80090e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090e4:	f000 fd3e 	bl	8009b64 <__retarget_lock_acquire_recursive>
 80090e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ec:	b943      	cbnz	r3, 8009100 <_fclose_r+0x3c>
 80090ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090f0:	07d9      	lsls	r1, r3, #31
 80090f2:	d402      	bmi.n	80090fa <_fclose_r+0x36>
 80090f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090f6:	f000 fd36 	bl	8009b66 <__retarget_lock_release_recursive>
 80090fa:	2600      	movs	r6, #0
 80090fc:	4630      	mov	r0, r6
 80090fe:	bd70      	pop	{r4, r5, r6, pc}
 8009100:	4621      	mov	r1, r4
 8009102:	4628      	mov	r0, r5
 8009104:	f000 f83c 	bl	8009180 <__sflush_r>
 8009108:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800910a:	4606      	mov	r6, r0
 800910c:	b133      	cbz	r3, 800911c <_fclose_r+0x58>
 800910e:	6a21      	ldr	r1, [r4, #32]
 8009110:	4628      	mov	r0, r5
 8009112:	4798      	blx	r3
 8009114:	2800      	cmp	r0, #0
 8009116:	bfb8      	it	lt
 8009118:	f04f 36ff 	movlt.w	r6, #4294967295
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	061a      	lsls	r2, r3, #24
 8009120:	d503      	bpl.n	800912a <_fclose_r+0x66>
 8009122:	6921      	ldr	r1, [r4, #16]
 8009124:	4628      	mov	r0, r5
 8009126:	f000 fd33 	bl	8009b90 <_free_r>
 800912a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800912c:	b141      	cbz	r1, 8009140 <_fclose_r+0x7c>
 800912e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009132:	4299      	cmp	r1, r3
 8009134:	d002      	beq.n	800913c <_fclose_r+0x78>
 8009136:	4628      	mov	r0, r5
 8009138:	f000 fd2a 	bl	8009b90 <_free_r>
 800913c:	2300      	movs	r3, #0
 800913e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009140:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009142:	b121      	cbz	r1, 800914e <_fclose_r+0x8a>
 8009144:	4628      	mov	r0, r5
 8009146:	f000 fd23 	bl	8009b90 <_free_r>
 800914a:	2300      	movs	r3, #0
 800914c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800914e:	f000 f943 	bl	80093d8 <__sfp_lock_acquire>
 8009152:	2300      	movs	r3, #0
 8009154:	81a3      	strh	r3, [r4, #12]
 8009156:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009158:	07db      	lsls	r3, r3, #31
 800915a:	d402      	bmi.n	8009162 <_fclose_r+0x9e>
 800915c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800915e:	f000 fd02 	bl	8009b66 <__retarget_lock_release_recursive>
 8009162:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009164:	f000 fcfd 	bl	8009b62 <__retarget_lock_close_recursive>
 8009168:	f000 f93c 	bl	80093e4 <__sfp_lock_release>
 800916c:	e7c6      	b.n	80090fc <_fclose_r+0x38>
	...

08009170 <fclose>:
 8009170:	4b02      	ldr	r3, [pc, #8]	@ (800917c <fclose+0xc>)
 8009172:	4601      	mov	r1, r0
 8009174:	6818      	ldr	r0, [r3, #0]
 8009176:	f7ff bfa5 	b.w	80090c4 <_fclose_r>
 800917a:	bf00      	nop
 800917c:	20000018 	.word	0x20000018

08009180 <__sflush_r>:
 8009180:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009188:	0716      	lsls	r6, r2, #28
 800918a:	4605      	mov	r5, r0
 800918c:	460c      	mov	r4, r1
 800918e:	d454      	bmi.n	800923a <__sflush_r+0xba>
 8009190:	684b      	ldr	r3, [r1, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	dc02      	bgt.n	800919c <__sflush_r+0x1c>
 8009196:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009198:	2b00      	cmp	r3, #0
 800919a:	dd48      	ble.n	800922e <__sflush_r+0xae>
 800919c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800919e:	2e00      	cmp	r6, #0
 80091a0:	d045      	beq.n	800922e <__sflush_r+0xae>
 80091a2:	2300      	movs	r3, #0
 80091a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80091a8:	682f      	ldr	r7, [r5, #0]
 80091aa:	6a21      	ldr	r1, [r4, #32]
 80091ac:	602b      	str	r3, [r5, #0]
 80091ae:	d030      	beq.n	8009212 <__sflush_r+0x92>
 80091b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80091b2:	89a3      	ldrh	r3, [r4, #12]
 80091b4:	0759      	lsls	r1, r3, #29
 80091b6:	d505      	bpl.n	80091c4 <__sflush_r+0x44>
 80091b8:	6863      	ldr	r3, [r4, #4]
 80091ba:	1ad2      	subs	r2, r2, r3
 80091bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80091be:	b10b      	cbz	r3, 80091c4 <__sflush_r+0x44>
 80091c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80091c2:	1ad2      	subs	r2, r2, r3
 80091c4:	2300      	movs	r3, #0
 80091c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091c8:	6a21      	ldr	r1, [r4, #32]
 80091ca:	4628      	mov	r0, r5
 80091cc:	47b0      	blx	r6
 80091ce:	1c43      	adds	r3, r0, #1
 80091d0:	89a3      	ldrh	r3, [r4, #12]
 80091d2:	d106      	bne.n	80091e2 <__sflush_r+0x62>
 80091d4:	6829      	ldr	r1, [r5, #0]
 80091d6:	291d      	cmp	r1, #29
 80091d8:	d82b      	bhi.n	8009232 <__sflush_r+0xb2>
 80091da:	4a2a      	ldr	r2, [pc, #168]	@ (8009284 <__sflush_r+0x104>)
 80091dc:	410a      	asrs	r2, r1
 80091de:	07d6      	lsls	r6, r2, #31
 80091e0:	d427      	bmi.n	8009232 <__sflush_r+0xb2>
 80091e2:	2200      	movs	r2, #0
 80091e4:	6062      	str	r2, [r4, #4]
 80091e6:	04d9      	lsls	r1, r3, #19
 80091e8:	6922      	ldr	r2, [r4, #16]
 80091ea:	6022      	str	r2, [r4, #0]
 80091ec:	d504      	bpl.n	80091f8 <__sflush_r+0x78>
 80091ee:	1c42      	adds	r2, r0, #1
 80091f0:	d101      	bne.n	80091f6 <__sflush_r+0x76>
 80091f2:	682b      	ldr	r3, [r5, #0]
 80091f4:	b903      	cbnz	r3, 80091f8 <__sflush_r+0x78>
 80091f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80091f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091fa:	602f      	str	r7, [r5, #0]
 80091fc:	b1b9      	cbz	r1, 800922e <__sflush_r+0xae>
 80091fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009202:	4299      	cmp	r1, r3
 8009204:	d002      	beq.n	800920c <__sflush_r+0x8c>
 8009206:	4628      	mov	r0, r5
 8009208:	f000 fcc2 	bl	8009b90 <_free_r>
 800920c:	2300      	movs	r3, #0
 800920e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009210:	e00d      	b.n	800922e <__sflush_r+0xae>
 8009212:	2301      	movs	r3, #1
 8009214:	4628      	mov	r0, r5
 8009216:	47b0      	blx	r6
 8009218:	4602      	mov	r2, r0
 800921a:	1c50      	adds	r0, r2, #1
 800921c:	d1c9      	bne.n	80091b2 <__sflush_r+0x32>
 800921e:	682b      	ldr	r3, [r5, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d0c6      	beq.n	80091b2 <__sflush_r+0x32>
 8009224:	2b1d      	cmp	r3, #29
 8009226:	d001      	beq.n	800922c <__sflush_r+0xac>
 8009228:	2b16      	cmp	r3, #22
 800922a:	d11e      	bne.n	800926a <__sflush_r+0xea>
 800922c:	602f      	str	r7, [r5, #0]
 800922e:	2000      	movs	r0, #0
 8009230:	e022      	b.n	8009278 <__sflush_r+0xf8>
 8009232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009236:	b21b      	sxth	r3, r3
 8009238:	e01b      	b.n	8009272 <__sflush_r+0xf2>
 800923a:	690f      	ldr	r7, [r1, #16]
 800923c:	2f00      	cmp	r7, #0
 800923e:	d0f6      	beq.n	800922e <__sflush_r+0xae>
 8009240:	0793      	lsls	r3, r2, #30
 8009242:	680e      	ldr	r6, [r1, #0]
 8009244:	bf08      	it	eq
 8009246:	694b      	ldreq	r3, [r1, #20]
 8009248:	600f      	str	r7, [r1, #0]
 800924a:	bf18      	it	ne
 800924c:	2300      	movne	r3, #0
 800924e:	eba6 0807 	sub.w	r8, r6, r7
 8009252:	608b      	str	r3, [r1, #8]
 8009254:	f1b8 0f00 	cmp.w	r8, #0
 8009258:	dde9      	ble.n	800922e <__sflush_r+0xae>
 800925a:	6a21      	ldr	r1, [r4, #32]
 800925c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800925e:	4643      	mov	r3, r8
 8009260:	463a      	mov	r2, r7
 8009262:	4628      	mov	r0, r5
 8009264:	47b0      	blx	r6
 8009266:	2800      	cmp	r0, #0
 8009268:	dc08      	bgt.n	800927c <__sflush_r+0xfc>
 800926a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800926e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009272:	81a3      	strh	r3, [r4, #12]
 8009274:	f04f 30ff 	mov.w	r0, #4294967295
 8009278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800927c:	4407      	add	r7, r0
 800927e:	eba8 0800 	sub.w	r8, r8, r0
 8009282:	e7e7      	b.n	8009254 <__sflush_r+0xd4>
 8009284:	dfbffffe 	.word	0xdfbffffe

08009288 <_fflush_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	690b      	ldr	r3, [r1, #16]
 800928c:	4605      	mov	r5, r0
 800928e:	460c      	mov	r4, r1
 8009290:	b913      	cbnz	r3, 8009298 <_fflush_r+0x10>
 8009292:	2500      	movs	r5, #0
 8009294:	4628      	mov	r0, r5
 8009296:	bd38      	pop	{r3, r4, r5, pc}
 8009298:	b118      	cbz	r0, 80092a2 <_fflush_r+0x1a>
 800929a:	6a03      	ldr	r3, [r0, #32]
 800929c:	b90b      	cbnz	r3, 80092a2 <_fflush_r+0x1a>
 800929e:	f000 f8f9 	bl	8009494 <__sinit>
 80092a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d0f3      	beq.n	8009292 <_fflush_r+0xa>
 80092aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80092ac:	07d0      	lsls	r0, r2, #31
 80092ae:	d404      	bmi.n	80092ba <_fflush_r+0x32>
 80092b0:	0599      	lsls	r1, r3, #22
 80092b2:	d402      	bmi.n	80092ba <_fflush_r+0x32>
 80092b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092b6:	f000 fc55 	bl	8009b64 <__retarget_lock_acquire_recursive>
 80092ba:	4628      	mov	r0, r5
 80092bc:	4621      	mov	r1, r4
 80092be:	f7ff ff5f 	bl	8009180 <__sflush_r>
 80092c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092c4:	07da      	lsls	r2, r3, #31
 80092c6:	4605      	mov	r5, r0
 80092c8:	d4e4      	bmi.n	8009294 <_fflush_r+0xc>
 80092ca:	89a3      	ldrh	r3, [r4, #12]
 80092cc:	059b      	lsls	r3, r3, #22
 80092ce:	d4e1      	bmi.n	8009294 <_fflush_r+0xc>
 80092d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092d2:	f000 fc48 	bl	8009b66 <__retarget_lock_release_recursive>
 80092d6:	e7dd      	b.n	8009294 <_fflush_r+0xc>

080092d8 <std>:
 80092d8:	2300      	movs	r3, #0
 80092da:	b510      	push	{r4, lr}
 80092dc:	4604      	mov	r4, r0
 80092de:	e9c0 3300 	strd	r3, r3, [r0]
 80092e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092e6:	6083      	str	r3, [r0, #8]
 80092e8:	8181      	strh	r1, [r0, #12]
 80092ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80092ec:	81c2      	strh	r2, [r0, #14]
 80092ee:	6183      	str	r3, [r0, #24]
 80092f0:	4619      	mov	r1, r3
 80092f2:	2208      	movs	r2, #8
 80092f4:	305c      	adds	r0, #92	@ 0x5c
 80092f6:	f000 fb7c 	bl	80099f2 <memset>
 80092fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009330 <std+0x58>)
 80092fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80092fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009334 <std+0x5c>)
 8009300:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009302:	4b0d      	ldr	r3, [pc, #52]	@ (8009338 <std+0x60>)
 8009304:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009306:	4b0d      	ldr	r3, [pc, #52]	@ (800933c <std+0x64>)
 8009308:	6323      	str	r3, [r4, #48]	@ 0x30
 800930a:	4b0d      	ldr	r3, [pc, #52]	@ (8009340 <std+0x68>)
 800930c:	6224      	str	r4, [r4, #32]
 800930e:	429c      	cmp	r4, r3
 8009310:	d006      	beq.n	8009320 <std+0x48>
 8009312:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009316:	4294      	cmp	r4, r2
 8009318:	d002      	beq.n	8009320 <std+0x48>
 800931a:	33d0      	adds	r3, #208	@ 0xd0
 800931c:	429c      	cmp	r4, r3
 800931e:	d105      	bne.n	800932c <std+0x54>
 8009320:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009328:	f000 bc1a 	b.w	8009b60 <__retarget_lock_init_recursive>
 800932c:	bd10      	pop	{r4, pc}
 800932e:	bf00      	nop
 8009330:	08009715 	.word	0x08009715
 8009334:	08009737 	.word	0x08009737
 8009338:	0800976f 	.word	0x0800976f
 800933c:	08009793 	.word	0x08009793
 8009340:	20000d2c 	.word	0x20000d2c

08009344 <stdio_exit_handler>:
 8009344:	4a02      	ldr	r2, [pc, #8]	@ (8009350 <stdio_exit_handler+0xc>)
 8009346:	4903      	ldr	r1, [pc, #12]	@ (8009354 <stdio_exit_handler+0x10>)
 8009348:	4803      	ldr	r0, [pc, #12]	@ (8009358 <stdio_exit_handler+0x14>)
 800934a:	f000 b971 	b.w	8009630 <_fwalk_sglue>
 800934e:	bf00      	nop
 8009350:	2000000c 	.word	0x2000000c
 8009354:	08009289 	.word	0x08009289
 8009358:	2000001c 	.word	0x2000001c

0800935c <cleanup_stdio>:
 800935c:	6841      	ldr	r1, [r0, #4]
 800935e:	4b0c      	ldr	r3, [pc, #48]	@ (8009390 <cleanup_stdio+0x34>)
 8009360:	4299      	cmp	r1, r3
 8009362:	b510      	push	{r4, lr}
 8009364:	4604      	mov	r4, r0
 8009366:	d001      	beq.n	800936c <cleanup_stdio+0x10>
 8009368:	f7ff ff8e 	bl	8009288 <_fflush_r>
 800936c:	68a1      	ldr	r1, [r4, #8]
 800936e:	4b09      	ldr	r3, [pc, #36]	@ (8009394 <cleanup_stdio+0x38>)
 8009370:	4299      	cmp	r1, r3
 8009372:	d002      	beq.n	800937a <cleanup_stdio+0x1e>
 8009374:	4620      	mov	r0, r4
 8009376:	f7ff ff87 	bl	8009288 <_fflush_r>
 800937a:	68e1      	ldr	r1, [r4, #12]
 800937c:	4b06      	ldr	r3, [pc, #24]	@ (8009398 <cleanup_stdio+0x3c>)
 800937e:	4299      	cmp	r1, r3
 8009380:	d004      	beq.n	800938c <cleanup_stdio+0x30>
 8009382:	4620      	mov	r0, r4
 8009384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009388:	f7ff bf7e 	b.w	8009288 <_fflush_r>
 800938c:	bd10      	pop	{r4, pc}
 800938e:	bf00      	nop
 8009390:	20000d2c 	.word	0x20000d2c
 8009394:	20000d94 	.word	0x20000d94
 8009398:	20000dfc 	.word	0x20000dfc

0800939c <global_stdio_init.part.0>:
 800939c:	b510      	push	{r4, lr}
 800939e:	4b0b      	ldr	r3, [pc, #44]	@ (80093cc <global_stdio_init.part.0+0x30>)
 80093a0:	4c0b      	ldr	r4, [pc, #44]	@ (80093d0 <global_stdio_init.part.0+0x34>)
 80093a2:	4a0c      	ldr	r2, [pc, #48]	@ (80093d4 <global_stdio_init.part.0+0x38>)
 80093a4:	601a      	str	r2, [r3, #0]
 80093a6:	4620      	mov	r0, r4
 80093a8:	2200      	movs	r2, #0
 80093aa:	2104      	movs	r1, #4
 80093ac:	f7ff ff94 	bl	80092d8 <std>
 80093b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80093b4:	2201      	movs	r2, #1
 80093b6:	2109      	movs	r1, #9
 80093b8:	f7ff ff8e 	bl	80092d8 <std>
 80093bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80093c0:	2202      	movs	r2, #2
 80093c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093c6:	2112      	movs	r1, #18
 80093c8:	f7ff bf86 	b.w	80092d8 <std>
 80093cc:	20000e64 	.word	0x20000e64
 80093d0:	20000d2c 	.word	0x20000d2c
 80093d4:	08009345 	.word	0x08009345

080093d8 <__sfp_lock_acquire>:
 80093d8:	4801      	ldr	r0, [pc, #4]	@ (80093e0 <__sfp_lock_acquire+0x8>)
 80093da:	f000 bbc3 	b.w	8009b64 <__retarget_lock_acquire_recursive>
 80093de:	bf00      	nop
 80093e0:	20000e6d 	.word	0x20000e6d

080093e4 <__sfp_lock_release>:
 80093e4:	4801      	ldr	r0, [pc, #4]	@ (80093ec <__sfp_lock_release+0x8>)
 80093e6:	f000 bbbe 	b.w	8009b66 <__retarget_lock_release_recursive>
 80093ea:	bf00      	nop
 80093ec:	20000e6d 	.word	0x20000e6d

080093f0 <__sfp>:
 80093f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f2:	4607      	mov	r7, r0
 80093f4:	f7ff fff0 	bl	80093d8 <__sfp_lock_acquire>
 80093f8:	4b23      	ldr	r3, [pc, #140]	@ (8009488 <__sfp+0x98>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	b90b      	cbnz	r3, 8009402 <__sfp+0x12>
 80093fe:	f7ff ffcd 	bl	800939c <global_stdio_init.part.0>
 8009402:	4e22      	ldr	r6, [pc, #136]	@ (800948c <__sfp+0x9c>)
 8009404:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009408:	3b01      	subs	r3, #1
 800940a:	d50f      	bpl.n	800942c <__sfp+0x3c>
 800940c:	6835      	ldr	r5, [r6, #0]
 800940e:	2d00      	cmp	r5, #0
 8009410:	d137      	bne.n	8009482 <__sfp+0x92>
 8009412:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8009416:	4638      	mov	r0, r7
 8009418:	f7ff fc48 	bl	8008cac <_malloc_r>
 800941c:	4604      	mov	r4, r0
 800941e:	bb28      	cbnz	r0, 800946c <__sfp+0x7c>
 8009420:	6030      	str	r0, [r6, #0]
 8009422:	f7ff ffdf 	bl	80093e4 <__sfp_lock_release>
 8009426:	230c      	movs	r3, #12
 8009428:	603b      	str	r3, [r7, #0]
 800942a:	e01b      	b.n	8009464 <__sfp+0x74>
 800942c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009430:	b9d5      	cbnz	r5, 8009468 <__sfp+0x78>
 8009432:	4b17      	ldr	r3, [pc, #92]	@ (8009490 <__sfp+0xa0>)
 8009434:	60e3      	str	r3, [r4, #12]
 8009436:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800943a:	6665      	str	r5, [r4, #100]	@ 0x64
 800943c:	f000 fb90 	bl	8009b60 <__retarget_lock_init_recursive>
 8009440:	f7ff ffd0 	bl	80093e4 <__sfp_lock_release>
 8009444:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009448:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800944c:	6025      	str	r5, [r4, #0]
 800944e:	61a5      	str	r5, [r4, #24]
 8009450:	2208      	movs	r2, #8
 8009452:	4629      	mov	r1, r5
 8009454:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8009458:	f000 facb 	bl	80099f2 <memset>
 800945c:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8009460:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 8009464:	4620      	mov	r0, r4
 8009466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009468:	3468      	adds	r4, #104	@ 0x68
 800946a:	e7cd      	b.n	8009408 <__sfp+0x18>
 800946c:	2304      	movs	r3, #4
 800946e:	6005      	str	r5, [r0, #0]
 8009470:	6043      	str	r3, [r0, #4]
 8009472:	300c      	adds	r0, #12
 8009474:	60a0      	str	r0, [r4, #8]
 8009476:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 800947a:	4629      	mov	r1, r5
 800947c:	f000 fab9 	bl	80099f2 <memset>
 8009480:	6034      	str	r4, [r6, #0]
 8009482:	6836      	ldr	r6, [r6, #0]
 8009484:	e7be      	b.n	8009404 <__sfp+0x14>
 8009486:	bf00      	nop
 8009488:	20000e64 	.word	0x20000e64
 800948c:	2000000c 	.word	0x2000000c
 8009490:	ffff0001 	.word	0xffff0001

08009494 <__sinit>:
 8009494:	b510      	push	{r4, lr}
 8009496:	4604      	mov	r4, r0
 8009498:	f7ff ff9e 	bl	80093d8 <__sfp_lock_acquire>
 800949c:	6a23      	ldr	r3, [r4, #32]
 800949e:	b11b      	cbz	r3, 80094a8 <__sinit+0x14>
 80094a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094a4:	f7ff bf9e 	b.w	80093e4 <__sfp_lock_release>
 80094a8:	4b04      	ldr	r3, [pc, #16]	@ (80094bc <__sinit+0x28>)
 80094aa:	6223      	str	r3, [r4, #32]
 80094ac:	4b04      	ldr	r3, [pc, #16]	@ (80094c0 <__sinit+0x2c>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1f5      	bne.n	80094a0 <__sinit+0xc>
 80094b4:	f7ff ff72 	bl	800939c <global_stdio_init.part.0>
 80094b8:	e7f2      	b.n	80094a0 <__sinit+0xc>
 80094ba:	bf00      	nop
 80094bc:	0800935d 	.word	0x0800935d
 80094c0:	20000e64 	.word	0x20000e64

080094c4 <_fopen_r>:
 80094c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094c6:	460f      	mov	r7, r1
 80094c8:	4611      	mov	r1, r2
 80094ca:	aa01      	add	r2, sp, #4
 80094cc:	4606      	mov	r6, r0
 80094ce:	f000 fe8f 	bl	800a1f0 <__sflags>
 80094d2:	4605      	mov	r5, r0
 80094d4:	b1b0      	cbz	r0, 8009504 <_fopen_r+0x40>
 80094d6:	4630      	mov	r0, r6
 80094d8:	f7ff ff8a 	bl	80093f0 <__sfp>
 80094dc:	4604      	mov	r4, r0
 80094de:	b188      	cbz	r0, 8009504 <_fopen_r+0x40>
 80094e0:	4639      	mov	r1, r7
 80094e2:	9a01      	ldr	r2, [sp, #4]
 80094e4:	f44f 73db 	mov.w	r3, #438	@ 0x1b6
 80094e8:	4630      	mov	r0, r6
 80094ea:	f000 fac9 	bl	8009a80 <_open_r>
 80094ee:	1e07      	subs	r7, r0, #0
 80094f0:	da0c      	bge.n	800950c <_fopen_r+0x48>
 80094f2:	f7ff ff71 	bl	80093d8 <__sfp_lock_acquire>
 80094f6:	2300      	movs	r3, #0
 80094f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094fa:	81a3      	strh	r3, [r4, #12]
 80094fc:	f000 fb31 	bl	8009b62 <__retarget_lock_close_recursive>
 8009500:	f7ff ff70 	bl	80093e4 <__sfp_lock_release>
 8009504:	2400      	movs	r4, #0
 8009506:	4620      	mov	r0, r4
 8009508:	b003      	add	sp, #12
 800950a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800950c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800950e:	07db      	lsls	r3, r3, #31
 8009510:	d405      	bmi.n	800951e <_fopen_r+0x5a>
 8009512:	89a3      	ldrh	r3, [r4, #12]
 8009514:	0598      	lsls	r0, r3, #22
 8009516:	d402      	bmi.n	800951e <_fopen_r+0x5a>
 8009518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800951a:	f000 fb23 	bl	8009b64 <__retarget_lock_acquire_recursive>
 800951e:	4b0f      	ldr	r3, [pc, #60]	@ (800955c <_fopen_r+0x98>)
 8009520:	6263      	str	r3, [r4, #36]	@ 0x24
 8009522:	4b0f      	ldr	r3, [pc, #60]	@ (8009560 <_fopen_r+0x9c>)
 8009524:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009526:	b22d      	sxth	r5, r5
 8009528:	4b0e      	ldr	r3, [pc, #56]	@ (8009564 <_fopen_r+0xa0>)
 800952a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800952c:	05e9      	lsls	r1, r5, #23
 800952e:	4b0e      	ldr	r3, [pc, #56]	@ (8009568 <_fopen_r+0xa4>)
 8009530:	81e7      	strh	r7, [r4, #14]
 8009532:	81a5      	strh	r5, [r4, #12]
 8009534:	6224      	str	r4, [r4, #32]
 8009536:	6323      	str	r3, [r4, #48]	@ 0x30
 8009538:	d505      	bpl.n	8009546 <_fopen_r+0x82>
 800953a:	2302      	movs	r3, #2
 800953c:	2200      	movs	r2, #0
 800953e:	4621      	mov	r1, r4
 8009540:	4630      	mov	r0, r6
 8009542:	f000 f873 	bl	800962c <_fseek_r>
 8009546:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009548:	07da      	lsls	r2, r3, #31
 800954a:	d4dc      	bmi.n	8009506 <_fopen_r+0x42>
 800954c:	89a3      	ldrh	r3, [r4, #12]
 800954e:	059b      	lsls	r3, r3, #22
 8009550:	d4d9      	bmi.n	8009506 <_fopen_r+0x42>
 8009552:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009554:	f000 fb07 	bl	8009b66 <__retarget_lock_release_recursive>
 8009558:	e7d5      	b.n	8009506 <_fopen_r+0x42>
 800955a:	bf00      	nop
 800955c:	08009715 	.word	0x08009715
 8009560:	08009737 	.word	0x08009737
 8009564:	0800976f 	.word	0x0800976f
 8009568:	08009793 	.word	0x08009793

0800956c <fopen>:
 800956c:	4b02      	ldr	r3, [pc, #8]	@ (8009578 <fopen+0xc>)
 800956e:	460a      	mov	r2, r1
 8009570:	4601      	mov	r1, r0
 8009572:	6818      	ldr	r0, [r3, #0]
 8009574:	f7ff bfa6 	b.w	80094c4 <_fopen_r>
 8009578:	20000018 	.word	0x20000018

0800957c <_fputs_r>:
 800957c:	b570      	push	{r4, r5, r6, lr}
 800957e:	460d      	mov	r5, r1
 8009580:	4614      	mov	r4, r2
 8009582:	4606      	mov	r6, r0
 8009584:	b118      	cbz	r0, 800958e <_fputs_r+0x12>
 8009586:	6a03      	ldr	r3, [r0, #32]
 8009588:	b90b      	cbnz	r3, 800958e <_fputs_r+0x12>
 800958a:	f7ff ff83 	bl	8009494 <__sinit>
 800958e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009590:	07d9      	lsls	r1, r3, #31
 8009592:	d405      	bmi.n	80095a0 <_fputs_r+0x24>
 8009594:	89a3      	ldrh	r3, [r4, #12]
 8009596:	059a      	lsls	r2, r3, #22
 8009598:	d402      	bmi.n	80095a0 <_fputs_r+0x24>
 800959a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800959c:	f000 fae2 	bl	8009b64 <__retarget_lock_acquire_recursive>
 80095a0:	89a3      	ldrh	r3, [r4, #12]
 80095a2:	071b      	lsls	r3, r3, #28
 80095a4:	d501      	bpl.n	80095aa <_fputs_r+0x2e>
 80095a6:	6923      	ldr	r3, [r4, #16]
 80095a8:	bb73      	cbnz	r3, 8009608 <_fputs_r+0x8c>
 80095aa:	4621      	mov	r1, r4
 80095ac:	4630      	mov	r0, r6
 80095ae:	f000 f933 	bl	8009818 <__swsetup_r>
 80095b2:	b348      	cbz	r0, 8009608 <_fputs_r+0x8c>
 80095b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095b6:	07da      	lsls	r2, r3, #31
 80095b8:	d402      	bmi.n	80095c0 <_fputs_r+0x44>
 80095ba:	89a3      	ldrh	r3, [r4, #12]
 80095bc:	059b      	lsls	r3, r3, #22
 80095be:	d529      	bpl.n	8009614 <_fputs_r+0x98>
 80095c0:	f04f 30ff 	mov.w	r0, #4294967295
 80095c4:	e018      	b.n	80095f8 <_fputs_r+0x7c>
 80095c6:	68a3      	ldr	r3, [r4, #8]
 80095c8:	3b01      	subs	r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	60a3      	str	r3, [r4, #8]
 80095ce:	da04      	bge.n	80095da <_fputs_r+0x5e>
 80095d0:	69a2      	ldr	r2, [r4, #24]
 80095d2:	4293      	cmp	r3, r2
 80095d4:	db11      	blt.n	80095fa <_fputs_r+0x7e>
 80095d6:	290a      	cmp	r1, #10
 80095d8:	d00f      	beq.n	80095fa <_fputs_r+0x7e>
 80095da:	6823      	ldr	r3, [r4, #0]
 80095dc:	1c5a      	adds	r2, r3, #1
 80095de:	6022      	str	r2, [r4, #0]
 80095e0:	7019      	strb	r1, [r3, #0]
 80095e2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80095e6:	2900      	cmp	r1, #0
 80095e8:	d1ed      	bne.n	80095c6 <_fputs_r+0x4a>
 80095ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095ec:	07d8      	lsls	r0, r3, #31
 80095ee:	d402      	bmi.n	80095f6 <_fputs_r+0x7a>
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	0599      	lsls	r1, r3, #22
 80095f4:	d50a      	bpl.n	800960c <_fputs_r+0x90>
 80095f6:	2000      	movs	r0, #0
 80095f8:	bd70      	pop	{r4, r5, r6, pc}
 80095fa:	4622      	mov	r2, r4
 80095fc:	4630      	mov	r0, r6
 80095fe:	f000 f8cc 	bl	800979a <__swbuf_r>
 8009602:	3001      	adds	r0, #1
 8009604:	d1ed      	bne.n	80095e2 <_fputs_r+0x66>
 8009606:	e7d5      	b.n	80095b4 <_fputs_r+0x38>
 8009608:	3d01      	subs	r5, #1
 800960a:	e7ea      	b.n	80095e2 <_fputs_r+0x66>
 800960c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800960e:	f000 faaa 	bl	8009b66 <__retarget_lock_release_recursive>
 8009612:	e7f0      	b.n	80095f6 <_fputs_r+0x7a>
 8009614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009616:	f000 faa6 	bl	8009b66 <__retarget_lock_release_recursive>
 800961a:	e7d1      	b.n	80095c0 <_fputs_r+0x44>

0800961c <fputs>:
 800961c:	4b02      	ldr	r3, [pc, #8]	@ (8009628 <fputs+0xc>)
 800961e:	460a      	mov	r2, r1
 8009620:	4601      	mov	r1, r0
 8009622:	6818      	ldr	r0, [r3, #0]
 8009624:	f7ff bfaa 	b.w	800957c <_fputs_r>
 8009628:	20000018 	.word	0x20000018

0800962c <_fseek_r>:
 800962c:	f000 b94a 	b.w	80098c4 <_fseeko_r>

08009630 <_fwalk_sglue>:
 8009630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009634:	4607      	mov	r7, r0
 8009636:	4688      	mov	r8, r1
 8009638:	4614      	mov	r4, r2
 800963a:	2600      	movs	r6, #0
 800963c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009640:	f1b9 0901 	subs.w	r9, r9, #1
 8009644:	d505      	bpl.n	8009652 <_fwalk_sglue+0x22>
 8009646:	6824      	ldr	r4, [r4, #0]
 8009648:	2c00      	cmp	r4, #0
 800964a:	d1f7      	bne.n	800963c <_fwalk_sglue+0xc>
 800964c:	4630      	mov	r0, r6
 800964e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009652:	89ab      	ldrh	r3, [r5, #12]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d907      	bls.n	8009668 <_fwalk_sglue+0x38>
 8009658:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800965c:	3301      	adds	r3, #1
 800965e:	d003      	beq.n	8009668 <_fwalk_sglue+0x38>
 8009660:	4629      	mov	r1, r5
 8009662:	4638      	mov	r0, r7
 8009664:	47c0      	blx	r8
 8009666:	4306      	orrs	r6, r0
 8009668:	3568      	adds	r5, #104	@ 0x68
 800966a:	e7e9      	b.n	8009640 <_fwalk_sglue+0x10>

0800966c <sniprintf>:
 800966c:	b40c      	push	{r2, r3}
 800966e:	b530      	push	{r4, r5, lr}
 8009670:	4b17      	ldr	r3, [pc, #92]	@ (80096d0 <sniprintf+0x64>)
 8009672:	1e0c      	subs	r4, r1, #0
 8009674:	681d      	ldr	r5, [r3, #0]
 8009676:	b09d      	sub	sp, #116	@ 0x74
 8009678:	da08      	bge.n	800968c <sniprintf+0x20>
 800967a:	238b      	movs	r3, #139	@ 0x8b
 800967c:	602b      	str	r3, [r5, #0]
 800967e:	f04f 30ff 	mov.w	r0, #4294967295
 8009682:	b01d      	add	sp, #116	@ 0x74
 8009684:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009688:	b002      	add	sp, #8
 800968a:	4770      	bx	lr
 800968c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009690:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009694:	bf14      	ite	ne
 8009696:	f104 33ff 	addne.w	r3, r4, #4294967295
 800969a:	4623      	moveq	r3, r4
 800969c:	9304      	str	r3, [sp, #16]
 800969e:	9307      	str	r3, [sp, #28]
 80096a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80096a4:	9002      	str	r0, [sp, #8]
 80096a6:	9006      	str	r0, [sp, #24]
 80096a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80096ac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80096ae:	ab21      	add	r3, sp, #132	@ 0x84
 80096b0:	a902      	add	r1, sp, #8
 80096b2:	4628      	mov	r0, r5
 80096b4:	9301      	str	r3, [sp, #4]
 80096b6:	f000 fb11 	bl	8009cdc <_svfiprintf_r>
 80096ba:	1c43      	adds	r3, r0, #1
 80096bc:	bfbc      	itt	lt
 80096be:	238b      	movlt	r3, #139	@ 0x8b
 80096c0:	602b      	strlt	r3, [r5, #0]
 80096c2:	2c00      	cmp	r4, #0
 80096c4:	d0dd      	beq.n	8009682 <sniprintf+0x16>
 80096c6:	9b02      	ldr	r3, [sp, #8]
 80096c8:	2200      	movs	r2, #0
 80096ca:	701a      	strb	r2, [r3, #0]
 80096cc:	e7d9      	b.n	8009682 <sniprintf+0x16>
 80096ce:	bf00      	nop
 80096d0:	20000018 	.word	0x20000018

080096d4 <siprintf>:
 80096d4:	b40e      	push	{r1, r2, r3}
 80096d6:	b500      	push	{lr}
 80096d8:	b09c      	sub	sp, #112	@ 0x70
 80096da:	ab1d      	add	r3, sp, #116	@ 0x74
 80096dc:	9002      	str	r0, [sp, #8]
 80096de:	9006      	str	r0, [sp, #24]
 80096e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80096e4:	4809      	ldr	r0, [pc, #36]	@ (800970c <siprintf+0x38>)
 80096e6:	9107      	str	r1, [sp, #28]
 80096e8:	9104      	str	r1, [sp, #16]
 80096ea:	4909      	ldr	r1, [pc, #36]	@ (8009710 <siprintf+0x3c>)
 80096ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80096f0:	9105      	str	r1, [sp, #20]
 80096f2:	6800      	ldr	r0, [r0, #0]
 80096f4:	9301      	str	r3, [sp, #4]
 80096f6:	a902      	add	r1, sp, #8
 80096f8:	f000 faf0 	bl	8009cdc <_svfiprintf_r>
 80096fc:	9b02      	ldr	r3, [sp, #8]
 80096fe:	2200      	movs	r2, #0
 8009700:	701a      	strb	r2, [r3, #0]
 8009702:	b01c      	add	sp, #112	@ 0x70
 8009704:	f85d eb04 	ldr.w	lr, [sp], #4
 8009708:	b003      	add	sp, #12
 800970a:	4770      	bx	lr
 800970c:	20000018 	.word	0x20000018
 8009710:	ffff0208 	.word	0xffff0208

08009714 <__sread>:
 8009714:	b510      	push	{r4, lr}
 8009716:	460c      	mov	r4, r1
 8009718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800971c:	f000 f9c2 	bl	8009aa4 <_read_r>
 8009720:	2800      	cmp	r0, #0
 8009722:	bfab      	itete	ge
 8009724:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009726:	89a3      	ldrhlt	r3, [r4, #12]
 8009728:	181b      	addge	r3, r3, r0
 800972a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800972e:	bfac      	ite	ge
 8009730:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009732:	81a3      	strhlt	r3, [r4, #12]
 8009734:	bd10      	pop	{r4, pc}

08009736 <__swrite>:
 8009736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800973a:	461f      	mov	r7, r3
 800973c:	898b      	ldrh	r3, [r1, #12]
 800973e:	05db      	lsls	r3, r3, #23
 8009740:	4605      	mov	r5, r0
 8009742:	460c      	mov	r4, r1
 8009744:	4616      	mov	r6, r2
 8009746:	d505      	bpl.n	8009754 <__swrite+0x1e>
 8009748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800974c:	2302      	movs	r3, #2
 800974e:	2200      	movs	r2, #0
 8009750:	f000 f984 	bl	8009a5c <_lseek_r>
 8009754:	89a3      	ldrh	r3, [r4, #12]
 8009756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800975a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800975e:	81a3      	strh	r3, [r4, #12]
 8009760:	4632      	mov	r2, r6
 8009762:	463b      	mov	r3, r7
 8009764:	4628      	mov	r0, r5
 8009766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800976a:	f000 b9bd 	b.w	8009ae8 <_write_r>

0800976e <__sseek>:
 800976e:	b510      	push	{r4, lr}
 8009770:	460c      	mov	r4, r1
 8009772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009776:	f000 f971 	bl	8009a5c <_lseek_r>
 800977a:	1c43      	adds	r3, r0, #1
 800977c:	89a3      	ldrh	r3, [r4, #12]
 800977e:	bf15      	itete	ne
 8009780:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009782:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009786:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800978a:	81a3      	strheq	r3, [r4, #12]
 800978c:	bf18      	it	ne
 800978e:	81a3      	strhne	r3, [r4, #12]
 8009790:	bd10      	pop	{r4, pc}

08009792 <__sclose>:
 8009792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009796:	f000 b951 	b.w	8009a3c <_close_r>

0800979a <__swbuf_r>:
 800979a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979c:	460e      	mov	r6, r1
 800979e:	4614      	mov	r4, r2
 80097a0:	4605      	mov	r5, r0
 80097a2:	b118      	cbz	r0, 80097ac <__swbuf_r+0x12>
 80097a4:	6a03      	ldr	r3, [r0, #32]
 80097a6:	b90b      	cbnz	r3, 80097ac <__swbuf_r+0x12>
 80097a8:	f7ff fe74 	bl	8009494 <__sinit>
 80097ac:	69a3      	ldr	r3, [r4, #24]
 80097ae:	60a3      	str	r3, [r4, #8]
 80097b0:	89a3      	ldrh	r3, [r4, #12]
 80097b2:	071a      	lsls	r2, r3, #28
 80097b4:	d501      	bpl.n	80097ba <__swbuf_r+0x20>
 80097b6:	6923      	ldr	r3, [r4, #16]
 80097b8:	b943      	cbnz	r3, 80097cc <__swbuf_r+0x32>
 80097ba:	4621      	mov	r1, r4
 80097bc:	4628      	mov	r0, r5
 80097be:	f000 f82b 	bl	8009818 <__swsetup_r>
 80097c2:	b118      	cbz	r0, 80097cc <__swbuf_r+0x32>
 80097c4:	f04f 37ff 	mov.w	r7, #4294967295
 80097c8:	4638      	mov	r0, r7
 80097ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097cc:	6823      	ldr	r3, [r4, #0]
 80097ce:	6922      	ldr	r2, [r4, #16]
 80097d0:	1a98      	subs	r0, r3, r2
 80097d2:	6963      	ldr	r3, [r4, #20]
 80097d4:	b2f6      	uxtb	r6, r6
 80097d6:	4283      	cmp	r3, r0
 80097d8:	4637      	mov	r7, r6
 80097da:	dc05      	bgt.n	80097e8 <__swbuf_r+0x4e>
 80097dc:	4621      	mov	r1, r4
 80097de:	4628      	mov	r0, r5
 80097e0:	f7ff fd52 	bl	8009288 <_fflush_r>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d1ed      	bne.n	80097c4 <__swbuf_r+0x2a>
 80097e8:	68a3      	ldr	r3, [r4, #8]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	60a3      	str	r3, [r4, #8]
 80097ee:	6823      	ldr	r3, [r4, #0]
 80097f0:	1c5a      	adds	r2, r3, #1
 80097f2:	6022      	str	r2, [r4, #0]
 80097f4:	701e      	strb	r6, [r3, #0]
 80097f6:	6962      	ldr	r2, [r4, #20]
 80097f8:	1c43      	adds	r3, r0, #1
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d004      	beq.n	8009808 <__swbuf_r+0x6e>
 80097fe:	89a3      	ldrh	r3, [r4, #12]
 8009800:	07db      	lsls	r3, r3, #31
 8009802:	d5e1      	bpl.n	80097c8 <__swbuf_r+0x2e>
 8009804:	2e0a      	cmp	r6, #10
 8009806:	d1df      	bne.n	80097c8 <__swbuf_r+0x2e>
 8009808:	4621      	mov	r1, r4
 800980a:	4628      	mov	r0, r5
 800980c:	f7ff fd3c 	bl	8009288 <_fflush_r>
 8009810:	2800      	cmp	r0, #0
 8009812:	d0d9      	beq.n	80097c8 <__swbuf_r+0x2e>
 8009814:	e7d6      	b.n	80097c4 <__swbuf_r+0x2a>
	...

08009818 <__swsetup_r>:
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	4b29      	ldr	r3, [pc, #164]	@ (80098c0 <__swsetup_r+0xa8>)
 800981c:	4605      	mov	r5, r0
 800981e:	6818      	ldr	r0, [r3, #0]
 8009820:	460c      	mov	r4, r1
 8009822:	b118      	cbz	r0, 800982c <__swsetup_r+0x14>
 8009824:	6a03      	ldr	r3, [r0, #32]
 8009826:	b90b      	cbnz	r3, 800982c <__swsetup_r+0x14>
 8009828:	f7ff fe34 	bl	8009494 <__sinit>
 800982c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009830:	0719      	lsls	r1, r3, #28
 8009832:	d422      	bmi.n	800987a <__swsetup_r+0x62>
 8009834:	06da      	lsls	r2, r3, #27
 8009836:	d407      	bmi.n	8009848 <__swsetup_r+0x30>
 8009838:	2209      	movs	r2, #9
 800983a:	602a      	str	r2, [r5, #0]
 800983c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009840:	81a3      	strh	r3, [r4, #12]
 8009842:	f04f 30ff 	mov.w	r0, #4294967295
 8009846:	e033      	b.n	80098b0 <__swsetup_r+0x98>
 8009848:	0758      	lsls	r0, r3, #29
 800984a:	d512      	bpl.n	8009872 <__swsetup_r+0x5a>
 800984c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800984e:	b141      	cbz	r1, 8009862 <__swsetup_r+0x4a>
 8009850:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009854:	4299      	cmp	r1, r3
 8009856:	d002      	beq.n	800985e <__swsetup_r+0x46>
 8009858:	4628      	mov	r0, r5
 800985a:	f000 f999 	bl	8009b90 <_free_r>
 800985e:	2300      	movs	r3, #0
 8009860:	6363      	str	r3, [r4, #52]	@ 0x34
 8009862:	89a3      	ldrh	r3, [r4, #12]
 8009864:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009868:	81a3      	strh	r3, [r4, #12]
 800986a:	2300      	movs	r3, #0
 800986c:	6063      	str	r3, [r4, #4]
 800986e:	6923      	ldr	r3, [r4, #16]
 8009870:	6023      	str	r3, [r4, #0]
 8009872:	89a3      	ldrh	r3, [r4, #12]
 8009874:	f043 0308 	orr.w	r3, r3, #8
 8009878:	81a3      	strh	r3, [r4, #12]
 800987a:	6923      	ldr	r3, [r4, #16]
 800987c:	b94b      	cbnz	r3, 8009892 <__swsetup_r+0x7a>
 800987e:	89a3      	ldrh	r3, [r4, #12]
 8009880:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009888:	d003      	beq.n	8009892 <__swsetup_r+0x7a>
 800988a:	4621      	mov	r1, r4
 800988c:	4628      	mov	r0, r5
 800988e:	f000 fd0b 	bl	800a2a8 <__smakebuf_r>
 8009892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009896:	f013 0201 	ands.w	r2, r3, #1
 800989a:	d00a      	beq.n	80098b2 <__swsetup_r+0x9a>
 800989c:	2200      	movs	r2, #0
 800989e:	60a2      	str	r2, [r4, #8]
 80098a0:	6962      	ldr	r2, [r4, #20]
 80098a2:	4252      	negs	r2, r2
 80098a4:	61a2      	str	r2, [r4, #24]
 80098a6:	6922      	ldr	r2, [r4, #16]
 80098a8:	b942      	cbnz	r2, 80098bc <__swsetup_r+0xa4>
 80098aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098ae:	d1c5      	bne.n	800983c <__swsetup_r+0x24>
 80098b0:	bd38      	pop	{r3, r4, r5, pc}
 80098b2:	0799      	lsls	r1, r3, #30
 80098b4:	bf58      	it	pl
 80098b6:	6962      	ldrpl	r2, [r4, #20]
 80098b8:	60a2      	str	r2, [r4, #8]
 80098ba:	e7f4      	b.n	80098a6 <__swsetup_r+0x8e>
 80098bc:	2000      	movs	r0, #0
 80098be:	e7f7      	b.n	80098b0 <__swsetup_r+0x98>
 80098c0:	20000018 	.word	0x20000018

080098c4 <_fseeko_r>:
 80098c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098c8:	460c      	mov	r4, r1
 80098ca:	4690      	mov	r8, r2
 80098cc:	461e      	mov	r6, r3
 80098ce:	4605      	mov	r5, r0
 80098d0:	b118      	cbz	r0, 80098da <_fseeko_r+0x16>
 80098d2:	6a03      	ldr	r3, [r0, #32]
 80098d4:	b90b      	cbnz	r3, 80098da <_fseeko_r+0x16>
 80098d6:	f7ff fddd 	bl	8009494 <__sinit>
 80098da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098dc:	07d9      	lsls	r1, r3, #31
 80098de:	d405      	bmi.n	80098ec <_fseeko_r+0x28>
 80098e0:	89a3      	ldrh	r3, [r4, #12]
 80098e2:	059a      	lsls	r2, r3, #22
 80098e4:	d402      	bmi.n	80098ec <_fseeko_r+0x28>
 80098e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098e8:	f000 f93c 	bl	8009b64 <__retarget_lock_acquire_recursive>
 80098ec:	89a3      	ldrh	r3, [r4, #12]
 80098ee:	f403 7384 	and.w	r3, r3, #264	@ 0x108
 80098f2:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 80098f6:	d103      	bne.n	8009900 <_fseeko_r+0x3c>
 80098f8:	4621      	mov	r1, r4
 80098fa:	4628      	mov	r0, r5
 80098fc:	f7ff fcc4 	bl	8009288 <_fflush_r>
 8009900:	f8d4 902c 	ldr.w	r9, [r4, #44]	@ 0x2c
 8009904:	f1b9 0f00 	cmp.w	r9, #0
 8009908:	d102      	bne.n	8009910 <_fseeko_r+0x4c>
 800990a:	231d      	movs	r3, #29
 800990c:	602b      	str	r3, [r5, #0]
 800990e:	e058      	b.n	80099c2 <_fseeko_r+0xfe>
 8009910:	2e01      	cmp	r6, #1
 8009912:	d03a      	beq.n	800998a <_fseeko_r+0xc6>
 8009914:	f036 0302 	bics.w	r3, r6, #2
 8009918:	d162      	bne.n	80099e0 <_fseeko_r+0x11c>
 800991a:	6923      	ldr	r3, [r4, #16]
 800991c:	b91b      	cbnz	r3, 8009926 <_fseeko_r+0x62>
 800991e:	4621      	mov	r1, r4
 8009920:	4628      	mov	r0, r5
 8009922:	f000 fcc1 	bl	800a2a8 <__smakebuf_r>
 8009926:	4621      	mov	r1, r4
 8009928:	4628      	mov	r0, r5
 800992a:	f7ff fcad 	bl	8009288 <_fflush_r>
 800992e:	4607      	mov	r7, r0
 8009930:	2800      	cmp	r0, #0
 8009932:	d146      	bne.n	80099c2 <_fseeko_r+0xfe>
 8009934:	6a21      	ldr	r1, [r4, #32]
 8009936:	4633      	mov	r3, r6
 8009938:	4642      	mov	r2, r8
 800993a:	4628      	mov	r0, r5
 800993c:	47c8      	blx	r9
 800993e:	3001      	adds	r0, #1
 8009940:	d03f      	beq.n	80099c2 <_fseeko_r+0xfe>
 8009942:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009944:	b141      	cbz	r1, 8009958 <_fseeko_r+0x94>
 8009946:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800994a:	4299      	cmp	r1, r3
 800994c:	d002      	beq.n	8009954 <_fseeko_r+0x90>
 800994e:	4628      	mov	r0, r5
 8009950:	f000 f91e 	bl	8009b90 <_free_r>
 8009954:	2300      	movs	r3, #0
 8009956:	6363      	str	r3, [r4, #52]	@ 0x34
 8009958:	6923      	ldr	r3, [r4, #16]
 800995a:	6023      	str	r3, [r4, #0]
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	2100      	movs	r1, #0
 8009960:	f423 6302 	bic.w	r3, r3, #2080	@ 0x820
 8009964:	81a3      	strh	r3, [r4, #12]
 8009966:	2208      	movs	r2, #8
 8009968:	6061      	str	r1, [r4, #4]
 800996a:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 800996e:	f000 f840 	bl	80099f2 <memset>
 8009972:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009974:	07da      	lsls	r2, r3, #31
 8009976:	d405      	bmi.n	8009984 <_fseeko_r+0xc0>
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	059b      	lsls	r3, r3, #22
 800997c:	d402      	bmi.n	8009984 <_fseeko_r+0xc0>
 800997e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009980:	f000 f8f1 	bl	8009b66 <__retarget_lock_release_recursive>
 8009984:	4638      	mov	r0, r7
 8009986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800998a:	4621      	mov	r1, r4
 800998c:	4628      	mov	r0, r5
 800998e:	f7ff fc7b 	bl	8009288 <_fflush_r>
 8009992:	89a2      	ldrh	r2, [r4, #12]
 8009994:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009998:	d00d      	beq.n	80099b6 <_fseeko_r+0xf2>
 800999a:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800999c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099a0:	075f      	lsls	r7, r3, #29
 80099a2:	d514      	bpl.n	80099ce <_fseeko_r+0x10a>
 80099a4:	6863      	ldr	r3, [r4, #4]
 80099a6:	1ac0      	subs	r0, r0, r3
 80099a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80099aa:	b10b      	cbz	r3, 80099b0 <_fseeko_r+0xec>
 80099ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80099ae:	1ac0      	subs	r0, r0, r3
 80099b0:	4480      	add	r8, r0
 80099b2:	2600      	movs	r6, #0
 80099b4:	e7b1      	b.n	800991a <_fseeko_r+0x56>
 80099b6:	4633      	mov	r3, r6
 80099b8:	6a21      	ldr	r1, [r4, #32]
 80099ba:	4628      	mov	r0, r5
 80099bc:	47c8      	blx	r9
 80099be:	1c43      	adds	r3, r0, #1
 80099c0:	d1ec      	bne.n	800999c <_fseeko_r+0xd8>
 80099c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099c4:	07d8      	lsls	r0, r3, #31
 80099c6:	d50d      	bpl.n	80099e4 <_fseeko_r+0x120>
 80099c8:	f04f 37ff 	mov.w	r7, #4294967295
 80099cc:	e7da      	b.n	8009984 <_fseeko_r+0xc0>
 80099ce:	071e      	lsls	r6, r3, #28
 80099d0:	d5ee      	bpl.n	80099b0 <_fseeko_r+0xec>
 80099d2:	6823      	ldr	r3, [r4, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d0eb      	beq.n	80099b0 <_fseeko_r+0xec>
 80099d8:	6922      	ldr	r2, [r4, #16]
 80099da:	1a9b      	subs	r3, r3, r2
 80099dc:	4418      	add	r0, r3
 80099de:	e7e7      	b.n	80099b0 <_fseeko_r+0xec>
 80099e0:	2316      	movs	r3, #22
 80099e2:	e793      	b.n	800990c <_fseeko_r+0x48>
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	0599      	lsls	r1, r3, #22
 80099e8:	d4ee      	bmi.n	80099c8 <_fseeko_r+0x104>
 80099ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099ec:	f000 f8bb 	bl	8009b66 <__retarget_lock_release_recursive>
 80099f0:	e7ea      	b.n	80099c8 <_fseeko_r+0x104>

080099f2 <memset>:
 80099f2:	4402      	add	r2, r0
 80099f4:	4603      	mov	r3, r0
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d100      	bne.n	80099fc <memset+0xa>
 80099fa:	4770      	bx	lr
 80099fc:	f803 1b01 	strb.w	r1, [r3], #1
 8009a00:	e7f9      	b.n	80099f6 <memset+0x4>
	...

08009a04 <strdup>:
 8009a04:	4b02      	ldr	r3, [pc, #8]	@ (8009a10 <strdup+0xc>)
 8009a06:	4601      	mov	r1, r0
 8009a08:	6818      	ldr	r0, [r3, #0]
 8009a0a:	f000 b803 	b.w	8009a14 <_strdup_r>
 8009a0e:	bf00      	nop
 8009a10:	20000018 	.word	0x20000018

08009a14 <_strdup_r>:
 8009a14:	b570      	push	{r4, r5, r6, lr}
 8009a16:	4604      	mov	r4, r0
 8009a18:	4608      	mov	r0, r1
 8009a1a:	460d      	mov	r5, r1
 8009a1c:	f7fb feb8 	bl	8005790 <strlen>
 8009a20:	1c46      	adds	r6, r0, #1
 8009a22:	4631      	mov	r1, r6
 8009a24:	4620      	mov	r0, r4
 8009a26:	f7ff f941 	bl	8008cac <_malloc_r>
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	b118      	cbz	r0, 8009a36 <_strdup_r+0x22>
 8009a2e:	4632      	mov	r2, r6
 8009a30:	4629      	mov	r1, r5
 8009a32:	f000 f89e 	bl	8009b72 <memcpy>
 8009a36:	4620      	mov	r0, r4
 8009a38:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a3c <_close_r>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4d06      	ldr	r5, [pc, #24]	@ (8009a58 <_close_r+0x1c>)
 8009a40:	2300      	movs	r3, #0
 8009a42:	4604      	mov	r4, r0
 8009a44:	4608      	mov	r0, r1
 8009a46:	602b      	str	r3, [r5, #0]
 8009a48:	f7fd f839 	bl	8006abe <_close>
 8009a4c:	1c43      	adds	r3, r0, #1
 8009a4e:	d102      	bne.n	8009a56 <_close_r+0x1a>
 8009a50:	682b      	ldr	r3, [r5, #0]
 8009a52:	b103      	cbz	r3, 8009a56 <_close_r+0x1a>
 8009a54:	6023      	str	r3, [r4, #0]
 8009a56:	bd38      	pop	{r3, r4, r5, pc}
 8009a58:	20000e68 	.word	0x20000e68

08009a5c <_lseek_r>:
 8009a5c:	b538      	push	{r3, r4, r5, lr}
 8009a5e:	4d07      	ldr	r5, [pc, #28]	@ (8009a7c <_lseek_r+0x20>)
 8009a60:	4604      	mov	r4, r0
 8009a62:	4608      	mov	r0, r1
 8009a64:	4611      	mov	r1, r2
 8009a66:	2200      	movs	r2, #0
 8009a68:	602a      	str	r2, [r5, #0]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f7fd f84e 	bl	8006b0c <_lseek>
 8009a70:	1c43      	adds	r3, r0, #1
 8009a72:	d102      	bne.n	8009a7a <_lseek_r+0x1e>
 8009a74:	682b      	ldr	r3, [r5, #0]
 8009a76:	b103      	cbz	r3, 8009a7a <_lseek_r+0x1e>
 8009a78:	6023      	str	r3, [r4, #0]
 8009a7a:	bd38      	pop	{r3, r4, r5, pc}
 8009a7c:	20000e68 	.word	0x20000e68

08009a80 <_open_r>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	4d07      	ldr	r5, [pc, #28]	@ (8009aa0 <_open_r+0x20>)
 8009a84:	4604      	mov	r4, r0
 8009a86:	4608      	mov	r0, r1
 8009a88:	4611      	mov	r1, r2
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	602a      	str	r2, [r5, #0]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	f7fd f849 	bl	8006b26 <_open>
 8009a94:	1c43      	adds	r3, r0, #1
 8009a96:	d102      	bne.n	8009a9e <_open_r+0x1e>
 8009a98:	682b      	ldr	r3, [r5, #0]
 8009a9a:	b103      	cbz	r3, 8009a9e <_open_r+0x1e>
 8009a9c:	6023      	str	r3, [r4, #0]
 8009a9e:	bd38      	pop	{r3, r4, r5, pc}
 8009aa0:	20000e68 	.word	0x20000e68

08009aa4 <_read_r>:
 8009aa4:	b538      	push	{r3, r4, r5, lr}
 8009aa6:	4d07      	ldr	r5, [pc, #28]	@ (8009ac4 <_read_r+0x20>)
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	4608      	mov	r0, r1
 8009aac:	4611      	mov	r1, r2
 8009aae:	2200      	movs	r2, #0
 8009ab0:	602a      	str	r2, [r5, #0]
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	f7fc ffca 	bl	8006a4c <_read>
 8009ab8:	1c43      	adds	r3, r0, #1
 8009aba:	d102      	bne.n	8009ac2 <_read_r+0x1e>
 8009abc:	682b      	ldr	r3, [r5, #0]
 8009abe:	b103      	cbz	r3, 8009ac2 <_read_r+0x1e>
 8009ac0:	6023      	str	r3, [r4, #0]
 8009ac2:	bd38      	pop	{r3, r4, r5, pc}
 8009ac4:	20000e68 	.word	0x20000e68

08009ac8 <_sbrk_r>:
 8009ac8:	b538      	push	{r3, r4, r5, lr}
 8009aca:	4d06      	ldr	r5, [pc, #24]	@ (8009ae4 <_sbrk_r+0x1c>)
 8009acc:	2300      	movs	r3, #0
 8009ace:	4604      	mov	r4, r0
 8009ad0:	4608      	mov	r0, r1
 8009ad2:	602b      	str	r3, [r5, #0]
 8009ad4:	f7fd f836 	bl	8006b44 <_sbrk>
 8009ad8:	1c43      	adds	r3, r0, #1
 8009ada:	d102      	bne.n	8009ae2 <_sbrk_r+0x1a>
 8009adc:	682b      	ldr	r3, [r5, #0]
 8009ade:	b103      	cbz	r3, 8009ae2 <_sbrk_r+0x1a>
 8009ae0:	6023      	str	r3, [r4, #0]
 8009ae2:	bd38      	pop	{r3, r4, r5, pc}
 8009ae4:	20000e68 	.word	0x20000e68

08009ae8 <_write_r>:
 8009ae8:	b538      	push	{r3, r4, r5, lr}
 8009aea:	4d07      	ldr	r5, [pc, #28]	@ (8009b08 <_write_r+0x20>)
 8009aec:	4604      	mov	r4, r0
 8009aee:	4608      	mov	r0, r1
 8009af0:	4611      	mov	r1, r2
 8009af2:	2200      	movs	r2, #0
 8009af4:	602a      	str	r2, [r5, #0]
 8009af6:	461a      	mov	r2, r3
 8009af8:	f7fc ffc5 	bl	8006a86 <_write>
 8009afc:	1c43      	adds	r3, r0, #1
 8009afe:	d102      	bne.n	8009b06 <_write_r+0x1e>
 8009b00:	682b      	ldr	r3, [r5, #0]
 8009b02:	b103      	cbz	r3, 8009b06 <_write_r+0x1e>
 8009b04:	6023      	str	r3, [r4, #0]
 8009b06:	bd38      	pop	{r3, r4, r5, pc}
 8009b08:	20000e68 	.word	0x20000e68

08009b0c <__errno>:
 8009b0c:	4b01      	ldr	r3, [pc, #4]	@ (8009b14 <__errno+0x8>)
 8009b0e:	6818      	ldr	r0, [r3, #0]
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	20000018 	.word	0x20000018

08009b18 <__libc_init_array>:
 8009b18:	b570      	push	{r4, r5, r6, lr}
 8009b1a:	4d0d      	ldr	r5, [pc, #52]	@ (8009b50 <__libc_init_array+0x38>)
 8009b1c:	4c0d      	ldr	r4, [pc, #52]	@ (8009b54 <__libc_init_array+0x3c>)
 8009b1e:	1b64      	subs	r4, r4, r5
 8009b20:	10a4      	asrs	r4, r4, #2
 8009b22:	2600      	movs	r6, #0
 8009b24:	42a6      	cmp	r6, r4
 8009b26:	d109      	bne.n	8009b3c <__libc_init_array+0x24>
 8009b28:	4d0b      	ldr	r5, [pc, #44]	@ (8009b58 <__libc_init_array+0x40>)
 8009b2a:	4c0c      	ldr	r4, [pc, #48]	@ (8009b5c <__libc_init_array+0x44>)
 8009b2c:	f000 fc6a 	bl	800a404 <_init>
 8009b30:	1b64      	subs	r4, r4, r5
 8009b32:	10a4      	asrs	r4, r4, #2
 8009b34:	2600      	movs	r6, #0
 8009b36:	42a6      	cmp	r6, r4
 8009b38:	d105      	bne.n	8009b46 <__libc_init_array+0x2e>
 8009b3a:	bd70      	pop	{r4, r5, r6, pc}
 8009b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b40:	4798      	blx	r3
 8009b42:	3601      	adds	r6, #1
 8009b44:	e7ee      	b.n	8009b24 <__libc_init_array+0xc>
 8009b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b4a:	4798      	blx	r3
 8009b4c:	3601      	adds	r6, #1
 8009b4e:	e7f2      	b.n	8009b36 <__libc_init_array+0x1e>
 8009b50:	0800b0c8 	.word	0x0800b0c8
 8009b54:	0800b0c8 	.word	0x0800b0c8
 8009b58:	0800b0c8 	.word	0x0800b0c8
 8009b5c:	0800b0cc 	.word	0x0800b0cc

08009b60 <__retarget_lock_init_recursive>:
 8009b60:	4770      	bx	lr

08009b62 <__retarget_lock_close_recursive>:
 8009b62:	4770      	bx	lr

08009b64 <__retarget_lock_acquire_recursive>:
 8009b64:	4770      	bx	lr

08009b66 <__retarget_lock_release_recursive>:
 8009b66:	4770      	bx	lr

08009b68 <__aeabi_memcpy>:
 8009b68:	f000 b803 	b.w	8009b72 <memcpy>

08009b6c <__aeabi_memclr>:
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f7fb be17 	b.w	80057a0 <__aeabi_memset>

08009b72 <memcpy>:
 8009b72:	440a      	add	r2, r1
 8009b74:	4291      	cmp	r1, r2
 8009b76:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b7a:	d100      	bne.n	8009b7e <memcpy+0xc>
 8009b7c:	4770      	bx	lr
 8009b7e:	b510      	push	{r4, lr}
 8009b80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b88:	4291      	cmp	r1, r2
 8009b8a:	d1f9      	bne.n	8009b80 <memcpy+0xe>
 8009b8c:	bd10      	pop	{r4, pc}
	...

08009b90 <_free_r>:
 8009b90:	b538      	push	{r3, r4, r5, lr}
 8009b92:	4605      	mov	r5, r0
 8009b94:	2900      	cmp	r1, #0
 8009b96:	d041      	beq.n	8009c1c <_free_r+0x8c>
 8009b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b9c:	1f0c      	subs	r4, r1, #4
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	bfb8      	it	lt
 8009ba2:	18e4      	addlt	r4, r4, r3
 8009ba4:	f7ff f902 	bl	8008dac <__malloc_lock>
 8009ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8009c20 <_free_r+0x90>)
 8009baa:	6813      	ldr	r3, [r2, #0]
 8009bac:	b933      	cbnz	r3, 8009bbc <_free_r+0x2c>
 8009bae:	6063      	str	r3, [r4, #4]
 8009bb0:	6014      	str	r4, [r2, #0]
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bb8:	f7ff b8fe 	b.w	8008db8 <__malloc_unlock>
 8009bbc:	42a3      	cmp	r3, r4
 8009bbe:	d908      	bls.n	8009bd2 <_free_r+0x42>
 8009bc0:	6820      	ldr	r0, [r4, #0]
 8009bc2:	1821      	adds	r1, r4, r0
 8009bc4:	428b      	cmp	r3, r1
 8009bc6:	bf01      	itttt	eq
 8009bc8:	6819      	ldreq	r1, [r3, #0]
 8009bca:	685b      	ldreq	r3, [r3, #4]
 8009bcc:	1809      	addeq	r1, r1, r0
 8009bce:	6021      	streq	r1, [r4, #0]
 8009bd0:	e7ed      	b.n	8009bae <_free_r+0x1e>
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	b10b      	cbz	r3, 8009bdc <_free_r+0x4c>
 8009bd8:	42a3      	cmp	r3, r4
 8009bda:	d9fa      	bls.n	8009bd2 <_free_r+0x42>
 8009bdc:	6811      	ldr	r1, [r2, #0]
 8009bde:	1850      	adds	r0, r2, r1
 8009be0:	42a0      	cmp	r0, r4
 8009be2:	d10b      	bne.n	8009bfc <_free_r+0x6c>
 8009be4:	6820      	ldr	r0, [r4, #0]
 8009be6:	4401      	add	r1, r0
 8009be8:	1850      	adds	r0, r2, r1
 8009bea:	4283      	cmp	r3, r0
 8009bec:	6011      	str	r1, [r2, #0]
 8009bee:	d1e0      	bne.n	8009bb2 <_free_r+0x22>
 8009bf0:	6818      	ldr	r0, [r3, #0]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	6053      	str	r3, [r2, #4]
 8009bf6:	4408      	add	r0, r1
 8009bf8:	6010      	str	r0, [r2, #0]
 8009bfa:	e7da      	b.n	8009bb2 <_free_r+0x22>
 8009bfc:	d902      	bls.n	8009c04 <_free_r+0x74>
 8009bfe:	230c      	movs	r3, #12
 8009c00:	602b      	str	r3, [r5, #0]
 8009c02:	e7d6      	b.n	8009bb2 <_free_r+0x22>
 8009c04:	6820      	ldr	r0, [r4, #0]
 8009c06:	1821      	adds	r1, r4, r0
 8009c08:	428b      	cmp	r3, r1
 8009c0a:	bf04      	itt	eq
 8009c0c:	6819      	ldreq	r1, [r3, #0]
 8009c0e:	685b      	ldreq	r3, [r3, #4]
 8009c10:	6063      	str	r3, [r4, #4]
 8009c12:	bf04      	itt	eq
 8009c14:	1809      	addeq	r1, r1, r0
 8009c16:	6021      	streq	r1, [r4, #0]
 8009c18:	6054      	str	r4, [r2, #4]
 8009c1a:	e7ca      	b.n	8009bb2 <_free_r+0x22>
 8009c1c:	bd38      	pop	{r3, r4, r5, pc}
 8009c1e:	bf00      	nop
 8009c20:	20000d28 	.word	0x20000d28

08009c24 <__ssputs_r>:
 8009c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c28:	688e      	ldr	r6, [r1, #8]
 8009c2a:	461f      	mov	r7, r3
 8009c2c:	42be      	cmp	r6, r7
 8009c2e:	680b      	ldr	r3, [r1, #0]
 8009c30:	4682      	mov	sl, r0
 8009c32:	460c      	mov	r4, r1
 8009c34:	4690      	mov	r8, r2
 8009c36:	d82d      	bhi.n	8009c94 <__ssputs_r+0x70>
 8009c38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009c40:	d026      	beq.n	8009c90 <__ssputs_r+0x6c>
 8009c42:	6965      	ldr	r5, [r4, #20]
 8009c44:	6909      	ldr	r1, [r1, #16]
 8009c46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c4a:	eba3 0901 	sub.w	r9, r3, r1
 8009c4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c52:	1c7b      	adds	r3, r7, #1
 8009c54:	444b      	add	r3, r9
 8009c56:	106d      	asrs	r5, r5, #1
 8009c58:	429d      	cmp	r5, r3
 8009c5a:	bf38      	it	cc
 8009c5c:	461d      	movcc	r5, r3
 8009c5e:	0553      	lsls	r3, r2, #21
 8009c60:	d527      	bpl.n	8009cb2 <__ssputs_r+0x8e>
 8009c62:	4629      	mov	r1, r5
 8009c64:	f7ff f822 	bl	8008cac <_malloc_r>
 8009c68:	4606      	mov	r6, r0
 8009c6a:	b360      	cbz	r0, 8009cc6 <__ssputs_r+0xa2>
 8009c6c:	6921      	ldr	r1, [r4, #16]
 8009c6e:	464a      	mov	r2, r9
 8009c70:	f7ff ff7f 	bl	8009b72 <memcpy>
 8009c74:	89a3      	ldrh	r3, [r4, #12]
 8009c76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c7e:	81a3      	strh	r3, [r4, #12]
 8009c80:	6126      	str	r6, [r4, #16]
 8009c82:	6165      	str	r5, [r4, #20]
 8009c84:	444e      	add	r6, r9
 8009c86:	eba5 0509 	sub.w	r5, r5, r9
 8009c8a:	6026      	str	r6, [r4, #0]
 8009c8c:	60a5      	str	r5, [r4, #8]
 8009c8e:	463e      	mov	r6, r7
 8009c90:	42be      	cmp	r6, r7
 8009c92:	d900      	bls.n	8009c96 <__ssputs_r+0x72>
 8009c94:	463e      	mov	r6, r7
 8009c96:	6820      	ldr	r0, [r4, #0]
 8009c98:	4632      	mov	r2, r6
 8009c9a:	4641      	mov	r1, r8
 8009c9c:	f000 fb40 	bl	800a320 <memmove>
 8009ca0:	68a3      	ldr	r3, [r4, #8]
 8009ca2:	1b9b      	subs	r3, r3, r6
 8009ca4:	60a3      	str	r3, [r4, #8]
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	4433      	add	r3, r6
 8009caa:	6023      	str	r3, [r4, #0]
 8009cac:	2000      	movs	r0, #0
 8009cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb2:	462a      	mov	r2, r5
 8009cb4:	f000 fb70 	bl	800a398 <_realloc_r>
 8009cb8:	4606      	mov	r6, r0
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	d1e0      	bne.n	8009c80 <__ssputs_r+0x5c>
 8009cbe:	6921      	ldr	r1, [r4, #16]
 8009cc0:	4650      	mov	r0, sl
 8009cc2:	f7ff ff65 	bl	8009b90 <_free_r>
 8009cc6:	230c      	movs	r3, #12
 8009cc8:	f8ca 3000 	str.w	r3, [sl]
 8009ccc:	89a3      	ldrh	r3, [r4, #12]
 8009cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cd2:	81a3      	strh	r3, [r4, #12]
 8009cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd8:	e7e9      	b.n	8009cae <__ssputs_r+0x8a>
	...

08009cdc <_svfiprintf_r>:
 8009cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce0:	4698      	mov	r8, r3
 8009ce2:	898b      	ldrh	r3, [r1, #12]
 8009ce4:	061b      	lsls	r3, r3, #24
 8009ce6:	b09d      	sub	sp, #116	@ 0x74
 8009ce8:	4607      	mov	r7, r0
 8009cea:	460d      	mov	r5, r1
 8009cec:	4614      	mov	r4, r2
 8009cee:	d510      	bpl.n	8009d12 <_svfiprintf_r+0x36>
 8009cf0:	690b      	ldr	r3, [r1, #16]
 8009cf2:	b973      	cbnz	r3, 8009d12 <_svfiprintf_r+0x36>
 8009cf4:	2140      	movs	r1, #64	@ 0x40
 8009cf6:	f7fe ffd9 	bl	8008cac <_malloc_r>
 8009cfa:	6028      	str	r0, [r5, #0]
 8009cfc:	6128      	str	r0, [r5, #16]
 8009cfe:	b930      	cbnz	r0, 8009d0e <_svfiprintf_r+0x32>
 8009d00:	230c      	movs	r3, #12
 8009d02:	603b      	str	r3, [r7, #0]
 8009d04:	f04f 30ff 	mov.w	r0, #4294967295
 8009d08:	b01d      	add	sp, #116	@ 0x74
 8009d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d0e:	2340      	movs	r3, #64	@ 0x40
 8009d10:	616b      	str	r3, [r5, #20]
 8009d12:	2300      	movs	r3, #0
 8009d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d16:	2320      	movs	r3, #32
 8009d18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d20:	2330      	movs	r3, #48	@ 0x30
 8009d22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009ec0 <_svfiprintf_r+0x1e4>
 8009d26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d2a:	f04f 0901 	mov.w	r9, #1
 8009d2e:	4623      	mov	r3, r4
 8009d30:	469a      	mov	sl, r3
 8009d32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d36:	b10a      	cbz	r2, 8009d3c <_svfiprintf_r+0x60>
 8009d38:	2a25      	cmp	r2, #37	@ 0x25
 8009d3a:	d1f9      	bne.n	8009d30 <_svfiprintf_r+0x54>
 8009d3c:	ebba 0b04 	subs.w	fp, sl, r4
 8009d40:	d00b      	beq.n	8009d5a <_svfiprintf_r+0x7e>
 8009d42:	465b      	mov	r3, fp
 8009d44:	4622      	mov	r2, r4
 8009d46:	4629      	mov	r1, r5
 8009d48:	4638      	mov	r0, r7
 8009d4a:	f7ff ff6b 	bl	8009c24 <__ssputs_r>
 8009d4e:	3001      	adds	r0, #1
 8009d50:	f000 80a7 	beq.w	8009ea2 <_svfiprintf_r+0x1c6>
 8009d54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d56:	445a      	add	r2, fp
 8009d58:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 809f 	beq.w	8009ea2 <_svfiprintf_r+0x1c6>
 8009d64:	2300      	movs	r3, #0
 8009d66:	f04f 32ff 	mov.w	r2, #4294967295
 8009d6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d6e:	f10a 0a01 	add.w	sl, sl, #1
 8009d72:	9304      	str	r3, [sp, #16]
 8009d74:	9307      	str	r3, [sp, #28]
 8009d76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d7c:	4654      	mov	r4, sl
 8009d7e:	2205      	movs	r2, #5
 8009d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d84:	484e      	ldr	r0, [pc, #312]	@ (8009ec0 <_svfiprintf_r+0x1e4>)
 8009d86:	f7fb fd5b 	bl	8005840 <memchr>
 8009d8a:	9a04      	ldr	r2, [sp, #16]
 8009d8c:	b9d8      	cbnz	r0, 8009dc6 <_svfiprintf_r+0xea>
 8009d8e:	06d0      	lsls	r0, r2, #27
 8009d90:	bf44      	itt	mi
 8009d92:	2320      	movmi	r3, #32
 8009d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d98:	0711      	lsls	r1, r2, #28
 8009d9a:	bf44      	itt	mi
 8009d9c:	232b      	movmi	r3, #43	@ 0x2b
 8009d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009da2:	f89a 3000 	ldrb.w	r3, [sl]
 8009da6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009da8:	d015      	beq.n	8009dd6 <_svfiprintf_r+0xfa>
 8009daa:	9a07      	ldr	r2, [sp, #28]
 8009dac:	4654      	mov	r4, sl
 8009dae:	2000      	movs	r0, #0
 8009db0:	f04f 0c0a 	mov.w	ip, #10
 8009db4:	4621      	mov	r1, r4
 8009db6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dba:	3b30      	subs	r3, #48	@ 0x30
 8009dbc:	2b09      	cmp	r3, #9
 8009dbe:	d94b      	bls.n	8009e58 <_svfiprintf_r+0x17c>
 8009dc0:	b1b0      	cbz	r0, 8009df0 <_svfiprintf_r+0x114>
 8009dc2:	9207      	str	r2, [sp, #28]
 8009dc4:	e014      	b.n	8009df0 <_svfiprintf_r+0x114>
 8009dc6:	eba0 0308 	sub.w	r3, r0, r8
 8009dca:	fa09 f303 	lsl.w	r3, r9, r3
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	9304      	str	r3, [sp, #16]
 8009dd2:	46a2      	mov	sl, r4
 8009dd4:	e7d2      	b.n	8009d7c <_svfiprintf_r+0xa0>
 8009dd6:	9b03      	ldr	r3, [sp, #12]
 8009dd8:	1d19      	adds	r1, r3, #4
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	9103      	str	r1, [sp, #12]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	bfbb      	ittet	lt
 8009de2:	425b      	neglt	r3, r3
 8009de4:	f042 0202 	orrlt.w	r2, r2, #2
 8009de8:	9307      	strge	r3, [sp, #28]
 8009dea:	9307      	strlt	r3, [sp, #28]
 8009dec:	bfb8      	it	lt
 8009dee:	9204      	strlt	r2, [sp, #16]
 8009df0:	7823      	ldrb	r3, [r4, #0]
 8009df2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009df4:	d10a      	bne.n	8009e0c <_svfiprintf_r+0x130>
 8009df6:	7863      	ldrb	r3, [r4, #1]
 8009df8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dfa:	d132      	bne.n	8009e62 <_svfiprintf_r+0x186>
 8009dfc:	9b03      	ldr	r3, [sp, #12]
 8009dfe:	1d1a      	adds	r2, r3, #4
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	9203      	str	r2, [sp, #12]
 8009e04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e08:	3402      	adds	r4, #2
 8009e0a:	9305      	str	r3, [sp, #20]
 8009e0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009ed0 <_svfiprintf_r+0x1f4>
 8009e10:	7821      	ldrb	r1, [r4, #0]
 8009e12:	2203      	movs	r2, #3
 8009e14:	4650      	mov	r0, sl
 8009e16:	f7fb fd13 	bl	8005840 <memchr>
 8009e1a:	b138      	cbz	r0, 8009e2c <_svfiprintf_r+0x150>
 8009e1c:	9b04      	ldr	r3, [sp, #16]
 8009e1e:	eba0 000a 	sub.w	r0, r0, sl
 8009e22:	2240      	movs	r2, #64	@ 0x40
 8009e24:	4082      	lsls	r2, r0
 8009e26:	4313      	orrs	r3, r2
 8009e28:	3401      	adds	r4, #1
 8009e2a:	9304      	str	r3, [sp, #16]
 8009e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e30:	4824      	ldr	r0, [pc, #144]	@ (8009ec4 <_svfiprintf_r+0x1e8>)
 8009e32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e36:	2206      	movs	r2, #6
 8009e38:	f7fb fd02 	bl	8005840 <memchr>
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	d036      	beq.n	8009eae <_svfiprintf_r+0x1d2>
 8009e40:	4b21      	ldr	r3, [pc, #132]	@ (8009ec8 <_svfiprintf_r+0x1ec>)
 8009e42:	bb1b      	cbnz	r3, 8009e8c <_svfiprintf_r+0x1b0>
 8009e44:	9b03      	ldr	r3, [sp, #12]
 8009e46:	3307      	adds	r3, #7
 8009e48:	f023 0307 	bic.w	r3, r3, #7
 8009e4c:	3308      	adds	r3, #8
 8009e4e:	9303      	str	r3, [sp, #12]
 8009e50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e52:	4433      	add	r3, r6
 8009e54:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e56:	e76a      	b.n	8009d2e <_svfiprintf_r+0x52>
 8009e58:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e5c:	460c      	mov	r4, r1
 8009e5e:	2001      	movs	r0, #1
 8009e60:	e7a8      	b.n	8009db4 <_svfiprintf_r+0xd8>
 8009e62:	2300      	movs	r3, #0
 8009e64:	3401      	adds	r4, #1
 8009e66:	9305      	str	r3, [sp, #20]
 8009e68:	4619      	mov	r1, r3
 8009e6a:	f04f 0c0a 	mov.w	ip, #10
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e74:	3a30      	subs	r2, #48	@ 0x30
 8009e76:	2a09      	cmp	r2, #9
 8009e78:	d903      	bls.n	8009e82 <_svfiprintf_r+0x1a6>
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d0c6      	beq.n	8009e0c <_svfiprintf_r+0x130>
 8009e7e:	9105      	str	r1, [sp, #20]
 8009e80:	e7c4      	b.n	8009e0c <_svfiprintf_r+0x130>
 8009e82:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e86:	4604      	mov	r4, r0
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e7f0      	b.n	8009e6e <_svfiprintf_r+0x192>
 8009e8c:	ab03      	add	r3, sp, #12
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	462a      	mov	r2, r5
 8009e92:	4b0e      	ldr	r3, [pc, #56]	@ (8009ecc <_svfiprintf_r+0x1f0>)
 8009e94:	a904      	add	r1, sp, #16
 8009e96:	4638      	mov	r0, r7
 8009e98:	f3af 8000 	nop.w
 8009e9c:	1c42      	adds	r2, r0, #1
 8009e9e:	4606      	mov	r6, r0
 8009ea0:	d1d6      	bne.n	8009e50 <_svfiprintf_r+0x174>
 8009ea2:	89ab      	ldrh	r3, [r5, #12]
 8009ea4:	065b      	lsls	r3, r3, #25
 8009ea6:	f53f af2d 	bmi.w	8009d04 <_svfiprintf_r+0x28>
 8009eaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009eac:	e72c      	b.n	8009d08 <_svfiprintf_r+0x2c>
 8009eae:	ab03      	add	r3, sp, #12
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	462a      	mov	r2, r5
 8009eb4:	4b05      	ldr	r3, [pc, #20]	@ (8009ecc <_svfiprintf_r+0x1f0>)
 8009eb6:	a904      	add	r1, sp, #16
 8009eb8:	4638      	mov	r0, r7
 8009eba:	f000 f879 	bl	8009fb0 <_printf_i>
 8009ebe:	e7ed      	b.n	8009e9c <_svfiprintf_r+0x1c0>
 8009ec0:	0800ae29 	.word	0x0800ae29
 8009ec4:	0800ae33 	.word	0x0800ae33
 8009ec8:	00000000 	.word	0x00000000
 8009ecc:	08009c25 	.word	0x08009c25
 8009ed0:	0800ae2f 	.word	0x0800ae2f

08009ed4 <_printf_common>:
 8009ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed8:	4616      	mov	r6, r2
 8009eda:	4698      	mov	r8, r3
 8009edc:	688a      	ldr	r2, [r1, #8]
 8009ede:	690b      	ldr	r3, [r1, #16]
 8009ee0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	bfb8      	it	lt
 8009ee8:	4613      	movlt	r3, r2
 8009eea:	6033      	str	r3, [r6, #0]
 8009eec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ef0:	4607      	mov	r7, r0
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	b10a      	cbz	r2, 8009efa <_printf_common+0x26>
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	6033      	str	r3, [r6, #0]
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	0699      	lsls	r1, r3, #26
 8009efe:	bf42      	ittt	mi
 8009f00:	6833      	ldrmi	r3, [r6, #0]
 8009f02:	3302      	addmi	r3, #2
 8009f04:	6033      	strmi	r3, [r6, #0]
 8009f06:	6825      	ldr	r5, [r4, #0]
 8009f08:	f015 0506 	ands.w	r5, r5, #6
 8009f0c:	d106      	bne.n	8009f1c <_printf_common+0x48>
 8009f0e:	f104 0a19 	add.w	sl, r4, #25
 8009f12:	68e3      	ldr	r3, [r4, #12]
 8009f14:	6832      	ldr	r2, [r6, #0]
 8009f16:	1a9b      	subs	r3, r3, r2
 8009f18:	42ab      	cmp	r3, r5
 8009f1a:	dc26      	bgt.n	8009f6a <_printf_common+0x96>
 8009f1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f20:	6822      	ldr	r2, [r4, #0]
 8009f22:	3b00      	subs	r3, #0
 8009f24:	bf18      	it	ne
 8009f26:	2301      	movne	r3, #1
 8009f28:	0692      	lsls	r2, r2, #26
 8009f2a:	d42b      	bmi.n	8009f84 <_printf_common+0xb0>
 8009f2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f30:	4641      	mov	r1, r8
 8009f32:	4638      	mov	r0, r7
 8009f34:	47c8      	blx	r9
 8009f36:	3001      	adds	r0, #1
 8009f38:	d01e      	beq.n	8009f78 <_printf_common+0xa4>
 8009f3a:	6823      	ldr	r3, [r4, #0]
 8009f3c:	6922      	ldr	r2, [r4, #16]
 8009f3e:	f003 0306 	and.w	r3, r3, #6
 8009f42:	2b04      	cmp	r3, #4
 8009f44:	bf02      	ittt	eq
 8009f46:	68e5      	ldreq	r5, [r4, #12]
 8009f48:	6833      	ldreq	r3, [r6, #0]
 8009f4a:	1aed      	subeq	r5, r5, r3
 8009f4c:	68a3      	ldr	r3, [r4, #8]
 8009f4e:	bf0c      	ite	eq
 8009f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f54:	2500      	movne	r5, #0
 8009f56:	4293      	cmp	r3, r2
 8009f58:	bfc4      	itt	gt
 8009f5a:	1a9b      	subgt	r3, r3, r2
 8009f5c:	18ed      	addgt	r5, r5, r3
 8009f5e:	2600      	movs	r6, #0
 8009f60:	341a      	adds	r4, #26
 8009f62:	42b5      	cmp	r5, r6
 8009f64:	d11a      	bne.n	8009f9c <_printf_common+0xc8>
 8009f66:	2000      	movs	r0, #0
 8009f68:	e008      	b.n	8009f7c <_printf_common+0xa8>
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	4652      	mov	r2, sl
 8009f6e:	4641      	mov	r1, r8
 8009f70:	4638      	mov	r0, r7
 8009f72:	47c8      	blx	r9
 8009f74:	3001      	adds	r0, #1
 8009f76:	d103      	bne.n	8009f80 <_printf_common+0xac>
 8009f78:	f04f 30ff 	mov.w	r0, #4294967295
 8009f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f80:	3501      	adds	r5, #1
 8009f82:	e7c6      	b.n	8009f12 <_printf_common+0x3e>
 8009f84:	18e1      	adds	r1, r4, r3
 8009f86:	1c5a      	adds	r2, r3, #1
 8009f88:	2030      	movs	r0, #48	@ 0x30
 8009f8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f8e:	4422      	add	r2, r4
 8009f90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f98:	3302      	adds	r3, #2
 8009f9a:	e7c7      	b.n	8009f2c <_printf_common+0x58>
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	4622      	mov	r2, r4
 8009fa0:	4641      	mov	r1, r8
 8009fa2:	4638      	mov	r0, r7
 8009fa4:	47c8      	blx	r9
 8009fa6:	3001      	adds	r0, #1
 8009fa8:	d0e6      	beq.n	8009f78 <_printf_common+0xa4>
 8009faa:	3601      	adds	r6, #1
 8009fac:	e7d9      	b.n	8009f62 <_printf_common+0x8e>
	...

08009fb0 <_printf_i>:
 8009fb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb4:	7e0f      	ldrb	r7, [r1, #24]
 8009fb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009fb8:	2f78      	cmp	r7, #120	@ 0x78
 8009fba:	4691      	mov	r9, r2
 8009fbc:	4680      	mov	r8, r0
 8009fbe:	460c      	mov	r4, r1
 8009fc0:	469a      	mov	sl, r3
 8009fc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009fc6:	d807      	bhi.n	8009fd8 <_printf_i+0x28>
 8009fc8:	2f62      	cmp	r7, #98	@ 0x62
 8009fca:	d80a      	bhi.n	8009fe2 <_printf_i+0x32>
 8009fcc:	2f00      	cmp	r7, #0
 8009fce:	f000 80d2 	beq.w	800a176 <_printf_i+0x1c6>
 8009fd2:	2f58      	cmp	r7, #88	@ 0x58
 8009fd4:	f000 80b9 	beq.w	800a14a <_printf_i+0x19a>
 8009fd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fdc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009fe0:	e03a      	b.n	800a058 <_printf_i+0xa8>
 8009fe2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009fe6:	2b15      	cmp	r3, #21
 8009fe8:	d8f6      	bhi.n	8009fd8 <_printf_i+0x28>
 8009fea:	a101      	add	r1, pc, #4	@ (adr r1, 8009ff0 <_printf_i+0x40>)
 8009fec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ff0:	0800a049 	.word	0x0800a049
 8009ff4:	0800a05d 	.word	0x0800a05d
 8009ff8:	08009fd9 	.word	0x08009fd9
 8009ffc:	08009fd9 	.word	0x08009fd9
 800a000:	08009fd9 	.word	0x08009fd9
 800a004:	08009fd9 	.word	0x08009fd9
 800a008:	0800a05d 	.word	0x0800a05d
 800a00c:	08009fd9 	.word	0x08009fd9
 800a010:	08009fd9 	.word	0x08009fd9
 800a014:	08009fd9 	.word	0x08009fd9
 800a018:	08009fd9 	.word	0x08009fd9
 800a01c:	0800a15d 	.word	0x0800a15d
 800a020:	0800a087 	.word	0x0800a087
 800a024:	0800a117 	.word	0x0800a117
 800a028:	08009fd9 	.word	0x08009fd9
 800a02c:	08009fd9 	.word	0x08009fd9
 800a030:	0800a17f 	.word	0x0800a17f
 800a034:	08009fd9 	.word	0x08009fd9
 800a038:	0800a087 	.word	0x0800a087
 800a03c:	08009fd9 	.word	0x08009fd9
 800a040:	08009fd9 	.word	0x08009fd9
 800a044:	0800a11f 	.word	0x0800a11f
 800a048:	6833      	ldr	r3, [r6, #0]
 800a04a:	1d1a      	adds	r2, r3, #4
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	6032      	str	r2, [r6, #0]
 800a050:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a054:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a058:	2301      	movs	r3, #1
 800a05a:	e09d      	b.n	800a198 <_printf_i+0x1e8>
 800a05c:	6833      	ldr	r3, [r6, #0]
 800a05e:	6820      	ldr	r0, [r4, #0]
 800a060:	1d19      	adds	r1, r3, #4
 800a062:	6031      	str	r1, [r6, #0]
 800a064:	0606      	lsls	r6, r0, #24
 800a066:	d501      	bpl.n	800a06c <_printf_i+0xbc>
 800a068:	681d      	ldr	r5, [r3, #0]
 800a06a:	e003      	b.n	800a074 <_printf_i+0xc4>
 800a06c:	0645      	lsls	r5, r0, #25
 800a06e:	d5fb      	bpl.n	800a068 <_printf_i+0xb8>
 800a070:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a074:	2d00      	cmp	r5, #0
 800a076:	da03      	bge.n	800a080 <_printf_i+0xd0>
 800a078:	232d      	movs	r3, #45	@ 0x2d
 800a07a:	426d      	negs	r5, r5
 800a07c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a080:	4859      	ldr	r0, [pc, #356]	@ (800a1e8 <_printf_i+0x238>)
 800a082:	230a      	movs	r3, #10
 800a084:	e011      	b.n	800a0aa <_printf_i+0xfa>
 800a086:	6821      	ldr	r1, [r4, #0]
 800a088:	6833      	ldr	r3, [r6, #0]
 800a08a:	0608      	lsls	r0, r1, #24
 800a08c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a090:	d402      	bmi.n	800a098 <_printf_i+0xe8>
 800a092:	0649      	lsls	r1, r1, #25
 800a094:	bf48      	it	mi
 800a096:	b2ad      	uxthmi	r5, r5
 800a098:	2f6f      	cmp	r7, #111	@ 0x6f
 800a09a:	4853      	ldr	r0, [pc, #332]	@ (800a1e8 <_printf_i+0x238>)
 800a09c:	6033      	str	r3, [r6, #0]
 800a09e:	bf14      	ite	ne
 800a0a0:	230a      	movne	r3, #10
 800a0a2:	2308      	moveq	r3, #8
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a0aa:	6866      	ldr	r6, [r4, #4]
 800a0ac:	60a6      	str	r6, [r4, #8]
 800a0ae:	2e00      	cmp	r6, #0
 800a0b0:	bfa2      	ittt	ge
 800a0b2:	6821      	ldrge	r1, [r4, #0]
 800a0b4:	f021 0104 	bicge.w	r1, r1, #4
 800a0b8:	6021      	strge	r1, [r4, #0]
 800a0ba:	b90d      	cbnz	r5, 800a0c0 <_printf_i+0x110>
 800a0bc:	2e00      	cmp	r6, #0
 800a0be:	d04b      	beq.n	800a158 <_printf_i+0x1a8>
 800a0c0:	4616      	mov	r6, r2
 800a0c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0c6:	fb03 5711 	mls	r7, r3, r1, r5
 800a0ca:	5dc7      	ldrb	r7, [r0, r7]
 800a0cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0d0:	462f      	mov	r7, r5
 800a0d2:	42bb      	cmp	r3, r7
 800a0d4:	460d      	mov	r5, r1
 800a0d6:	d9f4      	bls.n	800a0c2 <_printf_i+0x112>
 800a0d8:	2b08      	cmp	r3, #8
 800a0da:	d10b      	bne.n	800a0f4 <_printf_i+0x144>
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	07df      	lsls	r7, r3, #31
 800a0e0:	d508      	bpl.n	800a0f4 <_printf_i+0x144>
 800a0e2:	6923      	ldr	r3, [r4, #16]
 800a0e4:	6861      	ldr	r1, [r4, #4]
 800a0e6:	4299      	cmp	r1, r3
 800a0e8:	bfde      	ittt	le
 800a0ea:	2330      	movle	r3, #48	@ 0x30
 800a0ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0f4:	1b92      	subs	r2, r2, r6
 800a0f6:	6122      	str	r2, [r4, #16]
 800a0f8:	f8cd a000 	str.w	sl, [sp]
 800a0fc:	464b      	mov	r3, r9
 800a0fe:	aa03      	add	r2, sp, #12
 800a100:	4621      	mov	r1, r4
 800a102:	4640      	mov	r0, r8
 800a104:	f7ff fee6 	bl	8009ed4 <_printf_common>
 800a108:	3001      	adds	r0, #1
 800a10a:	d14a      	bne.n	800a1a2 <_printf_i+0x1f2>
 800a10c:	f04f 30ff 	mov.w	r0, #4294967295
 800a110:	b004      	add	sp, #16
 800a112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a116:	6823      	ldr	r3, [r4, #0]
 800a118:	f043 0320 	orr.w	r3, r3, #32
 800a11c:	6023      	str	r3, [r4, #0]
 800a11e:	4833      	ldr	r0, [pc, #204]	@ (800a1ec <_printf_i+0x23c>)
 800a120:	2778      	movs	r7, #120	@ 0x78
 800a122:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	6831      	ldr	r1, [r6, #0]
 800a12a:	061f      	lsls	r7, r3, #24
 800a12c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a130:	d402      	bmi.n	800a138 <_printf_i+0x188>
 800a132:	065f      	lsls	r7, r3, #25
 800a134:	bf48      	it	mi
 800a136:	b2ad      	uxthmi	r5, r5
 800a138:	6031      	str	r1, [r6, #0]
 800a13a:	07d9      	lsls	r1, r3, #31
 800a13c:	bf44      	itt	mi
 800a13e:	f043 0320 	orrmi.w	r3, r3, #32
 800a142:	6023      	strmi	r3, [r4, #0]
 800a144:	b11d      	cbz	r5, 800a14e <_printf_i+0x19e>
 800a146:	2310      	movs	r3, #16
 800a148:	e7ac      	b.n	800a0a4 <_printf_i+0xf4>
 800a14a:	4827      	ldr	r0, [pc, #156]	@ (800a1e8 <_printf_i+0x238>)
 800a14c:	e7e9      	b.n	800a122 <_printf_i+0x172>
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	f023 0320 	bic.w	r3, r3, #32
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	e7f6      	b.n	800a146 <_printf_i+0x196>
 800a158:	4616      	mov	r6, r2
 800a15a:	e7bd      	b.n	800a0d8 <_printf_i+0x128>
 800a15c:	6833      	ldr	r3, [r6, #0]
 800a15e:	6825      	ldr	r5, [r4, #0]
 800a160:	6961      	ldr	r1, [r4, #20]
 800a162:	1d18      	adds	r0, r3, #4
 800a164:	6030      	str	r0, [r6, #0]
 800a166:	062e      	lsls	r6, r5, #24
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	d501      	bpl.n	800a170 <_printf_i+0x1c0>
 800a16c:	6019      	str	r1, [r3, #0]
 800a16e:	e002      	b.n	800a176 <_printf_i+0x1c6>
 800a170:	0668      	lsls	r0, r5, #25
 800a172:	d5fb      	bpl.n	800a16c <_printf_i+0x1bc>
 800a174:	8019      	strh	r1, [r3, #0]
 800a176:	2300      	movs	r3, #0
 800a178:	6123      	str	r3, [r4, #16]
 800a17a:	4616      	mov	r6, r2
 800a17c:	e7bc      	b.n	800a0f8 <_printf_i+0x148>
 800a17e:	6833      	ldr	r3, [r6, #0]
 800a180:	1d1a      	adds	r2, r3, #4
 800a182:	6032      	str	r2, [r6, #0]
 800a184:	681e      	ldr	r6, [r3, #0]
 800a186:	6862      	ldr	r2, [r4, #4]
 800a188:	2100      	movs	r1, #0
 800a18a:	4630      	mov	r0, r6
 800a18c:	f7fb fb58 	bl	8005840 <memchr>
 800a190:	b108      	cbz	r0, 800a196 <_printf_i+0x1e6>
 800a192:	1b80      	subs	r0, r0, r6
 800a194:	6060      	str	r0, [r4, #4]
 800a196:	6863      	ldr	r3, [r4, #4]
 800a198:	6123      	str	r3, [r4, #16]
 800a19a:	2300      	movs	r3, #0
 800a19c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1a0:	e7aa      	b.n	800a0f8 <_printf_i+0x148>
 800a1a2:	6923      	ldr	r3, [r4, #16]
 800a1a4:	4632      	mov	r2, r6
 800a1a6:	4649      	mov	r1, r9
 800a1a8:	4640      	mov	r0, r8
 800a1aa:	47d0      	blx	sl
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	d0ad      	beq.n	800a10c <_printf_i+0x15c>
 800a1b0:	6823      	ldr	r3, [r4, #0]
 800a1b2:	079b      	lsls	r3, r3, #30
 800a1b4:	d413      	bmi.n	800a1de <_printf_i+0x22e>
 800a1b6:	68e0      	ldr	r0, [r4, #12]
 800a1b8:	9b03      	ldr	r3, [sp, #12]
 800a1ba:	4298      	cmp	r0, r3
 800a1bc:	bfb8      	it	lt
 800a1be:	4618      	movlt	r0, r3
 800a1c0:	e7a6      	b.n	800a110 <_printf_i+0x160>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	4632      	mov	r2, r6
 800a1c6:	4649      	mov	r1, r9
 800a1c8:	4640      	mov	r0, r8
 800a1ca:	47d0      	blx	sl
 800a1cc:	3001      	adds	r0, #1
 800a1ce:	d09d      	beq.n	800a10c <_printf_i+0x15c>
 800a1d0:	3501      	adds	r5, #1
 800a1d2:	68e3      	ldr	r3, [r4, #12]
 800a1d4:	9903      	ldr	r1, [sp, #12]
 800a1d6:	1a5b      	subs	r3, r3, r1
 800a1d8:	42ab      	cmp	r3, r5
 800a1da:	dcf2      	bgt.n	800a1c2 <_printf_i+0x212>
 800a1dc:	e7eb      	b.n	800a1b6 <_printf_i+0x206>
 800a1de:	2500      	movs	r5, #0
 800a1e0:	f104 0619 	add.w	r6, r4, #25
 800a1e4:	e7f5      	b.n	800a1d2 <_printf_i+0x222>
 800a1e6:	bf00      	nop
 800a1e8:	0800ae3a 	.word	0x0800ae3a
 800a1ec:	0800ae4b 	.word	0x0800ae4b

0800a1f0 <__sflags>:
 800a1f0:	780b      	ldrb	r3, [r1, #0]
 800a1f2:	2b72      	cmp	r3, #114	@ 0x72
 800a1f4:	b530      	push	{r4, r5, lr}
 800a1f6:	d022      	beq.n	800a23e <__sflags+0x4e>
 800a1f8:	2b77      	cmp	r3, #119	@ 0x77
 800a1fa:	d024      	beq.n	800a246 <__sflags+0x56>
 800a1fc:	2b61      	cmp	r3, #97	@ 0x61
 800a1fe:	d027      	beq.n	800a250 <__sflags+0x60>
 800a200:	2316      	movs	r3, #22
 800a202:	6003      	str	r3, [r0, #0]
 800a204:	2000      	movs	r0, #0
 800a206:	bd30      	pop	{r4, r5, pc}
 800a208:	2d62      	cmp	r5, #98	@ 0x62
 800a20a:	d012      	beq.n	800a232 <__sflags+0x42>
 800a20c:	2d78      	cmp	r5, #120	@ 0x78
 800a20e:	d013      	beq.n	800a238 <__sflags+0x48>
 800a210:	2d2b      	cmp	r5, #43	@ 0x2b
 800a212:	d107      	bne.n	800a224 <__sflags+0x34>
 800a214:	f020 001c 	bic.w	r0, r0, #28
 800a218:	f023 0303 	bic.w	r3, r3, #3
 800a21c:	f040 0010 	orr.w	r0, r0, #16
 800a220:	f043 0302 	orr.w	r3, r3, #2
 800a224:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a228:	2d00      	cmp	r5, #0
 800a22a:	d1ed      	bne.n	800a208 <__sflags+0x18>
 800a22c:	4323      	orrs	r3, r4
 800a22e:	6013      	str	r3, [r2, #0]
 800a230:	e7e9      	b.n	800a206 <__sflags+0x16>
 800a232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a236:	e7f5      	b.n	800a224 <__sflags+0x34>
 800a238:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a23c:	e7f2      	b.n	800a224 <__sflags+0x34>
 800a23e:	2400      	movs	r4, #0
 800a240:	4623      	mov	r3, r4
 800a242:	2004      	movs	r0, #4
 800a244:	e7ee      	b.n	800a224 <__sflags+0x34>
 800a246:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
 800a24a:	2301      	movs	r3, #1
 800a24c:	2008      	movs	r0, #8
 800a24e:	e7e9      	b.n	800a224 <__sflags+0x34>
 800a250:	f44f 7402 	mov.w	r4, #520	@ 0x208
 800a254:	2301      	movs	r3, #1
 800a256:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800a25a:	e7e3      	b.n	800a224 <__sflags+0x34>

0800a25c <__swhatbuf_r>:
 800a25c:	b570      	push	{r4, r5, r6, lr}
 800a25e:	460c      	mov	r4, r1
 800a260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a264:	2900      	cmp	r1, #0
 800a266:	b096      	sub	sp, #88	@ 0x58
 800a268:	4615      	mov	r5, r2
 800a26a:	461e      	mov	r6, r3
 800a26c:	da0d      	bge.n	800a28a <__swhatbuf_r+0x2e>
 800a26e:	89a3      	ldrh	r3, [r4, #12]
 800a270:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a274:	f04f 0100 	mov.w	r1, #0
 800a278:	bf14      	ite	ne
 800a27a:	2340      	movne	r3, #64	@ 0x40
 800a27c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a280:	2000      	movs	r0, #0
 800a282:	6031      	str	r1, [r6, #0]
 800a284:	602b      	str	r3, [r5, #0]
 800a286:	b016      	add	sp, #88	@ 0x58
 800a288:	bd70      	pop	{r4, r5, r6, pc}
 800a28a:	466a      	mov	r2, sp
 800a28c:	f000 f862 	bl	800a354 <_fstat_r>
 800a290:	2800      	cmp	r0, #0
 800a292:	dbec      	blt.n	800a26e <__swhatbuf_r+0x12>
 800a294:	9901      	ldr	r1, [sp, #4]
 800a296:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a29a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a29e:	4259      	negs	r1, r3
 800a2a0:	4159      	adcs	r1, r3
 800a2a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2a6:	e7eb      	b.n	800a280 <__swhatbuf_r+0x24>

0800a2a8 <__smakebuf_r>:
 800a2a8:	898b      	ldrh	r3, [r1, #12]
 800a2aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2ac:	079d      	lsls	r5, r3, #30
 800a2ae:	4606      	mov	r6, r0
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	d507      	bpl.n	800a2c4 <__smakebuf_r+0x1c>
 800a2b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a2b8:	6023      	str	r3, [r4, #0]
 800a2ba:	6123      	str	r3, [r4, #16]
 800a2bc:	2301      	movs	r3, #1
 800a2be:	6163      	str	r3, [r4, #20]
 800a2c0:	b003      	add	sp, #12
 800a2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2c4:	ab01      	add	r3, sp, #4
 800a2c6:	466a      	mov	r2, sp
 800a2c8:	f7ff ffc8 	bl	800a25c <__swhatbuf_r>
 800a2cc:	9f00      	ldr	r7, [sp, #0]
 800a2ce:	4605      	mov	r5, r0
 800a2d0:	4639      	mov	r1, r7
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	f7fe fcea 	bl	8008cac <_malloc_r>
 800a2d8:	b948      	cbnz	r0, 800a2ee <__smakebuf_r+0x46>
 800a2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2de:	059a      	lsls	r2, r3, #22
 800a2e0:	d4ee      	bmi.n	800a2c0 <__smakebuf_r+0x18>
 800a2e2:	f023 0303 	bic.w	r3, r3, #3
 800a2e6:	f043 0302 	orr.w	r3, r3, #2
 800a2ea:	81a3      	strh	r3, [r4, #12]
 800a2ec:	e7e2      	b.n	800a2b4 <__smakebuf_r+0xc>
 800a2ee:	89a3      	ldrh	r3, [r4, #12]
 800a2f0:	6020      	str	r0, [r4, #0]
 800a2f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2f6:	81a3      	strh	r3, [r4, #12]
 800a2f8:	9b01      	ldr	r3, [sp, #4]
 800a2fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a2fe:	b15b      	cbz	r3, 800a318 <__smakebuf_r+0x70>
 800a300:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a304:	4630      	mov	r0, r6
 800a306:	f000 f837 	bl	800a378 <_isatty_r>
 800a30a:	b128      	cbz	r0, 800a318 <__smakebuf_r+0x70>
 800a30c:	89a3      	ldrh	r3, [r4, #12]
 800a30e:	f023 0303 	bic.w	r3, r3, #3
 800a312:	f043 0301 	orr.w	r3, r3, #1
 800a316:	81a3      	strh	r3, [r4, #12]
 800a318:	89a3      	ldrh	r3, [r4, #12]
 800a31a:	431d      	orrs	r5, r3
 800a31c:	81a5      	strh	r5, [r4, #12]
 800a31e:	e7cf      	b.n	800a2c0 <__smakebuf_r+0x18>

0800a320 <memmove>:
 800a320:	4288      	cmp	r0, r1
 800a322:	b510      	push	{r4, lr}
 800a324:	eb01 0402 	add.w	r4, r1, r2
 800a328:	d902      	bls.n	800a330 <memmove+0x10>
 800a32a:	4284      	cmp	r4, r0
 800a32c:	4623      	mov	r3, r4
 800a32e:	d807      	bhi.n	800a340 <memmove+0x20>
 800a330:	1e43      	subs	r3, r0, #1
 800a332:	42a1      	cmp	r1, r4
 800a334:	d008      	beq.n	800a348 <memmove+0x28>
 800a336:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a33a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a33e:	e7f8      	b.n	800a332 <memmove+0x12>
 800a340:	4402      	add	r2, r0
 800a342:	4601      	mov	r1, r0
 800a344:	428a      	cmp	r2, r1
 800a346:	d100      	bne.n	800a34a <memmove+0x2a>
 800a348:	bd10      	pop	{r4, pc}
 800a34a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a34e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a352:	e7f7      	b.n	800a344 <memmove+0x24>

0800a354 <_fstat_r>:
 800a354:	b538      	push	{r3, r4, r5, lr}
 800a356:	4d07      	ldr	r5, [pc, #28]	@ (800a374 <_fstat_r+0x20>)
 800a358:	2300      	movs	r3, #0
 800a35a:	4604      	mov	r4, r0
 800a35c:	4608      	mov	r0, r1
 800a35e:	4611      	mov	r1, r2
 800a360:	602b      	str	r3, [r5, #0]
 800a362:	f7fc fbb8 	bl	8006ad6 <_fstat>
 800a366:	1c43      	adds	r3, r0, #1
 800a368:	d102      	bne.n	800a370 <_fstat_r+0x1c>
 800a36a:	682b      	ldr	r3, [r5, #0]
 800a36c:	b103      	cbz	r3, 800a370 <_fstat_r+0x1c>
 800a36e:	6023      	str	r3, [r4, #0]
 800a370:	bd38      	pop	{r3, r4, r5, pc}
 800a372:	bf00      	nop
 800a374:	20000e68 	.word	0x20000e68

0800a378 <_isatty_r>:
 800a378:	b538      	push	{r3, r4, r5, lr}
 800a37a:	4d06      	ldr	r5, [pc, #24]	@ (800a394 <_isatty_r+0x1c>)
 800a37c:	2300      	movs	r3, #0
 800a37e:	4604      	mov	r4, r0
 800a380:	4608      	mov	r0, r1
 800a382:	602b      	str	r3, [r5, #0]
 800a384:	f7fc fbb7 	bl	8006af6 <_isatty>
 800a388:	1c43      	adds	r3, r0, #1
 800a38a:	d102      	bne.n	800a392 <_isatty_r+0x1a>
 800a38c:	682b      	ldr	r3, [r5, #0]
 800a38e:	b103      	cbz	r3, 800a392 <_isatty_r+0x1a>
 800a390:	6023      	str	r3, [r4, #0]
 800a392:	bd38      	pop	{r3, r4, r5, pc}
 800a394:	20000e68 	.word	0x20000e68

0800a398 <_realloc_r>:
 800a398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a39c:	4680      	mov	r8, r0
 800a39e:	4615      	mov	r5, r2
 800a3a0:	460c      	mov	r4, r1
 800a3a2:	b921      	cbnz	r1, 800a3ae <_realloc_r+0x16>
 800a3a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	f7fe bc7f 	b.w	8008cac <_malloc_r>
 800a3ae:	b92a      	cbnz	r2, 800a3bc <_realloc_r+0x24>
 800a3b0:	f7ff fbee 	bl	8009b90 <_free_r>
 800a3b4:	2400      	movs	r4, #0
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3bc:	f000 f81a 	bl	800a3f4 <_malloc_usable_size_r>
 800a3c0:	4285      	cmp	r5, r0
 800a3c2:	4606      	mov	r6, r0
 800a3c4:	d802      	bhi.n	800a3cc <_realloc_r+0x34>
 800a3c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a3ca:	d8f4      	bhi.n	800a3b6 <_realloc_r+0x1e>
 800a3cc:	4629      	mov	r1, r5
 800a3ce:	4640      	mov	r0, r8
 800a3d0:	f7fe fc6c 	bl	8008cac <_malloc_r>
 800a3d4:	4607      	mov	r7, r0
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d0ec      	beq.n	800a3b4 <_realloc_r+0x1c>
 800a3da:	42b5      	cmp	r5, r6
 800a3dc:	462a      	mov	r2, r5
 800a3de:	4621      	mov	r1, r4
 800a3e0:	bf28      	it	cs
 800a3e2:	4632      	movcs	r2, r6
 800a3e4:	f7ff fbc5 	bl	8009b72 <memcpy>
 800a3e8:	4621      	mov	r1, r4
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	f7ff fbd0 	bl	8009b90 <_free_r>
 800a3f0:	463c      	mov	r4, r7
 800a3f2:	e7e0      	b.n	800a3b6 <_realloc_r+0x1e>

0800a3f4 <_malloc_usable_size_r>:
 800a3f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3f8:	1f18      	subs	r0, r3, #4
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	bfbc      	itt	lt
 800a3fe:	580b      	ldrlt	r3, [r1, r0]
 800a400:	18c0      	addlt	r0, r0, r3
 800a402:	4770      	bx	lr

0800a404 <_init>:
 800a404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a406:	bf00      	nop
 800a408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a40a:	bc08      	pop	{r3}
 800a40c:	469e      	mov	lr, r3
 800a40e:	4770      	bx	lr

0800a410 <_fini>:
 800a410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a412:	bf00      	nop
 800a414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a416:	bc08      	pop	{r3}
 800a418:	469e      	mov	lr, r3
 800a41a:	4770      	bx	lr
