
Credential signing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e704  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010e0  0800e8a8  0800e8a8  0000f8a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 CMOX_CTA_PROTECTED_DATA 00000264  0800f988  0800f988  00010988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800fbec  0800fbec  000111d4  2**0
                  CONTENTS
  5 .ARM          00000008  0800fbec  0800fbec  00010bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800fbf4  0800fbf4  000111d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800fbf4  0800fbf4  00010bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0800fbf8  0800fbf8  00010bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         000001d4  20000000  0800fbfc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000e48  200001d4  0800fdd0  000111d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000101c  0800fdd0  0001201c  2**0
                  ALLOC
 12 .ARM.attributes 00000034  00000000  00000000  000111d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a60e  00000000  00000000  00011208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c06  00000000  00000000  0001b816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000940  00000000  00000000  0001d420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000701  00000000  00000000  0001dd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017dba  00000000  00000000  0001e461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bcd1  00000000  00000000  0003621b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090b58  00000000  00000000  00041eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d2a44  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000060  00000000  00000000  000d2a88  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00003b1c  00000000  00000000  000d2ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006e  00000000  00000000  000d6604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e88c 	.word	0x0800e88c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800e88c 	.word	0x0800e88c

080001e0 <cmox_ecc_construct>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	0004      	movs	r4, r0
 80001e4:	4610      	mov	r0, r2
 80001e6:	bf18      	it	ne
 80001e8:	2900      	cmpne	r1, #0
 80001ea:	461a      	mov	r2, r3
 80001ec:	d00a      	beq.n	8000204 <cmox_ecc_construct+0x24>
 80001ee:	2800      	cmp	r0, #0
 80001f0:	bf18      	it	ne
 80001f2:	2a00      	cmpne	r2, #0
 80001f4:	d006      	beq.n	8000204 <cmox_ecc_construct+0x24>
 80001f6:	6121      	str	r1, [r4, #16]
 80001f8:	4601      	mov	r1, r0
 80001fa:	4620      	mov	r0, r4
 80001fc:	f002 ff2f 	bl	800305e <cmox_membuf_init>
 8000200:	4b01      	ldr	r3, [pc, #4]	@ (8000208 <cmox_ecc_construct+0x28>)
 8000202:	6163      	str	r3, [r4, #20]
 8000204:	bd10      	pop	{r4, pc}
 8000206:	bf00      	nop
 8000208:	5e1caffe 	.word	0x5e1caffe

0800020c <cmox_ecc_cleanup>:
 800020c:	b510      	push	{r4, lr}
 800020e:	0004      	movs	r4, r0
 8000210:	d007      	beq.n	8000222 <cmox_ecc_cleanup+0x16>
 8000212:	f002 ff68 	bl	80030e6 <cmox_membuf_cleanup>
 8000216:	4620      	mov	r0, r4
 8000218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800021c:	2118      	movs	r1, #24
 800021e:	f00b b89e 	b.w	800b35e <__aeabi_memclr>
 8000222:	bd10      	pop	{r4, pc}

08000224 <cmox_ECC_InvertModN>:
 8000224:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000226:	0004      	movs	r4, r0
 8000228:	460d      	mov	r5, r1
 800022a:	bf18      	it	ne
 800022c:	2d00      	cmpne	r5, #0
 800022e:	4616      	mov	r6, r2
 8000230:	461f      	mov	r7, r3
 8000232:	d00d      	beq.n	8000250 <cmox_ECC_InvertModN+0x2c>
 8000234:	2e00      	cmp	r6, #0
 8000236:	bf18      	it	ne
 8000238:	2f00      	cmpne	r7, #0
 800023a:	d009      	beq.n	8000250 <cmox_ECC_InvertModN+0x2c>
 800023c:	69a0      	ldr	r0, [r4, #24]
 800023e:	6801      	ldr	r1, [r0, #0]
 8000240:	6888      	ldr	r0, [r1, #8]
 8000242:	682a      	ldr	r2, [r5, #0]
 8000244:	6801      	ldr	r1, [r0, #0]
 8000246:	428a      	cmp	r2, r1
 8000248:	bf24      	itt	cs
 800024a:	683b      	ldrcs	r3, [r7, #0]
 800024c:	428b      	cmpcs	r3, r1
 800024e:	d201      	bcs.n	8000254 <cmox_ECC_InvertModN+0x30>
 8000250:	2001      	movs	r0, #1
 8000252:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000254:	463a      	mov	r2, r7
 8000256:	f06f 0101 	mvn.w	r1, #1
 800025a:	f002 fd29 	bl	8002cb0 <cmox_AddBN_Int>
 800025e:	69a0      	ldr	r0, [r4, #24]
 8000260:	f8d0 c01c 	ldr.w	ip, [r0, #28]
 8000264:	6a20      	ldr	r0, [r4, #32]
 8000266:	9002      	str	r0, [sp, #8]
 8000268:	4622      	mov	r2, r4
 800026a:	69e1      	ldr	r1, [r4, #28]
 800026c:	9101      	str	r1, [sp, #4]
 800026e:	9600      	str	r6, [sp, #0]
 8000270:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8000274:	f8dc 4000 	ldr.w	r4, [ip]
 8000278:	4639      	mov	r1, r7
 800027a:	4628      	mov	r0, r5
 800027c:	47a0      	blx	r4
 800027e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000280 <cmox_ECC_InitCurve>:
 8000280:	b510      	push	{r4, lr}
 8000282:	2800      	cmp	r0, #0
 8000284:	bf18      	it	ne
 8000286:	2900      	cmpne	r1, #0
 8000288:	d101      	bne.n	800028e <cmox_ECC_InitCurve+0xe>
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2400      	movs	r4, #0
 8000290:	6144      	str	r4, [r0, #20]
 8000292:	6181      	str	r1, [r0, #24]
 8000294:	61c2      	str	r2, [r0, #28]
 8000296:	6203      	str	r3, [r0, #32]
 8000298:	2000      	movs	r0, #0
 800029a:	bd10      	pop	{r4, pc}

0800029c <cmox_ECC_InitCurveModDomainP>:
 800029c:	4602      	mov	r2, r0
 800029e:	6990      	ldr	r0, [r2, #24]
 80002a0:	6800      	ldr	r0, [r0, #0]
 80002a2:	6841      	ldr	r1, [r0, #4]
 80002a4:	69d3      	ldr	r3, [r2, #28]
 80002a6:	6800      	ldr	r0, [r0, #0]
 80002a8:	f002 be00 	b.w	8002eac <cmox_ModularBN_InitWithR2>

080002ac <cmox_ECC_InitCurveModDomainN>:
 80002ac:	4602      	mov	r2, r0
 80002ae:	6990      	ldr	r0, [r2, #24]
 80002b0:	6800      	ldr	r0, [r0, #0]
 80002b2:	68c1      	ldr	r1, [r0, #12]
 80002b4:	69d3      	ldr	r3, [r2, #28]
 80002b6:	6880      	ldr	r0, [r0, #8]
 80002b8:	f002 bdf8 	b.w	8002eac <cmox_ModularBN_InitWithR2>

080002bc <cmox_ECC_DeInitCurveModDomain>:
 80002bc:	69c1      	ldr	r1, [r0, #28]
 80002be:	f002 be7c 	b.w	8002fba <cmox_ModularBN_DeinitWithR2>

080002c2 <cmox_ECC_AllocPoint>:
 80002c2:	b570      	push	{r4, r5, r6, lr}
 80002c4:	4605      	mov	r5, r0
 80002c6:	460e      	mov	r6, r1
 80002c8:	69e8      	ldr	r0, [r5, #28]
 80002ca:	2214      	movs	r2, #20
 80002cc:	f002 fed7 	bl	800307e <cmox_membuf_alloc>
 80002d0:	0004      	movs	r4, r0
 80002d2:	d149      	bne.n	8000368 <cmox_ECC_AllocPoint+0xa6>
 80002d4:	6831      	ldr	r1, [r6, #0]
 80002d6:	2000      	movs	r0, #0
 80002d8:	6108      	str	r0, [r1, #16]
 80002da:	69aa      	ldr	r2, [r5, #24]
 80002dc:	6810      	ldr	r0, [r2, #0]
 80002de:	6803      	ldr	r3, [r0, #0]
 80002e0:	69e8      	ldr	r0, [r5, #28]
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	f004 fc2a 	bl	8004b3c <cmox_bn_alloc>
 80002e8:	0004      	movs	r4, r0
 80002ea:	d138      	bne.n	800035e <cmox_ECC_AllocPoint+0x9c>
 80002ec:	69a8      	ldr	r0, [r5, #24]
 80002ee:	6801      	ldr	r1, [r0, #0]
 80002f0:	6830      	ldr	r0, [r6, #0]
 80002f2:	680a      	ldr	r2, [r1, #0]
 80002f4:	6812      	ldr	r2, [r2, #0]
 80002f6:	f100 0108 	add.w	r1, r0, #8
 80002fa:	69e8      	ldr	r0, [r5, #28]
 80002fc:	f004 fc1e 	bl	8004b3c <cmox_bn_alloc>
 8000300:	0004      	movs	r4, r0
 8000302:	d128      	bne.n	8000356 <cmox_ECC_AllocPoint+0x94>
 8000304:	69a8      	ldr	r0, [r5, #24]
 8000306:	6842      	ldr	r2, [r0, #4]
 8000308:	69d3      	ldr	r3, [r2, #28]
 800030a:	6831      	ldr	r1, [r6, #0]
 800030c:	2b03      	cmp	r3, #3
 800030e:	d030      	beq.n	8000372 <cmox_ECC_AllocPoint+0xb0>
 8000310:	6800      	ldr	r0, [r0, #0]
 8000312:	6802      	ldr	r2, [r0, #0]
 8000314:	69e8      	ldr	r0, [r5, #28]
 8000316:	6812      	ldr	r2, [r2, #0]
 8000318:	1d09      	adds	r1, r1, #4
 800031a:	f004 fc0f 	bl	8004b3c <cmox_bn_alloc>
 800031e:	0004      	movs	r4, r0
 8000320:	d113      	bne.n	800034a <cmox_ECC_AllocPoint+0x88>
 8000322:	69a8      	ldr	r0, [r5, #24]
 8000324:	6842      	ldr	r2, [r0, #4]
 8000326:	69d3      	ldr	r3, [r2, #28]
 8000328:	6831      	ldr	r1, [r6, #0]
 800032a:	2b02      	cmp	r3, #2
 800032c:	d11e      	bne.n	800036c <cmox_ECC_AllocPoint+0xaa>
 800032e:	6800      	ldr	r0, [r0, #0]
 8000330:	6802      	ldr	r2, [r0, #0]
 8000332:	69e8      	ldr	r0, [r5, #28]
 8000334:	6812      	ldr	r2, [r2, #0]
 8000336:	310c      	adds	r1, #12
 8000338:	f004 fc00 	bl	8004b3c <cmox_bn_alloc>
 800033c:	0004      	movs	r4, r0
 800033e:	d013      	beq.n	8000368 <cmox_ECC_AllocPoint+0xa6>
 8000340:	6830      	ldr	r0, [r6, #0]
 8000342:	1d01      	adds	r1, r0, #4
 8000344:	69e8      	ldr	r0, [r5, #28]
 8000346:	f004 fc04 	bl	8004b52 <cmox_bn_free>
 800034a:	6830      	ldr	r0, [r6, #0]
 800034c:	f100 0108 	add.w	r1, r0, #8
 8000350:	69e8      	ldr	r0, [r5, #28]
 8000352:	f004 fbfe 	bl	8004b52 <cmox_bn_free>
 8000356:	6831      	ldr	r1, [r6, #0]
 8000358:	69e8      	ldr	r0, [r5, #28]
 800035a:	f004 fbfa 	bl	8004b52 <cmox_bn_free>
 800035e:	69e8      	ldr	r0, [r5, #28]
 8000360:	2214      	movs	r2, #20
 8000362:	4631      	mov	r1, r6
 8000364:	f002 feaa 	bl	80030bc <cmox_membuf_free>
 8000368:	4620      	mov	r0, r4
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	2000      	movs	r0, #0
 800036e:	60c8      	str	r0, [r1, #12]
 8000370:	e7fa      	b.n	8000368 <cmox_ECC_AllocPoint+0xa6>
 8000372:	2200      	movs	r2, #0
 8000374:	604a      	str	r2, [r1, #4]
 8000376:	60ca      	str	r2, [r1, #12]
 8000378:	e7f6      	b.n	8000368 <cmox_ECC_AllocPoint+0xa6>

0800037a <cmox_ECC_FreePoint>:
 800037a:	b570      	push	{r4, r5, r6, lr}
 800037c:	460c      	mov	r4, r1
 800037e:	2500      	movs	r5, #0
 8000380:	4606      	mov	r6, r0
 8000382:	2c00      	cmp	r4, #0
 8000384:	bf1a      	itte	ne
 8000386:	6820      	ldrne	r0, [r4, #0]
 8000388:	2800      	cmpne	r0, #0
 800038a:	2501      	moveq	r5, #1
 800038c:	d023      	beq.n	80003d6 <cmox_ECC_FreePoint+0x5c>
 800038e:	69b1      	ldr	r1, [r6, #24]
 8000390:	684a      	ldr	r2, [r1, #4]
 8000392:	69d3      	ldr	r3, [r2, #28]
 8000394:	2b02      	cmp	r3, #2
 8000396:	d104      	bne.n	80003a2 <cmox_ECC_FreePoint+0x28>
 8000398:	f100 010c 	add.w	r1, r0, #12
 800039c:	69f0      	ldr	r0, [r6, #28]
 800039e:	f004 fbd8 	bl	8004b52 <cmox_bn_free>
 80003a2:	69b0      	ldr	r0, [r6, #24]
 80003a4:	6841      	ldr	r1, [r0, #4]
 80003a6:	69c8      	ldr	r0, [r1, #28]
 80003a8:	2803      	cmp	r0, #3
 80003aa:	d004      	beq.n	80003b6 <cmox_ECC_FreePoint+0x3c>
 80003ac:	6821      	ldr	r1, [r4, #0]
 80003ae:	69f0      	ldr	r0, [r6, #28]
 80003b0:	1d09      	adds	r1, r1, #4
 80003b2:	f004 fbce 	bl	8004b52 <cmox_bn_free>
 80003b6:	6820      	ldr	r0, [r4, #0]
 80003b8:	f100 0108 	add.w	r1, r0, #8
 80003bc:	69f0      	ldr	r0, [r6, #28]
 80003be:	f004 fbc8 	bl	8004b52 <cmox_bn_free>
 80003c2:	6821      	ldr	r1, [r4, #0]
 80003c4:	69f0      	ldr	r0, [r6, #28]
 80003c6:	f004 fbc4 	bl	8004b52 <cmox_bn_free>
 80003ca:	69f0      	ldr	r0, [r6, #28]
 80003cc:	2214      	movs	r2, #20
 80003ce:	4621      	mov	r1, r4
 80003d0:	f002 fe74 	bl	80030bc <cmox_membuf_free>
 80003d4:	6025      	str	r5, [r4, #0]
 80003d6:	4628      	mov	r0, r5
 80003d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080003dc <cmox_ECC_CondCopyPoint>:
 80003dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003de:	460f      	mov	r7, r1
 80003e0:	2500      	movs	r5, #0
 80003e2:	4616      	mov	r6, r2
 80003e4:	2f00      	cmp	r7, #0
 80003e6:	bf18      	it	ne
 80003e8:	2e00      	cmpne	r6, #0
 80003ea:	4604      	mov	r4, r0
 80003ec:	d00b      	beq.n	8000406 <cmox_ECC_CondCopyPoint+0x2a>
 80003ee:	6839      	ldr	r1, [r7, #0]
 80003f0:	2900      	cmp	r1, #0
 80003f2:	bf1c      	itt	ne
 80003f4:	68b8      	ldrne	r0, [r7, #8]
 80003f6:	2800      	cmpne	r0, #0
 80003f8:	d005      	beq.n	8000406 <cmox_ECC_CondCopyPoint+0x2a>
 80003fa:	6832      	ldr	r2, [r6, #0]
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	bf1c      	itt	ne
 8000400:	68b0      	ldrne	r0, [r6, #8]
 8000402:	2800      	cmpne	r0, #0
 8000404:	d101      	bne.n	800040a <cmox_ECC_CondCopyPoint+0x2e>
 8000406:	2501      	movs	r5, #1
 8000408:	e019      	b.n	800043e <cmox_ECC_CondCopyPoint+0x62>
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	6133      	str	r3, [r6, #16]
 800040e:	4620      	mov	r0, r4
 8000410:	f004 fbda 	bl	8004bc8 <cmox_bn_cCopy>
 8000414:	6879      	ldr	r1, [r7, #4]
 8000416:	2900      	cmp	r1, #0
 8000418:	bf1f      	itttt	ne
 800041a:	6872      	ldrne	r2, [r6, #4]
 800041c:	2a00      	cmpne	r2, #0
 800041e:	4620      	movne	r0, r4
 8000420:	f004 fbd2 	blne	8004bc8 <cmox_bn_cCopy>
 8000424:	68b2      	ldr	r2, [r6, #8]
 8000426:	68b9      	ldr	r1, [r7, #8]
 8000428:	4620      	mov	r0, r4
 800042a:	f004 fbcd 	bl	8004bc8 <cmox_bn_cCopy>
 800042e:	68f9      	ldr	r1, [r7, #12]
 8000430:	2900      	cmp	r1, #0
 8000432:	bf1f      	itttt	ne
 8000434:	68f2      	ldrne	r2, [r6, #12]
 8000436:	2a00      	cmpne	r2, #0
 8000438:	4620      	movne	r0, r4
 800043a:	f004 fbc5 	blne	8004bc8 <cmox_bn_cCopy>
 800043e:	4628      	mov	r0, r5
 8000440:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08000442 <cmox_ECC_CondSymmetricPoint>:
 8000442:	b570      	push	{r4, r5, r6, lr}
 8000444:	460e      	mov	r6, r1
 8000446:	4615      	mov	r5, r2
 8000448:	69b1      	ldr	r1, [r6, #24]
 800044a:	680a      	ldr	r2, [r1, #0]
 800044c:	69d3      	ldr	r3, [r2, #28]
 800044e:	4604      	mov	r4, r0
 8000450:	2001      	movs	r0, #1
 8000452:	b13b      	cbz	r3, 8000464 <cmox_ECC_CondSymmetricPoint+0x22>
 8000454:	2b02      	cmp	r3, #2
 8000456:	d001      	beq.n	800045c <cmox_ECC_CondSymmetricPoint+0x1a>
 8000458:	d307      	bcc.n	800046a <cmox_ECC_CondSymmetricPoint+0x28>
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	6849      	ldr	r1, [r1, #4]
 800045e:	69cb      	ldr	r3, [r1, #28]
 8000460:	2b03      	cmp	r3, #3
 8000462:	d014      	beq.n	800048e <cmox_ECC_CondSymmetricPoint+0x4c>
 8000464:	6812      	ldr	r2, [r2, #0]
 8000466:	6869      	ldr	r1, [r5, #4]
 8000468:	e00c      	b.n	8000484 <cmox_ECC_CondSymmetricPoint+0x42>
 800046a:	6812      	ldr	r2, [r2, #0]
 800046c:	6829      	ldr	r1, [r5, #0]
 800046e:	4620      	mov	r0, r4
 8000470:	f002 fcee 	bl	8002e50 <cmox_FieldBN_CondNegate>
 8000474:	69b1      	ldr	r1, [r6, #24]
 8000476:	684a      	ldr	r2, [r1, #4]
 8000478:	69d3      	ldr	r3, [r2, #28]
 800047a:	2b02      	cmp	r3, #2
 800047c:	d107      	bne.n	800048e <cmox_ECC_CondSymmetricPoint+0x4c>
 800047e:	6808      	ldr	r0, [r1, #0]
 8000480:	68e9      	ldr	r1, [r5, #12]
 8000482:	6802      	ldr	r2, [r0, #0]
 8000484:	4620      	mov	r0, r4
 8000486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800048a:	f002 bce1 	b.w	8002e50 <cmox_FieldBN_CondNegate>
 800048e:	bd70      	pop	{r4, r5, r6, pc}

08000490 <cmox_ECC_SetPointAtInfinity>:
 8000490:	b570      	push	{r4, r5, r6, lr}
 8000492:	460d      	mov	r5, r1
 8000494:	4606      	mov	r6, r0
 8000496:	6928      	ldr	r0, [r5, #16]
 8000498:	f040 0001 	orr.w	r0, r0, #1
 800049c:	6128      	str	r0, [r5, #16]
 800049e:	2400      	movs	r4, #0
 80004a0:	69b1      	ldr	r1, [r6, #24]
 80004a2:	6808      	ldr	r0, [r1, #0]
 80004a4:	69c2      	ldr	r2, [r0, #28]
 80004a6:	b11a      	cbz	r2, 80004b0 <cmox_ECC_SetPointAtInfinity+0x20>
 80004a8:	2a02      	cmp	r2, #2
 80004aa:	d00b      	beq.n	80004c4 <cmox_ECC_SetPointAtInfinity+0x34>
 80004ac:	d31a      	bcc.n	80004e4 <cmox_ECC_SetPointAtInfinity+0x54>
 80004ae:	e02f      	b.n	8000510 <cmox_ECC_SetPointAtInfinity+0x80>
 80004b0:	6828      	ldr	r0, [r5, #0]
 80004b2:	2100      	movs	r1, #0
 80004b4:	f004 fb79 	bl	8004baa <cmox_bn_init>
 80004b8:	6868      	ldr	r0, [r5, #4]
 80004ba:	2101      	movs	r1, #1
 80004bc:	f004 fb75 	bl	8004baa <cmox_bn_init>
 80004c0:	68a8      	ldr	r0, [r5, #8]
 80004c2:	e021      	b.n	8000508 <cmox_ECC_SetPointAtInfinity+0x78>
 80004c4:	6849      	ldr	r1, [r1, #4]
 80004c6:	69ca      	ldr	r2, [r1, #28]
 80004c8:	6828      	ldr	r0, [r5, #0]
 80004ca:	2a03      	cmp	r2, #3
 80004cc:	bf08      	it	eq
 80004ce:	2101      	moveq	r1, #1
 80004d0:	d004      	beq.n	80004dc <cmox_ECC_SetPointAtInfinity+0x4c>
 80004d2:	2100      	movs	r1, #0
 80004d4:	f004 fb69 	bl	8004baa <cmox_bn_init>
 80004d8:	6868      	ldr	r0, [r5, #4]
 80004da:	2101      	movs	r1, #1
 80004dc:	f004 fb65 	bl	8004baa <cmox_bn_init>
 80004e0:	68a8      	ldr	r0, [r5, #8]
 80004e2:	e011      	b.n	8000508 <cmox_ECC_SetPointAtInfinity+0x78>
 80004e4:	6828      	ldr	r0, [r5, #0]
 80004e6:	2100      	movs	r1, #0
 80004e8:	f004 fb5f 	bl	8004baa <cmox_bn_init>
 80004ec:	6868      	ldr	r0, [r5, #4]
 80004ee:	2101      	movs	r1, #1
 80004f0:	f004 fb5b 	bl	8004baa <cmox_bn_init>
 80004f4:	68a8      	ldr	r0, [r5, #8]
 80004f6:	2101      	movs	r1, #1
 80004f8:	f004 fb57 	bl	8004baa <cmox_bn_init>
 80004fc:	69b0      	ldr	r0, [r6, #24]
 80004fe:	6841      	ldr	r1, [r0, #4]
 8000500:	69c8      	ldr	r0, [r1, #28]
 8000502:	2802      	cmp	r0, #2
 8000504:	d105      	bne.n	8000512 <cmox_ECC_SetPointAtInfinity+0x82>
 8000506:	68e8      	ldr	r0, [r5, #12]
 8000508:	2100      	movs	r1, #0
 800050a:	f004 fb4e 	bl	8004baa <cmox_bn_init>
 800050e:	e000      	b.n	8000512 <cmox_ECC_SetPointAtInfinity+0x82>
 8000510:	2401      	movs	r4, #1
 8000512:	4620      	mov	r0, r4
 8000514:	bd70      	pop	{r4, r5, r6, pc}

08000516 <cmox_ECC_CondImportPoint>:
 8000516:	e92d 4bfc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, fp, lr}
 800051a:	4616      	mov	r6, r2
 800051c:	2500      	movs	r5, #0
 800051e:	2e00      	cmp	r6, #0
 8000520:	bf1c      	itt	ne
 8000522:	9f0b      	ldrne	r7, [sp, #44]	@ 0x2c
 8000524:	2f00      	cmpne	r7, #0
 8000526:	4680      	mov	r8, r0
 8000528:	468b      	mov	fp, r1
 800052a:	461c      	mov	r4, r3
 800052c:	d005      	beq.n	800053a <cmox_ECC_CondImportPoint+0x24>
 800052e:	6839      	ldr	r1, [r7, #0]
 8000530:	2900      	cmp	r1, #0
 8000532:	bf1c      	itt	ne
 8000534:	68b8      	ldrne	r0, [r7, #8]
 8000536:	2800      	cmpne	r0, #0
 8000538:	d103      	bne.n	8000542 <cmox_ECC_CondImportPoint+0x2c>
 800053a:	2501      	movs	r5, #1
 800053c:	4628      	mov	r0, r5
 800053e:	e8bd 8bf6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, fp, pc}
 8000542:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8000544:	6138      	str	r0, [r7, #16]
 8000546:	4640      	mov	r0, r8
 8000548:	684a      	ldr	r2, [r1, #4]
 800054a:	6831      	ldr	r1, [r6, #0]
 800054c:	f002 fd59 	bl	8003002 <cmox_mathUtils_mux>
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	6050      	str	r0, [r2, #4]
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	b138      	cbz	r0, 8000568 <cmox_ECC_CondImportPoint+0x52>
 8000558:	6842      	ldr	r2, [r0, #4]
 800055a:	f856 102b 	ldr.w	r1, [r6, fp, lsl #2]
 800055e:	4640      	mov	r0, r8
 8000560:	f002 fd4f 	bl	8003002 <cmox_mathUtils_mux>
 8000564:	6879      	ldr	r1, [r7, #4]
 8000566:	6048      	str	r0, [r1, #4]
 8000568:	2c00      	cmp	r4, #0
 800056a:	68b8      	ldr	r0, [r7, #8]
 800056c:	6842      	ldr	r2, [r0, #4]
 800056e:	bf0c      	ite	eq
 8000570:	2101      	moveq	r1, #1
 8000572:	6821      	ldrne	r1, [r4, #0]
 8000574:	4640      	mov	r0, r8
 8000576:	f002 fd44 	bl	8003002 <cmox_mathUtils_mux>
 800057a:	68b9      	ldr	r1, [r7, #8]
 800057c:	6048      	str	r0, [r1, #4]
 800057e:	68f8      	ldr	r0, [r7, #12]
 8000580:	b138      	cbz	r0, 8000592 <cmox_ECC_CondImportPoint+0x7c>
 8000582:	6842      	ldr	r2, [r0, #4]
 8000584:	f856 103b 	ldr.w	r1, [r6, fp, lsl #3]
 8000588:	4640      	mov	r0, r8
 800058a:	f002 fd3a 	bl	8003002 <cmox_mathUtils_mux>
 800058e:	68f9      	ldr	r1, [r7, #12]
 8000590:	6048      	str	r0, [r1, #4]
 8000592:	f04f 0902 	mov.w	r9, #2
 8000596:	1f36      	subs	r6, r6, #4
 8000598:	e015      	b.n	80005c6 <cmox_ECC_CondImportPoint+0xb0>
 800059a:	4640      	mov	r0, r8
 800059c:	f002 fd31 	bl	8003002 <cmox_mathUtils_mux>
 80005a0:	68b9      	ldr	r1, [r7, #8]
 80005a2:	f841 0029 	str.w	r0, [r1, r9, lsl #2]
 80005a6:	68f8      	ldr	r0, [r7, #12]
 80005a8:	b158      	cbz	r0, 80005c2 <cmox_ECC_CondImportPoint+0xac>
 80005aa:	f850 2029 	ldr.w	r2, [r0, r9, lsl #2]
 80005ae:	eb09 004b 	add.w	r0, r9, fp, lsl #1
 80005b2:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 80005b6:	4640      	mov	r0, r8
 80005b8:	f002 fd23 	bl	8003002 <cmox_mathUtils_mux>
 80005bc:	68f9      	ldr	r1, [r7, #12]
 80005be:	f841 0029 	str.w	r0, [r1, r9, lsl #2]
 80005c2:	f109 0901 	add.w	r9, r9, #1
 80005c6:	45cb      	cmp	fp, r9
 80005c8:	d3b8      	bcc.n	800053c <cmox_ECC_CondImportPoint+0x26>
 80005ca:	6838      	ldr	r0, [r7, #0]
 80005cc:	f850 2029 	ldr.w	r2, [r0, r9, lsl #2]
 80005d0:	f856 1029 	ldr.w	r1, [r6, r9, lsl #2]
 80005d4:	4640      	mov	r0, r8
 80005d6:	f002 fd14 	bl	8003002 <cmox_mathUtils_mux>
 80005da:	6839      	ldr	r1, [r7, #0]
 80005dc:	f841 0029 	str.w	r0, [r1, r9, lsl #2]
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	b158      	cbz	r0, 80005fc <cmox_ECC_CondImportPoint+0xe6>
 80005e4:	f850 2029 	ldr.w	r2, [r0, r9, lsl #2]
 80005e8:	eb0b 0009 	add.w	r0, fp, r9
 80005ec:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 80005f0:	4640      	mov	r0, r8
 80005f2:	f002 fd06 	bl	8003002 <cmox_mathUtils_mux>
 80005f6:	6879      	ldr	r1, [r7, #4]
 80005f8:	f841 0029 	str.w	r0, [r1, r9, lsl #2]
 80005fc:	2c00      	cmp	r4, #0
 80005fe:	68b8      	ldr	r0, [r7, #8]
 8000600:	f850 2029 	ldr.w	r2, [r0, r9, lsl #2]
 8000604:	bf0e      	itee	eq
 8000606:	2100      	moveq	r1, #0
 8000608:	1f20      	subne	r0, r4, #4
 800060a:	f850 1029 	ldrne.w	r1, [r0, r9, lsl #2]
 800060e:	e7c4      	b.n	800059a <cmox_ECC_CondImportPoint+0x84>

08000610 <cmox_ECC_PointToModularDomain>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	4604      	mov	r4, r0
 8000614:	460d      	mov	r5, r1
 8000616:	69a0      	ldr	r0, [r4, #24]
 8000618:	6841      	ldr	r1, [r0, #4]
 800061a:	69c8      	ldr	r0, [r1, #28]
 800061c:	2600      	movs	r6, #0
 800061e:	2803      	cmp	r0, #3
 8000620:	d818      	bhi.n	8000654 <cmox_ECC_PointToModularDomain+0x44>
 8000622:	e8df f000 	tbb	[pc, r0]
 8000626:	0707      	.short	0x0707
 8000628:	0c02      	.short	0x0c02
 800062a:	6a22      	ldr	r2, [r4, #32]
 800062c:	68e8      	ldr	r0, [r5, #12]
 800062e:	4621      	mov	r1, r4
 8000630:	f002 fc55 	bl	8002ede <cmox_ModularBN_Enter>
 8000634:	6a22      	ldr	r2, [r4, #32]
 8000636:	6868      	ldr	r0, [r5, #4]
 8000638:	4621      	mov	r1, r4
 800063a:	f002 fc50 	bl	8002ede <cmox_ModularBN_Enter>
 800063e:	6a22      	ldr	r2, [r4, #32]
 8000640:	6828      	ldr	r0, [r5, #0]
 8000642:	4621      	mov	r1, r4
 8000644:	f002 fc4b 	bl	8002ede <cmox_ModularBN_Enter>
 8000648:	6a22      	ldr	r2, [r4, #32]
 800064a:	68a8      	ldr	r0, [r5, #8]
 800064c:	4621      	mov	r1, r4
 800064e:	f002 fc46 	bl	8002ede <cmox_ModularBN_Enter>
 8000652:	e000      	b.n	8000656 <cmox_ECC_PointToModularDomain+0x46>
 8000654:	2601      	movs	r6, #1
 8000656:	6928      	ldr	r0, [r5, #16]
 8000658:	f040 0004 	orr.w	r0, r0, #4
 800065c:	6128      	str	r0, [r5, #16]
 800065e:	4630      	mov	r0, r6
 8000660:	bd70      	pop	{r4, r5, r6, pc}
	...

08000664 <cmox_ECC_PointFromModularDomain>:
 8000664:	b538      	push	{r3, r4, r5, lr}
 8000666:	4604      	mov	r4, r0
 8000668:	460d      	mov	r5, r1
 800066a:	69a0      	ldr	r0, [r4, #24]
 800066c:	6841      	ldr	r1, [r0, #4]
 800066e:	69c8      	ldr	r0, [r1, #28]
 8000670:	2803      	cmp	r0, #3
 8000672:	d81f      	bhi.n	80006b4 <cmox_ECC_PointFromModularDomain+0x50>
 8000674:	e8df f000 	tbb	[pc, r0]
 8000678:	10020909 	.word	0x10020909
 800067c:	6a23      	ldr	r3, [r4, #32]
 800067e:	69e2      	ldr	r2, [r4, #28]
 8000680:	68e8      	ldr	r0, [r5, #12]
 8000682:	4621      	mov	r1, r4
 8000684:	f002 fc33 	bl	8002eee <cmox_ModularBN_Exit>
 8000688:	b9a8      	cbnz	r0, 80006b6 <cmox_ECC_PointFromModularDomain+0x52>
 800068a:	6a23      	ldr	r3, [r4, #32]
 800068c:	69e2      	ldr	r2, [r4, #28]
 800068e:	6868      	ldr	r0, [r5, #4]
 8000690:	4621      	mov	r1, r4
 8000692:	f002 fc2c 	bl	8002eee <cmox_ModularBN_Exit>
 8000696:	b970      	cbnz	r0, 80006b6 <cmox_ECC_PointFromModularDomain+0x52>
 8000698:	6a23      	ldr	r3, [r4, #32]
 800069a:	69e2      	ldr	r2, [r4, #28]
 800069c:	6828      	ldr	r0, [r5, #0]
 800069e:	4621      	mov	r1, r4
 80006a0:	f002 fc25 	bl	8002eee <cmox_ModularBN_Exit>
 80006a4:	b938      	cbnz	r0, 80006b6 <cmox_ECC_PointFromModularDomain+0x52>
 80006a6:	6a23      	ldr	r3, [r4, #32]
 80006a8:	69e2      	ldr	r2, [r4, #28]
 80006aa:	68a8      	ldr	r0, [r5, #8]
 80006ac:	4621      	mov	r1, r4
 80006ae:	f002 fc1e 	bl	8002eee <cmox_ModularBN_Exit>
 80006b2:	e000      	b.n	80006b6 <cmox_ECC_PointFromModularDomain+0x52>
 80006b4:	2001      	movs	r0, #1
 80006b6:	6929      	ldr	r1, [r5, #16]
 80006b8:	f021 0104 	bic.w	r1, r1, #4
 80006bc:	6129      	str	r1, [r5, #16]
 80006be:	bd32      	pop	{r1, r4, r5, pc}

080006c0 <cmox_ECC_PointValidation>:
 80006c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c2:	4604      	mov	r4, r0
 80006c4:	2600      	movs	r6, #0
 80006c6:	460d      	mov	r5, r1
 80006c8:	2c00      	cmp	r4, #0
 80006ca:	bf18      	it	ne
 80006cc:	2d00      	cmpne	r5, #0
 80006ce:	d05e      	beq.n	800078e <cmox_ECC_PointValidation+0xce>
 80006d0:	7c28      	ldrb	r0, [r5, #16]
 80006d2:	2100      	movs	r1, #0
 80006d4:	f000 0001 	and.w	r0, r0, #1
 80006d8:	f002 fc9b 	bl	8003012 <cmox_mathUtils_neq>
 80006dc:	2801      	cmp	r0, #1
 80006de:	d056      	beq.n	800078e <cmox_ECC_PointValidation+0xce>
 80006e0:	68a8      	ldr	r0, [r5, #8]
 80006e2:	2100      	movs	r1, #0
 80006e4:	f004 fb0c 	bl	8004d00 <cmox_bn_cmpUint>
 80006e8:	2801      	cmp	r0, #1
 80006ea:	d050      	beq.n	800078e <cmox_ECC_PointValidation+0xce>
 80006ec:	69a0      	ldr	r0, [r4, #24]
 80006ee:	6801      	ldr	r1, [r0, #0]
 80006f0:	6828      	ldr	r0, [r5, #0]
 80006f2:	6809      	ldr	r1, [r1, #0]
 80006f4:	f004 fac3 	bl	8004c7e <cmox_bn_cmp>
 80006f8:	2800      	cmp	r0, #0
 80006fa:	d548      	bpl.n	800078e <cmox_ECC_PointValidation+0xce>
 80006fc:	69a0      	ldr	r0, [r4, #24]
 80006fe:	6841      	ldr	r1, [r0, #4]
 8000700:	69ca      	ldr	r2, [r1, #28]
 8000702:	2a03      	cmp	r2, #3
 8000704:	d006      	beq.n	8000714 <cmox_ECC_PointValidation+0x54>
 8000706:	6800      	ldr	r0, [r0, #0]
 8000708:	6801      	ldr	r1, [r0, #0]
 800070a:	6868      	ldr	r0, [r5, #4]
 800070c:	f004 fab7 	bl	8004c7e <cmox_bn_cmp>
 8000710:	2800      	cmp	r0, #0
 8000712:	d53c      	bpl.n	800078e <cmox_ECC_PointValidation+0xce>
 8000714:	69a1      	ldr	r1, [r4, #24]
 8000716:	6809      	ldr	r1, [r1, #0]
 8000718:	6908      	ldr	r0, [r1, #16]
 800071a:	2800      	cmp	r0, #0
 800071c:	bf1c      	itt	ne
 800071e:	6948      	ldrne	r0, [r1, #20]
 8000720:	2800      	cmpne	r0, #0
 8000722:	d035      	beq.n	8000790 <cmox_ECC_PointValidation+0xd0>
 8000724:	69c8      	ldr	r0, [r1, #28]
 8000726:	b118      	cbz	r0, 8000730 <cmox_ECC_PointValidation+0x70>
 8000728:	2802      	cmp	r0, #2
 800072a:	d031      	beq.n	8000790 <cmox_ECC_PointValidation+0xd0>
 800072c:	d332      	bcc.n	8000794 <cmox_ECC_PointValidation+0xd4>
 800072e:	e02e      	b.n	800078e <cmox_ECC_PointValidation+0xce>
 8000730:	6960      	ldr	r0, [r4, #20]
 8000732:	6801      	ldr	r1, [r0, #0]
 8000734:	6a23      	ldr	r3, [r4, #32]
 8000736:	6828      	ldr	r0, [r5, #0]
 8000738:	4622      	mov	r2, r4
 800073a:	f002 fc1d 	bl	8002f78 <cmox_ModularBN_Sqr>
 800073e:	69a0      	ldr	r0, [r4, #24]
 8000740:	6961      	ldr	r1, [r4, #20]
 8000742:	6800      	ldr	r0, [r0, #0]
 8000744:	680b      	ldr	r3, [r1, #0]
 8000746:	6802      	ldr	r2, [r0, #0]
 8000748:	6901      	ldr	r1, [r0, #16]
 800074a:	4618      	mov	r0, r3
 800074c:	f002 f96c 	bl	8002a28 <cmox_ModAddBN>
 8000750:	6960      	ldr	r0, [r4, #20]
 8000752:	6a21      	ldr	r1, [r4, #32]
 8000754:	6802      	ldr	r2, [r0, #0]
 8000756:	9100      	str	r1, [sp, #0]
 8000758:	4623      	mov	r3, r4
 800075a:	6829      	ldr	r1, [r5, #0]
 800075c:	4610      	mov	r0, r2
 800075e:	f002 fbe8 	bl	8002f32 <cmox_ModularBN_Mul>
 8000762:	69a0      	ldr	r0, [r4, #24]
 8000764:	6962      	ldr	r2, [r4, #20]
 8000766:	6801      	ldr	r1, [r0, #0]
 8000768:	6810      	ldr	r0, [r2, #0]
 800076a:	680a      	ldr	r2, [r1, #0]
 800076c:	6949      	ldr	r1, [r1, #20]
 800076e:	4603      	mov	r3, r0
 8000770:	f002 f95a 	bl	8002a28 <cmox_ModAddBN>
 8000774:	6960      	ldr	r0, [r4, #20]
 8000776:	6841      	ldr	r1, [r0, #4]
 8000778:	6a23      	ldr	r3, [r4, #32]
 800077a:	6868      	ldr	r0, [r5, #4]
 800077c:	4622      	mov	r2, r4
 800077e:	f002 fbfb 	bl	8002f78 <cmox_ModularBN_Sqr>
 8000782:	6960      	ldr	r0, [r4, #20]
 8000784:	6841      	ldr	r1, [r0, #4]
 8000786:	6800      	ldr	r0, [r0, #0]
 8000788:	f004 fa79 	bl	8004c7e <cmox_bn_cmp>
 800078c:	b100      	cbz	r0, 8000790 <cmox_ECC_PointValidation+0xd0>
 800078e:	2604      	movs	r6, #4
 8000790:	4630      	mov	r0, r6
 8000792:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8000794:	6960      	ldr	r0, [r4, #20]
 8000796:	6801      	ldr	r1, [r0, #0]
 8000798:	6a23      	ldr	r3, [r4, #32]
 800079a:	6828      	ldr	r0, [r5, #0]
 800079c:	4622      	mov	r2, r4
 800079e:	f002 fbeb 	bl	8002f78 <cmox_ModularBN_Sqr>
 80007a2:	6960      	ldr	r0, [r4, #20]
 80007a4:	6841      	ldr	r1, [r0, #4]
 80007a6:	6a23      	ldr	r3, [r4, #32]
 80007a8:	6868      	ldr	r0, [r5, #4]
 80007aa:	4622      	mov	r2, r4
 80007ac:	f002 fbe4 	bl	8002f78 <cmox_ModularBN_Sqr>
 80007b0:	6960      	ldr	r0, [r4, #20]
 80007b2:	6a22      	ldr	r2, [r4, #32]
 80007b4:	6801      	ldr	r1, [r0, #0]
 80007b6:	9200      	str	r2, [sp, #0]
 80007b8:	4623      	mov	r3, r4
 80007ba:	69a0      	ldr	r0, [r4, #24]
 80007bc:	6807      	ldr	r7, [r0, #0]
 80007be:	6938      	ldr	r0, [r7, #16]
 80007c0:	460a      	mov	r2, r1
 80007c2:	f002 fbb6 	bl	8002f32 <cmox_ModularBN_Mul>
 80007c6:	69a2      	ldr	r2, [r4, #24]
 80007c8:	6961      	ldr	r1, [r4, #20]
 80007ca:	6817      	ldr	r7, [r2, #0]
 80007cc:	6808      	ldr	r0, [r1, #0]
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	6849      	ldr	r1, [r1, #4]
 80007d2:	4603      	mov	r3, r0
 80007d4:	f002 f928 	bl	8002a28 <cmox_ModAddBN>
 80007d8:	6960      	ldr	r0, [r4, #20]
 80007da:	6a21      	ldr	r1, [r4, #32]
 80007dc:	6840      	ldr	r0, [r0, #4]
 80007de:	9100      	str	r1, [sp, #0]
 80007e0:	4623      	mov	r3, r4
 80007e2:	6829      	ldr	r1, [r5, #0]
 80007e4:	4602      	mov	r2, r0
 80007e6:	f002 fba4 	bl	8002f32 <cmox_ModularBN_Mul>
 80007ea:	6960      	ldr	r0, [r4, #20]
 80007ec:	6a21      	ldr	r1, [r4, #32]
 80007ee:	6840      	ldr	r0, [r0, #4]
 80007f0:	9100      	str	r1, [sp, #0]
 80007f2:	4623      	mov	r3, r4
 80007f4:	6829      	ldr	r1, [r5, #0]
 80007f6:	4602      	mov	r2, r0
 80007f8:	f002 fb9b 	bl	8002f32 <cmox_ModularBN_Mul>
 80007fc:	6960      	ldr	r0, [r4, #20]
 80007fe:	6a21      	ldr	r1, [r4, #32]
 8000800:	6840      	ldr	r0, [r0, #4]
 8000802:	9100      	str	r1, [sp, #0]
 8000804:	4623      	mov	r3, r4
 8000806:	69a7      	ldr	r7, [r4, #24]
 8000808:	683f      	ldr	r7, [r7, #0]
 800080a:	6979      	ldr	r1, [r7, #20]
 800080c:	4602      	mov	r2, r0
 800080e:	f002 fb90 	bl	8002f32 <cmox_ModularBN_Mul>
 8000812:	69a1      	ldr	r1, [r4, #24]
 8000814:	6960      	ldr	r0, [r4, #20]
 8000816:	680a      	ldr	r2, [r1, #0]
 8000818:	6840      	ldr	r0, [r0, #4]
 800081a:	6812      	ldr	r2, [r2, #0]
 800081c:	68a9      	ldr	r1, [r5, #8]
 800081e:	4603      	mov	r3, r0
 8000820:	f002 f902 	bl	8002a28 <cmox_ModAddBN>
 8000824:	e7ad      	b.n	8000782 <cmox_ECC_PointValidation+0xc2>
	...

08000828 <cmox_ECC_PointToAffine>:
 8000828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082a:	b085      	sub	sp, #20
 800082c:	460f      	mov	r7, r1
 800082e:	4606      	mov	r6, r0
 8000830:	2100      	movs	r1, #0
 8000832:	9103      	str	r1, [sp, #12]
 8000834:	9104      	str	r1, [sp, #16]
 8000836:	a903      	add	r1, sp, #12
 8000838:	69b0      	ldr	r0, [r6, #24]
 800083a:	6803      	ldr	r3, [r0, #0]
 800083c:	681c      	ldr	r4, [r3, #0]
 800083e:	69f0      	ldr	r0, [r6, #28]
 8000840:	6822      	ldr	r2, [r4, #0]
 8000842:	f004 f97b 	bl	8004b3c <cmox_bn_alloc>
 8000846:	2501      	movs	r5, #1
 8000848:	0004      	movs	r4, r0
 800084a:	f040 80c5 	bne.w	80009d8 <cmox_ECC_PointToAffine+0x1b0>
 800084e:	69b0      	ldr	r0, [r6, #24]
 8000850:	6801      	ldr	r1, [r0, #0]
 8000852:	680a      	ldr	r2, [r1, #0]
 8000854:	69f0      	ldr	r0, [r6, #28]
 8000856:	6812      	ldr	r2, [r2, #0]
 8000858:	a904      	add	r1, sp, #16
 800085a:	f004 f96f 	bl	8004b3c <cmox_bn_alloc>
 800085e:	0004      	movs	r4, r0
 8000860:	f040 80b6 	bne.w	80009d0 <cmox_ECC_PointToAffine+0x1a8>
 8000864:	7c38      	ldrb	r0, [r7, #16]
 8000866:	2100      	movs	r1, #0
 8000868:	f000 0004 	and.w	r0, r0, #4
 800086c:	f002 fbd1 	bl	8003012 <cmox_mathUtils_neq>
 8000870:	b920      	cbnz	r0, 800087c <cmox_ECC_PointToAffine+0x54>
 8000872:	4639      	mov	r1, r7
 8000874:	4630      	mov	r0, r6
 8000876:	f7ff fecb 	bl	8000610 <cmox_ECC_PointToModularDomain>
 800087a:	2500      	movs	r5, #0
 800087c:	f8df 2178 	ldr.w	r2, [pc, #376]	@ 80009f8 <.text_19>
 8000880:	4957      	ldr	r1, [pc, #348]	@ (80009e0 <cmox_ECC_PointToAffine+0x1b8>)
 8000882:	e9d2 3400 	ldrd	r3, r4, [r2]
 8000886:	e9cd 3400 	strd	r3, r4, [sp]
 800088a:	7808      	ldrb	r0, [r1, #0]
 800088c:	4b55      	ldr	r3, [pc, #340]	@ (80009e4 <cmox_ECC_PointToAffine+0x1bc>)
 800088e:	2800      	cmp	r0, #0
 8000890:	bf0e      	itee	eq
 8000892:	2100      	moveq	r1, #0
 8000894:	2004      	movne	r0, #4
 8000896:	2104      	movne	r1, #4
 8000898:	581a      	ldr	r2, [r3, r0]
 800089a:	f85d 0001 	ldr.w	r0, [sp, r1]
 800089e:	4952      	ldr	r1, [pc, #328]	@ (80009e8 <cmox_ECC_PointToAffine+0x1c0>)
 80008a0:	1882      	adds	r2, r0, r2
 80008a2:	6011      	str	r1, [r2, #0]
 80008a4:	2101      	movs	r1, #1
 80008a6:	6810      	ldr	r0, [r2, #0]
 80008a8:	6091      	str	r1, [r2, #8]
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	9900      	ldr	r1, [sp, #0]
 80008ae:	4050      	eors	r0, r2
 80008b0:	4041      	eors	r1, r0
 80008b2:	484e      	ldr	r0, [pc, #312]	@ (80009ec <cmox_ECC_PointToAffine+0x1c4>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	ea80 0c01 	eor.w	ip, r0, r1
 80008ba:	9901      	ldr	r1, [sp, #4]
 80008bc:	484c      	ldr	r0, [pc, #304]	@ (80009f0 <cmox_ECC_PointToAffine+0x1c8>)
 80008be:	404a      	eors	r2, r1
 80008c0:	4042      	eors	r2, r0
 80008c2:	69b0      	ldr	r0, [r6, #24]
 80008c4:	6803      	ldr	r3, [r0, #0]
 80008c6:	6818      	ldr	r0, [r3, #0]
 80008c8:	4494      	add	ip, r2
 80008ca:	4a4a      	ldr	r2, [pc, #296]	@ (80009f4 <cmox_ECC_PointToAffine+0x1cc>)
 80008cc:	ea92 0f0c 	teq	r2, ip
 80008d0:	9a04      	ldr	r2, [sp, #16]
 80008d2:	bf14      	ite	ne
 80008d4:	f06f 0102 	mvnne.w	r1, #2
 80008d8:	f06f 0101 	mvneq.w	r1, #1
 80008dc:	f002 f9e8 	bl	8002cb0 <cmox_AddBN_Int>
 80008e0:	69b0      	ldr	r0, [r6, #24]
 80008e2:	69c4      	ldr	r4, [r0, #28]
 80008e4:	6a30      	ldr	r0, [r6, #32]
 80008e6:	9002      	str	r0, [sp, #8]
 80008e8:	4632      	mov	r2, r6
 80008ea:	69f1      	ldr	r1, [r6, #28]
 80008ec:	9803      	ldr	r0, [sp, #12]
 80008ee:	9101      	str	r1, [sp, #4]
 80008f0:	9000      	str	r0, [sp, #0]
 80008f2:	6863      	ldr	r3, [r4, #4]
 80008f4:	9904      	ldr	r1, [sp, #16]
 80008f6:	68b8      	ldr	r0, [r7, #8]
 80008f8:	6824      	ldr	r4, [r4, #0]
 80008fa:	47a0      	blx	r4
 80008fc:	4604      	mov	r4, r0
 80008fe:	69b0      	ldr	r0, [r6, #24]
 8000900:	6841      	ldr	r1, [r0, #4]
 8000902:	69c8      	ldr	r0, [r1, #28]
 8000904:	2803      	cmp	r0, #3
 8000906:	d849      	bhi.n	800099c <cmox_ECC_PointToAffine+0x174>
 8000908:	e8df f000 	tbb	[pc, r0]
 800090c:	3f281e02 	.word	0x3f281e02
 8000910:	6a33      	ldr	r3, [r6, #32]
 8000912:	9904      	ldr	r1, [sp, #16]
 8000914:	9803      	ldr	r0, [sp, #12]
 8000916:	4632      	mov	r2, r6
 8000918:	f002 fb2e 	bl	8002f78 <cmox_ModularBN_Sqr>
 800091c:	683a      	ldr	r2, [r7, #0]
 800091e:	6a30      	ldr	r0, [r6, #32]
 8000920:	9904      	ldr	r1, [sp, #16]
 8000922:	9000      	str	r0, [sp, #0]
 8000924:	4633      	mov	r3, r6
 8000926:	4610      	mov	r0, r2
 8000928:	f002 fb03 	bl	8002f32 <cmox_ModularBN_Mul>
 800092c:	6a30      	ldr	r0, [r6, #32]
 800092e:	9a04      	ldr	r2, [sp, #16]
 8000930:	9000      	str	r0, [sp, #0]
 8000932:	4633      	mov	r3, r6
 8000934:	9803      	ldr	r0, [sp, #12]
 8000936:	4611      	mov	r1, r2
 8000938:	f002 fafb 	bl	8002f32 <cmox_ModularBN_Mul>
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	6a31      	ldr	r1, [r6, #32]
 8000940:	9100      	str	r1, [sp, #0]
 8000942:	4633      	mov	r3, r6
 8000944:	9904      	ldr	r1, [sp, #16]
 8000946:	e025      	b.n	8000994 <cmox_ECC_PointToAffine+0x16c>
 8000948:	6838      	ldr	r0, [r7, #0]
 800094a:	6a31      	ldr	r1, [r6, #32]
 800094c:	9100      	str	r1, [sp, #0]
 800094e:	4633      	mov	r3, r6
 8000950:	9903      	ldr	r1, [sp, #12]
 8000952:	4602      	mov	r2, r0
 8000954:	f002 faed 	bl	8002f32 <cmox_ModularBN_Mul>
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	e017      	b.n	800098c <cmox_ECC_PointToAffine+0x164>
 800095c:	6838      	ldr	r0, [r7, #0]
 800095e:	6a31      	ldr	r1, [r6, #32]
 8000960:	9100      	str	r1, [sp, #0]
 8000962:	4633      	mov	r3, r6
 8000964:	9903      	ldr	r1, [sp, #12]
 8000966:	4602      	mov	r2, r0
 8000968:	f002 fae3 	bl	8002f32 <cmox_ModularBN_Mul>
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	6a31      	ldr	r1, [r6, #32]
 8000970:	9100      	str	r1, [sp, #0]
 8000972:	4633      	mov	r3, r6
 8000974:	9903      	ldr	r1, [sp, #12]
 8000976:	4602      	mov	r2, r0
 8000978:	f002 fadb 	bl	8002f32 <cmox_ModularBN_Mul>
 800097c:	6a30      	ldr	r0, [r6, #32]
 800097e:	9000      	str	r0, [sp, #0]
 8000980:	68fa      	ldr	r2, [r7, #12]
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	6838      	ldr	r0, [r7, #0]
 8000986:	4633      	mov	r3, r6
 8000988:	e005      	b.n	8000996 <cmox_ECC_PointToAffine+0x16e>
 800098a:	6838      	ldr	r0, [r7, #0]
 800098c:	6a31      	ldr	r1, [r6, #32]
 800098e:	9100      	str	r1, [sp, #0]
 8000990:	4633      	mov	r3, r6
 8000992:	9903      	ldr	r1, [sp, #12]
 8000994:	4602      	mov	r2, r0
 8000996:	f002 facc 	bl	8002f32 <cmox_ModularBN_Mul>
 800099a:	e000      	b.n	800099e <cmox_ECC_PointToAffine+0x176>
 800099c:	2401      	movs	r4, #1
 800099e:	68b8      	ldr	r0, [r7, #8]
 80009a0:	6a31      	ldr	r1, [r6, #32]
 80009a2:	9100      	str	r1, [sp, #0]
 80009a4:	4633      	mov	r3, r6
 80009a6:	9903      	ldr	r1, [sp, #12]
 80009a8:	4602      	mov	r2, r0
 80009aa:	f002 fac2 	bl	8002f32 <cmox_ModularBN_Mul>
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	bf08      	it	eq
 80009b2:	2c00      	cmpeq	r4, #0
 80009b4:	d104      	bne.n	80009c0 <cmox_ECC_PointToAffine+0x198>
 80009b6:	4639      	mov	r1, r7
 80009b8:	4630      	mov	r0, r6
 80009ba:	f7ff fe53 	bl	8000664 <cmox_ECC_PointFromModularDomain>
 80009be:	4604      	mov	r4, r0
 80009c0:	6938      	ldr	r0, [r7, #16]
 80009c2:	f040 0002 	orr.w	r0, r0, #2
 80009c6:	6138      	str	r0, [r7, #16]
 80009c8:	a904      	add	r1, sp, #16
 80009ca:	69f0      	ldr	r0, [r6, #28]
 80009cc:	f004 f8c1 	bl	8004b52 <cmox_bn_free>
 80009d0:	69f0      	ldr	r0, [r6, #28]
 80009d2:	a903      	add	r1, sp, #12
 80009d4:	f004 f8bd 	bl	8004b52 <cmox_bn_free>
 80009d8:	4620      	mov	r0, r4
 80009da:	b005      	add	sp, #20
 80009dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009de:	bf00      	nop
 80009e0:	200001f0 	.word	0x200001f0
 80009e4:	0800f370 	.word	0x0800f370
 80009e8:	ad827e2c 	.word	0xad827e2c
 80009ec:	12008504 	.word	0x12008504
 80009f0:	7a0168fc 	.word	0x7a0168fc
 80009f4:	8e9be2a8 	.word	0x8e9be2a8

080009f8 <.text_19>:
 80009f8:	08001fbc 	.word	0x08001fbc

080009fc <cmox_ECC_EDW_DecPoint_ed25519>:
 80009fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a00:	4606      	mov	r6, r0
 8000a02:	b088      	sub	sp, #32
 8000a04:	69b0      	ldr	r0, [r6, #24]
 8000a06:	4689      	mov	r9, r1
 8000a08:	461d      	mov	r5, r3
 8000a0a:	6a01      	ldr	r1, [r0, #32]
 8000a0c:	6800      	ldr	r0, [r0, #0]
 8000a0e:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8000a12:	6803      	ldr	r3, [r0, #0]
 8000a14:	69f0      	ldr	r0, [r6, #28]
 8000a16:	4692      	mov	sl, r2
 8000a18:	eb09 020a 	add.w	r2, r9, sl
 8000a1c:	a906      	add	r1, sp, #24
 8000a1e:	f812 7c01 	ldrb.w	r7, [r2, #-1]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	f004 f88a 	bl	8004b3c <cmox_bn_alloc>
 8000a28:	09ff      	lsrs	r7, r7, #7
 8000a2a:	0004      	movs	r4, r0
 8000a2c:	f040 8141 	bne.w	8000cb2 <cmox_ECC_EDW_DecPoint_ed25519+0x2b6>
 8000a30:	69b0      	ldr	r0, [r6, #24]
 8000a32:	6801      	ldr	r1, [r0, #0]
 8000a34:	680a      	ldr	r2, [r1, #0]
 8000a36:	69f0      	ldr	r0, [r6, #28]
 8000a38:	6812      	ldr	r2, [r2, #0]
 8000a3a:	a907      	add	r1, sp, #28
 8000a3c:	f004 f87e 	bl	8004b3c <cmox_bn_alloc>
 8000a40:	0004      	movs	r4, r0
 8000a42:	f040 8132 	bne.w	8000caa <cmox_ECC_EDW_DecPoint_ed25519+0x2ae>
 8000a46:	69b0      	ldr	r0, [r6, #24]
 8000a48:	6801      	ldr	r1, [r0, #0]
 8000a4a:	680a      	ldr	r2, [r1, #0]
 8000a4c:	69f0      	ldr	r0, [r6, #28]
 8000a4e:	6812      	ldr	r2, [r2, #0]
 8000a50:	a903      	add	r1, sp, #12
 8000a52:	f004 f873 	bl	8004b3c <cmox_bn_alloc>
 8000a56:	0004      	movs	r4, r0
 8000a58:	f040 8123 	bne.w	8000ca2 <cmox_ECC_EDW_DecPoint_ed25519+0x2a6>
 8000a5c:	69b0      	ldr	r0, [r6, #24]
 8000a5e:	6801      	ldr	r1, [r0, #0]
 8000a60:	680a      	ldr	r2, [r1, #0]
 8000a62:	69f0      	ldr	r0, [r6, #28]
 8000a64:	6812      	ldr	r2, [r2, #0]
 8000a66:	a905      	add	r1, sp, #20
 8000a68:	f004 f868 	bl	8004b3c <cmox_bn_alloc>
 8000a6c:	0004      	movs	r4, r0
 8000a6e:	f040 8114 	bne.w	8000c9a <cmox_ECC_EDW_DecPoint_ed25519+0x29e>
 8000a72:	69b0      	ldr	r0, [r6, #24]
 8000a74:	6801      	ldr	r1, [r0, #0]
 8000a76:	680a      	ldr	r2, [r1, #0]
 8000a78:	69f0      	ldr	r0, [r6, #28]
 8000a7a:	6812      	ldr	r2, [r2, #0]
 8000a7c:	a904      	add	r1, sp, #16
 8000a7e:	f004 f85d 	bl	8004b3c <cmox_bn_alloc>
 8000a82:	0004      	movs	r4, r0
 8000a84:	f040 8105 	bne.w	8000c92 <cmox_ECC_EDW_DecPoint_ed25519+0x296>
 8000a88:	9a03      	ldr	r2, [sp, #12]
 8000a8a:	4651      	mov	r1, sl
 8000a8c:	4648      	mov	r0, r9
 8000a8e:	f004 fa53 	bl	8004f38 <cmox_bn_fromU8LE>
 8000a92:	9803      	ldr	r0, [sp, #12]
 8000a94:	9903      	ldr	r1, [sp, #12]
 8000a96:	6800      	ldr	r0, [r0, #0]
 8000a98:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 8000a9c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000aa0:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
 8000aa4:	69b0      	ldr	r0, [r6, #24]
 8000aa6:	6801      	ldr	r1, [r0, #0]
 8000aa8:	9803      	ldr	r0, [sp, #12]
 8000aaa:	6809      	ldr	r1, [r1, #0]
 8000aac:	f004 f8e7 	bl	8004c7e <cmox_bn_cmp>
 8000ab0:	2800      	cmp	r0, #0
 8000ab2:	d404      	bmi.n	8000abe <cmox_ECC_EDW_DecPoint_ed25519+0xc2>
 8000ab4:	69f0      	ldr	r0, [r6, #28]
 8000ab6:	a904      	add	r1, sp, #16
 8000ab8:	f004 f84b 	bl	8004b52 <cmox_bn_free>
 8000abc:	e0c3      	b.n	8000c46 <cmox_ECC_EDW_DecPoint_ed25519+0x24a>
 8000abe:	6868      	ldr	r0, [r5, #4]
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	f004 f872 	bl	8004baa <cmox_bn_init>
 8000ac6:	686a      	ldr	r2, [r5, #4]
 8000ac8:	9903      	ldr	r1, [sp, #12]
 8000aca:	2001      	movs	r0, #1
 8000acc:	f004 f87c 	bl	8004bc8 <cmox_bn_cCopy>
 8000ad0:	6a32      	ldr	r2, [r6, #32]
 8000ad2:	9803      	ldr	r0, [sp, #12]
 8000ad4:	4631      	mov	r1, r6
 8000ad6:	f002 fa02 	bl	8002ede <cmox_ModularBN_Enter>
 8000ada:	6a33      	ldr	r3, [r6, #32]
 8000adc:	9905      	ldr	r1, [sp, #20]
 8000ade:	9803      	ldr	r0, [sp, #12]
 8000ae0:	4632      	mov	r2, r6
 8000ae2:	f002 fa49 	bl	8002f78 <cmox_ModularBN_Sqr>
 8000ae6:	69b0      	ldr	r0, [r6, #24]
 8000ae8:	6801      	ldr	r1, [r0, #0]
 8000aea:	68c0      	ldr	r0, [r0, #12]
 8000aec:	680a      	ldr	r2, [r1, #0]
 8000aee:	6812      	ldr	r2, [r2, #0]
 8000af0:	1d01      	adds	r1, r0, #4
 8000af2:	9804      	ldr	r0, [sp, #16]
 8000af4:	f004 f838 	bl	8004b68 <cmox_bn_import>
 8000af8:	69b0      	ldr	r0, [r6, #24]
 8000afa:	6801      	ldr	r1, [r0, #0]
 8000afc:	680a      	ldr	r2, [r1, #0]
 8000afe:	9b07      	ldr	r3, [sp, #28]
 8000b00:	9904      	ldr	r1, [sp, #16]
 8000b02:	9805      	ldr	r0, [sp, #20]
 8000b04:	f002 f821 	bl	8002b4a <cmox_ModSubBN>
 8000b08:	6a30      	ldr	r0, [r6, #32]
 8000b0a:	9a06      	ldr	r2, [sp, #24]
 8000b0c:	9000      	str	r0, [sp, #0]
 8000b0e:	4633      	mov	r3, r6
 8000b10:	69b0      	ldr	r0, [r6, #24]
 8000b12:	6801      	ldr	r1, [r0, #0]
 8000b14:	9805      	ldr	r0, [sp, #20]
 8000b16:	6949      	ldr	r1, [r1, #20]
 8000b18:	f002 fa0b 	bl	8002f32 <cmox_ModularBN_Mul>
 8000b1c:	69b0      	ldr	r0, [r6, #24]
 8000b1e:	6801      	ldr	r1, [r0, #0]
 8000b20:	680a      	ldr	r2, [r1, #0]
 8000b22:	9b06      	ldr	r3, [sp, #24]
 8000b24:	9904      	ldr	r1, [sp, #16]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 ff7e 	bl	8002a28 <cmox_ModAddBN>
 8000b2c:	6a33      	ldr	r3, [r6, #32]
 8000b2e:	9903      	ldr	r1, [sp, #12]
 8000b30:	9806      	ldr	r0, [sp, #24]
 8000b32:	4632      	mov	r2, r6
 8000b34:	f002 fa20 	bl	8002f78 <cmox_ModularBN_Sqr>
 8000b38:	6a30      	ldr	r0, [r6, #32]
 8000b3a:	9a03      	ldr	r2, [sp, #12]
 8000b3c:	9906      	ldr	r1, [sp, #24]
 8000b3e:	9000      	str	r0, [sp, #0]
 8000b40:	4633      	mov	r3, r6
 8000b42:	4610      	mov	r0, r2
 8000b44:	f002 f9f5 	bl	8002f32 <cmox_ModularBN_Mul>
 8000b48:	6a30      	ldr	r0, [r6, #32]
 8000b4a:	9a05      	ldr	r2, [sp, #20]
 8000b4c:	9903      	ldr	r1, [sp, #12]
 8000b4e:	9000      	str	r0, [sp, #0]
 8000b50:	4633      	mov	r3, r6
 8000b52:	9807      	ldr	r0, [sp, #28]
 8000b54:	f002 f9ed 	bl	8002f32 <cmox_ModularBN_Mul>
 8000b58:	9903      	ldr	r1, [sp, #12]
 8000b5a:	6a33      	ldr	r3, [r6, #32]
 8000b5c:	4632      	mov	r2, r6
 8000b5e:	4608      	mov	r0, r1
 8000b60:	f002 fa0a 	bl	8002f78 <cmox_ModularBN_Sqr>
 8000b64:	6a30      	ldr	r0, [r6, #32]
 8000b66:	9a03      	ldr	r2, [sp, #12]
 8000b68:	9906      	ldr	r1, [sp, #24]
 8000b6a:	9000      	str	r0, [sp, #0]
 8000b6c:	4633      	mov	r3, r6
 8000b6e:	4610      	mov	r0, r2
 8000b70:	f002 f9df 	bl	8002f32 <cmox_ModularBN_Mul>
 8000b74:	6a30      	ldr	r0, [r6, #32]
 8000b76:	9a03      	ldr	r2, [sp, #12]
 8000b78:	9907      	ldr	r1, [sp, #28]
 8000b7a:	9000      	str	r0, [sp, #0]
 8000b7c:	4633      	mov	r3, r6
 8000b7e:	4610      	mov	r0, r2
 8000b80:	f002 f9d7 	bl	8002f32 <cmox_ModularBN_Mul>
 8000b84:	69b0      	ldr	r0, [r6, #24]
 8000b86:	6803      	ldr	r3, [r0, #0]
 8000b88:	9a04      	ldr	r2, [sp, #16]
 8000b8a:	6818      	ldr	r0, [r3, #0]
 8000b8c:	f06f 0104 	mvn.w	r1, #4
 8000b90:	f002 f88e 	bl	8002cb0 <cmox_AddBN_Int>
 8000b94:	9a04      	ldr	r2, [sp, #16]
 8000b96:	2103      	movs	r1, #3
 8000b98:	4610      	mov	r0, r2
 8000b9a:	f001 ff1a 	bl	80029d2 <cmox_RightShiftBN>
 8000b9e:	69b0      	ldr	r0, [r6, #24]
 8000ba0:	69c4      	ldr	r4, [r0, #28]
 8000ba2:	6a30      	ldr	r0, [r6, #32]
 8000ba4:	9002      	str	r0, [sp, #8]
 8000ba6:	69f1      	ldr	r1, [r6, #28]
 8000ba8:	9803      	ldr	r0, [sp, #12]
 8000baa:	9101      	str	r1, [sp, #4]
 8000bac:	682a      	ldr	r2, [r5, #0]
 8000bae:	9904      	ldr	r1, [sp, #16]
 8000bb0:	9200      	str	r2, [sp, #0]
 8000bb2:	4632      	mov	r2, r6
 8000bb4:	6863      	ldr	r3, [r4, #4]
 8000bb6:	6824      	ldr	r4, [r4, #0]
 8000bb8:	47a0      	blx	r4
 8000bba:	4604      	mov	r4, r0
 8000bbc:	69f0      	ldr	r0, [r6, #28]
 8000bbe:	a904      	add	r1, sp, #16
 8000bc0:	f003 ffc7 	bl	8004b52 <cmox_bn_free>
 8000bc4:	2c00      	cmp	r4, #0
 8000bc6:	d164      	bne.n	8000c92 <cmox_ECC_EDW_DecPoint_ed25519+0x296>
 8000bc8:	6828      	ldr	r0, [r5, #0]
 8000bca:	6a31      	ldr	r1, [r6, #32]
 8000bcc:	9100      	str	r1, [sp, #0]
 8000bce:	4633      	mov	r3, r6
 8000bd0:	9905      	ldr	r1, [sp, #20]
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	f002 f9ad 	bl	8002f32 <cmox_ModularBN_Mul>
 8000bd8:	6a33      	ldr	r3, [r6, #32]
 8000bda:	9903      	ldr	r1, [sp, #12]
 8000bdc:	6828      	ldr	r0, [r5, #0]
 8000bde:	4632      	mov	r2, r6
 8000be0:	f002 f9ca 	bl	8002f78 <cmox_ModularBN_Sqr>
 8000be4:	6a30      	ldr	r0, [r6, #32]
 8000be6:	9a03      	ldr	r2, [sp, #12]
 8000be8:	9000      	str	r0, [sp, #0]
 8000bea:	4633      	mov	r3, r6
 8000bec:	9806      	ldr	r0, [sp, #24]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	f002 f99f 	bl	8002f32 <cmox_ModularBN_Mul>
 8000bf4:	9907      	ldr	r1, [sp, #28]
 8000bf6:	9803      	ldr	r0, [sp, #12]
 8000bf8:	f004 f841 	bl	8004c7e <cmox_bn_cmp>
 8000bfc:	b198      	cbz	r0, 8000c26 <cmox_ECC_EDW_DecPoint_ed25519+0x22a>
 8000bfe:	69b0      	ldr	r0, [r6, #24]
 8000c00:	6803      	ldr	r3, [r0, #0]
 8000c02:	9a05      	ldr	r2, [sp, #20]
 8000c04:	9907      	ldr	r1, [sp, #28]
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	f002 f81e 	bl	8002c48 <cmox_SubBN>
 8000c0c:	9905      	ldr	r1, [sp, #20]
 8000c0e:	9803      	ldr	r0, [sp, #12]
 8000c10:	f004 f835 	bl	8004c7e <cmox_bn_cmp>
 8000c14:	b9b8      	cbnz	r0, 8000c46 <cmox_ECC_EDW_DecPoint_ed25519+0x24a>
 8000c16:	6828      	ldr	r0, [r5, #0]
 8000c18:	6a31      	ldr	r1, [r6, #32]
 8000c1a:	9100      	str	r1, [sp, #0]
 8000c1c:	4633      	mov	r3, r6
 8000c1e:	4602      	mov	r2, r0
 8000c20:	4641      	mov	r1, r8
 8000c22:	f002 f986 	bl	8002f32 <cmox_ModularBN_Mul>
 8000c26:	6a33      	ldr	r3, [r6, #32]
 8000c28:	69f2      	ldr	r2, [r6, #28]
 8000c2a:	6828      	ldr	r0, [r5, #0]
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	f002 f95e 	bl	8002eee <cmox_ModularBN_Exit>
 8000c32:	0004      	movs	r4, r0
 8000c34:	d12d      	bne.n	8000c92 <cmox_ECC_EDW_DecPoint_ed25519+0x296>
 8000c36:	2f01      	cmp	r7, #1
 8000c38:	d107      	bne.n	8000c4a <cmox_ECC_EDW_DecPoint_ed25519+0x24e>
 8000c3a:	6828      	ldr	r0, [r5, #0]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	f004 f85f 	bl	8004d00 <cmox_bn_cmpUint>
 8000c42:	2801      	cmp	r0, #1
 8000c44:	d101      	bne.n	8000c4a <cmox_ECC_EDW_DecPoint_ed25519+0x24e>
 8000c46:	2404      	movs	r4, #4
 8000c48:	e023      	b.n	8000c92 <cmox_ECC_EDW_DecPoint_ed25519+0x296>
 8000c4a:	69b0      	ldr	r0, [r6, #24]
 8000c4c:	6829      	ldr	r1, [r5, #0]
 8000c4e:	6802      	ldr	r2, [r0, #0]
 8000c50:	7908      	ldrb	r0, [r1, #4]
 8000c52:	6812      	ldr	r2, [r2, #0]
 8000c54:	f000 0001 	and.w	r0, r0, #1
 8000c58:	4078      	eors	r0, r7
 8000c5a:	f002 f8f9 	bl	8002e50 <cmox_FieldBN_CondNegate>
 8000c5e:	6928      	ldr	r0, [r5, #16]
 8000c60:	f040 0002 	orr.w	r0, r0, #2
 8000c64:	6128      	str	r0, [r5, #16]
 8000c66:	2101      	movs	r1, #1
 8000c68:	68a8      	ldr	r0, [r5, #8]
 8000c6a:	f003 ff9e 	bl	8004baa <cmox_bn_init>
 8000c6e:	69b0      	ldr	r0, [r6, #24]
 8000c70:	6841      	ldr	r1, [r0, #4]
 8000c72:	69c8      	ldr	r0, [r1, #28]
 8000c74:	2802      	cmp	r0, #2
 8000c76:	d10c      	bne.n	8000c92 <cmox_ECC_EDW_DecPoint_ed25519+0x296>
 8000c78:	6a30      	ldr	r0, [r6, #32]
 8000c7a:	9000      	str	r0, [sp, #0]
 8000c7c:	68ea      	ldr	r2, [r5, #12]
 8000c7e:	6869      	ldr	r1, [r5, #4]
 8000c80:	6828      	ldr	r0, [r5, #0]
 8000c82:	4633      	mov	r3, r6
 8000c84:	f002 f955 	bl	8002f32 <cmox_ModularBN_Mul>
 8000c88:	6a32      	ldr	r2, [r6, #32]
 8000c8a:	68e8      	ldr	r0, [r5, #12]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	f002 f926 	bl	8002ede <cmox_ModularBN_Enter>
 8000c92:	69f0      	ldr	r0, [r6, #28]
 8000c94:	a905      	add	r1, sp, #20
 8000c96:	f003 ff5c 	bl	8004b52 <cmox_bn_free>
 8000c9a:	69f0      	ldr	r0, [r6, #28]
 8000c9c:	a903      	add	r1, sp, #12
 8000c9e:	f003 ff58 	bl	8004b52 <cmox_bn_free>
 8000ca2:	69f0      	ldr	r0, [r6, #28]
 8000ca4:	a907      	add	r1, sp, #28
 8000ca6:	f003 ff54 	bl	8004b52 <cmox_bn_free>
 8000caa:	69f0      	ldr	r0, [r6, #28]
 8000cac:	a906      	add	r1, sp, #24
 8000cae:	f003 ff50 	bl	8004b52 <cmox_bn_free>
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	b008      	add	sp, #32
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000cba <cmox_ECC_EDW_DecPoint_ed448>:
 8000cba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cbe:	461f      	mov	r7, r3
 8000cc0:	4605      	mov	r5, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	4691      	mov	r9, r2
 8000cc6:	eb08 0009 	add.w	r0, r8, r9
 8000cca:	b087      	sub	sp, #28
 8000ccc:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 8000cd0:	69a8      	ldr	r0, [r5, #24]
 8000cd2:	6803      	ldr	r3, [r0, #0]
 8000cd4:	681c      	ldr	r4, [r3, #0]
 8000cd6:	69e8      	ldr	r0, [r5, #28]
 8000cd8:	6822      	ldr	r2, [r4, #0]
 8000cda:	a905      	add	r1, sp, #20
 8000cdc:	f003 ff2e 	bl	8004b3c <cmox_bn_alloc>
 8000ce0:	09f6      	lsrs	r6, r6, #7
 8000ce2:	0004      	movs	r4, r0
 8000ce4:	f040 8113 	bne.w	8000f0e <cmox_ECC_EDW_DecPoint_ed448+0x254>
 8000ce8:	69a8      	ldr	r0, [r5, #24]
 8000cea:	6801      	ldr	r1, [r0, #0]
 8000cec:	680a      	ldr	r2, [r1, #0]
 8000cee:	69e8      	ldr	r0, [r5, #28]
 8000cf0:	6812      	ldr	r2, [r2, #0]
 8000cf2:	a906      	add	r1, sp, #24
 8000cf4:	f003 ff22 	bl	8004b3c <cmox_bn_alloc>
 8000cf8:	0004      	movs	r4, r0
 8000cfa:	f040 8104 	bne.w	8000f06 <cmox_ECC_EDW_DecPoint_ed448+0x24c>
 8000cfe:	69a8      	ldr	r0, [r5, #24]
 8000d00:	6801      	ldr	r1, [r0, #0]
 8000d02:	680a      	ldr	r2, [r1, #0]
 8000d04:	69e8      	ldr	r0, [r5, #28]
 8000d06:	6812      	ldr	r2, [r2, #0]
 8000d08:	a903      	add	r1, sp, #12
 8000d0a:	f003 ff17 	bl	8004b3c <cmox_bn_alloc>
 8000d0e:	0004      	movs	r4, r0
 8000d10:	f040 80f5 	bne.w	8000efe <cmox_ECC_EDW_DecPoint_ed448+0x244>
 8000d14:	69a8      	ldr	r0, [r5, #24]
 8000d16:	6801      	ldr	r1, [r0, #0]
 8000d18:	680a      	ldr	r2, [r1, #0]
 8000d1a:	69e8      	ldr	r0, [r5, #28]
 8000d1c:	6812      	ldr	r2, [r2, #0]
 8000d1e:	a904      	add	r1, sp, #16
 8000d20:	f003 ff0c 	bl	8004b3c <cmox_bn_alloc>
 8000d24:	0004      	movs	r4, r0
 8000d26:	f040 80e6 	bne.w	8000ef6 <cmox_ECC_EDW_DecPoint_ed448+0x23c>
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	f1a9 0101 	sub.w	r1, r9, #1
 8000d30:	4640      	mov	r0, r8
 8000d32:	f004 f901 	bl	8004f38 <cmox_bn_fromU8LE>
 8000d36:	69a8      	ldr	r0, [r5, #24]
 8000d38:	6801      	ldr	r1, [r0, #0]
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	6809      	ldr	r1, [r1, #0]
 8000d3e:	f003 ff9e 	bl	8004c7e <cmox_bn_cmp>
 8000d42:	2800      	cmp	r0, #0
 8000d44:	f140 80bf 	bpl.w	8000ec6 <cmox_ECC_EDW_DecPoint_ed448+0x20c>
 8000d48:	9803      	ldr	r0, [sp, #12]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	f003 ff2d 	bl	8004baa <cmox_bn_init>
 8000d50:	9a03      	ldr	r2, [sp, #12]
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	2001      	movs	r0, #1
 8000d56:	f003 ff37 	bl	8004bc8 <cmox_bn_cCopy>
 8000d5a:	6a2a      	ldr	r2, [r5, #32]
 8000d5c:	9803      	ldr	r0, [sp, #12]
 8000d5e:	4629      	mov	r1, r5
 8000d60:	f002 f8bd 	bl	8002ede <cmox_ModularBN_Enter>
 8000d64:	6a2b      	ldr	r3, [r5, #32]
 8000d66:	9904      	ldr	r1, [sp, #16]
 8000d68:	9803      	ldr	r0, [sp, #12]
 8000d6a:	462a      	mov	r2, r5
 8000d6c:	f002 f904 	bl	8002f78 <cmox_ModularBN_Sqr>
 8000d70:	69a8      	ldr	r0, [r5, #24]
 8000d72:	6801      	ldr	r1, [r0, #0]
 8000d74:	68c0      	ldr	r0, [r0, #12]
 8000d76:	680a      	ldr	r2, [r1, #0]
 8000d78:	6812      	ldr	r2, [r2, #0]
 8000d7a:	1d01      	adds	r1, r0, #4
 8000d7c:	6838      	ldr	r0, [r7, #0]
 8000d7e:	f003 fef3 	bl	8004b68 <cmox_bn_import>
 8000d82:	69a8      	ldr	r0, [r5, #24]
 8000d84:	6801      	ldr	r1, [r0, #0]
 8000d86:	680a      	ldr	r2, [r1, #0]
 8000d88:	9b06      	ldr	r3, [sp, #24]
 8000d8a:	6839      	ldr	r1, [r7, #0]
 8000d8c:	9804      	ldr	r0, [sp, #16]
 8000d8e:	f001 fedc 	bl	8002b4a <cmox_ModSubBN>
 8000d92:	6a28      	ldr	r0, [r5, #32]
 8000d94:	9a05      	ldr	r2, [sp, #20]
 8000d96:	9000      	str	r0, [sp, #0]
 8000d98:	462b      	mov	r3, r5
 8000d9a:	69a8      	ldr	r0, [r5, #24]
 8000d9c:	6801      	ldr	r1, [r0, #0]
 8000d9e:	9804      	ldr	r0, [sp, #16]
 8000da0:	6949      	ldr	r1, [r1, #20]
 8000da2:	f002 f8c6 	bl	8002f32 <cmox_ModularBN_Mul>
 8000da6:	69a8      	ldr	r0, [r5, #24]
 8000da8:	6801      	ldr	r1, [r0, #0]
 8000daa:	680a      	ldr	r2, [r1, #0]
 8000dac:	9b05      	ldr	r3, [sp, #20]
 8000dae:	6839      	ldr	r1, [r7, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f001 feca 	bl	8002b4a <cmox_ModSubBN>
 8000db6:	6a2b      	ldr	r3, [r5, #32]
 8000db8:	9903      	ldr	r1, [sp, #12]
 8000dba:	9806      	ldr	r0, [sp, #24]
 8000dbc:	462a      	mov	r2, r5
 8000dbe:	f002 f8db 	bl	8002f78 <cmox_ModularBN_Sqr>
 8000dc2:	9903      	ldr	r1, [sp, #12]
 8000dc4:	6a2b      	ldr	r3, [r5, #32]
 8000dc6:	462a      	mov	r2, r5
 8000dc8:	4608      	mov	r0, r1
 8000dca:	f002 f8d5 	bl	8002f78 <cmox_ModularBN_Sqr>
 8000dce:	6a28      	ldr	r0, [r5, #32]
 8000dd0:	9a03      	ldr	r2, [sp, #12]
 8000dd2:	9906      	ldr	r1, [sp, #24]
 8000dd4:	9000      	str	r0, [sp, #0]
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	4610      	mov	r0, r2
 8000dda:	f002 f8aa 	bl	8002f32 <cmox_ModularBN_Mul>
 8000dde:	6a2b      	ldr	r3, [r5, #32]
 8000de0:	9904      	ldr	r1, [sp, #16]
 8000de2:	9805      	ldr	r0, [sp, #20]
 8000de4:	462a      	mov	r2, r5
 8000de6:	f002 f8c7 	bl	8002f78 <cmox_ModularBN_Sqr>
 8000dea:	6a28      	ldr	r0, [r5, #32]
 8000dec:	9a04      	ldr	r2, [sp, #16]
 8000dee:	9000      	str	r0, [sp, #0]
 8000df0:	462b      	mov	r3, r5
 8000df2:	9805      	ldr	r0, [sp, #20]
 8000df4:	4611      	mov	r1, r2
 8000df6:	f002 f89c 	bl	8002f32 <cmox_ModularBN_Mul>
 8000dfa:	6a28      	ldr	r0, [r5, #32]
 8000dfc:	9a03      	ldr	r2, [sp, #12]
 8000dfe:	9904      	ldr	r1, [sp, #16]
 8000e00:	9000      	str	r0, [sp, #0]
 8000e02:	462b      	mov	r3, r5
 8000e04:	4610      	mov	r0, r2
 8000e06:	f002 f894 	bl	8002f32 <cmox_ModularBN_Mul>
 8000e0a:	69a8      	ldr	r0, [r5, #24]
 8000e0c:	6803      	ldr	r3, [r0, #0]
 8000e0e:	9a04      	ldr	r2, [sp, #16]
 8000e10:	6818      	ldr	r0, [r3, #0]
 8000e12:	f06f 0102 	mvn.w	r1, #2
 8000e16:	f001 ff4b 	bl	8002cb0 <cmox_AddBN_Int>
 8000e1a:	9a04      	ldr	r2, [sp, #16]
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	4610      	mov	r0, r2
 8000e20:	f001 fdd7 	bl	80029d2 <cmox_RightShiftBN>
 8000e24:	69a8      	ldr	r0, [r5, #24]
 8000e26:	69c4      	ldr	r4, [r0, #28]
 8000e28:	6a28      	ldr	r0, [r5, #32]
 8000e2a:	9002      	str	r0, [sp, #8]
 8000e2c:	69e9      	ldr	r1, [r5, #28]
 8000e2e:	9803      	ldr	r0, [sp, #12]
 8000e30:	9101      	str	r1, [sp, #4]
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	9904      	ldr	r1, [sp, #16]
 8000e36:	9200      	str	r2, [sp, #0]
 8000e38:	462a      	mov	r2, r5
 8000e3a:	6863      	ldr	r3, [r4, #4]
 8000e3c:	6824      	ldr	r4, [r4, #0]
 8000e3e:	47a0      	blx	r4
 8000e40:	0004      	movs	r4, r0
 8000e42:	d154      	bne.n	8000eee <cmox_ECC_EDW_DecPoint_ed448+0x234>
 8000e44:	6a28      	ldr	r0, [r5, #32]
 8000e46:	9a03      	ldr	r2, [sp, #12]
 8000e48:	9905      	ldr	r1, [sp, #20]
 8000e4a:	9000      	str	r0, [sp, #0]
 8000e4c:	462b      	mov	r3, r5
 8000e4e:	9806      	ldr	r0, [sp, #24]
 8000e50:	f002 f86f 	bl	8002f32 <cmox_ModularBN_Mul>
 8000e54:	6a2b      	ldr	r3, [r5, #32]
 8000e56:	9904      	ldr	r1, [sp, #16]
 8000e58:	9806      	ldr	r0, [sp, #24]
 8000e5a:	462a      	mov	r2, r5
 8000e5c:	f002 f88c 	bl	8002f78 <cmox_ModularBN_Sqr>
 8000e60:	6a28      	ldr	r0, [r5, #32]
 8000e62:	9a03      	ldr	r2, [sp, #12]
 8000e64:	9904      	ldr	r1, [sp, #16]
 8000e66:	9000      	str	r0, [sp, #0]
 8000e68:	462b      	mov	r3, r5
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	f002 f861 	bl	8002f32 <cmox_ModularBN_Mul>
 8000e70:	6838      	ldr	r0, [r7, #0]
 8000e72:	6a29      	ldr	r1, [r5, #32]
 8000e74:	9100      	str	r1, [sp, #0]
 8000e76:	462b      	mov	r3, r5
 8000e78:	9903      	ldr	r1, [sp, #12]
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	f002 f859 	bl	8002f32 <cmox_ModularBN_Mul>
 8000e80:	6a2b      	ldr	r3, [r5, #32]
 8000e82:	9903      	ldr	r1, [sp, #12]
 8000e84:	6838      	ldr	r0, [r7, #0]
 8000e86:	462a      	mov	r2, r5
 8000e88:	f002 f876 	bl	8002f78 <cmox_ModularBN_Sqr>
 8000e8c:	6a28      	ldr	r0, [r5, #32]
 8000e8e:	9a03      	ldr	r2, [sp, #12]
 8000e90:	9000      	str	r0, [sp, #0]
 8000e92:	462b      	mov	r3, r5
 8000e94:	9805      	ldr	r0, [sp, #20]
 8000e96:	4611      	mov	r1, r2
 8000e98:	f002 f84b 	bl	8002f32 <cmox_ModularBN_Mul>
 8000e9c:	9906      	ldr	r1, [sp, #24]
 8000e9e:	9803      	ldr	r0, [sp, #12]
 8000ea0:	f003 feed 	bl	8004c7e <cmox_bn_cmp>
 8000ea4:	b978      	cbnz	r0, 8000ec6 <cmox_ECC_EDW_DecPoint_ed448+0x20c>
 8000ea6:	6a2b      	ldr	r3, [r5, #32]
 8000ea8:	69ea      	ldr	r2, [r5, #28]
 8000eaa:	6838      	ldr	r0, [r7, #0]
 8000eac:	4629      	mov	r1, r5
 8000eae:	f002 f81e 	bl	8002eee <cmox_ModularBN_Exit>
 8000eb2:	0004      	movs	r4, r0
 8000eb4:	d11b      	bne.n	8000eee <cmox_ECC_EDW_DecPoint_ed448+0x234>
 8000eb6:	2e01      	cmp	r6, #1
 8000eb8:	d107      	bne.n	8000eca <cmox_ECC_EDW_DecPoint_ed448+0x210>
 8000eba:	6838      	ldr	r0, [r7, #0]
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	f003 ff1f 	bl	8004d00 <cmox_bn_cmpUint>
 8000ec2:	2801      	cmp	r0, #1
 8000ec4:	d101      	bne.n	8000eca <cmox_ECC_EDW_DecPoint_ed448+0x210>
 8000ec6:	2404      	movs	r4, #4
 8000ec8:	e011      	b.n	8000eee <cmox_ECC_EDW_DecPoint_ed448+0x234>
 8000eca:	69a8      	ldr	r0, [r5, #24]
 8000ecc:	6839      	ldr	r1, [r7, #0]
 8000ece:	6802      	ldr	r2, [r0, #0]
 8000ed0:	7908      	ldrb	r0, [r1, #4]
 8000ed2:	6812      	ldr	r2, [r2, #0]
 8000ed4:	f000 0001 	and.w	r0, r0, #1
 8000ed8:	4070      	eors	r0, r6
 8000eda:	f001 ffb9 	bl	8002e50 <cmox_FieldBN_CondNegate>
 8000ede:	68b8      	ldr	r0, [r7, #8]
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	f003 fe62 	bl	8004baa <cmox_bn_init>
 8000ee6:	6938      	ldr	r0, [r7, #16]
 8000ee8:	f040 0002 	orr.w	r0, r0, #2
 8000eec:	6138      	str	r0, [r7, #16]
 8000eee:	a904      	add	r1, sp, #16
 8000ef0:	69e8      	ldr	r0, [r5, #28]
 8000ef2:	f003 fe2e 	bl	8004b52 <cmox_bn_free>
 8000ef6:	69e8      	ldr	r0, [r5, #28]
 8000ef8:	a903      	add	r1, sp, #12
 8000efa:	f003 fe2a 	bl	8004b52 <cmox_bn_free>
 8000efe:	69e8      	ldr	r0, [r5, #28]
 8000f00:	a906      	add	r1, sp, #24
 8000f02:	f003 fe26 	bl	8004b52 <cmox_bn_free>
 8000f06:	69e8      	ldr	r0, [r5, #28]
 8000f08:	a905      	add	r1, sp, #20
 8000f0a:	f003 fe22 	bl	8004b52 <cmox_bn_free>
 8000f0e:	4620      	mov	r0, r4
 8000f10:	b007      	add	sp, #28
 8000f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000f16 <cmox_ECC_MONTY_Clamping>:
 8000f16:	b570      	push	{r4, r5, r6, lr}
 8000f18:	4606      	mov	r6, r0
 8000f1a:	460c      	mov	r4, r1
 8000f1c:	69b0      	ldr	r0, [r6, #24]
 8000f1e:	6801      	ldr	r1, [r0, #0]
 8000f20:	6808      	ldr	r0, [r1, #0]
 8000f22:	4615      	mov	r5, r2
 8000f24:	6802      	ldr	r2, [r0, #0]
 8000f26:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8000f2a:	f002 f87e 	bl	800302a <cmox_mathUtils_bitLength>
 8000f2e:	69b1      	ldr	r1, [r6, #24]
 8000f30:	680b      	ldr	r3, [r1, #0]
 8000f32:	699e      	ldr	r6, [r3, #24]
 8000f34:	6862      	ldr	r2, [r4, #4]
 8000f36:	1e76      	subs	r6, r6, #1
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	404e      	eors	r6, r1
 8000f3e:	4032      	ands	r2, r6
 8000f40:	6062      	str	r2, [r4, #4]
 8000f42:	2601      	movs	r6, #1
 8000f44:	f1c0 0220 	rsb	r2, r0, #32
 8000f48:	40d1      	lsrs	r1, r2
 8000f4a:	6822      	ldr	r2, [r4, #0]
 8000f4c:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 8000f50:	400b      	ands	r3, r1
 8000f52:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
 8000f56:	1e40      	subs	r0, r0, #1
 8000f58:	6822      	ldr	r2, [r4, #0]
 8000f5a:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 8000f5e:	4086      	lsls	r6, r0
 8000f60:	4333      	orrs	r3, r6
 8000f62:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
 8000f66:	6828      	ldr	r0, [r5, #0]
 8000f68:	6802      	ldr	r2, [r0, #0]
 8000f6a:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8000f6e:	4019      	ands	r1, r3
 8000f70:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 8000f74:	bd70      	pop	{r4, r5, r6, pc}

08000f76 <cmox_ECC_SW_AddPoints_JacoAff>:
 8000f76:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f7a:	4605      	mov	r5, r0
 8000f7c:	461f      	mov	r7, r3
 8000f7e:	460e      	mov	r6, r1
 8000f80:	b084      	sub	sp, #16
 8000f82:	6968      	ldr	r0, [r5, #20]
 8000f84:	f8d0 8000 	ldr.w	r8, [r0]
 8000f88:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8000f8c:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8000f90:	68c0      	ldr	r0, [r0, #12]
 8000f92:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8000f94:	9001      	str	r0, [sp, #4]
 8000f96:	f8d7 b000 	ldr.w	fp, [r7]
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	9103      	str	r1, [sp, #12]
 8000f9e:	462a      	mov	r2, r5
 8000fa0:	68b8      	ldr	r0, [r7, #8]
 8000fa2:	9002      	str	r0, [sp, #8]
 8000fa4:	4641      	mov	r1, r8
 8000fa6:	6a2b      	ldr	r3, [r5, #32]
 8000fa8:	68b0      	ldr	r0, [r6, #8]
 8000faa:	f001 ffe5 	bl	8002f78 <cmox_ModularBN_Sqr>
 8000fae:	6a28      	ldr	r0, [r5, #32]
 8000fb0:	9000      	str	r0, [sp, #0]
 8000fb2:	462b      	mov	r3, r5
 8000fb4:	68b0      	ldr	r0, [r6, #8]
 8000fb6:	464a      	mov	r2, r9
 8000fb8:	4641      	mov	r1, r8
 8000fba:	f001 ffba 	bl	8002f32 <cmox_ModularBN_Mul>
 8000fbe:	6a28      	ldr	r0, [r5, #32]
 8000fc0:	9904      	ldr	r1, [sp, #16]
 8000fc2:	9000      	str	r0, [sp, #0]
 8000fc4:	462b      	mov	r3, r5
 8000fc6:	6809      	ldr	r1, [r1, #0]
 8000fc8:	4642      	mov	r2, r8
 8000fca:	4640      	mov	r0, r8
 8000fcc:	f001 ffb1 	bl	8002f32 <cmox_ModularBN_Mul>
 8000fd0:	6a28      	ldr	r0, [r5, #32]
 8000fd2:	9904      	ldr	r1, [sp, #16]
 8000fd4:	9000      	str	r0, [sp, #0]
 8000fd6:	462b      	mov	r3, r5
 8000fd8:	6849      	ldr	r1, [r1, #4]
 8000fda:	464a      	mov	r2, r9
 8000fdc:	4648      	mov	r0, r9
 8000fde:	f001 ffa8 	bl	8002f32 <cmox_ModularBN_Mul>
 8000fe2:	69a8      	ldr	r0, [r5, #24]
 8000fe4:	6801      	ldr	r1, [r0, #0]
 8000fe6:	680a      	ldr	r2, [r1, #0]
 8000fe8:	6831      	ldr	r1, [r6, #0]
 8000fea:	4643      	mov	r3, r8
 8000fec:	4640      	mov	r0, r8
 8000fee:	f001 fdac 	bl	8002b4a <cmox_ModSubBN>
 8000ff2:	69a8      	ldr	r0, [r5, #24]
 8000ff4:	6801      	ldr	r1, [r0, #0]
 8000ff6:	680a      	ldr	r2, [r1, #0]
 8000ff8:	6871      	ldr	r1, [r6, #4]
 8000ffa:	464b      	mov	r3, r9
 8000ffc:	4648      	mov	r0, r9
 8000ffe:	f001 fda4 	bl	8002b4a <cmox_ModSubBN>
 8001002:	b1ec      	cbz	r4, 8001040 <cmox_ECC_SW_AddPoints_JacoAff+0xca>
 8001004:	2100      	movs	r1, #0
 8001006:	4640      	mov	r0, r8
 8001008:	f003 fe7a 	bl	8004d00 <cmox_bn_cmpUint>
 800100c:	6020      	str	r0, [r4, #0]
 800100e:	4649      	mov	r1, r9
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	f003 fe2f 	bl	8004c74 <cmox_bn_mux>
 8001016:	4683      	mov	fp, r0
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	6820      	ldr	r0, [r4, #0]
 800101c:	4649      	mov	r1, r9
 800101e:	f003 fe29 	bl	8004c74 <cmox_bn_mux>
 8001022:	9003      	str	r0, [sp, #12]
 8001024:	4649      	mov	r1, r9
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	6820      	ldr	r0, [r4, #0]
 800102a:	f003 fe23 	bl	8004c74 <cmox_bn_mux>
 800102e:	9002      	str	r0, [sp, #8]
 8001030:	2100      	movs	r1, #0
 8001032:	4648      	mov	r0, r9
 8001034:	f003 fe64 	bl	8004d00 <cmox_bn_cmpUint>
 8001038:	6821      	ldr	r1, [r4, #0]
 800103a:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
 800103e:	6021      	str	r1, [r4, #0]
 8001040:	462b      	mov	r3, r5
 8001042:	6a28      	ldr	r0, [r5, #32]
 8001044:	9a02      	ldr	r2, [sp, #8]
 8001046:	9000      	str	r0, [sp, #0]
 8001048:	4641      	mov	r1, r8
 800104a:	68b0      	ldr	r0, [r6, #8]
 800104c:	f001 ff71 	bl	8002f32 <cmox_ModularBN_Mul>
 8001050:	6a2b      	ldr	r3, [r5, #32]
 8001052:	462a      	mov	r2, r5
 8001054:	4651      	mov	r1, sl
 8001056:	4640      	mov	r0, r8
 8001058:	f001 ff8e 	bl	8002f78 <cmox_ModularBN_Sqr>
 800105c:	6a28      	ldr	r0, [r5, #32]
 800105e:	9a01      	ldr	r2, [sp, #4]
 8001060:	9000      	str	r0, [sp, #0]
 8001062:	462b      	mov	r3, r5
 8001064:	4651      	mov	r1, sl
 8001066:	4640      	mov	r0, r8
 8001068:	f001 ff63 	bl	8002f32 <cmox_ModularBN_Mul>
 800106c:	6a28      	ldr	r0, [r5, #32]
 800106e:	9000      	str	r0, [sp, #0]
 8001070:	462b      	mov	r3, r5
 8001072:	6830      	ldr	r0, [r6, #0]
 8001074:	4652      	mov	r2, sl
 8001076:	4651      	mov	r1, sl
 8001078:	f001 ff5b 	bl	8002f32 <cmox_ModularBN_Mul>
 800107c:	69a8      	ldr	r0, [r5, #24]
 800107e:	6801      	ldr	r1, [r0, #0]
 8001080:	680a      	ldr	r2, [r1, #0]
 8001082:	4643      	mov	r3, r8
 8001084:	4651      	mov	r1, sl
 8001086:	4650      	mov	r0, sl
 8001088:	f001 fcce 	bl	8002a28 <cmox_ModAddBN>
 800108c:	6a2b      	ldr	r3, [r5, #32]
 800108e:	462a      	mov	r2, r5
 8001090:	4659      	mov	r1, fp
 8001092:	4648      	mov	r0, r9
 8001094:	f001 ff70 	bl	8002f78 <cmox_ModularBN_Sqr>
 8001098:	69a8      	ldr	r0, [r5, #24]
 800109a:	6801      	ldr	r1, [r0, #0]
 800109c:	680a      	ldr	r2, [r1, #0]
 800109e:	465b      	mov	r3, fp
 80010a0:	4641      	mov	r1, r8
 80010a2:	4658      	mov	r0, fp
 80010a4:	f001 fd51 	bl	8002b4a <cmox_ModSubBN>
 80010a8:	69a8      	ldr	r0, [r5, #24]
 80010aa:	6801      	ldr	r1, [r0, #0]
 80010ac:	680a      	ldr	r2, [r1, #0]
 80010ae:	9901      	ldr	r1, [sp, #4]
 80010b0:	465b      	mov	r3, fp
 80010b2:	4658      	mov	r0, fp
 80010b4:	f001 fd49 	bl	8002b4a <cmox_ModSubBN>
 80010b8:	69a8      	ldr	r0, [r5, #24]
 80010ba:	6801      	ldr	r1, [r0, #0]
 80010bc:	680a      	ldr	r2, [r1, #0]
 80010be:	4653      	mov	r3, sl
 80010c0:	4659      	mov	r1, fp
 80010c2:	4650      	mov	r0, sl
 80010c4:	f001 fd41 	bl	8002b4a <cmox_ModSubBN>
 80010c8:	6a28      	ldr	r0, [r5, #32]
 80010ca:	9000      	str	r0, [sp, #0]
 80010cc:	462b      	mov	r3, r5
 80010ce:	4652      	mov	r2, sl
 80010d0:	4651      	mov	r1, sl
 80010d2:	4648      	mov	r0, r9
 80010d4:	f001 ff2d 	bl	8002f32 <cmox_ModularBN_Mul>
 80010d8:	6a28      	ldr	r0, [r5, #32]
 80010da:	9a01      	ldr	r2, [sp, #4]
 80010dc:	9000      	str	r0, [sp, #0]
 80010de:	462b      	mov	r3, r5
 80010e0:	6871      	ldr	r1, [r6, #4]
 80010e2:	4610      	mov	r0, r2
 80010e4:	f001 ff25 	bl	8002f32 <cmox_ModularBN_Mul>
 80010e8:	69a8      	ldr	r0, [r5, #24]
 80010ea:	6801      	ldr	r1, [r0, #0]
 80010ec:	680a      	ldr	r2, [r1, #0]
 80010ee:	9b03      	ldr	r3, [sp, #12]
 80010f0:	9901      	ldr	r1, [sp, #4]
 80010f2:	4650      	mov	r0, sl
 80010f4:	b005      	add	sp, #20
 80010f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010fa:	f001 bd26 	b.w	8002b4a <cmox_ModSubBN>

080010fe <cmox_ECC_SW_AddPoints_Jacobian>:
 80010fe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001102:	4604      	mov	r4, r0
 8001104:	461e      	mov	r6, r3
 8001106:	6960      	ldr	r0, [r4, #20]
 8001108:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800110c:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8001110:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 8001114:	f8d0 9000 	ldr.w	r9, [r0]
 8001118:	6a23      	ldr	r3, [r4, #32]
 800111a:	460d      	mov	r5, r1
 800111c:	4617      	mov	r7, r2
 800111e:	68a8      	ldr	r0, [r5, #8]
 8001120:	4622      	mov	r2, r4
 8001122:	4649      	mov	r1, r9
 8001124:	f001 ff28 	bl	8002f78 <cmox_ModularBN_Sqr>
 8001128:	6a20      	ldr	r0, [r4, #32]
 800112a:	9000      	str	r0, [sp, #0]
 800112c:	4623      	mov	r3, r4
 800112e:	6838      	ldr	r0, [r7, #0]
 8001130:	4652      	mov	r2, sl
 8001132:	4649      	mov	r1, r9
 8001134:	f001 fefd 	bl	8002f32 <cmox_ModularBN_Mul>
 8001138:	6a20      	ldr	r0, [r4, #32]
 800113a:	9000      	str	r0, [sp, #0]
 800113c:	4623      	mov	r3, r4
 800113e:	68a8      	ldr	r0, [r5, #8]
 8001140:	464a      	mov	r2, r9
 8001142:	4649      	mov	r1, r9
 8001144:	f001 fef5 	bl	8002f32 <cmox_ModularBN_Mul>
 8001148:	6a20      	ldr	r0, [r4, #32]
 800114a:	9000      	str	r0, [sp, #0]
 800114c:	4623      	mov	r3, r4
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	464a      	mov	r2, r9
 8001152:	4649      	mov	r1, r9
 8001154:	f001 feed 	bl	8002f32 <cmox_ModularBN_Mul>
 8001158:	6a23      	ldr	r3, [r4, #32]
 800115a:	68b8      	ldr	r0, [r7, #8]
 800115c:	4622      	mov	r2, r4
 800115e:	4641      	mov	r1, r8
 8001160:	f001 ff0a 	bl	8002f78 <cmox_ModularBN_Sqr>
 8001164:	6a20      	ldr	r0, [r4, #32]
 8001166:	9000      	str	r0, [sp, #0]
 8001168:	4623      	mov	r3, r4
 800116a:	6828      	ldr	r0, [r5, #0]
 800116c:	465a      	mov	r2, fp
 800116e:	4641      	mov	r1, r8
 8001170:	f001 fedf 	bl	8002f32 <cmox_ModularBN_Mul>
 8001174:	6a20      	ldr	r0, [r4, #32]
 8001176:	9000      	str	r0, [sp, #0]
 8001178:	4623      	mov	r3, r4
 800117a:	68b8      	ldr	r0, [r7, #8]
 800117c:	4642      	mov	r2, r8
 800117e:	4641      	mov	r1, r8
 8001180:	f001 fed7 	bl	8002f32 <cmox_ModularBN_Mul>
 8001184:	6a20      	ldr	r0, [r4, #32]
 8001186:	9000      	str	r0, [sp, #0]
 8001188:	4623      	mov	r3, r4
 800118a:	6868      	ldr	r0, [r5, #4]
 800118c:	4642      	mov	r2, r8
 800118e:	4641      	mov	r1, r8
 8001190:	f001 fecf 	bl	8002f32 <cmox_ModularBN_Mul>
 8001194:	69a0      	ldr	r0, [r4, #24]
 8001196:	6801      	ldr	r1, [r0, #0]
 8001198:	680a      	ldr	r2, [r1, #0]
 800119a:	4653      	mov	r3, sl
 800119c:	4659      	mov	r1, fp
 800119e:	4650      	mov	r0, sl
 80011a0:	f001 fcd3 	bl	8002b4a <cmox_ModSubBN>
 80011a4:	69a0      	ldr	r0, [r4, #24]
 80011a6:	6801      	ldr	r1, [r0, #0]
 80011a8:	680a      	ldr	r2, [r1, #0]
 80011aa:	464b      	mov	r3, r9
 80011ac:	4641      	mov	r1, r8
 80011ae:	4648      	mov	r0, r9
 80011b0:	f001 fccb 	bl	8002b4a <cmox_ModSubBN>
 80011b4:	6a20      	ldr	r0, [r4, #32]
 80011b6:	9000      	str	r0, [sp, #0]
 80011b8:	4623      	mov	r3, r4
 80011ba:	6832      	ldr	r2, [r6, #0]
 80011bc:	68b8      	ldr	r0, [r7, #8]
 80011be:	4651      	mov	r1, sl
 80011c0:	f001 feb7 	bl	8002f32 <cmox_ModularBN_Mul>
 80011c4:	6a20      	ldr	r0, [r4, #32]
 80011c6:	9000      	str	r0, [sp, #0]
 80011c8:	68b2      	ldr	r2, [r6, #8]
 80011ca:	6831      	ldr	r1, [r6, #0]
 80011cc:	68a8      	ldr	r0, [r5, #8]
 80011ce:	4623      	mov	r3, r4
 80011d0:	f001 feaf 	bl	8002f32 <cmox_ModularBN_Mul>
 80011d4:	6a23      	ldr	r3, [r4, #32]
 80011d6:	6831      	ldr	r1, [r6, #0]
 80011d8:	4622      	mov	r2, r4
 80011da:	4650      	mov	r0, sl
 80011dc:	f001 fecc 	bl	8002f78 <cmox_ModularBN_Sqr>
 80011e0:	6a20      	ldr	r0, [r4, #32]
 80011e2:	9000      	str	r0, [sp, #0]
 80011e4:	6872      	ldr	r2, [r6, #4]
 80011e6:	6831      	ldr	r1, [r6, #0]
 80011e8:	4623      	mov	r3, r4
 80011ea:	4650      	mov	r0, sl
 80011ec:	f001 fea1 	bl	8002f32 <cmox_ModularBN_Mul>
 80011f0:	6a20      	ldr	r0, [r4, #32]
 80011f2:	9000      	str	r0, [sp, #0]
 80011f4:	4623      	mov	r3, r4
 80011f6:	6831      	ldr	r1, [r6, #0]
 80011f8:	4652      	mov	r2, sl
 80011fa:	4658      	mov	r0, fp
 80011fc:	f001 fe99 	bl	8002f32 <cmox_ModularBN_Mul>
 8001200:	6a23      	ldr	r3, [r4, #32]
 8001202:	6831      	ldr	r1, [r6, #0]
 8001204:	4622      	mov	r2, r4
 8001206:	4648      	mov	r0, r9
 8001208:	f001 feb6 	bl	8002f78 <cmox_ModularBN_Sqr>
 800120c:	69a1      	ldr	r1, [r4, #24]
 800120e:	680a      	ldr	r2, [r1, #0]
 8001210:	6830      	ldr	r0, [r6, #0]
 8001212:	6812      	ldr	r2, [r2, #0]
 8001214:	6871      	ldr	r1, [r6, #4]
 8001216:	4603      	mov	r3, r0
 8001218:	f001 fc97 	bl	8002b4a <cmox_ModSubBN>
 800121c:	6871      	ldr	r1, [r6, #4]
 800121e:	6a20      	ldr	r0, [r4, #32]
 8001220:	9000      	str	r0, [sp, #0]
 8001222:	4623      	mov	r3, r4
 8001224:	460a      	mov	r2, r1
 8001226:	4640      	mov	r0, r8
 8001228:	f001 fe83 	bl	8002f32 <cmox_ModularBN_Mul>
 800122c:	69a0      	ldr	r0, [r4, #24]
 800122e:	6801      	ldr	r1, [r0, #0]
 8001230:	6809      	ldr	r1, [r1, #0]
 8001232:	4642      	mov	r2, r8
 8001234:	4650      	mov	r0, sl
 8001236:	f001 fdac 	bl	8002d92 <cmox_FieldBN_Mul2>
 800123a:	69a1      	ldr	r1, [r4, #24]
 800123c:	680a      	ldr	r2, [r1, #0]
 800123e:	6830      	ldr	r0, [r6, #0]
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	4603      	mov	r3, r0
 8001244:	4641      	mov	r1, r8
 8001246:	f001 fc80 	bl	8002b4a <cmox_ModSubBN>
 800124a:	69a0      	ldr	r0, [r4, #24]
 800124c:	6801      	ldr	r1, [r0, #0]
 800124e:	680a      	ldr	r2, [r1, #0]
 8001250:	6831      	ldr	r1, [r6, #0]
 8001252:	4653      	mov	r3, sl
 8001254:	4650      	mov	r0, sl
 8001256:	f001 fc78 	bl	8002b4a <cmox_ModSubBN>
 800125a:	6a20      	ldr	r0, [r4, #32]
 800125c:	9000      	str	r0, [sp, #0]
 800125e:	4623      	mov	r3, r4
 8001260:	464a      	mov	r2, r9
 8001262:	4651      	mov	r1, sl
 8001264:	4648      	mov	r0, r9
 8001266:	f001 fe64 	bl	8002f32 <cmox_ModularBN_Mul>
 800126a:	69a0      	ldr	r0, [r4, #24]
 800126c:	6802      	ldr	r2, [r0, #0]
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	6871      	ldr	r1, [r6, #4]
 8001272:	4648      	mov	r0, r9
 8001274:	b001      	add	sp, #4
 8001276:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800127a:	460b      	mov	r3, r1
 800127c:	f001 bc65 	b.w	8002b4a <cmox_ModSubBN>

08001280 <cmox_ECC_SW_DblPoint_Jac_a3>:
 8001280:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001284:	4604      	mov	r4, r0
 8001286:	460d      	mov	r5, r1
 8001288:	6960      	ldr	r0, [r4, #20]
 800128a:	6807      	ldr	r7, [r0, #0]
 800128c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8001290:	6881      	ldr	r1, [r0, #8]
 8001292:	9101      	str	r1, [sp, #4]
 8001294:	4616      	mov	r6, r2
 8001296:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800129a:	6831      	ldr	r1, [r6, #0]
 800129c:	4698      	mov	r8, r3
 800129e:	463a      	mov	r2, r7
 80012a0:	4640      	mov	r0, r8
 80012a2:	f003 fce7 	bl	8004c74 <cmox_bn_mux>
 80012a6:	4683      	mov	fp, r0
 80012a8:	6871      	ldr	r1, [r6, #4]
 80012aa:	463a      	mov	r2, r7
 80012ac:	4640      	mov	r0, r8
 80012ae:	f003 fce1 	bl	8004c74 <cmox_bn_mux>
 80012b2:	9002      	str	r0, [sp, #8]
 80012b4:	463a      	mov	r2, r7
 80012b6:	68b1      	ldr	r1, [r6, #8]
 80012b8:	4640      	mov	r0, r8
 80012ba:	f003 fcdb 	bl	8004c74 <cmox_bn_mux>
 80012be:	4606      	mov	r6, r0
 80012c0:	6a23      	ldr	r3, [r4, #32]
 80012c2:	68a8      	ldr	r0, [r5, #8]
 80012c4:	4622      	mov	r2, r4
 80012c6:	4639      	mov	r1, r7
 80012c8:	f001 fe56 	bl	8002f78 <cmox_ModularBN_Sqr>
 80012cc:	69a0      	ldr	r0, [r4, #24]
 80012ce:	6801      	ldr	r1, [r0, #0]
 80012d0:	680a      	ldr	r2, [r1, #0]
 80012d2:	6828      	ldr	r0, [r5, #0]
 80012d4:	464b      	mov	r3, r9
 80012d6:	4639      	mov	r1, r7
 80012d8:	f001 fba6 	bl	8002a28 <cmox_ModAddBN>
 80012dc:	69a0      	ldr	r0, [r4, #24]
 80012de:	6801      	ldr	r1, [r0, #0]
 80012e0:	680a      	ldr	r2, [r1, #0]
 80012e2:	6828      	ldr	r0, [r5, #0]
 80012e4:	463b      	mov	r3, r7
 80012e6:	4639      	mov	r1, r7
 80012e8:	f001 fc2f 	bl	8002b4a <cmox_ModSubBN>
 80012ec:	6a20      	ldr	r0, [r4, #32]
 80012ee:	9000      	str	r0, [sp, #0]
 80012f0:	4623      	mov	r3, r4
 80012f2:	463a      	mov	r2, r7
 80012f4:	4649      	mov	r1, r9
 80012f6:	4638      	mov	r0, r7
 80012f8:	f001 fe1b 	bl	8002f32 <cmox_ModularBN_Mul>
 80012fc:	69a0      	ldr	r0, [r4, #24]
 80012fe:	6801      	ldr	r1, [r0, #0]
 8001300:	6809      	ldr	r1, [r1, #0]
 8001302:	464a      	mov	r2, r9
 8001304:	4638      	mov	r0, r7
 8001306:	f001 fcf2 	bl	8002cee <cmox_FieldBN_Div2>
 800130a:	69a0      	ldr	r0, [r4, #24]
 800130c:	6801      	ldr	r1, [r0, #0]
 800130e:	680a      	ldr	r2, [r1, #0]
 8001310:	463b      	mov	r3, r7
 8001312:	4649      	mov	r1, r9
 8001314:	4638      	mov	r0, r7
 8001316:	f001 fb87 	bl	8002a28 <cmox_ModAddBN>
 800131a:	6a23      	ldr	r3, [r4, #32]
 800131c:	6868      	ldr	r0, [r5, #4]
 800131e:	4622      	mov	r2, r4
 8001320:	4649      	mov	r1, r9
 8001322:	f001 fe29 	bl	8002f78 <cmox_ModularBN_Sqr>
 8001326:	6a20      	ldr	r0, [r4, #32]
 8001328:	9a01      	ldr	r2, [sp, #4]
 800132a:	9000      	str	r0, [sp, #0]
 800132c:	4623      	mov	r3, r4
 800132e:	6828      	ldr	r0, [r5, #0]
 8001330:	4649      	mov	r1, r9
 8001332:	f001 fdfe 	bl	8002f32 <cmox_ModularBN_Mul>
 8001336:	6a23      	ldr	r3, [r4, #32]
 8001338:	4622      	mov	r2, r4
 800133a:	4651      	mov	r1, sl
 800133c:	4638      	mov	r0, r7
 800133e:	f001 fe1b 	bl	8002f78 <cmox_ModularBN_Sqr>
 8001342:	69a0      	ldr	r0, [r4, #24]
 8001344:	6801      	ldr	r1, [r0, #0]
 8001346:	680a      	ldr	r2, [r1, #0]
 8001348:	9901      	ldr	r1, [sp, #4]
 800134a:	4653      	mov	r3, sl
 800134c:	4650      	mov	r0, sl
 800134e:	f001 fbfc 	bl	8002b4a <cmox_ModSubBN>
 8001352:	69a0      	ldr	r0, [r4, #24]
 8001354:	6801      	ldr	r1, [r0, #0]
 8001356:	680a      	ldr	r2, [r1, #0]
 8001358:	9901      	ldr	r1, [sp, #4]
 800135a:	465b      	mov	r3, fp
 800135c:	4650      	mov	r0, sl
 800135e:	f001 fbf4 	bl	8002b4a <cmox_ModSubBN>
 8001362:	6a20      	ldr	r0, [r4, #32]
 8001364:	9000      	str	r0, [sp, #0]
 8001366:	4623      	mov	r3, r4
 8001368:	68a9      	ldr	r1, [r5, #8]
 800136a:	6868      	ldr	r0, [r5, #4]
 800136c:	4632      	mov	r2, r6
 800136e:	f001 fde0 	bl	8002f32 <cmox_ModularBN_Mul>
 8001372:	6a23      	ldr	r3, [r4, #32]
 8001374:	4622      	mov	r2, r4
 8001376:	4649      	mov	r1, r9
 8001378:	4648      	mov	r0, r9
 800137a:	f001 fdfd 	bl	8002f78 <cmox_ModularBN_Sqr>
 800137e:	69a0      	ldr	r0, [r4, #24]
 8001380:	6801      	ldr	r1, [r0, #0]
 8001382:	680a      	ldr	r2, [r1, #0]
 8001384:	9801      	ldr	r0, [sp, #4]
 8001386:	4653      	mov	r3, sl
 8001388:	4659      	mov	r1, fp
 800138a:	f001 fbde 	bl	8002b4a <cmox_ModSubBN>
 800138e:	6a20      	ldr	r0, [r4, #32]
 8001390:	9000      	str	r0, [sp, #0]
 8001392:	4623      	mov	r3, r4
 8001394:	463a      	mov	r2, r7
 8001396:	4651      	mov	r1, sl
 8001398:	4638      	mov	r0, r7
 800139a:	f001 fdca 	bl	8002f32 <cmox_ModularBN_Mul>
 800139e:	69a0      	ldr	r0, [r4, #24]
 80013a0:	6801      	ldr	r1, [r0, #0]
 80013a2:	9b02      	ldr	r3, [sp, #8]
 80013a4:	680a      	ldr	r2, [r1, #0]
 80013a6:	4649      	mov	r1, r9
 80013a8:	4638      	mov	r0, r7
 80013aa:	b003      	add	sp, #12
 80013ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013b0:	f001 bbcb 	b.w	8002b4a <cmox_ModSubBN>

080013b4 <cmox_ECC_SW_DblPoint_Jacobian>:
 80013b4:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013b8:	4604      	mov	r4, r0
 80013ba:	460d      	mov	r5, r1
 80013bc:	6960      	ldr	r0, [r4, #20]
 80013be:	6807      	ldr	r7, [r0, #0]
 80013c0:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80013c4:	f8d0 9008 	ldr.w	r9, [r0, #8]
 80013c8:	68c0      	ldr	r0, [r0, #12]
 80013ca:	9001      	str	r0, [sp, #4]
 80013cc:	4616      	mov	r6, r2
 80013ce:	9802      	ldr	r0, [sp, #8]
 80013d0:	6831      	ldr	r1, [r6, #0]
 80013d2:	463a      	mov	r2, r7
 80013d4:	f003 fc4e 	bl	8004c74 <cmox_bn_mux>
 80013d8:	4682      	mov	sl, r0
 80013da:	6871      	ldr	r1, [r6, #4]
 80013dc:	9802      	ldr	r0, [sp, #8]
 80013de:	463a      	mov	r2, r7
 80013e0:	f003 fc48 	bl	8004c74 <cmox_bn_mux>
 80013e4:	4683      	mov	fp, r0
 80013e6:	68b1      	ldr	r1, [r6, #8]
 80013e8:	9802      	ldr	r0, [sp, #8]
 80013ea:	463a      	mov	r2, r7
 80013ec:	f003 fc42 	bl	8004c74 <cmox_bn_mux>
 80013f0:	4606      	mov	r6, r0
 80013f2:	69a0      	ldr	r0, [r4, #24]
 80013f4:	6801      	ldr	r1, [r0, #0]
 80013f6:	680a      	ldr	r2, [r1, #0]
 80013f8:	68a9      	ldr	r1, [r5, #8]
 80013fa:	6868      	ldr	r0, [r5, #4]
 80013fc:	463b      	mov	r3, r7
 80013fe:	f001 fb13 	bl	8002a28 <cmox_ModAddBN>
 8001402:	6a23      	ldr	r3, [r4, #32]
 8001404:	6828      	ldr	r0, [r5, #0]
 8001406:	4622      	mov	r2, r4
 8001408:	4641      	mov	r1, r8
 800140a:	f001 fdb5 	bl	8002f78 <cmox_ModularBN_Sqr>
 800140e:	6a23      	ldr	r3, [r4, #32]
 8001410:	6868      	ldr	r0, [r5, #4]
 8001412:	4622      	mov	r2, r4
 8001414:	4649      	mov	r1, r9
 8001416:	f001 fdaf 	bl	8002f78 <cmox_ModularBN_Sqr>
 800141a:	69a0      	ldr	r0, [r4, #24]
 800141c:	6801      	ldr	r1, [r0, #0]
 800141e:	680a      	ldr	r2, [r1, #0]
 8001420:	6828      	ldr	r0, [r5, #0]
 8001422:	4653      	mov	r3, sl
 8001424:	4649      	mov	r1, r9
 8001426:	f001 faff 	bl	8002a28 <cmox_ModAddBN>
 800142a:	6a23      	ldr	r3, [r4, #32]
 800142c:	9901      	ldr	r1, [sp, #4]
 800142e:	68a8      	ldr	r0, [r5, #8]
 8001430:	4622      	mov	r2, r4
 8001432:	f001 fda1 	bl	8002f78 <cmox_ModularBN_Sqr>
 8001436:	6a23      	ldr	r3, [r4, #32]
 8001438:	4622      	mov	r2, r4
 800143a:	4651      	mov	r1, sl
 800143c:	4650      	mov	r0, sl
 800143e:	f001 fd9b 	bl	8002f78 <cmox_ModularBN_Sqr>
 8001442:	69a0      	ldr	r0, [r4, #24]
 8001444:	6801      	ldr	r1, [r0, #0]
 8001446:	680a      	ldr	r2, [r1, #0]
 8001448:	4653      	mov	r3, sl
 800144a:	4641      	mov	r1, r8
 800144c:	4650      	mov	r0, sl
 800144e:	f001 fb7c 	bl	8002b4a <cmox_ModSubBN>
 8001452:	69a0      	ldr	r0, [r4, #24]
 8001454:	6801      	ldr	r1, [r0, #0]
 8001456:	6809      	ldr	r1, [r1, #0]
 8001458:	465a      	mov	r2, fp
 800145a:	4640      	mov	r0, r8
 800145c:	f001 fc99 	bl	8002d92 <cmox_FieldBN_Mul2>
 8001460:	69a0      	ldr	r0, [r4, #24]
 8001462:	6801      	ldr	r1, [r0, #0]
 8001464:	680a      	ldr	r2, [r1, #0]
 8001466:	4643      	mov	r3, r8
 8001468:	4659      	mov	r1, fp
 800146a:	4640      	mov	r0, r8
 800146c:	f001 fadc 	bl	8002a28 <cmox_ModAddBN>
 8001470:	6a23      	ldr	r3, [r4, #32]
 8001472:	4622      	mov	r2, r4
 8001474:	4659      	mov	r1, fp
 8001476:	4648      	mov	r0, r9
 8001478:	f001 fd7e 	bl	8002f78 <cmox_ModularBN_Sqr>
 800147c:	6a23      	ldr	r3, [r4, #32]
 800147e:	4622      	mov	r2, r4
 8001480:	4639      	mov	r1, r7
 8001482:	4638      	mov	r0, r7
 8001484:	f001 fd78 	bl	8002f78 <cmox_ModularBN_Sqr>
 8001488:	69a0      	ldr	r0, [r4, #24]
 800148a:	6801      	ldr	r1, [r0, #0]
 800148c:	680a      	ldr	r2, [r1, #0]
 800148e:	463b      	mov	r3, r7
 8001490:	4649      	mov	r1, r9
 8001492:	4638      	mov	r0, r7
 8001494:	f001 fb59 	bl	8002b4a <cmox_ModSubBN>
 8001498:	69a0      	ldr	r0, [r4, #24]
 800149a:	6801      	ldr	r1, [r0, #0]
 800149c:	680a      	ldr	r2, [r1, #0]
 800149e:	9901      	ldr	r1, [sp, #4]
 80014a0:	4633      	mov	r3, r6
 80014a2:	4638      	mov	r0, r7
 80014a4:	f001 fb51 	bl	8002b4a <cmox_ModSubBN>
 80014a8:	9901      	ldr	r1, [sp, #4]
 80014aa:	6a23      	ldr	r3, [r4, #32]
 80014ac:	4622      	mov	r2, r4
 80014ae:	4608      	mov	r0, r1
 80014b0:	f001 fd62 	bl	8002f78 <cmox_ModularBN_Sqr>
 80014b4:	6a20      	ldr	r0, [r4, #32]
 80014b6:	9a01      	ldr	r2, [sp, #4]
 80014b8:	9000      	str	r0, [sp, #0]
 80014ba:	4623      	mov	r3, r4
 80014bc:	69a0      	ldr	r0, [r4, #24]
 80014be:	6805      	ldr	r5, [r0, #0]
 80014c0:	6928      	ldr	r0, [r5, #16]
 80014c2:	4611      	mov	r1, r2
 80014c4:	f001 fd35 	bl	8002f32 <cmox_ModularBN_Mul>
 80014c8:	69a0      	ldr	r0, [r4, #24]
 80014ca:	6801      	ldr	r1, [r0, #0]
 80014cc:	680a      	ldr	r2, [r1, #0]
 80014ce:	9901      	ldr	r1, [sp, #4]
 80014d0:	463b      	mov	r3, r7
 80014d2:	4640      	mov	r0, r8
 80014d4:	f001 faa8 	bl	8002a28 <cmox_ModAddBN>
 80014d8:	69a0      	ldr	r0, [r4, #24]
 80014da:	6801      	ldr	r1, [r0, #0]
 80014dc:	680a      	ldr	r2, [r1, #0]
 80014de:	4643      	mov	r3, r8
 80014e0:	4659      	mov	r1, fp
 80014e2:	4650      	mov	r0, sl
 80014e4:	f001 fb31 	bl	8002b4a <cmox_ModSubBN>
 80014e8:	69a0      	ldr	r0, [r4, #24]
 80014ea:	6801      	ldr	r1, [r0, #0]
 80014ec:	6809      	ldr	r1, [r1, #0]
 80014ee:	4642      	mov	r2, r8
 80014f0:	4640      	mov	r0, r8
 80014f2:	f001 fc4e 	bl	8002d92 <cmox_FieldBN_Mul2>
 80014f6:	6a23      	ldr	r3, [r4, #32]
 80014f8:	4622      	mov	r2, r4
 80014fa:	4649      	mov	r1, r9
 80014fc:	4638      	mov	r0, r7
 80014fe:	f001 fd3b 	bl	8002f78 <cmox_ModularBN_Sqr>
 8001502:	69a0      	ldr	r0, [r4, #24]
 8001504:	6801      	ldr	r1, [r0, #0]
 8001506:	9a01      	ldr	r2, [sp, #4]
 8001508:	6809      	ldr	r1, [r1, #0]
 800150a:	4640      	mov	r0, r8
 800150c:	f001 fc41 	bl	8002d92 <cmox_FieldBN_Mul2>
 8001510:	69a0      	ldr	r0, [r4, #24]
 8001512:	6801      	ldr	r1, [r0, #0]
 8001514:	680a      	ldr	r2, [r1, #0]
 8001516:	9901      	ldr	r1, [sp, #4]
 8001518:	4653      	mov	r3, sl
 800151a:	4648      	mov	r0, r9
 800151c:	f001 fb15 	bl	8002b4a <cmox_ModSubBN>
 8001520:	69a0      	ldr	r0, [r4, #24]
 8001522:	6801      	ldr	r1, [r0, #0]
 8001524:	680a      	ldr	r2, [r1, #0]
 8001526:	4643      	mov	r3, r8
 8001528:	4651      	mov	r1, sl
 800152a:	4640      	mov	r0, r8
 800152c:	f001 fb0d 	bl	8002b4a <cmox_ModSubBN>
 8001530:	69a0      	ldr	r0, [r4, #24]
 8001532:	6801      	ldr	r1, [r0, #0]
 8001534:	6809      	ldr	r1, [r1, #0]
 8001536:	464a      	mov	r2, r9
 8001538:	4658      	mov	r0, fp
 800153a:	f001 fc2a 	bl	8002d92 <cmox_FieldBN_Mul2>
 800153e:	69a0      	ldr	r0, [r4, #24]
 8001540:	6801      	ldr	r1, [r0, #0]
 8001542:	6809      	ldr	r1, [r1, #0]
 8001544:	464a      	mov	r2, r9
 8001546:	4648      	mov	r0, r9
 8001548:	f001 fc23 	bl	8002d92 <cmox_FieldBN_Mul2>
 800154c:	69a0      	ldr	r0, [r4, #24]
 800154e:	6801      	ldr	r1, [r0, #0]
 8001550:	6809      	ldr	r1, [r1, #0]
 8001552:	464a      	mov	r2, r9
 8001554:	4648      	mov	r0, r9
 8001556:	f001 fc1c 	bl	8002d92 <cmox_FieldBN_Mul2>
 800155a:	6a20      	ldr	r0, [r4, #32]
 800155c:	9000      	str	r0, [sp, #0]
 800155e:	4623      	mov	r3, r4
 8001560:	463a      	mov	r2, r7
 8001562:	4641      	mov	r1, r8
 8001564:	4638      	mov	r0, r7
 8001566:	f001 fce4 	bl	8002f32 <cmox_ModularBN_Mul>
 800156a:	69a0      	ldr	r0, [r4, #24]
 800156c:	6801      	ldr	r1, [r0, #0]
 800156e:	680a      	ldr	r2, [r1, #0]
 8001570:	465b      	mov	r3, fp
 8001572:	4649      	mov	r1, r9
 8001574:	4638      	mov	r0, r7
 8001576:	b003      	add	sp, #12
 8001578:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800157c:	f001 bae5 	b.w	8002b4a <cmox_ModSubBN>

08001580 <cmox_ECC_EDW_AddPoints_ProjAff>:
 8001580:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001584:	4604      	mov	r4, r0
 8001586:	6965      	ldr	r5, [r4, #20]
 8001588:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800158a:	f8d5 8000 	ldr.w	r8, [r5]
 800158e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8001592:	f8d5 a008 	ldr.w	sl, [r5, #8]
 8001596:	b108      	cbz	r0, 800159c <cmox_ECC_EDW_AddPoints_ProjAff+0x1c>
 8001598:	2500      	movs	r5, #0
 800159a:	6005      	str	r5, [r0, #0]
 800159c:	4616      	mov	r6, r2
 800159e:	6a22      	ldr	r2, [r4, #32]
 80015a0:	9200      	str	r2, [sp, #0]
 80015a2:	460f      	mov	r7, r1
 80015a4:	461d      	mov	r5, r3
 80015a6:	6831      	ldr	r1, [r6, #0]
 80015a8:	6838      	ldr	r0, [r7, #0]
 80015aa:	4623      	mov	r3, r4
 80015ac:	4642      	mov	r2, r8
 80015ae:	f001 fcc0 	bl	8002f32 <cmox_ModularBN_Mul>
 80015b2:	69a0      	ldr	r0, [r4, #24]
 80015b4:	6801      	ldr	r1, [r0, #0]
 80015b6:	680a      	ldr	r2, [r1, #0]
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	6838      	ldr	r0, [r7, #0]
 80015bc:	464b      	mov	r3, r9
 80015be:	f001 fa33 	bl	8002a28 <cmox_ModAddBN>
 80015c2:	69a0      	ldr	r0, [r4, #24]
 80015c4:	6801      	ldr	r1, [r0, #0]
 80015c6:	680a      	ldr	r2, [r1, #0]
 80015c8:	682b      	ldr	r3, [r5, #0]
 80015ca:	6871      	ldr	r1, [r6, #4]
 80015cc:	6830      	ldr	r0, [r6, #0]
 80015ce:	f001 fa2b 	bl	8002a28 <cmox_ModAddBN>
 80015d2:	6a20      	ldr	r0, [r4, #32]
 80015d4:	9000      	str	r0, [sp, #0]
 80015d6:	686a      	ldr	r2, [r5, #4]
 80015d8:	6871      	ldr	r1, [r6, #4]
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	4623      	mov	r3, r4
 80015de:	f001 fca8 	bl	8002f32 <cmox_ModularBN_Mul>
 80015e2:	6a20      	ldr	r0, [r4, #32]
 80015e4:	9000      	str	r0, [sp, #0]
 80015e6:	4623      	mov	r3, r4
 80015e8:	6869      	ldr	r1, [r5, #4]
 80015ea:	4652      	mov	r2, sl
 80015ec:	4640      	mov	r0, r8
 80015ee:	f001 fca0 	bl	8002f32 <cmox_ModularBN_Mul>
 80015f2:	6a20      	ldr	r0, [r4, #32]
 80015f4:	9000      	str	r0, [sp, #0]
 80015f6:	4623      	mov	r3, r4
 80015f8:	69a0      	ldr	r0, [r4, #24]
 80015fa:	6806      	ldr	r6, [r0, #0]
 80015fc:	6970      	ldr	r0, [r6, #20]
 80015fe:	4652      	mov	r2, sl
 8001600:	4651      	mov	r1, sl
 8001602:	f001 fc96 	bl	8002f32 <cmox_ModularBN_Mul>
 8001606:	6a20      	ldr	r0, [r4, #32]
 8001608:	9000      	str	r0, [sp, #0]
 800160a:	4623      	mov	r3, r4
 800160c:	6829      	ldr	r1, [r5, #0]
 800160e:	464a      	mov	r2, r9
 8001610:	4648      	mov	r0, r9
 8001612:	f001 fc8e 	bl	8002f32 <cmox_ModularBN_Mul>
 8001616:	69a0      	ldr	r0, [r4, #24]
 8001618:	6801      	ldr	r1, [r0, #0]
 800161a:	680a      	ldr	r2, [r1, #0]
 800161c:	464b      	mov	r3, r9
 800161e:	4641      	mov	r1, r8
 8001620:	4648      	mov	r0, r9
 8001622:	f001 fa92 	bl	8002b4a <cmox_ModSubBN>
 8001626:	69a0      	ldr	r0, [r4, #24]
 8001628:	6801      	ldr	r1, [r0, #0]
 800162a:	680a      	ldr	r2, [r1, #0]
 800162c:	6869      	ldr	r1, [r5, #4]
 800162e:	464b      	mov	r3, r9
 8001630:	4648      	mov	r0, r9
 8001632:	f001 fa8a 	bl	8002b4a <cmox_ModSubBN>
 8001636:	6a20      	ldr	r0, [r4, #32]
 8001638:	9000      	str	r0, [sp, #0]
 800163a:	4623      	mov	r3, r4
 800163c:	69a0      	ldr	r0, [r4, #24]
 800163e:	6806      	ldr	r6, [r0, #0]
 8001640:	6930      	ldr	r0, [r6, #16]
 8001642:	4642      	mov	r2, r8
 8001644:	4641      	mov	r1, r8
 8001646:	f001 fc74 	bl	8002f32 <cmox_ModularBN_Mul>
 800164a:	69a1      	ldr	r1, [r4, #24]
 800164c:	680a      	ldr	r2, [r1, #0]
 800164e:	6868      	ldr	r0, [r5, #4]
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	4603      	mov	r3, r0
 8001654:	4641      	mov	r1, r8
 8001656:	f001 fa78 	bl	8002b4a <cmox_ModSubBN>
 800165a:	6a23      	ldr	r3, [r4, #32]
 800165c:	6829      	ldr	r1, [r5, #0]
 800165e:	68b8      	ldr	r0, [r7, #8]
 8001660:	4622      	mov	r2, r4
 8001662:	f001 fc89 	bl	8002f78 <cmox_ModularBN_Sqr>
 8001666:	69a0      	ldr	r0, [r4, #24]
 8001668:	6801      	ldr	r1, [r0, #0]
 800166a:	680a      	ldr	r2, [r1, #0]
 800166c:	6828      	ldr	r0, [r5, #0]
 800166e:	4643      	mov	r3, r8
 8001670:	4651      	mov	r1, sl
 8001672:	f001 fa6a 	bl	8002b4a <cmox_ModSubBN>
 8001676:	69a0      	ldr	r0, [r4, #24]
 8001678:	6801      	ldr	r1, [r0, #0]
 800167a:	680a      	ldr	r2, [r1, #0]
 800167c:	6828      	ldr	r0, [r5, #0]
 800167e:	4653      	mov	r3, sl
 8001680:	4651      	mov	r1, sl
 8001682:	f001 f9d1 	bl	8002a28 <cmox_ModAddBN>
 8001686:	6a20      	ldr	r0, [r4, #32]
 8001688:	9000      	str	r0, [sp, #0]
 800168a:	4623      	mov	r3, r4
 800168c:	464a      	mov	r2, r9
 800168e:	4649      	mov	r1, r9
 8001690:	4640      	mov	r0, r8
 8001692:	f001 fc4e 	bl	8002f32 <cmox_ModularBN_Mul>
 8001696:	6a20      	ldr	r0, [r4, #32]
 8001698:	9000      	str	r0, [sp, #0]
 800169a:	4623      	mov	r3, r4
 800169c:	682a      	ldr	r2, [r5, #0]
 800169e:	68b8      	ldr	r0, [r7, #8]
 80016a0:	4649      	mov	r1, r9
 80016a2:	f001 fc46 	bl	8002f32 <cmox_ModularBN_Mul>
 80016a6:	6a20      	ldr	r0, [r4, #32]
 80016a8:	9000      	str	r0, [sp, #0]
 80016aa:	4623      	mov	r3, r4
 80016ac:	6869      	ldr	r1, [r5, #4]
 80016ae:	464a      	mov	r2, r9
 80016b0:	4650      	mov	r0, sl
 80016b2:	f001 fc3e 	bl	8002f32 <cmox_ModularBN_Mul>
 80016b6:	6a20      	ldr	r0, [r4, #32]
 80016b8:	9000      	str	r0, [sp, #0]
 80016ba:	4623      	mov	r3, r4
 80016bc:	686a      	ldr	r2, [r5, #4]
 80016be:	68b8      	ldr	r0, [r7, #8]
 80016c0:	4649      	mov	r1, r9
 80016c2:	f001 fc36 	bl	8002f32 <cmox_ModularBN_Mul>
 80016c6:	6a20      	ldr	r0, [r4, #32]
 80016c8:	9000      	str	r0, [sp, #0]
 80016ca:	4623      	mov	r3, r4
 80016cc:	68aa      	ldr	r2, [r5, #8]
 80016ce:	4651      	mov	r1, sl
 80016d0:	4640      	mov	r0, r8
 80016d2:	f001 fc2e 	bl	8002f32 <cmox_ModularBN_Mul>
 80016d6:	e8bd 87f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, pc}

080016da <cmox_ECC_EDW_AddPoints_Proj>:
 80016da:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80016de:	4604      	mov	r4, r0
 80016e0:	460d      	mov	r5, r1
 80016e2:	6960      	ldr	r0, [r4, #20]
 80016e4:	f8d0 a000 	ldr.w	sl, [r0]
 80016e8:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80016ec:	f8d0 9008 	ldr.w	r9, [r0, #8]
 80016f0:	6a20      	ldr	r0, [r4, #32]
 80016f2:	9000      	str	r0, [sp, #0]
 80016f4:	4617      	mov	r7, r2
 80016f6:	461e      	mov	r6, r3
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	68a8      	ldr	r0, [r5, #8]
 80016fc:	4623      	mov	r3, r4
 80016fe:	4652      	mov	r2, sl
 8001700:	f001 fc17 	bl	8002f32 <cmox_ModularBN_Mul>
 8001704:	6a20      	ldr	r0, [r4, #32]
 8001706:	9000      	str	r0, [sp, #0]
 8001708:	68b2      	ldr	r2, [r6, #8]
 800170a:	6839      	ldr	r1, [r7, #0]
 800170c:	6828      	ldr	r0, [r5, #0]
 800170e:	4623      	mov	r3, r4
 8001710:	f001 fc0f 	bl	8002f32 <cmox_ModularBN_Mul>
 8001714:	69a0      	ldr	r0, [r4, #24]
 8001716:	6801      	ldr	r1, [r0, #0]
 8001718:	680a      	ldr	r2, [r1, #0]
 800171a:	6869      	ldr	r1, [r5, #4]
 800171c:	6828      	ldr	r0, [r5, #0]
 800171e:	4643      	mov	r3, r8
 8001720:	f001 f982 	bl	8002a28 <cmox_ModAddBN>
 8001724:	69a0      	ldr	r0, [r4, #24]
 8001726:	6801      	ldr	r1, [r0, #0]
 8001728:	680a      	ldr	r2, [r1, #0]
 800172a:	6833      	ldr	r3, [r6, #0]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	6838      	ldr	r0, [r7, #0]
 8001730:	f001 f97a 	bl	8002a28 <cmox_ModAddBN>
 8001734:	6a20      	ldr	r0, [r4, #32]
 8001736:	9000      	str	r0, [sp, #0]
 8001738:	6872      	ldr	r2, [r6, #4]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	6868      	ldr	r0, [r5, #4]
 800173e:	4623      	mov	r3, r4
 8001740:	f001 fbf7 	bl	8002f32 <cmox_ModularBN_Mul>
 8001744:	6a20      	ldr	r0, [r4, #32]
 8001746:	9000      	str	r0, [sp, #0]
 8001748:	4623      	mov	r3, r4
 800174a:	6871      	ldr	r1, [r6, #4]
 800174c:	68b0      	ldr	r0, [r6, #8]
 800174e:	464a      	mov	r2, r9
 8001750:	f001 fbef 	bl	8002f32 <cmox_ModularBN_Mul>
 8001754:	6a20      	ldr	r0, [r4, #32]
 8001756:	9000      	str	r0, [sp, #0]
 8001758:	4623      	mov	r3, r4
 800175a:	69a0      	ldr	r0, [r4, #24]
 800175c:	6805      	ldr	r5, [r0, #0]
 800175e:	6968      	ldr	r0, [r5, #20]
 8001760:	464a      	mov	r2, r9
 8001762:	4649      	mov	r1, r9
 8001764:	f001 fbe5 	bl	8002f32 <cmox_ModularBN_Mul>
 8001768:	6a20      	ldr	r0, [r4, #32]
 800176a:	9000      	str	r0, [sp, #0]
 800176c:	4623      	mov	r3, r4
 800176e:	6831      	ldr	r1, [r6, #0]
 8001770:	4642      	mov	r2, r8
 8001772:	4640      	mov	r0, r8
 8001774:	f001 fbdd 	bl	8002f32 <cmox_ModularBN_Mul>
 8001778:	69a0      	ldr	r0, [r4, #24]
 800177a:	6801      	ldr	r1, [r0, #0]
 800177c:	680a      	ldr	r2, [r1, #0]
 800177e:	68b1      	ldr	r1, [r6, #8]
 8001780:	4643      	mov	r3, r8
 8001782:	4640      	mov	r0, r8
 8001784:	f001 f9e1 	bl	8002b4a <cmox_ModSubBN>
 8001788:	69a0      	ldr	r0, [r4, #24]
 800178a:	6801      	ldr	r1, [r0, #0]
 800178c:	680a      	ldr	r2, [r1, #0]
 800178e:	6871      	ldr	r1, [r6, #4]
 8001790:	4643      	mov	r3, r8
 8001792:	4640      	mov	r0, r8
 8001794:	f001 f9d9 	bl	8002b4a <cmox_ModSubBN>
 8001798:	68b1      	ldr	r1, [r6, #8]
 800179a:	6a20      	ldr	r0, [r4, #32]
 800179c:	9000      	str	r0, [sp, #0]
 800179e:	4623      	mov	r3, r4
 80017a0:	69a0      	ldr	r0, [r4, #24]
 80017a2:	6805      	ldr	r5, [r0, #0]
 80017a4:	6928      	ldr	r0, [r5, #16]
 80017a6:	460a      	mov	r2, r1
 80017a8:	f001 fbc3 	bl	8002f32 <cmox_ModularBN_Mul>
 80017ac:	69a1      	ldr	r1, [r4, #24]
 80017ae:	680a      	ldr	r2, [r1, #0]
 80017b0:	6870      	ldr	r0, [r6, #4]
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	68b1      	ldr	r1, [r6, #8]
 80017b6:	4603      	mov	r3, r0
 80017b8:	f001 f9c7 	bl	8002b4a <cmox_ModSubBN>
 80017bc:	6a23      	ldr	r3, [r4, #32]
 80017be:	6831      	ldr	r1, [r6, #0]
 80017c0:	4622      	mov	r2, r4
 80017c2:	4650      	mov	r0, sl
 80017c4:	f001 fbd8 	bl	8002f78 <cmox_ModularBN_Sqr>
 80017c8:	69a0      	ldr	r0, [r4, #24]
 80017ca:	6801      	ldr	r1, [r0, #0]
 80017cc:	680a      	ldr	r2, [r1, #0]
 80017ce:	68b3      	ldr	r3, [r6, #8]
 80017d0:	6830      	ldr	r0, [r6, #0]
 80017d2:	4649      	mov	r1, r9
 80017d4:	f001 f9b9 	bl	8002b4a <cmox_ModSubBN>
 80017d8:	69a0      	ldr	r0, [r4, #24]
 80017da:	6801      	ldr	r1, [r0, #0]
 80017dc:	680a      	ldr	r2, [r1, #0]
 80017de:	6830      	ldr	r0, [r6, #0]
 80017e0:	464b      	mov	r3, r9
 80017e2:	4649      	mov	r1, r9
 80017e4:	f001 f920 	bl	8002a28 <cmox_ModAddBN>
 80017e8:	6a20      	ldr	r0, [r4, #32]
 80017ea:	9000      	str	r0, [sp, #0]
 80017ec:	4623      	mov	r3, r4
 80017ee:	68b0      	ldr	r0, [r6, #8]
 80017f0:	4642      	mov	r2, r8
 80017f2:	4641      	mov	r1, r8
 80017f4:	f001 fb9d 	bl	8002f32 <cmox_ModularBN_Mul>
 80017f8:	6a20      	ldr	r0, [r4, #32]
 80017fa:	9000      	str	r0, [sp, #0]
 80017fc:	4623      	mov	r3, r4
 80017fe:	6832      	ldr	r2, [r6, #0]
 8001800:	4641      	mov	r1, r8
 8001802:	4650      	mov	r0, sl
 8001804:	f001 fb95 	bl	8002f32 <cmox_ModularBN_Mul>
 8001808:	6a20      	ldr	r0, [r4, #32]
 800180a:	9000      	str	r0, [sp, #0]
 800180c:	4623      	mov	r3, r4
 800180e:	6871      	ldr	r1, [r6, #4]
 8001810:	4642      	mov	r2, r8
 8001812:	4648      	mov	r0, r9
 8001814:	f001 fb8d 	bl	8002f32 <cmox_ModularBN_Mul>
 8001818:	6a20      	ldr	r0, [r4, #32]
 800181a:	9000      	str	r0, [sp, #0]
 800181c:	4623      	mov	r3, r4
 800181e:	6872      	ldr	r2, [r6, #4]
 8001820:	4641      	mov	r1, r8
 8001822:	4650      	mov	r0, sl
 8001824:	f001 fb85 	bl	8002f32 <cmox_ModularBN_Mul>
 8001828:	68b0      	ldr	r0, [r6, #8]
 800182a:	6a21      	ldr	r1, [r4, #32]
 800182c:	9100      	str	r1, [sp, #0]
 800182e:	4623      	mov	r3, r4
 8001830:	4602      	mov	r2, r0
 8001832:	4649      	mov	r1, r9
 8001834:	f001 fb7d 	bl	8002f32 <cmox_ModularBN_Mul>
 8001838:	e8bd 87f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, pc}

0800183c <cmox_ECC_EDW_DblPoint_Proj>:
 800183c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001840:	4604      	mov	r4, r0
 8001842:	460d      	mov	r5, r1
 8001844:	6960      	ldr	r0, [r4, #20]
 8001846:	6806      	ldr	r6, [r0, #0]
 8001848:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800184c:	4617      	mov	r7, r2
 800184e:	469b      	mov	fp, r3
 8001850:	6839      	ldr	r1, [r7, #0]
 8001852:	4632      	mov	r2, r6
 8001854:	4658      	mov	r0, fp
 8001856:	f003 fa0d 	bl	8004c74 <cmox_bn_mux>
 800185a:	4680      	mov	r8, r0
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	4632      	mov	r2, r6
 8001860:	4658      	mov	r0, fp
 8001862:	f003 fa07 	bl	8004c74 <cmox_bn_mux>
 8001866:	4681      	mov	r9, r0
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	4632      	mov	r2, r6
 800186c:	4658      	mov	r0, fp
 800186e:	f003 fa01 	bl	8004c74 <cmox_bn_mux>
 8001872:	4607      	mov	r7, r0
 8001874:	69a0      	ldr	r0, [r4, #24]
 8001876:	6801      	ldr	r1, [r0, #0]
 8001878:	680a      	ldr	r2, [r1, #0]
 800187a:	6869      	ldr	r1, [r5, #4]
 800187c:	6828      	ldr	r0, [r5, #0]
 800187e:	4633      	mov	r3, r6
 8001880:	f001 f8d2 	bl	8002a28 <cmox_ModAddBN>
 8001884:	6a23      	ldr	r3, [r4, #32]
 8001886:	6828      	ldr	r0, [r5, #0]
 8001888:	4622      	mov	r2, r4
 800188a:	4651      	mov	r1, sl
 800188c:	f001 fb74 	bl	8002f78 <cmox_ModularBN_Sqr>
 8001890:	6a20      	ldr	r0, [r4, #32]
 8001892:	9000      	str	r0, [sp, #0]
 8001894:	4623      	mov	r3, r4
 8001896:	69a0      	ldr	r0, [r4, #24]
 8001898:	f8d0 e000 	ldr.w	lr, [r0]
 800189c:	f8de 0010 	ldr.w	r0, [lr, #16]
 80018a0:	4642      	mov	r2, r8
 80018a2:	4651      	mov	r1, sl
 80018a4:	f001 fb45 	bl	8002f32 <cmox_ModularBN_Mul>
 80018a8:	6a23      	ldr	r3, [r4, #32]
 80018aa:	4622      	mov	r2, r4
 80018ac:	4631      	mov	r1, r6
 80018ae:	4630      	mov	r0, r6
 80018b0:	f001 fb62 	bl	8002f78 <cmox_ModularBN_Sqr>
 80018b4:	69a0      	ldr	r0, [r4, #24]
 80018b6:	6801      	ldr	r1, [r0, #0]
 80018b8:	680a      	ldr	r2, [r1, #0]
 80018ba:	4633      	mov	r3, r6
 80018bc:	4651      	mov	r1, sl
 80018be:	4630      	mov	r0, r6
 80018c0:	f001 f943 	bl	8002b4a <cmox_ModSubBN>
 80018c4:	6a23      	ldr	r3, [r4, #32]
 80018c6:	6868      	ldr	r0, [r5, #4]
 80018c8:	4622      	mov	r2, r4
 80018ca:	4649      	mov	r1, r9
 80018cc:	f001 fb54 	bl	8002f78 <cmox_ModularBN_Sqr>
 80018d0:	69a0      	ldr	r0, [r4, #24]
 80018d2:	6801      	ldr	r1, [r0, #0]
 80018d4:	680a      	ldr	r2, [r1, #0]
 80018d6:	4653      	mov	r3, sl
 80018d8:	4649      	mov	r1, r9
 80018da:	4640      	mov	r0, r8
 80018dc:	f001 f8a4 	bl	8002a28 <cmox_ModAddBN>
 80018e0:	69a0      	ldr	r0, [r4, #24]
 80018e2:	6801      	ldr	r1, [r0, #0]
 80018e4:	680a      	ldr	r2, [r1, #0]
 80018e6:	4643      	mov	r3, r8
 80018e8:	4649      	mov	r1, r9
 80018ea:	4640      	mov	r0, r8
 80018ec:	f001 f92d 	bl	8002b4a <cmox_ModSubBN>
 80018f0:	69a0      	ldr	r0, [r4, #24]
 80018f2:	6801      	ldr	r1, [r0, #0]
 80018f4:	680a      	ldr	r2, [r1, #0]
 80018f6:	4633      	mov	r3, r6
 80018f8:	4649      	mov	r1, r9
 80018fa:	4630      	mov	r0, r6
 80018fc:	f001 f925 	bl	8002b4a <cmox_ModSubBN>
 8001900:	6a23      	ldr	r3, [r4, #32]
 8001902:	68a8      	ldr	r0, [r5, #8]
 8001904:	4622      	mov	r2, r4
 8001906:	4639      	mov	r1, r7
 8001908:	f001 fb36 	bl	8002f78 <cmox_ModularBN_Sqr>
 800190c:	69a0      	ldr	r0, [r4, #24]
 800190e:	6801      	ldr	r1, [r0, #0]
 8001910:	6809      	ldr	r1, [r1, #0]
 8001912:	463a      	mov	r2, r7
 8001914:	4638      	mov	r0, r7
 8001916:	f001 fa3c 	bl	8002d92 <cmox_FieldBN_Mul2>
 800191a:	6a20      	ldr	r0, [r4, #32]
 800191c:	9000      	str	r0, [sp, #0]
 800191e:	4623      	mov	r3, r4
 8001920:	464a      	mov	r2, r9
 8001922:	4641      	mov	r1, r8
 8001924:	4650      	mov	r0, sl
 8001926:	f001 fb04 	bl	8002f32 <cmox_ModularBN_Mul>
 800192a:	69a0      	ldr	r0, [r4, #24]
 800192c:	6801      	ldr	r1, [r0, #0]
 800192e:	680a      	ldr	r2, [r1, #0]
 8001930:	463b      	mov	r3, r7
 8001932:	4639      	mov	r1, r7
 8001934:	4650      	mov	r0, sl
 8001936:	f001 f908 	bl	8002b4a <cmox_ModSubBN>
 800193a:	6a20      	ldr	r0, [r4, #32]
 800193c:	9000      	str	r0, [sp, #0]
 800193e:	4623      	mov	r3, r4
 8001940:	4642      	mov	r2, r8
 8001942:	4639      	mov	r1, r7
 8001944:	4630      	mov	r0, r6
 8001946:	f001 faf4 	bl	8002f32 <cmox_ModularBN_Mul>
 800194a:	6a20      	ldr	r0, [r4, #32]
 800194c:	9000      	str	r0, [sp, #0]
 800194e:	4623      	mov	r3, r4
 8001950:	463a      	mov	r2, r7
 8001952:	4639      	mov	r1, r7
 8001954:	4650      	mov	r0, sl
 8001956:	f001 faec 	bl	8002f32 <cmox_ModularBN_Mul>
 800195a:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800195e <cmox_ECC_EDW_AddPnts_ExtAff_a_1>:
 800195e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001962:	460d      	mov	r5, r1
 8001964:	4604      	mov	r4, r0
 8001966:	6961      	ldr	r1, [r4, #20]
 8001968:	9808      	ldr	r0, [sp, #32]
 800196a:	f8d1 8000 	ldr.w	r8, [r1]
 800196e:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8001972:	4617      	mov	r7, r2
 8001974:	461e      	mov	r6, r3
 8001976:	b108      	cbz	r0, 800197c <cmox_ECC_EDW_AddPnts_ExtAff_a_1+0x1e>
 8001978:	2100      	movs	r1, #0
 800197a:	6001      	str	r1, [r0, #0]
 800197c:	4643      	mov	r3, r8
 800197e:	69a0      	ldr	r0, [r4, #24]
 8001980:	6800      	ldr	r0, [r0, #0]
 8001982:	6802      	ldr	r2, [r0, #0]
 8001984:	6829      	ldr	r1, [r5, #0]
 8001986:	6868      	ldr	r0, [r5, #4]
 8001988:	f001 f8df 	bl	8002b4a <cmox_ModSubBN>
 800198c:	69a0      	ldr	r0, [r4, #24]
 800198e:	6801      	ldr	r1, [r0, #0]
 8001990:	680a      	ldr	r2, [r1, #0]
 8001992:	6839      	ldr	r1, [r7, #0]
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	464b      	mov	r3, r9
 8001998:	f001 f846 	bl	8002a28 <cmox_ModAddBN>
 800199c:	6a20      	ldr	r0, [r4, #32]
 800199e:	9000      	str	r0, [sp, #0]
 80019a0:	4623      	mov	r3, r4
 80019a2:	4642      	mov	r2, r8
 80019a4:	4649      	mov	r1, r9
 80019a6:	4640      	mov	r0, r8
 80019a8:	f001 fac3 	bl	8002f32 <cmox_ModularBN_Mul>
 80019ac:	69a0      	ldr	r0, [r4, #24]
 80019ae:	6801      	ldr	r1, [r0, #0]
 80019b0:	680a      	ldr	r2, [r1, #0]
 80019b2:	6829      	ldr	r1, [r5, #0]
 80019b4:	6868      	ldr	r0, [r5, #4]
 80019b6:	464b      	mov	r3, r9
 80019b8:	f001 f836 	bl	8002a28 <cmox_ModAddBN>
 80019bc:	69a0      	ldr	r0, [r4, #24]
 80019be:	6801      	ldr	r1, [r0, #0]
 80019c0:	680a      	ldr	r2, [r1, #0]
 80019c2:	6833      	ldr	r3, [r6, #0]
 80019c4:	6839      	ldr	r1, [r7, #0]
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f001 f8bf 	bl	8002b4a <cmox_ModSubBN>
 80019cc:	6a20      	ldr	r0, [r4, #32]
 80019ce:	9000      	str	r0, [sp, #0]
 80019d0:	4623      	mov	r3, r4
 80019d2:	6831      	ldr	r1, [r6, #0]
 80019d4:	464a      	mov	r2, r9
 80019d6:	4648      	mov	r0, r9
 80019d8:	f001 faab 	bl	8002f32 <cmox_ModularBN_Mul>
 80019dc:	69a0      	ldr	r0, [r4, #24]
 80019de:	6801      	ldr	r1, [r0, #0]
 80019e0:	680a      	ldr	r2, [r1, #0]
 80019e2:	6833      	ldr	r3, [r6, #0]
 80019e4:	4641      	mov	r1, r8
 80019e6:	4648      	mov	r0, r9
 80019e8:	f001 f8af 	bl	8002b4a <cmox_ModSubBN>
 80019ec:	69a0      	ldr	r0, [r4, #24]
 80019ee:	6801      	ldr	r1, [r0, #0]
 80019f0:	680a      	ldr	r2, [r1, #0]
 80019f2:	464b      	mov	r3, r9
 80019f4:	4641      	mov	r1, r8
 80019f6:	4648      	mov	r0, r9
 80019f8:	f001 f816 	bl	8002a28 <cmox_ModAddBN>
 80019fc:	69a0      	ldr	r0, [r4, #24]
 80019fe:	6801      	ldr	r1, [r0, #0]
 8001a00:	6872      	ldr	r2, [r6, #4]
 8001a02:	6809      	ldr	r1, [r1, #0]
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f001 f9c4 	bl	8002d92 <cmox_FieldBN_Mul2>
 8001a0a:	6871      	ldr	r1, [r6, #4]
 8001a0c:	6a20      	ldr	r0, [r4, #32]
 8001a0e:	9000      	str	r0, [sp, #0]
 8001a10:	4623      	mov	r3, r4
 8001a12:	68a8      	ldr	r0, [r5, #8]
 8001a14:	460a      	mov	r2, r1
 8001a16:	f001 fa8c 	bl	8002f32 <cmox_ModularBN_Mul>
 8001a1a:	69a0      	ldr	r0, [r4, #24]
 8001a1c:	6801      	ldr	r1, [r0, #0]
 8001a1e:	68f2      	ldr	r2, [r6, #12]
 8001a20:	6809      	ldr	r1, [r1, #0]
 8001a22:	68e8      	ldr	r0, [r5, #12]
 8001a24:	f001 f9b5 	bl	8002d92 <cmox_FieldBN_Mul2>
 8001a28:	69a0      	ldr	r0, [r4, #24]
 8001a2a:	6801      	ldr	r1, [r0, #0]
 8001a2c:	680a      	ldr	r2, [r1, #0]
 8001a2e:	6871      	ldr	r1, [r6, #4]
 8001a30:	68f0      	ldr	r0, [r6, #12]
 8001a32:	4643      	mov	r3, r8
 8001a34:	f000 fff8 	bl	8002a28 <cmox_ModAddBN>
 8001a38:	69a1      	ldr	r1, [r4, #24]
 8001a3a:	680a      	ldr	r2, [r1, #0]
 8001a3c:	68f0      	ldr	r0, [r6, #12]
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	6871      	ldr	r1, [r6, #4]
 8001a42:	4603      	mov	r3, r0
 8001a44:	f001 f881 	bl	8002b4a <cmox_ModSubBN>
 8001a48:	6a20      	ldr	r0, [r4, #32]
 8001a4a:	9000      	str	r0, [sp, #0]
 8001a4c:	4623      	mov	r3, r4
 8001a4e:	68b2      	ldr	r2, [r6, #8]
 8001a50:	6830      	ldr	r0, [r6, #0]
 8001a52:	4649      	mov	r1, r9
 8001a54:	f001 fa6d 	bl	8002f32 <cmox_ModularBN_Mul>
 8001a58:	6831      	ldr	r1, [r6, #0]
 8001a5a:	6a20      	ldr	r0, [r4, #32]
 8001a5c:	9000      	str	r0, [sp, #0]
 8001a5e:	4623      	mov	r3, r4
 8001a60:	460a      	mov	r2, r1
 8001a62:	4640      	mov	r0, r8
 8001a64:	f001 fa65 	bl	8002f32 <cmox_ModularBN_Mul>
 8001a68:	6a20      	ldr	r0, [r4, #32]
 8001a6a:	9000      	str	r0, [sp, #0]
 8001a6c:	6872      	ldr	r2, [r6, #4]
 8001a6e:	68f1      	ldr	r1, [r6, #12]
 8001a70:	4623      	mov	r3, r4
 8001a72:	4648      	mov	r0, r9
 8001a74:	f001 fa5d 	bl	8002f32 <cmox_ModularBN_Mul>
 8001a78:	68f1      	ldr	r1, [r6, #12]
 8001a7a:	6a20      	ldr	r0, [r4, #32]
 8001a7c:	9000      	str	r0, [sp, #0]
 8001a7e:	4623      	mov	r3, r4
 8001a80:	460a      	mov	r2, r1
 8001a82:	4640      	mov	r0, r8
 8001a84:	f001 fa55 	bl	8002f32 <cmox_ModularBN_Mul>
 8001a88:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}

08001a8c <cmox_ECC_EDW_AddPoints_Ext_a_1>:
 8001a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a90:	4604      	mov	r4, r0
 8001a92:	4617      	mov	r7, r2
 8001a94:	6960      	ldr	r0, [r4, #20]
 8001a96:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8001a9a:	f8d0 8000 	ldr.w	r8, [r0]
 8001a9e:	69a0      	ldr	r0, [r4, #24]
 8001aa0:	6800      	ldr	r0, [r0, #0]
 8001aa2:	6802      	ldr	r2, [r0, #0]
 8001aa4:	460d      	mov	r5, r1
 8001aa6:	461e      	mov	r6, r3
 8001aa8:	6829      	ldr	r1, [r5, #0]
 8001aaa:	6868      	ldr	r0, [r5, #4]
 8001aac:	4643      	mov	r3, r8
 8001aae:	f001 f84c 	bl	8002b4a <cmox_ModSubBN>
 8001ab2:	69a0      	ldr	r0, [r4, #24]
 8001ab4:	6801      	ldr	r1, [r0, #0]
 8001ab6:	680a      	ldr	r2, [r1, #0]
 8001ab8:	6839      	ldr	r1, [r7, #0]
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	464b      	mov	r3, r9
 8001abe:	f000 ffb3 	bl	8002a28 <cmox_ModAddBN>
 8001ac2:	6a20      	ldr	r0, [r4, #32]
 8001ac4:	9000      	str	r0, [sp, #0]
 8001ac6:	4623      	mov	r3, r4
 8001ac8:	4642      	mov	r2, r8
 8001aca:	4649      	mov	r1, r9
 8001acc:	4640      	mov	r0, r8
 8001ace:	f001 fa30 	bl	8002f32 <cmox_ModularBN_Mul>
 8001ad2:	69a0      	ldr	r0, [r4, #24]
 8001ad4:	6801      	ldr	r1, [r0, #0]
 8001ad6:	680a      	ldr	r2, [r1, #0]
 8001ad8:	6829      	ldr	r1, [r5, #0]
 8001ada:	6868      	ldr	r0, [r5, #4]
 8001adc:	464b      	mov	r3, r9
 8001ade:	f000 ffa3 	bl	8002a28 <cmox_ModAddBN>
 8001ae2:	69a0      	ldr	r0, [r4, #24]
 8001ae4:	6801      	ldr	r1, [r0, #0]
 8001ae6:	680a      	ldr	r2, [r1, #0]
 8001ae8:	6833      	ldr	r3, [r6, #0]
 8001aea:	6839      	ldr	r1, [r7, #0]
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f001 f82c 	bl	8002b4a <cmox_ModSubBN>
 8001af2:	6a20      	ldr	r0, [r4, #32]
 8001af4:	9000      	str	r0, [sp, #0]
 8001af6:	4623      	mov	r3, r4
 8001af8:	6831      	ldr	r1, [r6, #0]
 8001afa:	464a      	mov	r2, r9
 8001afc:	4648      	mov	r0, r9
 8001afe:	f001 fa18 	bl	8002f32 <cmox_ModularBN_Mul>
 8001b02:	69a0      	ldr	r0, [r4, #24]
 8001b04:	6801      	ldr	r1, [r0, #0]
 8001b06:	680a      	ldr	r2, [r1, #0]
 8001b08:	6833      	ldr	r3, [r6, #0]
 8001b0a:	4641      	mov	r1, r8
 8001b0c:	4648      	mov	r0, r9
 8001b0e:	f001 f81c 	bl	8002b4a <cmox_ModSubBN>
 8001b12:	69a0      	ldr	r0, [r4, #24]
 8001b14:	6801      	ldr	r1, [r0, #0]
 8001b16:	680a      	ldr	r2, [r1, #0]
 8001b18:	464b      	mov	r3, r9
 8001b1a:	4641      	mov	r1, r8
 8001b1c:	4648      	mov	r0, r9
 8001b1e:	f000 ff83 	bl	8002a28 <cmox_ModAddBN>
 8001b22:	69a0      	ldr	r0, [r4, #24]
 8001b24:	6801      	ldr	r1, [r0, #0]
 8001b26:	6872      	ldr	r2, [r6, #4]
 8001b28:	6809      	ldr	r1, [r1, #0]
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f001 f931 	bl	8002d92 <cmox_FieldBN_Mul2>
 8001b30:	6871      	ldr	r1, [r6, #4]
 8001b32:	6a20      	ldr	r0, [r4, #32]
 8001b34:	9000      	str	r0, [sp, #0]
 8001b36:	4623      	mov	r3, r4
 8001b38:	68a8      	ldr	r0, [r5, #8]
 8001b3a:	460a      	mov	r2, r1
 8001b3c:	f001 f9f9 	bl	8002f32 <cmox_ModularBN_Mul>
 8001b40:	69a0      	ldr	r0, [r4, #24]
 8001b42:	6801      	ldr	r1, [r0, #0]
 8001b44:	68b2      	ldr	r2, [r6, #8]
 8001b46:	6809      	ldr	r1, [r1, #0]
 8001b48:	68b8      	ldr	r0, [r7, #8]
 8001b4a:	f001 f922 	bl	8002d92 <cmox_FieldBN_Mul2>
 8001b4e:	6a20      	ldr	r0, [r4, #32]
 8001b50:	9000      	str	r0, [sp, #0]
 8001b52:	68f2      	ldr	r2, [r6, #12]
 8001b54:	68b1      	ldr	r1, [r6, #8]
 8001b56:	68e8      	ldr	r0, [r5, #12]
 8001b58:	4623      	mov	r3, r4
 8001b5a:	f001 f9ea 	bl	8002f32 <cmox_ModularBN_Mul>
 8001b5e:	69a0      	ldr	r0, [r4, #24]
 8001b60:	6801      	ldr	r1, [r0, #0]
 8001b62:	680a      	ldr	r2, [r1, #0]
 8001b64:	6871      	ldr	r1, [r6, #4]
 8001b66:	68f0      	ldr	r0, [r6, #12]
 8001b68:	4643      	mov	r3, r8
 8001b6a:	f000 ff5d 	bl	8002a28 <cmox_ModAddBN>
 8001b6e:	69a1      	ldr	r1, [r4, #24]
 8001b70:	680a      	ldr	r2, [r1, #0]
 8001b72:	68f0      	ldr	r0, [r6, #12]
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	6871      	ldr	r1, [r6, #4]
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f000 ffe6 	bl	8002b4a <cmox_ModSubBN>
 8001b7e:	6a20      	ldr	r0, [r4, #32]
 8001b80:	9000      	str	r0, [sp, #0]
 8001b82:	4623      	mov	r3, r4
 8001b84:	68b2      	ldr	r2, [r6, #8]
 8001b86:	6830      	ldr	r0, [r6, #0]
 8001b88:	4649      	mov	r1, r9
 8001b8a:	f001 f9d2 	bl	8002f32 <cmox_ModularBN_Mul>
 8001b8e:	6831      	ldr	r1, [r6, #0]
 8001b90:	6a20      	ldr	r0, [r4, #32]
 8001b92:	9000      	str	r0, [sp, #0]
 8001b94:	4623      	mov	r3, r4
 8001b96:	460a      	mov	r2, r1
 8001b98:	4640      	mov	r0, r8
 8001b9a:	f001 f9ca 	bl	8002f32 <cmox_ModularBN_Mul>
 8001b9e:	6a20      	ldr	r0, [r4, #32]
 8001ba0:	9000      	str	r0, [sp, #0]
 8001ba2:	6872      	ldr	r2, [r6, #4]
 8001ba4:	68f1      	ldr	r1, [r6, #12]
 8001ba6:	4623      	mov	r3, r4
 8001ba8:	4648      	mov	r0, r9
 8001baa:	f001 f9c2 	bl	8002f32 <cmox_ModularBN_Mul>
 8001bae:	68f1      	ldr	r1, [r6, #12]
 8001bb0:	6a20      	ldr	r0, [r4, #32]
 8001bb2:	9000      	str	r0, [sp, #0]
 8001bb4:	4623      	mov	r3, r4
 8001bb6:	460a      	mov	r2, r1
 8001bb8:	4640      	mov	r0, r8
 8001bba:	f001 f9ba 	bl	8002f32 <cmox_ModularBN_Mul>
 8001bbe:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}

08001bc2 <cmox_ECC_EDW_DblPoint_Ext_a_1>:
 8001bc2:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	4698      	mov	r8, r3
 8001bca:	6960      	ldr	r0, [r4, #20]
 8001bcc:	6807      	ldr	r7, [r0, #0]
 8001bce:	6843      	ldr	r3, [r0, #4]
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	460d      	mov	r5, r1
 8001bd4:	4616      	mov	r6, r2
 8001bd6:	463a      	mov	r2, r7
 8001bd8:	6831      	ldr	r1, [r6, #0]
 8001bda:	4640      	mov	r0, r8
 8001bdc:	f003 f84a 	bl	8004c74 <cmox_bn_mux>
 8001be0:	4681      	mov	r9, r0
 8001be2:	6871      	ldr	r1, [r6, #4]
 8001be4:	463a      	mov	r2, r7
 8001be6:	4640      	mov	r0, r8
 8001be8:	f003 f844 	bl	8004c74 <cmox_bn_mux>
 8001bec:	4682      	mov	sl, r0
 8001bee:	68b1      	ldr	r1, [r6, #8]
 8001bf0:	463a      	mov	r2, r7
 8001bf2:	4640      	mov	r0, r8
 8001bf4:	f003 f83e 	bl	8004c74 <cmox_bn_mux>
 8001bf8:	4683      	mov	fp, r0
 8001bfa:	68f1      	ldr	r1, [r6, #12]
 8001bfc:	463a      	mov	r2, r7
 8001bfe:	4640      	mov	r0, r8
 8001c00:	f003 f838 	bl	8004c74 <cmox_bn_mux>
 8001c04:	4606      	mov	r6, r0
 8001c06:	6a23      	ldr	r3, [r4, #32]
 8001c08:	6828      	ldr	r0, [r5, #0]
 8001c0a:	4622      	mov	r2, r4
 8001c0c:	4639      	mov	r1, r7
 8001c0e:	f001 f9b3 	bl	8002f78 <cmox_ModularBN_Sqr>
 8001c12:	6a23      	ldr	r3, [r4, #32]
 8001c14:	6868      	ldr	r0, [r5, #4]
 8001c16:	4622      	mov	r2, r4
 8001c18:	4631      	mov	r1, r6
 8001c1a:	f001 f9ad 	bl	8002f78 <cmox_ModularBN_Sqr>
 8001c1e:	6a23      	ldr	r3, [r4, #32]
 8001c20:	68a8      	ldr	r0, [r5, #8]
 8001c22:	4622      	mov	r2, r4
 8001c24:	4659      	mov	r1, fp
 8001c26:	f001 f9a7 	bl	8002f78 <cmox_ModularBN_Sqr>
 8001c2a:	69a0      	ldr	r0, [r4, #24]
 8001c2c:	6801      	ldr	r1, [r0, #0]
 8001c2e:	6809      	ldr	r1, [r1, #0]
 8001c30:	465a      	mov	r2, fp
 8001c32:	4658      	mov	r0, fp
 8001c34:	f001 f8ad 	bl	8002d92 <cmox_FieldBN_Mul2>
 8001c38:	69a0      	ldr	r0, [r4, #24]
 8001c3a:	6801      	ldr	r1, [r0, #0]
 8001c3c:	680a      	ldr	r2, [r1, #0]
 8001c3e:	6869      	ldr	r1, [r5, #4]
 8001c40:	6828      	ldr	r0, [r5, #0]
 8001c42:	464b      	mov	r3, r9
 8001c44:	f000 fef0 	bl	8002a28 <cmox_ModAddBN>
 8001c48:	6a23      	ldr	r3, [r4, #32]
 8001c4a:	4622      	mov	r2, r4
 8001c4c:	4649      	mov	r1, r9
 8001c4e:	4648      	mov	r0, r9
 8001c50:	f001 f992 	bl	8002f78 <cmox_ModularBN_Sqr>
 8001c54:	69a0      	ldr	r0, [r4, #24]
 8001c56:	6801      	ldr	r1, [r0, #0]
 8001c58:	680a      	ldr	r2, [r1, #0]
 8001c5a:	464b      	mov	r3, r9
 8001c5c:	4639      	mov	r1, r7
 8001c5e:	4648      	mov	r0, r9
 8001c60:	f000 ff73 	bl	8002b4a <cmox_ModSubBN>
 8001c64:	69a0      	ldr	r0, [r4, #24]
 8001c66:	6803      	ldr	r3, [r0, #0]
 8001c68:	6818      	ldr	r0, [r3, #0]
 8001c6a:	4652      	mov	r2, sl
 8001c6c:	4639      	mov	r1, r7
 8001c6e:	f000 ffeb 	bl	8002c48 <cmox_SubBN>
 8001c72:	69a0      	ldr	r0, [r4, #24]
 8001c74:	6801      	ldr	r1, [r0, #0]
 8001c76:	680a      	ldr	r2, [r1, #0]
 8001c78:	463b      	mov	r3, r7
 8001c7a:	4631      	mov	r1, r6
 8001c7c:	4648      	mov	r0, r9
 8001c7e:	f000 ff64 	bl	8002b4a <cmox_ModSubBN>
 8001c82:	69a0      	ldr	r0, [r4, #24]
 8001c84:	6801      	ldr	r1, [r0, #0]
 8001c86:	680a      	ldr	r2, [r1, #0]
 8001c88:	9b01      	ldr	r3, [sp, #4]
 8001c8a:	4631      	mov	r1, r6
 8001c8c:	4650      	mov	r0, sl
 8001c8e:	f000 fecb 	bl	8002a28 <cmox_ModAddBN>
 8001c92:	69a0      	ldr	r0, [r4, #24]
 8001c94:	6801      	ldr	r1, [r0, #0]
 8001c96:	680a      	ldr	r2, [r1, #0]
 8001c98:	4633      	mov	r3, r6
 8001c9a:	4631      	mov	r1, r6
 8001c9c:	4650      	mov	r0, sl
 8001c9e:	f000 ff54 	bl	8002b4a <cmox_ModSubBN>
 8001ca2:	69a0      	ldr	r0, [r4, #24]
 8001ca4:	6801      	ldr	r1, [r0, #0]
 8001ca6:	680a      	ldr	r2, [r1, #0]
 8001ca8:	9801      	ldr	r0, [sp, #4]
 8001caa:	4653      	mov	r3, sl
 8001cac:	4659      	mov	r1, fp
 8001cae:	f000 ff4c 	bl	8002b4a <cmox_ModSubBN>
 8001cb2:	6a20      	ldr	r0, [r4, #32]
 8001cb4:	9901      	ldr	r1, [sp, #4]
 8001cb6:	9000      	str	r0, [sp, #0]
 8001cb8:	4623      	mov	r3, r4
 8001cba:	465a      	mov	r2, fp
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f001 f938 	bl	8002f32 <cmox_ModularBN_Mul>
 8001cc2:	6a20      	ldr	r0, [r4, #32]
 8001cc4:	9000      	str	r0, [sp, #0]
 8001cc6:	4623      	mov	r3, r4
 8001cc8:	464a      	mov	r2, r9
 8001cca:	4651      	mov	r1, sl
 8001ccc:	4638      	mov	r0, r7
 8001cce:	f001 f930 	bl	8002f32 <cmox_ModularBN_Mul>
 8001cd2:	6a20      	ldr	r0, [r4, #32]
 8001cd4:	9000      	str	r0, [sp, #0]
 8001cd6:	4623      	mov	r3, r4
 8001cd8:	9801      	ldr	r0, [sp, #4]
 8001cda:	4652      	mov	r2, sl
 8001cdc:	4631      	mov	r1, r6
 8001cde:	f001 f928 	bl	8002f32 <cmox_ModularBN_Mul>
 8001ce2:	6a20      	ldr	r0, [r4, #32]
 8001ce4:	9000      	str	r0, [sp, #0]
 8001ce6:	4623      	mov	r3, r4
 8001ce8:	4632      	mov	r2, r6
 8001cea:	4631      	mov	r1, r6
 8001cec:	4638      	mov	r0, r7
 8001cee:	f001 f920 	bl	8002f32 <cmox_ModularBN_Mul>
 8001cf2:	e8bd 8ff7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001cf6 <cmox_ECC_MONTY_Ladder_XzAff>:
 8001cf6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	4616      	mov	r6, r2
 8001cfe:	6960      	ldr	r0, [r4, #20]
 8001d00:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8001d04:	f8d0 8000 	ldr.w	r8, [r0]
 8001d08:	69a0      	ldr	r0, [r4, #24]
 8001d0a:	6800      	ldr	r0, [r0, #0]
 8001d0c:	6802      	ldr	r2, [r0, #0]
 8001d0e:	460d      	mov	r5, r1
 8001d10:	461f      	mov	r7, r3
 8001d12:	68b9      	ldr	r1, [r7, #8]
 8001d14:	6838      	ldr	r0, [r7, #0]
 8001d16:	4643      	mov	r3, r8
 8001d18:	f000 fe86 	bl	8002a28 <cmox_ModAddBN>
 8001d1c:	69a0      	ldr	r0, [r4, #24]
 8001d1e:	6801      	ldr	r1, [r0, #0]
 8001d20:	680a      	ldr	r2, [r1, #0]
 8001d22:	68b9      	ldr	r1, [r7, #8]
 8001d24:	6838      	ldr	r0, [r7, #0]
 8001d26:	464b      	mov	r3, r9
 8001d28:	f000 ff0f 	bl	8002b4a <cmox_ModSubBN>
 8001d2c:	69a0      	ldr	r0, [r4, #24]
 8001d2e:	6801      	ldr	r1, [r0, #0]
 8001d30:	680a      	ldr	r2, [r1, #0]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	68b1      	ldr	r1, [r6, #8]
 8001d36:	6830      	ldr	r0, [r6, #0]
 8001d38:	f000 fe76 	bl	8002a28 <cmox_ModAddBN>
 8001d3c:	69a0      	ldr	r0, [r4, #24]
 8001d3e:	6801      	ldr	r1, [r0, #0]
 8001d40:	680a      	ldr	r2, [r1, #0]
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	68b1      	ldr	r1, [r6, #8]
 8001d46:	6830      	ldr	r0, [r6, #0]
 8001d48:	f000 feff 	bl	8002b4a <cmox_ModSubBN>
 8001d4c:	68b8      	ldr	r0, [r7, #8]
 8001d4e:	6a21      	ldr	r1, [r4, #32]
 8001d50:	9100      	str	r1, [sp, #0]
 8001d52:	4623      	mov	r3, r4
 8001d54:	4602      	mov	r2, r0
 8001d56:	4641      	mov	r1, r8
 8001d58:	f001 f8eb 	bl	8002f32 <cmox_ModularBN_Mul>
 8001d5c:	6a23      	ldr	r3, [r4, #32]
 8001d5e:	4622      	mov	r2, r4
 8001d60:	4641      	mov	r1, r8
 8001d62:	4640      	mov	r0, r8
 8001d64:	f001 f908 	bl	8002f78 <cmox_ModularBN_Sqr>
 8001d68:	6838      	ldr	r0, [r7, #0]
 8001d6a:	6a21      	ldr	r1, [r4, #32]
 8001d6c:	9100      	str	r1, [sp, #0]
 8001d6e:	4623      	mov	r3, r4
 8001d70:	4602      	mov	r2, r0
 8001d72:	4649      	mov	r1, r9
 8001d74:	f001 f8dd 	bl	8002f32 <cmox_ModularBN_Mul>
 8001d78:	6a23      	ldr	r3, [r4, #32]
 8001d7a:	4622      	mov	r2, r4
 8001d7c:	4649      	mov	r1, r9
 8001d7e:	4648      	mov	r0, r9
 8001d80:	f001 f8fa 	bl	8002f78 <cmox_ModularBN_Sqr>
 8001d84:	69a0      	ldr	r0, [r4, #24]
 8001d86:	6801      	ldr	r1, [r0, #0]
 8001d88:	680a      	ldr	r2, [r1, #0]
 8001d8a:	6833      	ldr	r3, [r6, #0]
 8001d8c:	6839      	ldr	r1, [r7, #0]
 8001d8e:	68b8      	ldr	r0, [r7, #8]
 8001d90:	f000 fe4a 	bl	8002a28 <cmox_ModAddBN>
 8001d94:	69a1      	ldr	r1, [r4, #24]
 8001d96:	680a      	ldr	r2, [r1, #0]
 8001d98:	68b8      	ldr	r0, [r7, #8]
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	6839      	ldr	r1, [r7, #0]
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f000 fed3 	bl	8002b4a <cmox_ModSubBN>
 8001da4:	6830      	ldr	r0, [r6, #0]
 8001da6:	6a23      	ldr	r3, [r4, #32]
 8001da8:	4622      	mov	r2, r4
 8001daa:	4601      	mov	r1, r0
 8001dac:	f001 f8e4 	bl	8002f78 <cmox_ModularBN_Sqr>
 8001db0:	68b8      	ldr	r0, [r7, #8]
 8001db2:	6a23      	ldr	r3, [r4, #32]
 8001db4:	4622      	mov	r2, r4
 8001db6:	4601      	mov	r1, r0
 8001db8:	f001 f8de 	bl	8002f78 <cmox_ModularBN_Sqr>
 8001dbc:	6a20      	ldr	r0, [r4, #32]
 8001dbe:	9000      	str	r0, [sp, #0]
 8001dc0:	68b2      	ldr	r2, [r6, #8]
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	6828      	ldr	r0, [r5, #0]
 8001dc6:	4623      	mov	r3, r4
 8001dc8:	f001 f8b3 	bl	8002f32 <cmox_ModularBN_Mul>
 8001dcc:	6a20      	ldr	r0, [r4, #32]
 8001dce:	9000      	str	r0, [sp, #0]
 8001dd0:	4623      	mov	r3, r4
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	4649      	mov	r1, r9
 8001dd6:	4640      	mov	r0, r8
 8001dd8:	f001 f8ab 	bl	8002f32 <cmox_ModularBN_Mul>
 8001ddc:	69a0      	ldr	r0, [r4, #24]
 8001dde:	6801      	ldr	r1, [r0, #0]
 8001de0:	680a      	ldr	r2, [r1, #0]
 8001de2:	464b      	mov	r3, r9
 8001de4:	4649      	mov	r1, r9
 8001de6:	4640      	mov	r0, r8
 8001de8:	f000 feaf 	bl	8002b4a <cmox_ModSubBN>
 8001dec:	6a20      	ldr	r0, [r4, #32]
 8001dee:	9000      	str	r0, [sp, #0]
 8001df0:	4623      	mov	r3, r4
 8001df2:	69a0      	ldr	r0, [r4, #24]
 8001df4:	6801      	ldr	r1, [r0, #0]
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	6909      	ldr	r1, [r1, #16]
 8001dfa:	4648      	mov	r0, r9
 8001dfc:	f001 f899 	bl	8002f32 <cmox_ModularBN_Mul>
 8001e00:	69a0      	ldr	r0, [r4, #24]
 8001e02:	6801      	ldr	r1, [r0, #0]
 8001e04:	680a      	ldr	r2, [r1, #0]
 8001e06:	68b9      	ldr	r1, [r7, #8]
 8001e08:	4643      	mov	r3, r8
 8001e0a:	4640      	mov	r0, r8
 8001e0c:	f000 fe0c 	bl	8002a28 <cmox_ModAddBN>
 8001e10:	6a20      	ldr	r0, [r4, #32]
 8001e12:	9000      	str	r0, [sp, #0]
 8001e14:	4623      	mov	r3, r4
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	4649      	mov	r1, r9
 8001e1a:	4640      	mov	r0, r8
 8001e1c:	f001 f889 	bl	8002f32 <cmox_ModularBN_Mul>
 8001e20:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}

08001e24 <cmox_ECC_CompleteMADD>:
 8001e24:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001e26:	4606      	mov	r6, r0
 8001e28:	460c      	mov	r4, r1
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	4617      	mov	r7, r2
 8001e2e:	9001      	str	r0, [sp, #4]
 8001e30:	461d      	mov	r5, r3
 8001e32:	6922      	ldr	r2, [r4, #16]
 8001e34:	612a      	str	r2, [r5, #16]
 8001e36:	2100      	movs	r1, #0
 8001e38:	7c20      	ldrb	r0, [r4, #16]
 8001e3a:	f000 0001 	and.w	r0, r0, #1
 8001e3e:	f001 f8e8 	bl	8003012 <cmox_mathUtils_neq>
 8001e42:	2801      	cmp	r0, #1
 8001e44:	d107      	bne.n	8001e56 <cmox_ECC_CompleteMADD+0x32>
 8001e46:	7c38      	ldrb	r0, [r7, #16]
 8001e48:	2100      	movs	r1, #0
 8001e4a:	f000 0001 	and.w	r0, r0, #1
 8001e4e:	f001 f8e0 	bl	8003012 <cmox_mathUtils_neq>
 8001e52:	2801      	cmp	r0, #1
 8001e54:	d036      	beq.n	8001ec4 <cmox_ECC_CompleteMADD+0xa0>
 8001e56:	7c20      	ldrb	r0, [r4, #16]
 8001e58:	2100      	movs	r1, #0
 8001e5a:	f000 0001 	and.w	r0, r0, #1
 8001e5e:	f001 f8d8 	bl	8003012 <cmox_mathUtils_neq>
 8001e62:	2801      	cmp	r0, #1
 8001e64:	d102      	bne.n	8001e6c <cmox_ECC_CompleteMADD+0x48>
 8001e66:	462a      	mov	r2, r5
 8001e68:	4639      	mov	r1, r7
 8001e6a:	e009      	b.n	8001e80 <cmox_ECC_CompleteMADD+0x5c>
 8001e6c:	7c38      	ldrb	r0, [r7, #16]
 8001e6e:	2100      	movs	r1, #0
 8001e70:	f000 0001 	and.w	r0, r0, #1
 8001e74:	f001 f8cd 	bl	8003012 <cmox_mathUtils_neq>
 8001e78:	2801      	cmp	r0, #1
 8001e7a:	d104      	bne.n	8001e86 <cmox_ECC_CompleteMADD+0x62>
 8001e7c:	462a      	mov	r2, r5
 8001e7e:	4621      	mov	r1, r4
 8001e80:	f7fe faac 	bl	80003dc <cmox_ECC_CondCopyPoint>
 8001e84:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001e86:	463a      	mov	r2, r7
 8001e88:	a801      	add	r0, sp, #4
 8001e8a:	9000      	str	r0, [sp, #0]
 8001e8c:	462b      	mov	r3, r5
 8001e8e:	69b7      	ldr	r7, [r6, #24]
 8001e90:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8001e94:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8001e98:	4621      	mov	r1, r4
 8001e9a:	4630      	mov	r0, r6
 8001e9c:	47b8      	blx	r7
 8001e9e:	9801      	ldr	r0, [sp, #4]
 8001ea0:	07c1      	lsls	r1, r0, #31
 8001ea2:	d513      	bpl.n	8001ecc <cmox_ECC_CompleteMADD+0xa8>
 8001ea4:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001ea8:	b160      	cbz	r0, 8001ec4 <cmox_ECC_CompleteMADD+0xa0>
 8001eaa:	4630      	mov	r0, r6
 8001eac:	69b6      	ldr	r6, [r6, #24]
 8001eae:	6877      	ldr	r7, [r6, #4]
 8001eb0:	f8d7 c000 	ldr.w	ip, [r7]
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	462a      	mov	r2, r5
 8001eb8:	4621      	mov	r1, r4
 8001eba:	47e0      	blx	ip
 8001ebc:	6920      	ldr	r0, [r4, #16]
 8001ebe:	0840      	lsrs	r0, r0, #1
 8001ec0:	0040      	lsls	r0, r0, #1
 8001ec2:	e002      	b.n	8001eca <cmox_ECC_CompleteMADD+0xa6>
 8001ec4:	6928      	ldr	r0, [r5, #16]
 8001ec6:	f040 0001 	orr.w	r0, r0, #1
 8001eca:	6128      	str	r0, [r5, #16]
 8001ecc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001ece <cmox_ECC_CompleteADD>:
 8001ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed0:	460f      	mov	r7, r1
 8001ed2:	4606      	mov	r6, r0
 8001ed4:	461d      	mov	r5, r3
 8001ed6:	6938      	ldr	r0, [r7, #16]
 8001ed8:	6128      	str	r0, [r5, #16]
 8001eda:	4614      	mov	r4, r2
 8001edc:	7c38      	ldrb	r0, [r7, #16]
 8001ede:	2100      	movs	r1, #0
 8001ee0:	f000 0001 	and.w	r0, r0, #1
 8001ee4:	f001 f895 	bl	8003012 <cmox_mathUtils_neq>
 8001ee8:	2801      	cmp	r0, #1
 8001eea:	d107      	bne.n	8001efc <cmox_ECC_CompleteADD+0x2e>
 8001eec:	7c20      	ldrb	r0, [r4, #16]
 8001eee:	2100      	movs	r1, #0
 8001ef0:	f000 0001 	and.w	r0, r0, #1
 8001ef4:	f001 f88d 	bl	8003012 <cmox_mathUtils_neq>
 8001ef8:	2801      	cmp	r0, #1
 8001efa:	d03b      	beq.n	8001f74 <cmox_ECC_CompleteADD+0xa6>
 8001efc:	7c38      	ldrb	r0, [r7, #16]
 8001efe:	2100      	movs	r1, #0
 8001f00:	f000 0001 	and.w	r0, r0, #1
 8001f04:	f001 f885 	bl	8003012 <cmox_mathUtils_neq>
 8001f08:	2801      	cmp	r0, #1
 8001f0a:	d102      	bne.n	8001f12 <cmox_ECC_CompleteADD+0x44>
 8001f0c:	462a      	mov	r2, r5
 8001f0e:	4621      	mov	r1, r4
 8001f10:	e009      	b.n	8001f26 <cmox_ECC_CompleteADD+0x58>
 8001f12:	7c20      	ldrb	r0, [r4, #16]
 8001f14:	2100      	movs	r1, #0
 8001f16:	f000 0001 	and.w	r0, r0, #1
 8001f1a:	f001 f87a 	bl	8003012 <cmox_mathUtils_neq>
 8001f1e:	2801      	cmp	r0, #1
 8001f20:	d105      	bne.n	8001f2e <cmox_ECC_CompleteADD+0x60>
 8001f22:	462a      	mov	r2, r5
 8001f24:	4639      	mov	r1, r7
 8001f26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001f2a:	f7fe ba57 	b.w	80003dc <cmox_ECC_CondCopyPoint>
 8001f2e:	4639      	mov	r1, r7
 8001f30:	69b7      	ldr	r7, [r6, #24]
 8001f32:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8001f36:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8001f3a:	462b      	mov	r3, r5
 8001f3c:	4622      	mov	r2, r4
 8001f3e:	4630      	mov	r0, r6
 8001f40:	47b8      	blx	r7
 8001f42:	68a8      	ldr	r0, [r5, #8]
 8001f44:	2100      	movs	r1, #0
 8001f46:	f002 fedb 	bl	8004d00 <cmox_bn_cmpUint>
 8001f4a:	2801      	cmp	r0, #1
 8001f4c:	d116      	bne.n	8001f7c <cmox_ECC_CompleteADD+0xae>
 8001f4e:	6828      	ldr	r0, [r5, #0]
 8001f50:	2100      	movs	r1, #0
 8001f52:	f002 fed5 	bl	8004d00 <cmox_bn_cmpUint>
 8001f56:	2801      	cmp	r0, #1
 8001f58:	d10c      	bne.n	8001f74 <cmox_ECC_CompleteADD+0xa6>
 8001f5a:	4630      	mov	r0, r6
 8001f5c:	69b6      	ldr	r6, [r6, #24]
 8001f5e:	6877      	ldr	r7, [r6, #4]
 8001f60:	f8d7 c000 	ldr.w	ip, [r7]
 8001f64:	2301      	movs	r3, #1
 8001f66:	462a      	mov	r2, r5
 8001f68:	4621      	mov	r1, r4
 8001f6a:	47e0      	blx	ip
 8001f6c:	6920      	ldr	r0, [r4, #16]
 8001f6e:	0840      	lsrs	r0, r0, #1
 8001f70:	0040      	lsls	r0, r0, #1
 8001f72:	e002      	b.n	8001f7a <cmox_ECC_CompleteADD+0xac>
 8001f74:	6928      	ldr	r0, [r5, #16]
 8001f76:	f040 0001 	orr.w	r0, r0, #1
 8001f7a:	6128      	str	r0, [r5, #16]
 8001f7c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001f7e <cmox_ECC_CompleteDBL>:
 8001f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f80:	460e      	mov	r6, r1
 8001f82:	4605      	mov	r5, r0
 8001f84:	4614      	mov	r4, r2
 8001f86:	6930      	ldr	r0, [r6, #16]
 8001f88:	6120      	str	r0, [r4, #16]
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	7c30      	ldrb	r0, [r6, #16]
 8001f8e:	f000 0001 	and.w	r0, r0, #1
 8001f92:	f001 f83e 	bl	8003012 <cmox_mathUtils_neq>
 8001f96:	2801      	cmp	r0, #1
 8001f98:	d103      	bne.n	8001fa2 <cmox_ECC_CompleteDBL+0x24>
 8001f9a:	6920      	ldr	r0, [r4, #16]
 8001f9c:	f040 0001 	orr.w	r0, r0, #1
 8001fa0:	e00a      	b.n	8001fb8 <cmox_ECC_CompleteDBL+0x3a>
 8001fa2:	4628      	mov	r0, r5
 8001fa4:	69ad      	ldr	r5, [r5, #24]
 8001fa6:	4631      	mov	r1, r6
 8001fa8:	686e      	ldr	r6, [r5, #4]
 8001faa:	6837      	ldr	r7, [r6, #0]
 8001fac:	2301      	movs	r3, #1
 8001fae:	4622      	mov	r2, r4
 8001fb0:	47b8      	blx	r7
 8001fb2:	6920      	ldr	r0, [r4, #16]
 8001fb4:	0840      	lsrs	r0, r0, #1
 8001fb6:	0040      	lsls	r0, r0, #1
 8001fb8:	6120      	str	r0, [r4, #16]
 8001fba:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001fbc:	0101b004 	.word	0x0101b004
 8001fc0:	45011700 	.word	0x45011700

08001fc4 <cmox_ecdh>:
 8001fc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fc8:	b08e      	sub	sp, #56	@ 0x38
 8001fca:	460c      	mov	r4, r1
 8001fcc:	2500      	movs	r5, #0
 8001fce:	9502      	str	r5, [sp, #8]
 8001fd0:	9500      	str	r5, [sp, #0]
 8001fd2:	9501      	str	r5, [sp, #4]
 8001fd4:	2c00      	cmp	r4, #0
 8001fd6:	bf1c      	itt	ne
 8001fd8:	9204      	strne	r2, [sp, #16]
 8001fda:	2a00      	cmpne	r2, #0
 8001fdc:	f44f 28c0 	mov.w	r8, #393216	@ 0x60000
 8001fe0:	d03d      	beq.n	800205e <cmox_ecdh+0x9a>
 8001fe2:	9303      	str	r3, [sp, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bf1c      	itt	ne
 8001fe8:	9f18      	ldrne	r7, [sp, #96]	@ 0x60
 8001fea:	2f00      	cmpne	r7, #0
 8001fec:	d037      	beq.n	800205e <cmox_ecdh+0x9a>
 8001fee:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8001ff2:	f1ba 0f00 	cmp.w	sl, #0
 8001ff6:	bf1c      	itt	ne
 8001ff8:	f8dd 9068 	ldrne.w	r9, [sp, #104]	@ 0x68
 8001ffc:	f1b9 0f00 	cmpne.w	r9, #0
 8002000:	d02d      	beq.n	800205e <cmox_ecdh+0x9a>
 8002002:	0005      	movs	r5, r0
 8002004:	d02b      	beq.n	800205e <cmox_ecdh+0x9a>
 8002006:	6968      	ldr	r0, [r5, #20]
 8002008:	4965      	ldr	r1, [pc, #404]	@ (80021a0 <cmox_ecdh+0x1dc>)
 800200a:	4288      	cmp	r0, r1
 800200c:	d127      	bne.n	800205e <cmox_ecdh+0x9a>
 800200e:	6928      	ldr	r0, [r5, #16]
 8002010:	69c1      	ldr	r1, [r0, #28]
 8002012:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002014:	4201      	tst	r1, r0
 8002016:	bf08      	it	eq
 8002018:	f8df 8188 	ldreq.w	r8, [pc, #392]	@ 80021a4 <cmox_ecdh+0x1e0>
 800201c:	d021      	beq.n	8002062 <cmox_ecdh+0x9e>
 800201e:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8002022:	0701      	lsls	r1, r0, #28
 8002024:	bf58      	it	pl
 8002026:	f8df 8180 	ldrpl.w	r8, [pc, #384]	@ 80021a8 <cmox_ecdh+0x1e4>
 800202a:	d51a      	bpl.n	8002062 <cmox_ecdh+0x9e>
 800202c:	6821      	ldr	r1, [r4, #0]
 800202e:	6808      	ldr	r0, [r1, #0]
 8002030:	f002 fe7c 	bl	8004d2c <cmox_bn_countBits>
 8002034:	1dc6      	adds	r6, r0, #7
 8002036:	6820      	ldr	r0, [r4, #0]
 8002038:	6880      	ldr	r0, [r0, #8]
 800203a:	f002 fe77 	bl	8004d2c <cmox_bn_countBits>
 800203e:	6861      	ldr	r1, [r4, #4]
 8002040:	69c9      	ldr	r1, [r1, #28]
 8002042:	08f6      	lsrs	r6, r6, #3
 8002044:	1dc0      	adds	r0, r0, #7
 8002046:	2903      	cmp	r1, #3
 8002048:	d101      	bne.n	800204e <cmox_ecdh+0x8a>
 800204a:	45b2      	cmp	sl, r6
 800204c:	d107      	bne.n	800205e <cmox_ecdh+0x9a>
 800204e:	2903      	cmp	r1, #3
 8002050:	bf12      	itee	ne
 8002052:	ebba 0f46 	cmpne.w	sl, r6, lsl #1
 8002056:	9903      	ldreq	r1, [sp, #12]
 8002058:	ebb1 0fd0 	cmpeq.w	r1, r0, lsr #3
 800205c:	d002      	beq.n	8002064 <cmox_ecdh+0xa0>
 800205e:	f8df 814c 	ldr.w	r8, [pc, #332]	@ 80021ac <cmox_ecdh+0x1e8>
 8002062:	e099      	b.n	8002198 <cmox_ecdh+0x1d4>
 8002064:	6820      	ldr	r0, [r4, #0]
 8002066:	69c1      	ldr	r1, [r0, #28]
 8002068:	692b      	ldr	r3, [r5, #16]
 800206a:	2902      	cmp	r1, #2
 800206c:	bf07      	ittee	eq
 800206e:	f8df b140 	ldreq.w	fp, [pc, #320]	@ 80021b0 <cmox_ecdh+0x1ec>
 8002072:	f8df a140 	ldreq.w	sl, [pc, #320]	@ 80021b4 <cmox_ecdh+0x1f0>
 8002076:	f8df b140 	ldrne.w	fp, [pc, #320]	@ 80021b8 <cmox_ecdh+0x1f4>
 800207a:	f8df a140 	ldrne.w	sl, [pc, #320]	@ 80021bc <cmox_ecdh+0x1f8>
 800207e:	462a      	mov	r2, r5
 8002080:	4621      	mov	r1, r4
 8002082:	a805      	add	r0, sp, #20
 8002084:	f7fe f8fc 	bl	8000280 <cmox_ECC_InitCurve>
 8002088:	a805      	add	r0, sp, #20
 800208a:	f7fe f907 	bl	800029c <cmox_ECC_InitCurveModDomainP>
 800208e:	4c4c      	ldr	r4, [pc, #304]	@ (80021c0 <cmox_ecdh+0x1fc>)
 8002090:	b108      	cbz	r0, 8002096 <cmox_ecdh+0xd2>
 8002092:	46a0      	mov	r8, r4
 8002094:	e080      	b.n	8002198 <cmox_ecdh+0x1d4>
 8002096:	a901      	add	r1, sp, #4
 8002098:	a805      	add	r0, sp, #20
 800209a:	f7fe f912 	bl	80002c2 <cmox_ECC_AllocPoint>
 800209e:	b108      	cbz	r0, 80020a4 <cmox_ecdh+0xe0>
 80020a0:	46a0      	mov	r8, r4
 80020a2:	e076      	b.n	8002192 <cmox_ecdh+0x1ce>
 80020a4:	4669      	mov	r1, sp
 80020a6:	a805      	add	r0, sp, #20
 80020a8:	f7fe f90b 	bl	80002c2 <cmox_ECC_AllocPoint>
 80020ac:	b108      	cbz	r0, 80020b2 <cmox_ecdh+0xee>
 80020ae:	46a0      	mov	r8, r4
 80020b0:	e06b      	b.n	800218a <cmox_ecdh+0x1c6>
 80020b2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80020b4:	6801      	ldr	r1, [r0, #0]
 80020b6:	688a      	ldr	r2, [r1, #8]
 80020b8:	6812      	ldr	r2, [r2, #0]
 80020ba:	a902      	add	r1, sp, #8
 80020bc:	4628      	mov	r0, r5
 80020be:	f002 fd3d 	bl	8004b3c <cmox_bn_alloc>
 80020c2:	b108      	cbz	r0, 80020c8 <cmox_ecdh+0x104>
 80020c4:	46a0      	mov	r8, r4
 80020c6:	e05c      	b.n	8002182 <cmox_ecdh+0x1be>
 80020c8:	9a02      	ldr	r2, [sp, #8]
 80020ca:	9903      	ldr	r1, [sp, #12]
 80020cc:	9804      	ldr	r0, [sp, #16]
 80020ce:	47d8      	blx	fp
 80020d0:	9800      	ldr	r0, [sp, #0]
 80020d2:	6802      	ldr	r2, [r0, #0]
 80020d4:	4631      	mov	r1, r6
 80020d6:	4638      	mov	r0, r7
 80020d8:	47d8      	blx	fp
 80020da:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80020dc:	6841      	ldr	r1, [r0, #4]
 80020de:	69c8      	ldr	r0, [r1, #28]
 80020e0:	2803      	cmp	r0, #3
 80020e2:	d004      	beq.n	80020ee <cmox_ecdh+0x12a>
 80020e4:	9800      	ldr	r0, [sp, #0]
 80020e6:	6842      	ldr	r2, [r0, #4]
 80020e8:	4631      	mov	r1, r6
 80020ea:	19b8      	adds	r0, r7, r6
 80020ec:	47d8      	blx	fp
 80020ee:	9800      	ldr	r0, [sp, #0]
 80020f0:	6880      	ldr	r0, [r0, #8]
 80020f2:	2101      	movs	r1, #1
 80020f4:	f002 fd59 	bl	8004baa <cmox_bn_init>
 80020f8:	9800      	ldr	r0, [sp, #0]
 80020fa:	6901      	ldr	r1, [r0, #16]
 80020fc:	f041 0102 	orr.w	r1, r1, #2
 8002100:	6101      	str	r1, [r0, #16]
 8002102:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8002104:	6801      	ldr	r1, [r0, #0]
 8002106:	69ca      	ldr	r2, [r1, #28]
 8002108:	2a02      	cmp	r2, #2
 800210a:	d104      	bne.n	8002116 <cmox_ecdh+0x152>
 800210c:	9a00      	ldr	r2, [sp, #0]
 800210e:	9902      	ldr	r1, [sp, #8]
 8002110:	a805      	add	r0, sp, #20
 8002112:	f7fe ff00 	bl	8000f16 <cmox_ECC_MONTY_Clamping>
 8002116:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8002118:	69bf      	ldr	r7, [r7, #24]
 800211a:	9b01      	ldr	r3, [sp, #4]
 800211c:	9a00      	ldr	r2, [sp, #0]
 800211e:	9902      	ldr	r1, [sp, #8]
 8002120:	f8d7 b000 	ldr.w	fp, [r7]
 8002124:	a805      	add	r0, sp, #20
 8002126:	47d8      	blx	fp
 8002128:	b148      	cbz	r0, 800213e <cmox_ecdh+0x17a>
 800212a:	2804      	cmp	r0, #4
 800212c:	bf08      	it	eq
 800212e:	f8df 8094 	ldreq.w	r8, [pc, #148]	@ 80021c4 <cmox_ecdh+0x200>
 8002132:	d022      	beq.n	800217a <cmox_ecdh+0x1b6>
 8002134:	2801      	cmp	r0, #1
 8002136:	d107      	bne.n	8002148 <cmox_ecdh+0x184>
 8002138:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 80021ac <cmox_ecdh+0x1e8>
 800213c:	e01d      	b.n	800217a <cmox_ecdh+0x1b6>
 800213e:	9901      	ldr	r1, [sp, #4]
 8002140:	a805      	add	r0, sp, #20
 8002142:	f7fe fb71 	bl	8000828 <cmox_ECC_PointToAffine>
 8002146:	b108      	cbz	r0, 800214c <cmox_ecdh+0x188>
 8002148:	46a0      	mov	r8, r4
 800214a:	e016      	b.n	800217a <cmox_ecdh+0x1b6>
 800214c:	9801      	ldr	r0, [sp, #4]
 800214e:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 8002150:	6800      	ldr	r0, [r0, #0]
 8002152:	4632      	mov	r2, r6
 8002154:	4649      	mov	r1, r9
 8002156:	47d0      	blx	sl
 8002158:	b104      	cbz	r4, 800215c <cmox_ecdh+0x198>
 800215a:	6026      	str	r6, [r4, #0]
 800215c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800215e:	6841      	ldr	r1, [r0, #4]
 8002160:	69c8      	ldr	r0, [r1, #28]
 8002162:	2803      	cmp	r0, #3
 8002164:	d009      	beq.n	800217a <cmox_ecdh+0x1b6>
 8002166:	9801      	ldr	r0, [sp, #4]
 8002168:	6840      	ldr	r0, [r0, #4]
 800216a:	4632      	mov	r2, r6
 800216c:	eb09 0106 	add.w	r1, r9, r6
 8002170:	47d0      	blx	sl
 8002172:	b114      	cbz	r4, 800217a <cmox_ecdh+0x1b6>
 8002174:	6820      	ldr	r0, [r4, #0]
 8002176:	1836      	adds	r6, r6, r0
 8002178:	6026      	str	r6, [r4, #0]
 800217a:	a902      	add	r1, sp, #8
 800217c:	4628      	mov	r0, r5
 800217e:	f002 fce8 	bl	8004b52 <cmox_bn_free>
 8002182:	4669      	mov	r1, sp
 8002184:	a805      	add	r0, sp, #20
 8002186:	f7fe f8f8 	bl	800037a <cmox_ECC_FreePoint>
 800218a:	a901      	add	r1, sp, #4
 800218c:	a805      	add	r0, sp, #20
 800218e:	f7fe f8f4 	bl	800037a <cmox_ECC_FreePoint>
 8002192:	a805      	add	r0, sp, #20
 8002194:	f7fe f892 	bl	80002bc <cmox_ECC_DeInitCurveModDomain>
 8002198:	4640      	mov	r0, r8
 800219a:	b00f      	add	sp, #60	@ 0x3c
 800219c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021a0:	5e1caffe 	.word	0x5e1caffe
 80021a4:	0006000e 	.word	0x0006000e
 80021a8:	0006000f 	.word	0x0006000f
 80021ac:	00060003 	.word	0x00060003
 80021b0:	08004f39 	.word	0x08004f39
 80021b4:	08004fd1 	.word	0x08004fd1
 80021b8:	08004e3d 	.word	0x08004e3d
 80021bc:	08004ec3 	.word	0x08004ec3
 80021c0:	0006000c 	.word	0x0006000c
 80021c4:	00060008 	.word	0x00060008

080021c8 <cmox_ecdsa_keyGen>:
 80021c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021cc:	b08d      	sub	sp, #52	@ 0x34
 80021ce:	460c      	mov	r4, r1
 80021d0:	2100      	movs	r1, #0
 80021d2:	9100      	str	r1, [sp, #0]
 80021d4:	9102      	str	r1, [sp, #8]
 80021d6:	2c00      	cmp	r4, #0
 80021d8:	bf1c      	itt	ne
 80021da:	9203      	strne	r2, [sp, #12]
 80021dc:	2a00      	cmpne	r2, #0
 80021de:	469b      	mov	fp, r3
 80021e0:	f44f 2ac0 	mov.w	sl, #393216	@ 0x60000
 80021e4:	d00b      	beq.n	80021fe <cmox_ecdsa_keyGen+0x36>
 80021e6:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80021e8:	2900      	cmp	r1, #0
 80021ea:	bf1c      	itt	ne
 80021ec:	9d18      	ldrne	r5, [sp, #96]	@ 0x60
 80021ee:	2d00      	cmpne	r5, #0
 80021f0:	d005      	beq.n	80021fe <cmox_ecdsa_keyGen+0x36>
 80021f2:	9001      	str	r0, [sp, #4]
 80021f4:	b118      	cbz	r0, 80021fe <cmox_ecdsa_keyGen+0x36>
 80021f6:	6941      	ldr	r1, [r0, #20]
 80021f8:	4a56      	ldr	r2, [pc, #344]	@ (8002354 <cmox_ecdsa_keyGen+0x18c>)
 80021fa:	4291      	cmp	r1, r2
 80021fc:	d002      	beq.n	8002204 <cmox_ecdsa_keyGen+0x3c>
 80021fe:	f8df a158 	ldr.w	sl, [pc, #344]	@ 8002358 <cmox_ecdsa_keyGen+0x190>
 8002202:	e0a2      	b.n	800234a <cmox_ecdsa_keyGen+0x182>
 8002204:	6901      	ldr	r1, [r0, #16]
 8002206:	69c8      	ldr	r0, [r1, #28]
 8002208:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800220a:	4208      	tst	r0, r1
 800220c:	bf08      	it	eq
 800220e:	f8df a14c 	ldreq.w	sl, [pc, #332]	@ 800235c <cmox_ecdsa_keyGen+0x194>
 8002212:	d0f6      	beq.n	8002202 <cmox_ecdsa_keyGen+0x3a>
 8002214:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8002218:	07c1      	lsls	r1, r0, #31
 800221a:	bf58      	it	pl
 800221c:	f8df a140 	ldrpl.w	sl, [pc, #320]	@ 8002360 <cmox_ecdsa_keyGen+0x198>
 8002220:	d5ef      	bpl.n	8002202 <cmox_ecdsa_keyGen+0x3a>
 8002222:	6820      	ldr	r0, [r4, #0]
 8002224:	6880      	ldr	r0, [r0, #8]
 8002226:	6801      	ldr	r1, [r0, #0]
 8002228:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800222c:	f000 fefd 	bl	800302a <cmox_mathUtils_bitLength>
 8002230:	4680      	mov	r8, r0
 8002232:	6820      	ldr	r0, [r4, #0]
 8002234:	6881      	ldr	r1, [r0, #8]
 8002236:	680a      	ldr	r2, [r1, #0]
 8002238:	6800      	ldr	r0, [r0, #0]
 800223a:	1e52      	subs	r2, r2, #1
 800223c:	eb08 1942 	add.w	r9, r8, r2, lsl #5
 8002240:	f002 fd74 	bl	8004d2c <cmox_bn_countBits>
 8002244:	1dc6      	adds	r6, r0, #7
 8002246:	f109 0707 	add.w	r7, r9, #7
 800224a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800224c:	08f6      	lsrs	r6, r6, #3
 800224e:	08ff      	lsrs	r7, r7, #3
 8002250:	b100      	cbz	r0, 8002254 <cmox_ecdsa_keyGen+0x8c>
 8002252:	6007      	str	r7, [r0, #0]
 8002254:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8002256:	b108      	cbz	r0, 800225c <cmox_ecdsa_keyGen+0x94>
 8002258:	0071      	lsls	r1, r6, #1
 800225a:	6001      	str	r1, [r0, #0]
 800225c:	4658      	mov	r0, fp
 800225e:	00c0      	lsls	r0, r0, #3
 8002260:	f8df b100 	ldr.w	fp, [pc, #256]	@ 8002364 <cmox_ecdsa_keyGen+0x19c>
 8002264:	4548      	cmp	r0, r9
 8002266:	bf38      	it	cc
 8002268:	46da      	movcc	sl, fp
 800226a:	d36e      	bcc.n	800234a <cmox_ecdsa_keyGen+0x182>
 800226c:	9801      	ldr	r0, [sp, #4]
 800226e:	6903      	ldr	r3, [r0, #16]
 8002270:	4602      	mov	r2, r0
 8002272:	4621      	mov	r1, r4
 8002274:	a804      	add	r0, sp, #16
 8002276:	f7fe f803 	bl	8000280 <cmox_ECC_InitCurve>
 800227a:	a804      	add	r0, sp, #16
 800227c:	f7fe f80e 	bl	800029c <cmox_ECC_InitCurveModDomainP>
 8002280:	4c39      	ldr	r4, [pc, #228]	@ (8002368 <cmox_ecdsa_keyGen+0x1a0>)
 8002282:	b108      	cbz	r0, 8002288 <cmox_ecdsa_keyGen+0xc0>
 8002284:	46a2      	mov	sl, r4
 8002286:	e060      	b.n	800234a <cmox_ecdsa_keyGen+0x182>
 8002288:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800228a:	6801      	ldr	r1, [r0, #0]
 800228c:	688a      	ldr	r2, [r1, #8]
 800228e:	9801      	ldr	r0, [sp, #4]
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	4669      	mov	r1, sp
 8002294:	f002 fc52 	bl	8004b3c <cmox_bn_alloc>
 8002298:	b108      	cbz	r0, 800229e <cmox_ecdsa_keyGen+0xd6>
 800229a:	46a2      	mov	sl, r4
 800229c:	e052      	b.n	8002344 <cmox_ecdsa_keyGen+0x17c>
 800229e:	a902      	add	r1, sp, #8
 80022a0:	a804      	add	r0, sp, #16
 80022a2:	f7fe f80e 	bl	80002c2 <cmox_ECC_AllocPoint>
 80022a6:	b108      	cbz	r0, 80022ac <cmox_ecdsa_keyGen+0xe4>
 80022a8:	46a2      	mov	sl, r4
 80022aa:	e047      	b.n	800233c <cmox_ecdsa_keyGen+0x174>
 80022ac:	9a00      	ldr	r2, [sp, #0]
 80022ae:	9803      	ldr	r0, [sp, #12]
 80022b0:	4639      	mov	r1, r7
 80022b2:	f002 fdc3 	bl	8004e3c <cmox_bn_fromU8BE>
 80022b6:	9a00      	ldr	r2, [sp, #0]
 80022b8:	f1c8 0820 	rsb	r8, r8, #32
 80022bc:	f008 0107 	and.w	r1, r8, #7
 80022c0:	4610      	mov	r0, r2
 80022c2:	f000 fb86 	bl	80029d2 <cmox_RightShiftBN>
 80022c6:	9a00      	ldr	r2, [sp, #0]
 80022c8:	2102      	movs	r1, #2
 80022ca:	4610      	mov	r0, r2
 80022cc:	f000 fcf0 	bl	8002cb0 <cmox_AddBN_Int>
 80022d0:	b938      	cbnz	r0, 80022e2 <cmox_ecdsa_keyGen+0x11a>
 80022d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80022d4:	6801      	ldr	r1, [r0, #0]
 80022d6:	9800      	ldr	r0, [sp, #0]
 80022d8:	6889      	ldr	r1, [r1, #8]
 80022da:	f002 fcd0 	bl	8004c7e <cmox_bn_cmp>
 80022de:	2801      	cmp	r0, #1
 80022e0:	db01      	blt.n	80022e6 <cmox_ecdsa_keyGen+0x11e>
 80022e2:	46da      	mov	sl, fp
 80022e4:	e026      	b.n	8002334 <cmox_ecdsa_keyGen+0x16c>
 80022e6:	9a00      	ldr	r2, [sp, #0]
 80022e8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ec:	4610      	mov	r0, r2
 80022ee:	f000 fcdf 	bl	8002cb0 <cmox_AddBN_Int>
 80022f2:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80022f4:	9800      	ldr	r0, [sp, #0]
 80022f6:	463a      	mov	r2, r7
 80022f8:	f002 fde3 	bl	8004ec2 <cmox_bn_toU8BE>
 80022fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	9a02      	ldr	r2, [sp, #8]
 8002302:	9900      	ldr	r1, [sp, #0]
 8002304:	f8d3 c000 	ldr.w	ip, [r3]
 8002308:	a804      	add	r0, sp, #16
 800230a:	47e0      	blx	ip
 800230c:	b920      	cbnz	r0, 8002318 <cmox_ecdsa_keyGen+0x150>
 800230e:	9902      	ldr	r1, [sp, #8]
 8002310:	a804      	add	r0, sp, #16
 8002312:	f7fe fa89 	bl	8000828 <cmox_ECC_PointToAffine>
 8002316:	b108      	cbz	r0, 800231c <cmox_ecdsa_keyGen+0x154>
 8002318:	46a2      	mov	sl, r4
 800231a:	e00b      	b.n	8002334 <cmox_ecdsa_keyGen+0x16c>
 800231c:	9802      	ldr	r0, [sp, #8]
 800231e:	6800      	ldr	r0, [r0, #0]
 8002320:	4632      	mov	r2, r6
 8002322:	4629      	mov	r1, r5
 8002324:	f002 fdcd 	bl	8004ec2 <cmox_bn_toU8BE>
 8002328:	9802      	ldr	r0, [sp, #8]
 800232a:	6840      	ldr	r0, [r0, #4]
 800232c:	4632      	mov	r2, r6
 800232e:	19a9      	adds	r1, r5, r6
 8002330:	f002 fdc7 	bl	8004ec2 <cmox_bn_toU8BE>
 8002334:	a902      	add	r1, sp, #8
 8002336:	a804      	add	r0, sp, #16
 8002338:	f7fe f81f 	bl	800037a <cmox_ECC_FreePoint>
 800233c:	9801      	ldr	r0, [sp, #4]
 800233e:	4669      	mov	r1, sp
 8002340:	f002 fc07 	bl	8004b52 <cmox_bn_free>
 8002344:	a804      	add	r0, sp, #16
 8002346:	f7fd ffb9 	bl	80002bc <cmox_ECC_DeInitCurveModDomain>
 800234a:	4650      	mov	r0, sl
 800234c:	b00d      	add	sp, #52	@ 0x34
 800234e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002352:	bf00      	nop
 8002354:	5e1caffe 	.word	0x5e1caffe
 8002358:	00060003 	.word	0x00060003
 800235c:	0006000e 	.word	0x0006000e
 8002360:	0006000f 	.word	0x0006000f
 8002364:	0006000b 	.word	0x0006000b
 8002368:	0006000c 	.word	0x0006000c

0800236c <cmox_ecdsa_sign>:
 800236c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002370:	b08f      	sub	sp, #60	@ 0x3c
 8002372:	461c      	mov	r4, r3
 8002374:	2300      	movs	r3, #0
 8002376:	460e      	mov	r6, r1
 8002378:	9305      	str	r3, [sp, #20]
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	9302      	str	r3, [sp, #8]
 800237e:	f44f 28c0 	mov.w	r8, #393216	@ 0x60000
 8002382:	9303      	str	r3, [sp, #12]
 8002384:	b3be      	cbz	r6, 80023f6 <cmox_ecdsa_sign+0x8a>
 8002386:	9200      	str	r2, [sp, #0]
 8002388:	0011      	movs	r1, r2
 800238a:	bf1c      	itt	ne
 800238c:	9918      	ldrne	r1, [sp, #96]	@ 0x60
 800238e:	2900      	cmpne	r1, #0
 8002390:	d031      	beq.n	80023f6 <cmox_ecdsa_sign+0x8a>
 8002392:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8002394:	2900      	cmp	r1, #0
 8002396:	bf1c      	itt	ne
 8002398:	f8dd 9070 	ldrne.w	r9, [sp, #112]	@ 0x70
 800239c:	f1b9 0f00 	cmpne.w	r9, #0
 80023a0:	d029      	beq.n	80023f6 <cmox_ecdsa_sign+0x8a>
 80023a2:	0005      	movs	r5, r0
 80023a4:	d027      	beq.n	80023f6 <cmox_ecdsa_sign+0x8a>
 80023a6:	6968      	ldr	r0, [r5, #20]
 80023a8:	4992      	ldr	r1, [pc, #584]	@ (80025f4 <cmox_ecdsa_sign+0x288>)
 80023aa:	4288      	cmp	r0, r1
 80023ac:	d123      	bne.n	80023f6 <cmox_ecdsa_sign+0x8a>
 80023ae:	6928      	ldr	r0, [r5, #16]
 80023b0:	69c1      	ldr	r1, [r0, #28]
 80023b2:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80023b4:	4201      	tst	r1, r0
 80023b6:	bf08      	it	eq
 80023b8:	f8df 823c 	ldreq.w	r8, [pc, #572]	@ 80025f8 <cmox_ecdsa_sign+0x28c>
 80023bc:	d01d      	beq.n	80023fa <cmox_ecdsa_sign+0x8e>
 80023be:	f896 0028 	ldrb.w	r0, [r6, #40]	@ 0x28
 80023c2:	07c1      	lsls	r1, r0, #31
 80023c4:	bf58      	it	pl
 80023c6:	f8df 8234 	ldrpl.w	r8, [pc, #564]	@ 80025fc <cmox_ecdsa_sign+0x290>
 80023ca:	d516      	bpl.n	80023fa <cmox_ecdsa_sign+0x8e>
 80023cc:	6830      	ldr	r0, [r6, #0]
 80023ce:	6880      	ldr	r0, [r0, #8]
 80023d0:	6801      	ldr	r1, [r0, #0]
 80023d2:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 80023d6:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80023da:	f000 fe26 	bl	800302a <cmox_mathUtils_bitLength>
 80023de:	6831      	ldr	r1, [r6, #0]
 80023e0:	4683      	mov	fp, r0
 80023e2:	6888      	ldr	r0, [r1, #8]
 80023e4:	6802      	ldr	r2, [r0, #0]
 80023e6:	1e51      	subs	r1, r2, #1
 80023e8:	eb0b 1341 	add.w	r3, fp, r1, lsl #5
 80023ec:	1ddf      	adds	r7, r3, #7
 80023ee:	08ff      	lsrs	r7, r7, #3
 80023f0:	45ba      	cmp	sl, r7
 80023f2:	9304      	str	r3, [sp, #16]
 80023f4:	d002      	beq.n	80023fc <cmox_ecdsa_sign+0x90>
 80023f6:	f8df 8208 	ldr.w	r8, [pc, #520]	@ 8002600 <cmox_ecdsa_sign+0x294>
 80023fa:	e0f6      	b.n	80025ea <cmox_ecdsa_sign+0x27e>
 80023fc:	4620      	mov	r0, r4
 80023fe:	00c0      	lsls	r0, r0, #3
 8002400:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 8002402:	4298      	cmp	r0, r3
 8002404:	d204      	bcs.n	8002410 <cmox_ecdsa_sign+0xa4>
 8002406:	b104      	cbz	r4, 800240a <cmox_ecdsa_sign+0x9e>
 8002408:	6027      	str	r7, [r4, #0]
 800240a:	f8df 81f8 	ldr.w	r8, [pc, #504]	@ 8002604 <cmox_ecdsa_sign+0x298>
 800240e:	e0ec      	b.n	80025ea <cmox_ecdsa_sign+0x27e>
 8002410:	a905      	add	r1, sp, #20
 8002412:	4628      	mov	r0, r5
 8002414:	f002 fb92 	bl	8004b3c <cmox_bn_alloc>
 8002418:	f8df a1ec 	ldr.w	sl, [pc, #492]	@ 8002608 <cmox_ecdsa_sign+0x29c>
 800241c:	b108      	cbz	r0, 8002422 <cmox_ecdsa_sign+0xb6>
 800241e:	46d0      	mov	r8, sl
 8002420:	e0e3      	b.n	80025ea <cmox_ecdsa_sign+0x27e>
 8002422:	6830      	ldr	r0, [r6, #0]
 8002424:	6881      	ldr	r1, [r0, #8]
 8002426:	680a      	ldr	r2, [r1, #0]
 8002428:	a901      	add	r1, sp, #4
 800242a:	4628      	mov	r0, r5
 800242c:	f002 fb86 	bl	8004b3c <cmox_bn_alloc>
 8002430:	b108      	cbz	r0, 8002436 <cmox_ecdsa_sign+0xca>
 8002432:	46d0      	mov	r8, sl
 8002434:	e0d5      	b.n	80025e2 <cmox_ecdsa_sign+0x276>
 8002436:	6830      	ldr	r0, [r6, #0]
 8002438:	6881      	ldr	r1, [r0, #8]
 800243a:	680a      	ldr	r2, [r1, #0]
 800243c:	a902      	add	r1, sp, #8
 800243e:	4628      	mov	r0, r5
 8002440:	f002 fb7c 	bl	8004b3c <cmox_bn_alloc>
 8002444:	b108      	cbz	r0, 800244a <cmox_ecdsa_sign+0xde>
 8002446:	46d0      	mov	r8, sl
 8002448:	e0c7      	b.n	80025da <cmox_ecdsa_sign+0x26e>
 800244a:	9a02      	ldr	r2, [sp, #8]
 800244c:	9800      	ldr	r0, [sp, #0]
 800244e:	4639      	mov	r1, r7
 8002450:	f002 fcf4 	bl	8004e3c <cmox_bn_fromU8BE>
 8002454:	9a02      	ldr	r2, [sp, #8]
 8002456:	f1cb 0b20 	rsb	fp, fp, #32
 800245a:	f00b 0107 	and.w	r1, fp, #7
 800245e:	4610      	mov	r0, r2
 8002460:	f000 fab7 	bl	80029d2 <cmox_RightShiftBN>
 8002464:	6830      	ldr	r0, [r6, #0]
 8002466:	9a01      	ldr	r2, [sp, #4]
 8002468:	6880      	ldr	r0, [r0, #8]
 800246a:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8002604 <cmox_ecdsa_sign+0x298>
 800246e:	f06f 0101 	mvn.w	r1, #1
 8002472:	f000 fc1d 	bl	8002cb0 <cmox_AddBN_Int>
 8002476:	9901      	ldr	r1, [sp, #4]
 8002478:	9802      	ldr	r0, [sp, #8]
 800247a:	f002 fc00 	bl	8004c7e <cmox_bn_cmp>
 800247e:	2801      	cmp	r0, #1
 8002480:	bfa8      	it	ge
 8002482:	46d8      	movge	r8, fp
 8002484:	da10      	bge.n	80024a8 <cmox_ecdsa_sign+0x13c>
 8002486:	9a02      	ldr	r2, [sp, #8]
 8002488:	2101      	movs	r1, #1
 800248a:	4610      	mov	r0, r2
 800248c:	f000 fc10 	bl	8002cb0 <cmox_AddBN_Int>
 8002490:	692b      	ldr	r3, [r5, #16]
 8002492:	462a      	mov	r2, r5
 8002494:	4631      	mov	r1, r6
 8002496:	a806      	add	r0, sp, #24
 8002498:	f7fd fef2 	bl	8000280 <cmox_ECC_InitCurve>
 800249c:	a903      	add	r1, sp, #12
 800249e:	a806      	add	r0, sp, #24
 80024a0:	f7fd ff0f 	bl	80002c2 <cmox_ECC_AllocPoint>
 80024a4:	b108      	cbz	r0, 80024aa <cmox_ecdsa_sign+0x13e>
 80024a6:	46d0      	mov	r8, sl
 80024a8:	e093      	b.n	80025d2 <cmox_ecdsa_sign+0x266>
 80024aa:	a806      	add	r0, sp, #24
 80024ac:	f7fd fef6 	bl	800029c <cmox_ECC_InitCurveModDomainP>
 80024b0:	b108      	cbz	r0, 80024b6 <cmox_ecdsa_sign+0x14a>
 80024b2:	46d0      	mov	r8, sl
 80024b4:	e089      	b.n	80025ca <cmox_ecdsa_sign+0x25e>
 80024b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80024b8:	691e      	ldr	r6, [r3, #16]
 80024ba:	9a03      	ldr	r2, [sp, #12]
 80024bc:	9902      	ldr	r1, [sp, #8]
 80024be:	f8d6 c000 	ldr.w	ip, [r6]
 80024c2:	a806      	add	r0, sp, #24
 80024c4:	47e0      	blx	ip
 80024c6:	b9b0      	cbnz	r0, 80024f6 <cmox_ecdsa_sign+0x18a>
 80024c8:	9903      	ldr	r1, [sp, #12]
 80024ca:	a806      	add	r0, sp, #24
 80024cc:	f7fe f9ac 	bl	8000828 <cmox_ECC_PointToAffine>
 80024d0:	b988      	cbnz	r0, 80024f6 <cmox_ecdsa_sign+0x18a>
 80024d2:	a806      	add	r0, sp, #24
 80024d4:	f7fd fef2 	bl	80002bc <cmox_ECC_DeInitCurveModDomain>
 80024d8:	a806      	add	r0, sp, #24
 80024da:	f7fd fee7 	bl	80002ac <cmox_ECC_InitCurveModDomainN>
 80024de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80024e0:	9802      	ldr	r0, [sp, #8]
 80024e2:	a906      	add	r1, sp, #24
 80024e4:	f000 fcfb 	bl	8002ede <cmox_ModularBN_Enter>
 80024e8:	9b01      	ldr	r3, [sp, #4]
 80024ea:	9a05      	ldr	r2, [sp, #20]
 80024ec:	9902      	ldr	r1, [sp, #8]
 80024ee:	a806      	add	r0, sp, #24
 80024f0:	f7fd fe98 	bl	8000224 <cmox_ECC_InvertModN>
 80024f4:	b108      	cbz	r0, 80024fa <cmox_ecdsa_sign+0x18e>
 80024f6:	46d0      	mov	r8, sl
 80024f8:	e064      	b.n	80025c4 <cmox_ecdsa_sign+0x258>
 80024fa:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80024fc:	6801      	ldr	r1, [r0, #0]
 80024fe:	9803      	ldr	r0, [sp, #12]
 8002500:	6889      	ldr	r1, [r1, #8]
 8002502:	9b02      	ldr	r3, [sp, #8]
 8002504:	6800      	ldr	r0, [r0, #0]
 8002506:	460a      	mov	r2, r1
 8002508:	f000 fb1f 	bl	8002b4a <cmox_ModSubBN>
 800250c:	9802      	ldr	r0, [sp, #8]
 800250e:	2100      	movs	r1, #0
 8002510:	f002 fbf6 	bl	8004d00 <cmox_bn_cmpUint>
 8002514:	2801      	cmp	r0, #1
 8002516:	d04a      	beq.n	80025ae <cmox_ecdsa_sign+0x242>
 8002518:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 800251a:	9802      	ldr	r0, [sp, #8]
 800251c:	463a      	mov	r2, r7
 800251e:	4649      	mov	r1, r9
 8002520:	f002 fccf 	bl	8004ec2 <cmox_bn_toU8BE>
 8002524:	9a01      	ldr	r2, [sp, #4]
 8002526:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8002528:	4639      	mov	r1, r7
 800252a:	f002 fc87 	bl	8004e3c <cmox_bn_fromU8BE>
 800252e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002530:	9802      	ldr	r0, [sp, #8]
 8002532:	a906      	add	r1, sp, #24
 8002534:	f000 fcd3 	bl	8002ede <cmox_ModularBN_Enter>
 8002538:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800253a:	9a02      	ldr	r2, [sp, #8]
 800253c:	9901      	ldr	r1, [sp, #4]
 800253e:	9000      	str	r0, [sp, #0]
 8002540:	ab06      	add	r3, sp, #24
 8002542:	4610      	mov	r0, r2
 8002544:	f000 fcf5 	bl	8002f32 <cmox_ModularBN_Mul>
 8002548:	9804      	ldr	r0, [sp, #16]
 800254a:	9a01      	ldr	r2, [sp, #4]
 800254c:	ebb0 0fc6 	cmp.w	r0, r6, lsl #3
 8002550:	d20b      	bcs.n	800256a <cmox_ecdsa_sign+0x1fe>
 8002552:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8002554:	4639      	mov	r1, r7
 8002556:	f002 fc71 	bl	8004e3c <cmox_bn_fromU8BE>
 800255a:	9a01      	ldr	r2, [sp, #4]
 800255c:	9904      	ldr	r1, [sp, #16]
 800255e:	ebc1 01c7 	rsb	r1, r1, r7, lsl #3
 8002562:	4610      	mov	r0, r2
 8002564:	f000 fa35 	bl	80029d2 <cmox_RightShiftBN>
 8002568:	e003      	b.n	8002572 <cmox_ecdsa_sign+0x206>
 800256a:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800256c:	4631      	mov	r1, r6
 800256e:	f002 fc65 	bl	8004e3c <cmox_bn_fromU8BE>
 8002572:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8002574:	6801      	ldr	r1, [r0, #0]
 8002576:	9b01      	ldr	r3, [sp, #4]
 8002578:	6889      	ldr	r1, [r1, #8]
 800257a:	460a      	mov	r2, r1
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fae4 	bl	8002b4a <cmox_ModSubBN>
 8002582:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8002584:	6801      	ldr	r1, [r0, #0]
 8002586:	688a      	ldr	r2, [r1, #8]
 8002588:	9b01      	ldr	r3, [sp, #4]
 800258a:	9902      	ldr	r1, [sp, #8]
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fa4b 	bl	8002a28 <cmox_ModAddBN>
 8002592:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8002594:	9a01      	ldr	r2, [sp, #4]
 8002596:	9000      	str	r0, [sp, #0]
 8002598:	ab06      	add	r3, sp, #24
 800259a:	9805      	ldr	r0, [sp, #20]
 800259c:	4611      	mov	r1, r2
 800259e:	f000 fcc8 	bl	8002f32 <cmox_ModularBN_Mul>
 80025a2:	9801      	ldr	r0, [sp, #4]
 80025a4:	2100      	movs	r1, #0
 80025a6:	f002 fbab 	bl	8004d00 <cmox_bn_cmpUint>
 80025aa:	2801      	cmp	r0, #1
 80025ac:	d101      	bne.n	80025b2 <cmox_ecdsa_sign+0x246>
 80025ae:	46d8      	mov	r8, fp
 80025b0:	e008      	b.n	80025c4 <cmox_ecdsa_sign+0x258>
 80025b2:	9801      	ldr	r0, [sp, #4]
 80025b4:	463a      	mov	r2, r7
 80025b6:	eb09 0107 	add.w	r1, r9, r7
 80025ba:	f002 fc82 	bl	8004ec2 <cmox_bn_toU8BE>
 80025be:	b10c      	cbz	r4, 80025c4 <cmox_ecdsa_sign+0x258>
 80025c0:	007f      	lsls	r7, r7, #1
 80025c2:	6027      	str	r7, [r4, #0]
 80025c4:	a806      	add	r0, sp, #24
 80025c6:	f7fd fe79 	bl	80002bc <cmox_ECC_DeInitCurveModDomain>
 80025ca:	a903      	add	r1, sp, #12
 80025cc:	a806      	add	r0, sp, #24
 80025ce:	f7fd fed4 	bl	800037a <cmox_ECC_FreePoint>
 80025d2:	a902      	add	r1, sp, #8
 80025d4:	4628      	mov	r0, r5
 80025d6:	f002 fabc 	bl	8004b52 <cmox_bn_free>
 80025da:	a901      	add	r1, sp, #4
 80025dc:	4628      	mov	r0, r5
 80025de:	f002 fab8 	bl	8004b52 <cmox_bn_free>
 80025e2:	a905      	add	r1, sp, #20
 80025e4:	4628      	mov	r0, r5
 80025e6:	f002 fab4 	bl	8004b52 <cmox_bn_free>
 80025ea:	4640      	mov	r0, r8
 80025ec:	b00f      	add	sp, #60	@ 0x3c
 80025ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025f2:	bf00      	nop
 80025f4:	5e1caffe 	.word	0x5e1caffe
 80025f8:	0006000e 	.word	0x0006000e
 80025fc:	0006000f 	.word	0x0006000f
 8002600:	00060003 	.word	0x00060003
 8002604:	0006000b 	.word	0x0006000b
 8002608:	0006000c 	.word	0x0006000c

0800260c <cmox_ecdsa_verify>:
 800260c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002610:	b092      	sub	sp, #72	@ 0x48
 8002612:	2400      	movs	r4, #0
 8002614:	460d      	mov	r5, r1
 8002616:	9405      	str	r4, [sp, #20]
 8002618:	9404      	str	r4, [sp, #16]
 800261a:	9408      	str	r4, [sp, #32]
 800261c:	9407      	str	r4, [sp, #28]
 800261e:	9406      	str	r4, [sp, #24]
 8002620:	b3a5      	cbz	r5, 800268c <cmox_ecdsa_verify+0x80>
 8002622:	0016      	movs	r6, r2
 8002624:	bf1f      	itttt	ne
 8002626:	9f1c      	ldrne	r7, [sp, #112]	@ 0x70
 8002628:	2f00      	cmpne	r7, #0
 800262a:	f8dd 8078 	ldrne.w	r8, [sp, #120]	@ 0x78
 800262e:	f1b8 0f00 	cmpne.w	r8, #0
 8002632:	d02b      	beq.n	800268c <cmox_ecdsa_verify+0x80>
 8002634:	0004      	movs	r4, r0
 8002636:	d029      	beq.n	800268c <cmox_ecdsa_verify+0x80>
 8002638:	6960      	ldr	r0, [r4, #20]
 800263a:	49a4      	ldr	r1, [pc, #656]	@ (80028cc <cmox_ecdsa_verify+0x2c0>)
 800263c:	4288      	cmp	r0, r1
 800263e:	d125      	bne.n	800268c <cmox_ecdsa_verify+0x80>
 8002640:	6920      	ldr	r0, [r4, #16]
 8002642:	69c1      	ldr	r1, [r0, #28]
 8002644:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002646:	4201      	tst	r1, r0
 8002648:	bf08      	it	eq
 800264a:	4ea1      	ldreq	r6, [pc, #644]	@ (80028d0 <cmox_ecdsa_verify+0x2c4>)
 800264c:	d01f      	beq.n	800268e <cmox_ecdsa_verify+0x82>
 800264e:	f895 0028 	ldrb.w	r0, [r5, #40]	@ 0x28
 8002652:	07c1      	lsls	r1, r0, #31
 8002654:	bf58      	it	pl
 8002656:	4e9f      	ldrpl	r6, [pc, #636]	@ (80028d4 <cmox_ecdsa_verify+0x2c8>)
 8002658:	d57a      	bpl.n	8002750 <cmox_ecdsa_verify+0x144>
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	6829      	ldr	r1, [r5, #0]
 800265e:	6888      	ldr	r0, [r1, #8]
 8002660:	f002 fb64 	bl	8004d2c <cmox_bn_countBits>
 8002664:	4681      	mov	r9, r0
 8002666:	f109 0007 	add.w	r0, r9, #7
 800266a:	ea4f 0ad0 	mov.w	sl, r0, lsr #3
 800266e:	6828      	ldr	r0, [r5, #0]
 8002670:	6800      	ldr	r0, [r0, #0]
 8002672:	f002 fb5b 	bl	8004d2c <cmox_bn_countBits>
 8002676:	1dc0      	adds	r0, r0, #7
 8002678:	ea4f 0bd0 	mov.w	fp, r0, lsr #3
 800267c:	9800      	ldr	r0, [sp, #0]
 800267e:	ebb0 0f4b 	cmp.w	r0, fp, lsl #1
 8002682:	bf04      	itt	eq
 8002684:	981f      	ldreq	r0, [sp, #124]	@ 0x7c
 8002686:	ebb0 0f4a 	cmpeq.w	r0, sl, lsl #1
 800268a:	d001      	beq.n	8002690 <cmox_ecdsa_verify+0x84>
 800268c:	4e92      	ldr	r6, [pc, #584]	@ (80028d8 <cmox_ecdsa_verify+0x2cc>)
 800268e:	e05f      	b.n	8002750 <cmox_ecdsa_verify+0x144>
 8002690:	6923      	ldr	r3, [r4, #16]
 8002692:	4622      	mov	r2, r4
 8002694:	4629      	mov	r1, r5
 8002696:	a809      	add	r0, sp, #36	@ 0x24
 8002698:	f7fd fdf2 	bl	8000280 <cmox_ECC_InitCurve>
 800269c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800269e:	4d8f      	ldr	r5, [pc, #572]	@ (80028dc <cmox_ecdsa_verify+0x2d0>)
 80026a0:	6801      	ldr	r1, [r0, #0]
 80026a2:	688a      	ldr	r2, [r1, #8]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	a905      	add	r1, sp, #20
 80026a8:	4620      	mov	r0, r4
 80026aa:	f002 fa47 	bl	8004b3c <cmox_bn_alloc>
 80026ae:	b108      	cbz	r0, 80026b4 <cmox_ecdsa_verify+0xa8>
 80026b0:	462e      	mov	r6, r5
 80026b2:	e04d      	b.n	8002750 <cmox_ecdsa_verify+0x144>
 80026b4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80026b6:	6801      	ldr	r1, [r0, #0]
 80026b8:	688a      	ldr	r2, [r1, #8]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	a904      	add	r1, sp, #16
 80026be:	4620      	mov	r0, r4
 80026c0:	f002 fa3c 	bl	8004b3c <cmox_bn_alloc>
 80026c4:	b108      	cbz	r0, 80026ca <cmox_ecdsa_verify+0xbe>
 80026c6:	462e      	mov	r6, r5
 80026c8:	e03e      	b.n	8002748 <cmox_ecdsa_verify+0x13c>
 80026ca:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80026cc:	6801      	ldr	r1, [r0, #0]
 80026ce:	688a      	ldr	r2, [r1, #8]
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	a908      	add	r1, sp, #32
 80026d4:	4620      	mov	r0, r4
 80026d6:	f002 fa31 	bl	8004b3c <cmox_bn_alloc>
 80026da:	2800      	cmp	r0, #0
 80026dc:	f040 8088 	bne.w	80027f0 <cmox_ecdsa_verify+0x1e4>
 80026e0:	9a05      	ldr	r2, [sp, #20]
 80026e2:	4651      	mov	r1, sl
 80026e4:	eb08 000a 	add.w	r0, r8, sl
 80026e8:	f002 fba8 	bl	8004e3c <cmox_bn_fromU8BE>
 80026ec:	9805      	ldr	r0, [sp, #20]
 80026ee:	2100      	movs	r1, #0
 80026f0:	f002 fb06 	bl	8004d00 <cmox_bn_cmpUint>
 80026f4:	2801      	cmp	r0, #1
 80026f6:	d007      	beq.n	8002708 <cmox_ecdsa_verify+0xfc>
 80026f8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80026fa:	6801      	ldr	r1, [r0, #0]
 80026fc:	9805      	ldr	r0, [sp, #20]
 80026fe:	6889      	ldr	r1, [r1, #8]
 8002700:	f002 fabd 	bl	8004c7e <cmox_bn_cmp>
 8002704:	2800      	cmp	r0, #0
 8002706:	d401      	bmi.n	800270c <cmox_ecdsa_verify+0x100>
 8002708:	4e75      	ldr	r6, [pc, #468]	@ (80028e0 <cmox_ecdsa_verify+0x2d4>)
 800270a:	e015      	b.n	8002738 <cmox_ecdsa_verify+0x12c>
 800270c:	a809      	add	r0, sp, #36	@ 0x24
 800270e:	f7fd fdcd 	bl	80002ac <cmox_ECC_InitCurveModDomainN>
 8002712:	b108      	cbz	r0, 8002718 <cmox_ecdsa_verify+0x10c>
 8002714:	462e      	mov	r6, r5
 8002716:	e00f      	b.n	8002738 <cmox_ecdsa_verify+0x12c>
 8002718:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800271a:	9805      	ldr	r0, [sp, #20]
 800271c:	a909      	add	r1, sp, #36	@ 0x24
 800271e:	f000 fbde 	bl	8002ede <cmox_ModularBN_Enter>
 8002722:	9b04      	ldr	r3, [sp, #16]
 8002724:	9a08      	ldr	r2, [sp, #32]
 8002726:	9905      	ldr	r1, [sp, #20]
 8002728:	a809      	add	r0, sp, #36	@ 0x24
 800272a:	f7fd fd7b 	bl	8000224 <cmox_ECC_InvertModN>
 800272e:	b198      	cbz	r0, 8002758 <cmox_ecdsa_verify+0x14c>
 8002730:	462e      	mov	r6, r5
 8002732:	a809      	add	r0, sp, #36	@ 0x24
 8002734:	f7fd fdc2 	bl	80002bc <cmox_ECC_DeInitCurveModDomain>
 8002738:	a908      	add	r1, sp, #32
 800273a:	4620      	mov	r0, r4
 800273c:	f002 fa09 	bl	8004b52 <cmox_bn_free>
 8002740:	a904      	add	r1, sp, #16
 8002742:	4620      	mov	r0, r4
 8002744:	f002 fa05 	bl	8004b52 <cmox_bn_free>
 8002748:	a905      	add	r1, sp, #20
 800274a:	4620      	mov	r0, r4
 800274c:	f002 fa01 	bl	8004b52 <cmox_bn_free>
 8002750:	4630      	mov	r0, r6
 8002752:	b013      	add	sp, #76	@ 0x4c
 8002754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002758:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800275a:	9a04      	ldr	r2, [sp, #16]
 800275c:	ebb9 0fc1 	cmp.w	r9, r1, lsl #3
 8002760:	d20b      	bcs.n	800277a <cmox_ecdsa_verify+0x16e>
 8002762:	4651      	mov	r1, sl
 8002764:	4638      	mov	r0, r7
 8002766:	f002 fb69 	bl	8004e3c <cmox_bn_fromU8BE>
 800276a:	9a04      	ldr	r2, [sp, #16]
 800276c:	ebc9 09ca 	rsb	r9, r9, sl, lsl #3
 8002770:	4649      	mov	r1, r9
 8002772:	4610      	mov	r0, r2
 8002774:	f000 f92d 	bl	80029d2 <cmox_RightShiftBN>
 8002778:	e002      	b.n	8002780 <cmox_ecdsa_verify+0x174>
 800277a:	4638      	mov	r0, r7
 800277c:	f002 fb5e 	bl	8004e3c <cmox_bn_fromU8BE>
 8002780:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8002782:	6801      	ldr	r1, [r0, #0]
 8002784:	9b04      	ldr	r3, [sp, #16]
 8002786:	6889      	ldr	r1, [r1, #8]
 8002788:	460a      	mov	r2, r1
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f9dd 	bl	8002b4a <cmox_ModSubBN>
 8002790:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8002792:	9a04      	ldr	r2, [sp, #16]
 8002794:	9908      	ldr	r1, [sp, #32]
 8002796:	9000      	str	r0, [sp, #0]
 8002798:	ab09      	add	r3, sp, #36	@ 0x24
 800279a:	4610      	mov	r0, r2
 800279c:	f000 fbc9 	bl	8002f32 <cmox_ModularBN_Mul>
 80027a0:	9a05      	ldr	r2, [sp, #20]
 80027a2:	4651      	mov	r1, sl
 80027a4:	4640      	mov	r0, r8
 80027a6:	f002 fb49 	bl	8004e3c <cmox_bn_fromU8BE>
 80027aa:	9805      	ldr	r0, [sp, #20]
 80027ac:	2100      	movs	r1, #0
 80027ae:	f002 faa7 	bl	8004d00 <cmox_bn_cmpUint>
 80027b2:	2801      	cmp	r0, #1
 80027b4:	d007      	beq.n	80027c6 <cmox_ecdsa_verify+0x1ba>
 80027b6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80027b8:	6801      	ldr	r1, [r0, #0]
 80027ba:	9805      	ldr	r0, [sp, #20]
 80027bc:	6889      	ldr	r1, [r1, #8]
 80027be:	f002 fa5e 	bl	8004c7e <cmox_bn_cmp>
 80027c2:	2800      	cmp	r0, #0
 80027c4:	d401      	bmi.n	80027ca <cmox_ecdsa_verify+0x1be>
 80027c6:	4e46      	ldr	r6, [pc, #280]	@ (80028e0 <cmox_ecdsa_verify+0x2d4>)
 80027c8:	e7b3      	b.n	8002732 <cmox_ecdsa_verify+0x126>
 80027ca:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80027cc:	9a05      	ldr	r2, [sp, #20]
 80027ce:	9908      	ldr	r1, [sp, #32]
 80027d0:	9000      	str	r0, [sp, #0]
 80027d2:	ab09      	add	r3, sp, #36	@ 0x24
 80027d4:	4610      	mov	r0, r2
 80027d6:	f000 fbac 	bl	8002f32 <cmox_ModularBN_Mul>
 80027da:	a809      	add	r0, sp, #36	@ 0x24
 80027dc:	f7fd fd6e 	bl	80002bc <cmox_ECC_DeInitCurveModDomain>
 80027e0:	a908      	add	r1, sp, #32
 80027e2:	4620      	mov	r0, r4
 80027e4:	f002 f9b5 	bl	8004b52 <cmox_bn_free>
 80027e8:	a809      	add	r0, sp, #36	@ 0x24
 80027ea:	f7fd fd57 	bl	800029c <cmox_ECC_InitCurveModDomainP>
 80027ee:	b108      	cbz	r0, 80027f4 <cmox_ecdsa_verify+0x1e8>
 80027f0:	462e      	mov	r6, r5
 80027f2:	e7a5      	b.n	8002740 <cmox_ecdsa_verify+0x134>
 80027f4:	a907      	add	r1, sp, #28
 80027f6:	a809      	add	r0, sp, #36	@ 0x24
 80027f8:	f7fd fd63 	bl	80002c2 <cmox_ECC_AllocPoint>
 80027fc:	b108      	cbz	r0, 8002802 <cmox_ecdsa_verify+0x1f6>
 80027fe:	462e      	mov	r6, r5
 8002800:	e05f      	b.n	80028c2 <cmox_ecdsa_verify+0x2b6>
 8002802:	a906      	add	r1, sp, #24
 8002804:	a809      	add	r0, sp, #36	@ 0x24
 8002806:	f7fd fd5c 	bl	80002c2 <cmox_ECC_AllocPoint>
 800280a:	b108      	cbz	r0, 8002810 <cmox_ecdsa_verify+0x204>
 800280c:	462e      	mov	r6, r5
 800280e:	e054      	b.n	80028ba <cmox_ecdsa_verify+0x2ae>
 8002810:	9806      	ldr	r0, [sp, #24]
 8002812:	6802      	ldr	r2, [r0, #0]
 8002814:	4659      	mov	r1, fp
 8002816:	4630      	mov	r0, r6
 8002818:	f002 fb10 	bl	8004e3c <cmox_bn_fromU8BE>
 800281c:	9806      	ldr	r0, [sp, #24]
 800281e:	6842      	ldr	r2, [r0, #4]
 8002820:	4659      	mov	r1, fp
 8002822:	eb06 000b 	add.w	r0, r6, fp
 8002826:	f002 fb09 	bl	8004e3c <cmox_bn_fromU8BE>
 800282a:	9806      	ldr	r0, [sp, #24]
 800282c:	6880      	ldr	r0, [r0, #8]
 800282e:	2101      	movs	r1, #1
 8002830:	f002 f9bb 	bl	8004baa <cmox_bn_init>
 8002834:	9806      	ldr	r0, [sp, #24]
 8002836:	6901      	ldr	r1, [r0, #16]
 8002838:	f041 0102 	orr.w	r1, r1, #2
 800283c:	6101      	str	r1, [r0, #16]
 800283e:	a809      	add	r0, sp, #36	@ 0x24
 8002840:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8002842:	9907      	ldr	r1, [sp, #28]
 8002844:	9b04      	ldr	r3, [sp, #16]
 8002846:	9a06      	ldr	r2, [sp, #24]
 8002848:	9100      	str	r1, [sp, #0]
 800284a:	6977      	ldr	r7, [r6, #20]
 800284c:	9905      	ldr	r1, [sp, #20]
 800284e:	f8d7 c000 	ldr.w	ip, [r7]
 8002852:	47e0      	blx	ip
 8002854:	b118      	cbz	r0, 800285e <cmox_ecdsa_verify+0x252>
 8002856:	2804      	cmp	r0, #4
 8002858:	d110      	bne.n	800287c <cmox_ecdsa_verify+0x270>
 800285a:	4e22      	ldr	r6, [pc, #136]	@ (80028e4 <cmox_ecdsa_verify+0x2d8>)
 800285c:	e029      	b.n	80028b2 <cmox_ecdsa_verify+0x2a6>
 800285e:	9807      	ldr	r0, [sp, #28]
 8002860:	4e21      	ldr	r6, [pc, #132]	@ (80028e8 <cmox_ecdsa_verify+0x2dc>)
 8002862:	7c00      	ldrb	r0, [r0, #16]
 8002864:	2100      	movs	r1, #0
 8002866:	f000 0001 	and.w	r0, r0, #1
 800286a:	f000 fbd2 	bl	8003012 <cmox_mathUtils_neq>
 800286e:	2801      	cmp	r0, #1
 8002870:	d01f      	beq.n	80028b2 <cmox_ecdsa_verify+0x2a6>
 8002872:	9907      	ldr	r1, [sp, #28]
 8002874:	a809      	add	r0, sp, #36	@ 0x24
 8002876:	f7fd ffd7 	bl	8000828 <cmox_ECC_PointToAffine>
 800287a:	b108      	cbz	r0, 8002880 <cmox_ecdsa_verify+0x274>
 800287c:	462e      	mov	r6, r5
 800287e:	e018      	b.n	80028b2 <cmox_ecdsa_verify+0x2a6>
 8002880:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8002882:	6801      	ldr	r1, [r0, #0]
 8002884:	9807      	ldr	r0, [sp, #28]
 8002886:	6889      	ldr	r1, [r1, #8]
 8002888:	9b04      	ldr	r3, [sp, #16]
 800288a:	6800      	ldr	r0, [r0, #0]
 800288c:	460a      	mov	r2, r1
 800288e:	f000 f95c 	bl	8002b4a <cmox_ModSubBN>
 8002892:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8002894:	4a15      	ldr	r2, [pc, #84]	@ (80028ec <cmox_ecdsa_verify+0x2e0>)
 8002896:	4916      	ldr	r1, [pc, #88]	@ (80028f0 <cmox_ecdsa_verify+0x2e4>)
 8002898:	6813      	ldr	r3, [r2, #0]
 800289a:	9003      	str	r0, [sp, #12]
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	9602      	str	r6, [sp, #8]
 80028a0:	9101      	str	r1, [sp, #4]
 80028a2:	4651      	mov	r1, sl
 80028a4:	9804      	ldr	r0, [sp, #16]
 80028a6:	6803      	ldr	r3, [r0, #0]
 80028a8:	1d02      	adds	r2, r0, #4
 80028aa:	4640      	mov	r0, r8
 80028ac:	f002 f8ce 	bl	8004a4c <cmox_utils_robustCmp>
 80028b0:	4606      	mov	r6, r0
 80028b2:	a906      	add	r1, sp, #24
 80028b4:	a809      	add	r0, sp, #36	@ 0x24
 80028b6:	f7fd fd60 	bl	800037a <cmox_ECC_FreePoint>
 80028ba:	a907      	add	r1, sp, #28
 80028bc:	a809      	add	r0, sp, #36	@ 0x24
 80028be:	f7fd fd5c 	bl	800037a <cmox_ECC_FreePoint>
 80028c2:	a809      	add	r0, sp, #36	@ 0x24
 80028c4:	f7fd fcfa 	bl	80002bc <cmox_ECC_DeInitCurveModDomain>
 80028c8:	e73a      	b.n	8002740 <cmox_ecdsa_verify+0x134>
 80028ca:	bf00      	nop
 80028cc:	5e1caffe 	.word	0x5e1caffe
 80028d0:	0006000e 	.word	0x0006000e
 80028d4:	0006000f 	.word	0x0006000f
 80028d8:	00060003 	.word	0x00060003
 80028dc:	0006000c 	.word	0x0006000c
 80028e0:	00060009 	.word	0x00060009
 80028e4:	00060008 	.word	0x00060008
 80028e8:	00066e93 	.word	0x00066e93
 80028ec:	0800f51c 	.word	0x0800f51c
 80028f0:	0006c726 	.word	0x0006c726

080028f4 <cmox_hash_compute>:
 80028f4:	b538      	push	{r3, r4, r5, lr}
 80028f6:	460c      	mov	r4, r1
 80028f8:	4611      	mov	r1, r2
 80028fa:	2800      	cmp	r0, #0
 80028fc:	461a      	mov	r2, r3
 80028fe:	bf1c      	itt	ne
 8002900:	6805      	ldrne	r5, [r0, #0]
 8002902:	2d00      	cmpne	r5, #0
 8002904:	4b07      	ldr	r3, [pc, #28]	@ (8002924 <cmox_hash_compute+0x30>)
 8002906:	d00a      	beq.n	800291e <cmox_hash_compute+0x2a>
 8002908:	b14a      	cbz	r2, 800291e <cmox_hash_compute+0x2a>
 800290a:	b904      	cbnz	r4, 800290e <cmox_hash_compute+0x1a>
 800290c:	b939      	cbnz	r1, 800291e <cmox_hash_compute+0x2a>
 800290e:	9804      	ldr	r0, [sp, #16]
 8002910:	b128      	cbz	r0, 800291e <cmox_hash_compute+0x2a>
 8002912:	9b05      	ldr	r3, [sp, #20]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	4603      	mov	r3, r0
 8002918:	4620      	mov	r0, r4
 800291a:	47a8      	blx	r5
 800291c:	4603      	mov	r3, r0
 800291e:	4618      	mov	r0, r3
 8002920:	bd32      	pop	{r1, r4, r5, pc}
 8002922:	bf00      	nop
 8002924:	00020003 	.word	0x00020003

08002928 <cmox_hash_common_compute>:
 8002928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800292c:	4604      	mov	r4, r0
 800292e:	460e      	mov	r6, r1
 8002930:	6821      	ldr	r1, [r4, #0]
 8002932:	4617      	mov	r7, r2
 8002934:	684a      	ldr	r2, [r1, #4]
 8002936:	461d      	mov	r5, r3
 8002938:	4790      	blx	r2
 800293a:	4680      	mov	r8, r0
 800293c:	f5b8 3f00 	cmp.w	r8, #131072	@ 0x20000
 8002940:	d119      	bne.n	8002976 <cmox_hash_common_compute+0x4e>
 8002942:	6822      	ldr	r2, [r4, #0]
 8002944:	9906      	ldr	r1, [sp, #24]
 8002946:	6893      	ldr	r3, [r2, #8]
 8002948:	4620      	mov	r0, r4
 800294a:	4798      	blx	r3
 800294c:	4680      	mov	r8, r0
 800294e:	f5b8 3f00 	cmp.w	r8, #131072	@ 0x20000
 8002952:	d110      	bne.n	8002976 <cmox_hash_common_compute+0x4e>
 8002954:	6823      	ldr	r3, [r4, #0]
 8002956:	4631      	mov	r1, r6
 8002958:	68de      	ldr	r6, [r3, #12]
 800295a:	463a      	mov	r2, r7
 800295c:	4620      	mov	r0, r4
 800295e:	47b0      	blx	r6
 8002960:	4680      	mov	r8, r0
 8002962:	f5b8 3f00 	cmp.w	r8, #131072	@ 0x20000
 8002966:	d106      	bne.n	8002976 <cmox_hash_common_compute+0x4e>
 8002968:	6823      	ldr	r3, [r4, #0]
 800296a:	9a07      	ldr	r2, [sp, #28]
 800296c:	4629      	mov	r1, r5
 800296e:	691d      	ldr	r5, [r3, #16]
 8002970:	4620      	mov	r0, r4
 8002972:	47a8      	blx	r5
 8002974:	4680      	mov	r8, r0
 8002976:	6821      	ldr	r1, [r4, #0]
 8002978:	680a      	ldr	r2, [r1, #0]
 800297a:	4620      	mov	r0, r4
 800297c:	4790      	blx	r2
 800297e:	4640      	mov	r0, r8
 8002980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002984 <cmox_red_fake_copy_in_to_out>:
 8002984:	b510      	push	{r4, lr}
 8002986:	2200      	movs	r2, #0
 8002988:	e004      	b.n	8002994 <cmox_red_fake_copy_in_to_out+0x10>
 800298a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 800298e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8002992:	1c52      	adds	r2, r2, #1
 8002994:	428a      	cmp	r2, r1
 8002996:	d3f8      	bcc.n	800298a <cmox_red_fake_copy_in_to_out+0x6>
 8002998:	bd10      	pop	{r4, pc}

0800299a <basic_type_modinv>:
 800299a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800299c:	4603      	mov	r3, r0
 800299e:	460e      	mov	r6, r1
 80029a0:	2701      	movs	r7, #1
 80029a2:	f04f 0c03 	mov.w	ip, #3
 80029a6:	2402      	movs	r4, #2
 80029a8:	221f      	movs	r2, #31
 80029aa:	2500      	movs	r5, #0
 80029ac:	fb07 f003 	mul.w	r0, r7, r3
 80029b0:	ea0c 0000 	and.w	r0, ip, r0
 80029b4:	2100      	movs	r1, #0
 80029b6:	1b00      	subs	r0, r0, r4
 80029b8:	41a9      	sbcs	r1, r5
 80029ba:	ea24 0101 	bic.w	r1, r4, r1
 80029be:	19cf      	adds	r7, r1, r7
 80029c0:	0064      	lsls	r4, r4, #1
 80029c2:	ea4f 004c 	mov.w	r0, ip, lsl #1
 80029c6:	1e52      	subs	r2, r2, #1
 80029c8:	f080 0c01 	eor.w	ip, r0, #1
 80029cc:	d1ee      	bne.n	80029ac <basic_type_modinv+0x12>
 80029ce:	6037      	str	r7, [r6, #0]
 80029d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029d2 <cmox_RightShiftBN>:
 80029d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029d4:	2300      	movs	r3, #0
 80029d6:	2920      	cmp	r1, #32
 80029d8:	bf28      	it	cs
 80029da:	2301      	movcs	r3, #1
 80029dc:	d222      	bcs.n	8002a24 <cmox_RightShiftBN+0x52>
 80029de:	6814      	ldr	r4, [r2, #0]
 80029e0:	6805      	ldr	r5, [r0, #0]
 80029e2:	42ac      	cmp	r4, r5
 80029e4:	bf38      	it	cc
 80029e6:	2303      	movcc	r3, #3
 80029e8:	d31c      	bcc.n	8002a24 <cmox_RightShiftBN+0x52>
 80029ea:	2401      	movs	r4, #1
 80029ec:	e00a      	b.n	8002a04 <cmox_RightShiftBN+0x32>
 80029ee:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 80029f2:	f1c1 0e20 	rsb	lr, r1, #32
 80029f6:	687f      	ldr	r7, [r7, #4]
 80029f8:	fa07 f70e 	lsl.w	r7, r7, lr
 80029fc:	433e      	orrs	r6, r7
 80029fe:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
 8002a02:	462c      	mov	r4, r5
 8002a04:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8002a08:	6807      	ldr	r7, [r0, #0]
 8002a0a:	40ce      	lsrs	r6, r1
 8002a0c:	1c65      	adds	r5, r4, #1
 8002a0e:	42bc      	cmp	r4, r7
 8002a10:	d3ed      	bcc.n	80029ee <cmox_RightShiftBN+0x1c>
 8002a12:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
 8002a16:	e002      	b.n	8002a1e <cmox_RightShiftBN+0x4c>
 8002a18:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8002a1c:	1c6d      	adds	r5, r5, #1
 8002a1e:	6810      	ldr	r0, [r2, #0]
 8002a20:	42a8      	cmp	r0, r5
 8002a22:	d2f9      	bcs.n	8002a18 <cmox_RightShiftBN+0x46>
 8002a24:	4618      	mov	r0, r3
 8002a26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a28 <cmox_ModAddBN>:
 8002a28:	e92d 4eff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
 8002a2c:	4682      	mov	sl, r0
 8002a2e:	2000      	movs	r0, #0
 8002a30:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8002a34:	4617      	mov	r7, r2
 8002a36:	469c      	mov	ip, r3
 8002a38:	460e      	mov	r6, r1
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	f8dc 3000 	ldr.w	r3, [ip]
 8002a40:	2100      	movs	r1, #0
 8002a42:	4293      	cmp	r3, r2
 8002a44:	bf21      	itttt	cs
 8002a46:	f8da b000 	ldrcs.w	fp, [sl]
 8002a4a:	4593      	cmpcs	fp, r2
 8002a4c:	6835      	ldrcs	r5, [r6, #0]
 8002a4e:	4295      	cmpcs	r5, r2
 8002a50:	d201      	bcs.n	8002a56 <cmox_ModAddBN+0x2e>
 8002a52:	2003      	movs	r0, #3
 8002a54:	e076      	b.n	8002b44 <cmox_ModAddBN+0x11c>
 8002a56:	45ab      	cmp	fp, r5
 8002a58:	d303      	bcc.n	8002a62 <cmox_ModAddBN+0x3a>
 8002a5a:	f8cd a004 	str.w	sl, [sp, #4]
 8002a5e:	9500      	str	r5, [sp, #0]
 8002a60:	e003      	b.n	8002a6a <cmox_ModAddBN+0x42>
 8002a62:	f8cd b000 	str.w	fp, [sp]
 8002a66:	9601      	str	r6, [sp, #4]
 8002a68:	46ab      	mov	fp, r5
 8002a6a:	455b      	cmp	r3, fp
 8002a6c:	bf38      	it	cc
 8002a6e:	469b      	movcc	fp, r3
 8002a70:	f04f 0e01 	mov.w	lr, #1
 8002a74:	2500      	movs	r5, #0
 8002a76:	e015      	b.n	8002aa4 <cmox_ModAddBN+0x7c>
 8002a78:	f85a 202e 	ldr.w	r2, [sl, lr, lsl #2]
 8002a7c:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8002a80:	1880      	adds	r0, r0, r2
 8002a82:	eb41 0905 	adc.w	r9, r1, r5
 8002a86:	1902      	adds	r2, r0, r4
 8002a88:	eb49 0305 	adc.w	r3, r9, r5
 8002a8c:	f857 002e 	ldr.w	r0, [r7, lr, lsl #2]
 8002a90:	2100      	movs	r1, #0
 8002a92:	1a10      	subs	r0, r2, r0
 8002a94:	f84c 002e 	str.w	r0, [ip, lr, lsl #2]
 8002a98:	eb63 0101 	sbc.w	r1, r3, r1
 8002a9c:	4608      	mov	r0, r1
 8002a9e:	17c9      	asrs	r1, r1, #31
 8002aa0:	f10e 0e01 	add.w	lr, lr, #1
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	4572      	cmp	r2, lr
 8002aa8:	d2e6      	bcs.n	8002a78 <cmox_ModAddBN+0x50>
 8002aaa:	9c00      	ldr	r4, [sp, #0]
 8002aac:	4574      	cmp	r4, lr
 8002aae:	d31c      	bcc.n	8002aea <cmox_ModAddBN+0xc2>
 8002ab0:	f85a 202e 	ldr.w	r2, [sl, lr, lsl #2]
 8002ab4:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	2500      	movs	r5, #0
 8002abc:	1914      	adds	r4, r2, r4
 8002abe:	415d      	adcs	r5, r3
 8002ac0:	1900      	adds	r0, r0, r4
 8002ac2:	f84c 002e 	str.w	r0, [ip, lr, lsl #2]
 8002ac6:	4169      	adcs	r1, r5
 8002ac8:	4608      	mov	r0, r1
 8002aca:	17c9      	asrs	r1, r1, #31
 8002acc:	f10e 0e01 	add.w	lr, lr, #1
 8002ad0:	e7eb      	b.n	8002aaa <cmox_ModAddBN+0x82>
 8002ad2:	9c01      	ldr	r4, [sp, #4]
 8002ad4:	f854 202e 	ldr.w	r2, [r4, lr, lsl #2]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	1880      	adds	r0, r0, r2
 8002adc:	f84c 002e 	str.w	r0, [ip, lr, lsl #2]
 8002ae0:	4159      	adcs	r1, r3
 8002ae2:	4608      	mov	r0, r1
 8002ae4:	17c9      	asrs	r1, r1, #31
 8002ae6:	f10e 0e01 	add.w	lr, lr, #1
 8002aea:	45f3      	cmp	fp, lr
 8002aec:	d2f1      	bcs.n	8002ad2 <cmox_ModAddBN+0xaa>
 8002aee:	4686      	mov	lr, r0
 8002af0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002af4:	4666      	mov	r6, ip
 8002af6:	f04f 0c01 	mov.w	ip, #1
 8002afa:	2500      	movs	r5, #0
 8002afc:	e010      	b.n	8002b20 <cmox_ModAddBN+0xf8>
 8002afe:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
 8002b02:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8002b06:	ea02 020e 	and.w	r2, r2, lr
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	18a2      	adds	r2, r4, r2
 8002b0e:	416b      	adcs	r3, r5
 8002b10:	1880      	adds	r0, r0, r2
 8002b12:	f846 002c 	str.w	r0, [r6, ip, lsl #2]
 8002b16:	4159      	adcs	r1, r3
 8002b18:	4608      	mov	r0, r1
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	f10c 0c01 	add.w	ip, ip, #1
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	4562      	cmp	r2, ip
 8002b24:	d2eb      	bcs.n	8002afe <cmox_ModAddBN+0xd6>
 8002b26:	6834      	ldr	r4, [r6, #0]
 8002b28:	4564      	cmp	r4, ip
 8002b2a:	d30a      	bcc.n	8002b42 <cmox_ModAddBN+0x11a>
 8002b2c:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 8002b30:	1880      	adds	r0, r0, r2
 8002b32:	f846 002c 	str.w	r0, [r6, ip, lsl #2]
 8002b36:	4169      	adcs	r1, r5
 8002b38:	4608      	mov	r0, r1
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	f10c 0c01 	add.w	ip, ip, #1
 8002b40:	e7f1      	b.n	8002b26 <cmox_ModAddBN+0xfe>
 8002b42:	2000      	movs	r0, #0
 8002b44:	b004      	add	sp, #16
 8002b46:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

08002b4a <cmox_ModSubBN>:
 8002b4a:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	468e      	mov	lr, r1
 8002b52:	2100      	movs	r1, #0
 8002b54:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002b58:	9a04      	ldr	r2, [sp, #16]
 8002b5a:	681c      	ldr	r4, [r3, #0]
 8002b5c:	6815      	ldr	r5, [r2, #0]
 8002b5e:	4683      	mov	fp, r0
 8002b60:	42ac      	cmp	r4, r5
 8002b62:	bf38      	it	cc
 8002b64:	2003      	movcc	r0, #3
 8002b66:	d36c      	bcc.n	8002c42 <cmox_ModSubBN+0xf8>
 8002b68:	f8de 5000 	ldr.w	r5, [lr]
 8002b6c:	f8db 9000 	ldr.w	r9, [fp]
 8002b70:	45a9      	cmp	r9, r5
 8002b72:	d306      	bcc.n	8002b82 <cmox_ModSubBN+0x38>
 8002b74:	f8cd 9000 	str.w	r9, [sp]
 8002b78:	f8cd b004 	str.w	fp, [sp, #4]
 8002b7c:	46a9      	mov	r9, r5
 8002b7e:	468c      	mov	ip, r1
 8002b80:	e004      	b.n	8002b8c <cmox_ModSubBN+0x42>
 8002b82:	f8cd e004 	str.w	lr, [sp, #4]
 8002b86:	9500      	str	r5, [sp, #0]
 8002b88:	f04f 3cff 	mov.w	ip, #4294967295
 8002b8c:	9d00      	ldr	r5, [sp, #0]
 8002b8e:	42ac      	cmp	r4, r5
 8002b90:	bf38      	it	cc
 8002b92:	9400      	strcc	r4, [sp, #0]
 8002b94:	4698      	mov	r8, r3
 8002b96:	f04f 0a01 	mov.w	sl, #1
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	2500      	movs	r5, #0
 8002ba0:	e00f      	b.n	8002bc2 <cmox_ModSubBN+0x78>
 8002ba2:	f85b 002a 	ldr.w	r0, [fp, sl, lsl #2]
 8002ba6:	f85e 402a 	ldr.w	r4, [lr, sl, lsl #2]
 8002baa:	1816      	adds	r6, r2, r0
 8002bac:	eb43 0701 	adc.w	r7, r3, r1
 8002bb0:	1b32      	subs	r2, r6, r4
 8002bb2:	f848 202a 	str.w	r2, [r8, sl, lsl #2]
 8002bb6:	eb67 0305 	sbc.w	r3, r7, r5
 8002bba:	461a      	mov	r2, r3
 8002bbc:	17db      	asrs	r3, r3, #31
 8002bbe:	f10a 0a01 	add.w	sl, sl, #1
 8002bc2:	45d1      	cmp	r9, sl
 8002bc4:	d2ed      	bcs.n	8002ba2 <cmox_ModSubBN+0x58>
 8002bc6:	9800      	ldr	r0, [sp, #0]
 8002bc8:	4550      	cmp	r0, sl
 8002bca:	d311      	bcc.n	8002bf0 <cmox_ModSubBN+0xa6>
 8002bcc:	9e01      	ldr	r6, [sp, #4]
 8002bce:	f856 002a 	ldr.w	r0, [r6, sl, lsl #2]
 8002bd2:	ea20 040c 	bic.w	r4, r0, ip
 8002bd6:	1912      	adds	r2, r2, r4
 8002bd8:	416b      	adcs	r3, r5
 8002bda:	ea00 000c 	and.w	r0, r0, ip
 8002bde:	1a12      	subs	r2, r2, r0
 8002be0:	f848 202a 	str.w	r2, [r8, sl, lsl #2]
 8002be4:	418b      	sbcs	r3, r1
 8002be6:	461a      	mov	r2, r3
 8002be8:	17db      	asrs	r3, r3, #31
 8002bea:	f10a 0a01 	add.w	sl, sl, #1
 8002bee:	e7ea      	b.n	8002bc6 <cmox_ModSubBN+0x7c>
 8002bf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002bf4:	f8dd c010 	ldr.w	ip, [sp, #16]
 8002bf8:	4616      	mov	r6, r2
 8002bfa:	2701      	movs	r7, #1
 8002bfc:	e00e      	b.n	8002c1c <cmox_ModSubBN+0xd2>
 8002bfe:	f85c 2027 	ldr.w	r2, [ip, r7, lsl #2]
 8002c02:	f858 4027 	ldr.w	r4, [r8, r7, lsl #2]
 8002c06:	4032      	ands	r2, r6
 8002c08:	2300      	movs	r3, #0
 8002c0a:	18a2      	adds	r2, r4, r2
 8002c0c:	416b      	adcs	r3, r5
 8002c0e:	1880      	adds	r0, r0, r2
 8002c10:	f848 0027 	str.w	r0, [r8, r7, lsl #2]
 8002c14:	4159      	adcs	r1, r3
 8002c16:	4608      	mov	r0, r1
 8002c18:	2100      	movs	r1, #0
 8002c1a:	1c7f      	adds	r7, r7, #1
 8002c1c:	f8dc 2000 	ldr.w	r2, [ip]
 8002c20:	42ba      	cmp	r2, r7
 8002c22:	d2ec      	bcs.n	8002bfe <cmox_ModSubBN+0xb4>
 8002c24:	f8d8 4000 	ldr.w	r4, [r8]
 8002c28:	42bc      	cmp	r4, r7
 8002c2a:	d309      	bcc.n	8002c40 <cmox_ModSubBN+0xf6>
 8002c2c:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
 8002c30:	1880      	adds	r0, r0, r2
 8002c32:	f848 0027 	str.w	r0, [r8, r7, lsl #2]
 8002c36:	4169      	adcs	r1, r5
 8002c38:	4608      	mov	r0, r1
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	1c7f      	adds	r7, r7, #1
 8002c3e:	e7f1      	b.n	8002c24 <cmox_ModSubBN+0xda>
 8002c40:	2000      	movs	r0, #0
 8002c42:	b005      	add	sp, #20
 8002c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002c48 <cmox_SubBN>:
 8002c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c4a:	6813      	ldr	r3, [r2, #0]
 8002c4c:	6806      	ldr	r6, [r0, #0]
 8002c4e:	2400      	movs	r4, #0
 8002c50:	2500      	movs	r5, #0
 8002c52:	42b3      	cmp	r3, r6
 8002c54:	d201      	bcs.n	8002c5a <cmox_SubBN+0x12>
 8002c56:	2003      	movs	r0, #3
 8002c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c5a:	468e      	mov	lr, r1
 8002c5c:	f04f 0c01 	mov.w	ip, #1
 8002c60:	4606      	mov	r6, r0
 8002c62:	4617      	mov	r7, r2
 8002c64:	2100      	movs	r1, #0
 8002c66:	e00f      	b.n	8002c88 <cmox_SubBN+0x40>
 8002c68:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 8002c6c:	f85e 002c 	ldr.w	r0, [lr, ip, lsl #2]
 8002c70:	2300      	movs	r3, #0
 8002c72:	18a2      	adds	r2, r4, r2
 8002c74:	416b      	adcs	r3, r5
 8002c76:	1a14      	subs	r4, r2, r0
 8002c78:	f847 402c 	str.w	r4, [r7, ip, lsl #2]
 8002c7c:	eb63 0501 	sbc.w	r5, r3, r1
 8002c80:	462c      	mov	r4, r5
 8002c82:	17ed      	asrs	r5, r5, #31
 8002c84:	f10c 0c01 	add.w	ip, ip, #1
 8002c88:	f8de 0000 	ldr.w	r0, [lr]
 8002c8c:	4560      	cmp	r0, ip
 8002c8e:	d2eb      	bcs.n	8002c68 <cmox_SubBN+0x20>
 8002c90:	6832      	ldr	r2, [r6, #0]
 8002c92:	4562      	cmp	r2, ip
 8002c94:	d30a      	bcc.n	8002cac <cmox_SubBN+0x64>
 8002c96:	f856 002c 	ldr.w	r0, [r6, ip, lsl #2]
 8002c9a:	1824      	adds	r4, r4, r0
 8002c9c:	f847 402c 	str.w	r4, [r7, ip, lsl #2]
 8002ca0:	414d      	adcs	r5, r1
 8002ca2:	462c      	mov	r4, r5
 8002ca4:	17ed      	asrs	r5, r5, #31
 8002ca6:	f10c 0c01 	add.w	ip, ip, #1
 8002caa:	e7f1      	b.n	8002c90 <cmox_SubBN+0x48>
 8002cac:	2000      	movs	r0, #0
 8002cae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cb0 <cmox_AddBN_Int>:
 8002cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb2:	4604      	mov	r4, r0
 8002cb4:	4615      	mov	r5, r2
 8002cb6:	6866      	ldr	r6, [r4, #4]
 8002cb8:	2700      	movs	r7, #0
 8002cba:	1872      	adds	r2, r6, r1
 8002cbc:	606a      	str	r2, [r5, #4]
 8002cbe:	eb47 73e1 	adc.w	r3, r7, r1, asr #31
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	17db      	asrs	r3, r3, #31
 8002cc6:	2602      	movs	r6, #2
 8002cc8:	e008      	b.n	8002cdc <cmox_AddBN_Int+0x2c>
 8002cca:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8002cce:	1812      	adds	r2, r2, r0
 8002cd0:	f845 2026 	str.w	r2, [r5, r6, lsl #2]
 8002cd4:	417b      	adcs	r3, r7
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	17db      	asrs	r3, r3, #31
 8002cda:	1c76      	adds	r6, r6, #1
 8002cdc:	6820      	ldr	r0, [r4, #0]
 8002cde:	42b0      	cmp	r0, r6
 8002ce0:	d2f3      	bcs.n	8002cca <cmox_AddBN_Int+0x1a>
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	4252      	negs	r2, r2
 8002ce6:	ea22 0000 	bic.w	r0, r2, r0
 8002cea:	0fc0      	lsrs	r0, r0, #31
 8002cec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cee <cmox_FieldBN_Div2>:
 8002cee:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8002cf2:	4615      	mov	r5, r2
 8002cf4:	6842      	ldr	r2, [r0, #4]
 8002cf6:	468e      	mov	lr, r1
 8002cf8:	f002 0601 	and.w	r6, r2, #1
 8002cfc:	6801      	ldr	r1, [r0, #0]
 8002cfe:	f8de 3000 	ldr.w	r3, [lr]
 8002d02:	4276      	negs	r6, r6
 8002d04:	4299      	cmp	r1, r3
 8002d06:	d102      	bne.n	8002d0e <cmox_FieldBN_Div2+0x20>
 8002d08:	682c      	ldr	r4, [r5, #0]
 8002d0a:	428c      	cmp	r4, r1
 8002d0c:	d201      	bcs.n	8002d12 <cmox_FieldBN_Div2+0x24>
 8002d0e:	2001      	movs	r0, #1
 8002d10:	e03d      	b.n	8002d8e <cmox_FieldBN_Div2+0xa0>
 8002d12:	f8de 7004 	ldr.w	r7, [lr, #4]
 8002d16:	2300      	movs	r3, #0
 8002d18:	4037      	ands	r7, r6
 8002d1a:	2400      	movs	r4, #0
 8002d1c:	19d2      	adds	r2, r2, r7
 8002d1e:	4163      	adcs	r3, r4
 8002d20:	4604      	mov	r4, r0
 8002d22:	606a      	str	r2, [r5, #4]
 8002d24:	2100      	movs	r1, #0
 8002d26:	f04f 0802 	mov.w	r8, #2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	e018      	b.n	8002d60 <cmox_FieldBN_Div2+0x72>
 8002d2e:	4607      	mov	r7, r0
 8002d30:	f85e 0028 	ldr.w	r0, [lr, r8, lsl #2]
 8002d34:	f854 2028 	ldr.w	r2, [r4, r8, lsl #2]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	4030      	ands	r0, r6
 8002d3c:	1810      	adds	r0, r2, r0
 8002d3e:	4159      	adcs	r1, r3
 8002d40:	1838      	adds	r0, r7, r0
 8002d42:	f845 0028 	str.w	r0, [r5, r8, lsl #2]
 8002d46:	4159      	adcs	r1, r3
 8002d48:	f855 3028 	ldr.w	r3, [r5, r8, lsl #2]
 8002d4c:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 8002d50:	07db      	lsls	r3, r3, #31
 8002d52:	4608      	mov	r0, r1
 8002d54:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8002d58:	2100      	movs	r1, #0
 8002d5a:	f84c 3c04 	str.w	r3, [ip, #-4]
 8002d5e:	46d0      	mov	r8, sl
 8002d60:	6822      	ldr	r2, [r4, #0]
 8002d62:	4542      	cmp	r2, r8
 8002d64:	eb05 0c88 	add.w	ip, r5, r8, lsl #2
 8002d68:	f108 0a01 	add.w	sl, r8, #1
 8002d6c:	d2df      	bcs.n	8002d2e <cmox_FieldBN_Div2+0x40>
 8002d6e:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8002d72:	07c0      	lsls	r0, r0, #31
 8002d74:	ea40 0053 	orr.w	r0, r0, r3, lsr #1
 8002d78:	f84c 0c04 	str.w	r0, [ip, #-4]
 8002d7c:	e003      	b.n	8002d86 <cmox_FieldBN_Div2+0x98>
 8002d7e:	f845 102a 	str.w	r1, [r5, sl, lsl #2]
 8002d82:	f10a 0a01 	add.w	sl, sl, #1
 8002d86:	6828      	ldr	r0, [r5, #0]
 8002d88:	4550      	cmp	r0, sl
 8002d8a:	d2f8      	bcs.n	8002d7e <cmox_FieldBN_Div2+0x90>
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}

08002d92 <cmox_FieldBN_Mul2>:
 8002d92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d96:	4690      	mov	r8, r2
 8002d98:	6802      	ldr	r2, [r0, #0]
 8002d9a:	680b      	ldr	r3, [r1, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d103      	bne.n	8002da8 <cmox_FieldBN_Mul2+0x16>
 8002da0:	f8d8 4000 	ldr.w	r4, [r8]
 8002da4:	4294      	cmp	r4, r2
 8002da6:	d201      	bcs.n	8002dac <cmox_FieldBN_Mul2+0x1a>
 8002da8:	2001      	movs	r0, #1
 8002daa:	e04f      	b.n	8002e4c <cmox_FieldBN_Mul2+0xba>
 8002dac:	6844      	ldr	r4, [r0, #4]
 8002dae:	684a      	ldr	r2, [r1, #4]
 8002db0:	0064      	lsls	r4, r4, #1
 8002db2:	2300      	movs	r3, #0
 8002db4:	f04f 0900 	mov.w	r9, #0
 8002db8:	1aa2      	subs	r2, r4, r2
 8002dba:	eb69 0303 	sbc.w	r3, r9, r3
 8002dbe:	4615      	mov	r5, r2
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	17db      	asrs	r3, r3, #31
 8002dc4:	2702      	movs	r7, #2
 8002dc6:	4684      	mov	ip, r0
 8002dc8:	468e      	mov	lr, r1
 8002dca:	e018      	b.n	8002dfe <cmox_FieldBN_Mul2+0x6c>
 8002dcc:	eb0c 0487 	add.w	r4, ip, r7, lsl #2
 8002dd0:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8002dd4:	f85c 1027 	ldr.w	r1, [ip, r7, lsl #2]
 8002dd8:	f85e 4027 	ldr.w	r4, [lr, r7, lsl #2]
 8002ddc:	0fc0      	lsrs	r0, r0, #31
 8002dde:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
 8002de2:	1816      	adds	r6, r2, r0
 8002de4:	eb08 0087 	add.w	r0, r8, r7, lsl #2
 8002de8:	eb43 0a09 	adc.w	sl, r3, r9
 8002dec:	f840 5c04 	str.w	r5, [r0, #-4]
 8002df0:	1b32      	subs	r2, r6, r4
 8002df2:	eb6a 0309 	sbc.w	r3, sl, r9
 8002df6:	4615      	mov	r5, r2
 8002df8:	461a      	mov	r2, r3
 8002dfa:	17db      	asrs	r3, r3, #31
 8002dfc:	1c7f      	adds	r7, r7, #1
 8002dfe:	f8dc 0000 	ldr.w	r0, [ip]
 8002e02:	42b8      	cmp	r0, r7
 8002e04:	d2e2      	bcs.n	8002dcc <cmox_FieldBN_Mul2+0x3a>
 8002e06:	4646      	mov	r6, r8
 8002e08:	4664      	mov	r4, ip
 8002e0a:	46c8      	mov	r8, r9
 8002e0c:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8002e10:	f846 5020 	str.w	r5, [r6, r0, lsl #2]
 8002e14:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8002e18:	2500      	movs	r5, #0
 8002e1a:	f04f 0c01 	mov.w	ip, #1
 8002e1e:	e011      	b.n	8002e44 <cmox_FieldBN_Mul2+0xb2>
 8002e20:	f85e 002c 	ldr.w	r0, [lr, ip, lsl #2]
 8002e24:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 8002e28:	4018      	ands	r0, r3
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	1810      	adds	r0, r2, r0
 8002e2e:	eb49 0101 	adc.w	r1, r9, r1
 8002e32:	eb18 0000 	adds.w	r0, r8, r0
 8002e36:	414d      	adcs	r5, r1
 8002e38:	f846 002c 	str.w	r0, [r6, ip, lsl #2]
 8002e3c:	46a8      	mov	r8, r5
 8002e3e:	17ed      	asrs	r5, r5, #31
 8002e40:	f10c 0c01 	add.w	ip, ip, #1
 8002e44:	6820      	ldr	r0, [r4, #0]
 8002e46:	4560      	cmp	r0, ip
 8002e48:	d2ea      	bcs.n	8002e20 <cmox_FieldBN_Mul2+0x8e>
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002e50 <cmox_FieldBN_CondNegate>:
 8002e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e54:	2400      	movs	r4, #0
 8002e56:	2500      	movs	r5, #0
 8002e58:	2900      	cmp	r1, #0
 8002e5a:	bf18      	it	ne
 8002e5c:	2a00      	cmpne	r2, #0
 8002e5e:	d003      	beq.n	8002e68 <cmox_FieldBN_CondNegate+0x18>
 8002e60:	680b      	ldr	r3, [r1, #0]
 8002e62:	6816      	ldr	r6, [r2, #0]
 8002e64:	42b3      	cmp	r3, r6
 8002e66:	d201      	bcs.n	8002e6c <cmox_FieldBN_CondNegate+0x1c>
 8002e68:	2001      	movs	r0, #1
 8002e6a:	e01d      	b.n	8002ea8 <cmox_FieldBN_CondNegate+0x58>
 8002e6c:	2701      	movs	r7, #1
 8002e6e:	4681      	mov	r9, r0
 8002e70:	460e      	mov	r6, r1
 8002e72:	4690      	mov	r8, r2
 8002e74:	e013      	b.n	8002e9e <cmox_FieldBN_CondNegate+0x4e>
 8002e76:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
 8002e7a:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
 8002e7e:	2100      	movs	r1, #0
 8002e80:	1820      	adds	r0, r4, r0
 8002e82:	4169      	adcs	r1, r5
 8002e84:	2300      	movs	r3, #0
 8002e86:	1a84      	subs	r4, r0, r2
 8002e88:	eb61 0503 	sbc.w	r5, r1, r3
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	4648      	mov	r0, r9
 8002e90:	f000 f8b7 	bl	8003002 <cmox_mathUtils_mux>
 8002e94:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
 8002e98:	462c      	mov	r4, r5
 8002e9a:	17ed      	asrs	r5, r5, #31
 8002e9c:	1c7f      	adds	r7, r7, #1
 8002e9e:	f8d8 0000 	ldr.w	r0, [r8]
 8002ea2:	42b8      	cmp	r0, r7
 8002ea4:	d2e7      	bcs.n	8002e76 <cmox_FieldBN_CondNegate+0x26>
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08002eac <cmox_ModularBN_InitWithR2>:
 8002eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eae:	4617      	mov	r7, r2
 8002eb0:	4605      	mov	r5, r0
 8002eb2:	460e      	mov	r6, r1
 8002eb4:	682a      	ldr	r2, [r5, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	0052      	lsls	r2, r2, #1
 8002eba:	f107 0108 	add.w	r1, r7, #8
 8002ebe:	f001 fe3d 	bl	8004b3c <cmox_bn_alloc>
 8002ec2:	0004      	movs	r4, r0
 8002ec4:	d109      	bne.n	8002eda <cmox_ModularBN_InitWithR2+0x2e>
 8002ec6:	607e      	str	r6, [r7, #4]
 8002ec8:	603d      	str	r5, [r7, #0]
 8002eca:	f107 010c 	add.w	r1, r7, #12
 8002ece:	6868      	ldr	r0, [r5, #4]
 8002ed0:	f7ff fd63 	bl	800299a <basic_type_modinv>
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	4240      	negs	r0, r0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	4620      	mov	r0, r4
 8002edc:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08002ede <cmox_ModularBN_Enter>:
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	9200      	str	r2, [sp, #0]
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	f000 f823 	bl	8002f32 <cmox_ModularBN_Mul>
 8002eec:	bd02      	pop	{r1, pc}

08002eee <cmox_ModularBN_Exit>:
 8002eee:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8002ef2:	461f      	mov	r7, r3
 8002ef4:	4605      	mov	r5, r0
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	4690      	mov	r8, r2
 8002efa:	9301      	str	r3, [sp, #4]
 8002efc:	460e      	mov	r6, r1
 8002efe:	682a      	ldr	r2, [r5, #0]
 8002f00:	a901      	add	r1, sp, #4
 8002f02:	4640      	mov	r0, r8
 8002f04:	f001 fe1a 	bl	8004b3c <cmox_bn_alloc>
 8002f08:	0004      	movs	r4, r0
 8002f0a:	d10f      	bne.n	8002f2c <cmox_ModularBN_Exit+0x3e>
 8002f0c:	9801      	ldr	r0, [sp, #4]
 8002f0e:	2101      	movs	r1, #1
 8002f10:	f001 fe4b 	bl	8004baa <cmox_bn_init>
 8002f14:	9700      	str	r7, [sp, #0]
 8002f16:	4633      	mov	r3, r6
 8002f18:	9901      	ldr	r1, [sp, #4]
 8002f1a:	462a      	mov	r2, r5
 8002f1c:	4628      	mov	r0, r5
 8002f1e:	f000 f808 	bl	8002f32 <cmox_ModularBN_Mul>
 8002f22:	4604      	mov	r4, r0
 8002f24:	a901      	add	r1, sp, #4
 8002f26:	4640      	mov	r0, r8
 8002f28:	f001 fe13 	bl	8004b52 <cmox_bn_free>
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

08002f32 <cmox_ModularBN_Mul>:
 8002f32:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8002f34:	461d      	mov	r5, r3
 8002f36:	4614      	mov	r4, r2
 8002f38:	682a      	ldr	r2, [r5, #0]
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	6816      	ldr	r6, [r2, #0]
 8002f3e:	42b3      	cmp	r3, r6
 8002f40:	d201      	bcs.n	8002f46 <cmox_ModularBN_Mul+0x14>
 8002f42:	2003      	movs	r0, #3
 8002f44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f46:	68eb      	ldr	r3, [r5, #12]
 8002f48:	9f08      	ldr	r7, [sp, #32]
 8002f4a:	9301      	str	r3, [sp, #4]
 8002f4c:	1d12      	adds	r2, r2, #4
 8002f4e:	9200      	str	r2, [sp, #0]
 8002f50:	1d09      	adds	r1, r1, #4
 8002f52:	68aa      	ldr	r2, [r5, #8]
 8002f54:	f8d7 c000 	ldr.w	ip, [r7]
 8002f58:	1d13      	adds	r3, r2, #4
 8002f5a:	4632      	mov	r2, r6
 8002f5c:	1d00      	adds	r0, r0, #4
 8002f5e:	47e0      	blx	ip
 8002f60:	68e8      	ldr	r0, [r5, #12]
 8002f62:	9000      	str	r0, [sp, #0]
 8002f64:	1d23      	adds	r3, r4, #4
 8002f66:	6829      	ldr	r1, [r5, #0]
 8002f68:	68a8      	ldr	r0, [r5, #8]
 8002f6a:	687c      	ldr	r4, [r7, #4]
 8002f6c:	1d0a      	adds	r2, r1, #4
 8002f6e:	4631      	mov	r1, r6
 8002f70:	1d00      	adds	r0, r0, #4
 8002f72:	47a0      	blx	r4
 8002f74:	2000      	movs	r0, #0
 8002f76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08002f78 <cmox_ModularBN_Sqr>:
 8002f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7a:	4615      	mov	r5, r2
 8002f7c:	460c      	mov	r4, r1
 8002f7e:	6829      	ldr	r1, [r5, #0]
 8002f80:	6822      	ldr	r2, [r4, #0]
 8002f82:	680e      	ldr	r6, [r1, #0]
 8002f84:	42b2      	cmp	r2, r6
 8002f86:	461f      	mov	r7, r3
 8002f88:	d201      	bcs.n	8002f8e <cmox_ModularBN_Sqr+0x16>
 8002f8a:	2003      	movs	r0, #3
 8002f8c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8002f8e:	68ea      	ldr	r2, [r5, #12]
 8002f90:	9200      	str	r2, [sp, #0]
 8002f92:	1d0b      	adds	r3, r1, #4
 8002f94:	68a9      	ldr	r1, [r5, #8]
 8002f96:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8002f9a:	1d0a      	adds	r2, r1, #4
 8002f9c:	4631      	mov	r1, r6
 8002f9e:	1d00      	adds	r0, r0, #4
 8002fa0:	47e0      	blx	ip
 8002fa2:	68e8      	ldr	r0, [r5, #12]
 8002fa4:	9000      	str	r0, [sp, #0]
 8002fa6:	1d23      	adds	r3, r4, #4
 8002fa8:	6829      	ldr	r1, [r5, #0]
 8002faa:	68a8      	ldr	r0, [r5, #8]
 8002fac:	68fc      	ldr	r4, [r7, #12]
 8002fae:	1d0a      	adds	r2, r1, #4
 8002fb0:	4631      	mov	r1, r6
 8002fb2:	1d00      	adds	r0, r0, #4
 8002fb4:	47a0      	blx	r4
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08002fba <cmox_ModularBN_DeinitWithR2>:
 8002fba:	460a      	mov	r2, r1
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	6001      	str	r1, [r0, #0]
 8002fc0:	60c1      	str	r1, [r0, #12]
 8002fc2:	6881      	ldr	r1, [r0, #8]
 8002fc4:	b121      	cbz	r1, 8002fd0 <cmox_ModularBN_DeinitWithR2+0x16>
 8002fc6:	f100 0108 	add.w	r1, r0, #8
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f001 bdc1 	b.w	8004b52 <cmox_bn_free>
 8002fd0:	4770      	bx	lr

08002fd2 <cmox_asm_montymul_fast256__sqr>:
 8002fd2:	b510      	push	{r4, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	9c04      	ldr	r4, [sp, #16]
 8002fdc:	9401      	str	r4, [sp, #4]
 8002fde:	460a      	mov	r2, r1
 8002fe0:	4601      	mov	r1, r0
 8002fe2:	f002 f826 	bl	8005032 <cmox_asm_montymul_fast256>
 8002fe6:	b002      	add	sp, #8
 8002fe8:	bd10      	pop	{r4, pc}

08002fea <cmox_asm_montymul_x128__sqr>:
 8002fea:	b510      	push	{r4, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	9c04      	ldr	r4, [sp, #16]
 8002ff4:	9401      	str	r4, [sp, #4]
 8002ff6:	460a      	mov	r2, r1
 8002ff8:	4601      	mov	r1, r0
 8002ffa:	f002 fb9f 	bl	800573c <cmox_asm_montymul_x128>
 8002ffe:	b002      	add	sp, #8
 8003000:	bd10      	pop	{r4, pc}

08003002 <cmox_mathUtils_mux>:
 8003002:	4240      	negs	r0, r0
 8003004:	4051      	eors	r1, r2
 8003006:	4008      	ands	r0, r1
 8003008:	4050      	eors	r0, r2
 800300a:	4770      	bx	lr

0800300c <cmox_mathUtils_not>:
 800300c:	f080 0001 	eor.w	r0, r0, #1
 8003010:	4770      	bx	lr

08003012 <cmox_mathUtils_neq>:
 8003012:	4048      	eors	r0, r1
 8003014:	4241      	negs	r1, r0
 8003016:	4308      	orrs	r0, r1
 8003018:	0fc0      	lsrs	r0, r0, #31
 800301a:	4770      	bx	lr

0800301c <cmox_mathUtils_gt>:
 800301c:	1a0a      	subs	r2, r1, r0
 800301e:	4041      	eors	r1, r0
 8003020:	4050      	eors	r0, r2
 8003022:	4008      	ands	r0, r1
 8003024:	4050      	eors	r0, r2
 8003026:	0fc0      	lsrs	r0, r0, #31
 8003028:	4770      	bx	lr

0800302a <cmox_mathUtils_bitLength>:
 800302a:	b510      	push	{r4, lr}
 800302c:	4601      	mov	r1, r0
 800302e:	2020      	movs	r0, #32
 8003030:	2201      	movs	r2, #1
 8003032:	231f      	movs	r3, #31
 8003034:	fa21 f403 	lsr.w	r4, r1, r3
 8003038:	f004 0401 	and.w	r4, r4, #1
 800303c:	f084 0401 	eor.w	r4, r4, #1
 8003040:	4022      	ands	r2, r4
 8003042:	1a80      	subs	r0, r0, r2
 8003044:	1e5b      	subs	r3, r3, #1
 8003046:	f113 0f01 	cmn.w	r3, #1
 800304a:	d1f3      	bne.n	8003034 <cmox_mathUtils_bitLength+0xa>
 800304c:	bd10      	pop	{r4, pc}

0800304e <cmox_mathUtils_abs>:
 800304e:	4601      	mov	r1, r0
 8003050:	4248      	negs	r0, r1
 8003052:	ea01 72e0 	and.w	r2, r1, r0, asr #31
 8003056:	ea00 70e1 	and.w	r0, r0, r1, asr #31
 800305a:	4310      	orrs	r0, r2
 800305c:	4770      	bx	lr

0800305e <cmox_membuf_init>:
 800305e:	2300      	movs	r3, #0

08003060 <cmox_membuf_set>:
 8003060:	2900      	cmp	r1, #0
 8003062:	bf18      	it	ne
 8003064:	2a00      	cmpne	r2, #0
 8003066:	d004      	beq.n	8003072 <cmox_membuf_set+0x12>
 8003068:	6001      	str	r1, [r0, #0]
 800306a:	6042      	str	r2, [r0, #4]
 800306c:	2100      	movs	r1, #0
 800306e:	6083      	str	r3, [r0, #8]
 8003070:	60c1      	str	r1, [r0, #12]
 8003072:	4770      	bx	lr

08003074 <cmox_membuf_getFree>:
 8003074:	4601      	mov	r1, r0
 8003076:	6848      	ldr	r0, [r1, #4]
 8003078:	6889      	ldr	r1, [r1, #8]
 800307a:	1a40      	subs	r0, r0, r1
 800307c:	4770      	bx	lr

0800307e <cmox_membuf_alloc>:
 800307e:	b520      	push	{r5, lr}
 8003080:	b111      	cbz	r1, 8003088 <cmox_membuf_alloc+0xa>
 8003082:	b91a      	cbnz	r2, 800308c <cmox_membuf_alloc+0xe>
 8003084:	2000      	movs	r0, #0
 8003086:	6008      	str	r0, [r1, #0]
 8003088:	2001      	movs	r0, #1
 800308a:	bd20      	pop	{r5, pc}
 800308c:	6883      	ldr	r3, [r0, #8]
 800308e:	6845      	ldr	r5, [r0, #4]
 8003090:	1cd2      	adds	r2, r2, #3
 8003092:	0892      	lsrs	r2, r2, #2
 8003094:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8003098:	4295      	cmp	r5, r2
 800309a:	d203      	bcs.n	80030a4 <cmox_membuf_alloc+0x26>
 800309c:	2000      	movs	r0, #0
 800309e:	6008      	str	r0, [r1, #0]
 80030a0:	2002      	movs	r0, #2
 80030a2:	bd20      	pop	{r5, pc}
 80030a4:	6805      	ldr	r5, [r0, #0]
 80030a6:	442b      	add	r3, r5
 80030a8:	600b      	str	r3, [r1, #0]
 80030aa:	6082      	str	r2, [r0, #8]
 80030ac:	4611      	mov	r1, r2
 80030ae:	68c2      	ldr	r2, [r0, #12]
 80030b0:	4291      	cmp	r1, r2
 80030b2:	bf38      	it	cc
 80030b4:	4611      	movcc	r1, r2
 80030b6:	60c1      	str	r1, [r0, #12]
 80030b8:	2000      	movs	r0, #0
 80030ba:	bd20      	pop	{r5, pc}

080030bc <cmox_membuf_free>:
 80030bc:	b510      	push	{r4, lr}
 80030be:	4604      	mov	r4, r0
 80030c0:	2000      	movs	r0, #0
 80030c2:	2900      	cmp	r1, #0
 80030c4:	bf1c      	itt	ne
 80030c6:	680b      	ldrne	r3, [r1, #0]
 80030c8:	2b00      	cmpne	r3, #0
 80030ca:	d003      	beq.n	80030d4 <cmox_membuf_free+0x18>
 80030cc:	b112      	cbz	r2, 80030d4 <cmox_membuf_free+0x18>
 80030ce:	68a3      	ldr	r3, [r4, #8]
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d201      	bcs.n	80030d8 <cmox_membuf_free+0x1c>
 80030d4:	2001      	movs	r0, #1
 80030d6:	bd10      	pop	{r4, pc}
 80030d8:	1cd2      	adds	r2, r2, #3
 80030da:	0892      	lsrs	r2, r2, #2
 80030dc:	6008      	str	r0, [r1, #0]
 80030de:	eba3 0282 	sub.w	r2, r3, r2, lsl #2
 80030e2:	60a2      	str	r2, [r4, #8]
 80030e4:	bd10      	pop	{r4, pc}

080030e6 <cmox_membuf_cleanup>:
 80030e6:	b510      	push	{r4, lr}
 80030e8:	4604      	mov	r4, r0
 80030ea:	6861      	ldr	r1, [r4, #4]
 80030ec:	6820      	ldr	r0, [r4, #0]
 80030ee:	f008 f936 	bl	800b35e <__aeabi_memclr>
 80030f2:	2000      	movs	r0, #0
 80030f4:	2100      	movs	r1, #0
 80030f6:	2200      	movs	r2, #0
 80030f8:	2300      	movs	r3, #0
 80030fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80030fe:	bd10      	pop	{r4, pc}
 8003100:	0101b004 	.word	0x0101b004
 8003104:	45011700 	.word	0x45011700

08003108 <.text_19>:
	...

08003110 <cmox_ModExpBN_SW>:
 8003110:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003114:	b08a      	sub	sp, #40	@ 0x28
 8003116:	4683      	mov	fp, r0
 8003118:	2001      	movs	r0, #1
 800311a:	f88d 0008 	strb.w	r0, [sp, #8]
 800311e:	2400      	movs	r4, #0
 8003120:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003122:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
 8003126:	2601      	movs	r6, #1
 8003128:	4617      	mov	r7, r2
 800312a:	2500      	movs	r5, #0
 800312c:	9507      	str	r5, [sp, #28]
 800312e:	9501      	str	r5, [sp, #4]
 8003130:	46aa      	mov	sl, r5
 8003132:	6801      	ldr	r1, [r0, #0]
 8003134:	2901      	cmp	r1, #1
 8003136:	bf88      	it	hi
 8003138:	b2de      	uxtbhi	r6, r3
 800313a:	2101      	movs	r1, #1
 800313c:	1e70      	subs	r0, r6, #1
 800313e:	4081      	lsls	r1, r0
 8003140:	0089      	lsls	r1, r1, #2
 8003142:	9109      	str	r1, [sp, #36]	@ 0x24
 8003144:	460a      	mov	r2, r1
 8003146:	a901      	add	r1, sp, #4
 8003148:	4648      	mov	r0, r9
 800314a:	f7ff ff98 	bl	800307e <cmox_membuf_alloc>
 800314e:	2800      	cmp	r0, #0
 8003150:	9004      	str	r0, [sp, #16]
 8003152:	f040 80ef 	bne.w	8003334 <cmox_ModExpBN_SW+0x224>
 8003156:	46a8      	mov	r8, r5
 8003158:	e00c      	b.n	8003174 <cmox_ModExpBN_SW+0x64>
 800315a:	6838      	ldr	r0, [r7, #0]
 800315c:	9901      	ldr	r1, [sp, #4]
 800315e:	6802      	ldr	r2, [r0, #0]
 8003160:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8003164:	4648      	mov	r0, r9
 8003166:	f001 fce9 	bl	8004b3c <cmox_bn_alloc>
 800316a:	2800      	cmp	r0, #0
 800316c:	9004      	str	r0, [sp, #16]
 800316e:	d175      	bne.n	800325c <cmox_ModExpBN_SW+0x14c>
 8003170:	f108 0801 	add.w	r8, r8, #1
 8003174:	2001      	movs	r0, #1
 8003176:	1e72      	subs	r2, r6, #1
 8003178:	4090      	lsls	r0, r2
 800317a:	4580      	cmp	r8, r0
 800317c:	9006      	str	r0, [sp, #24]
 800317e:	d3ec      	bcc.n	800315a <cmox_ModExpBN_SW+0x4a>
 8003180:	9801      	ldr	r0, [sp, #4]
 8003182:	f8cd b00c 	str.w	fp, [sp, #12]
 8003186:	2100      	movs	r1, #0
 8003188:	6800      	ldr	r0, [r0, #0]
 800318a:	f001 fd0e 	bl	8004baa <cmox_bn_init>
 800318e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8003190:	2100      	movs	r1, #0
 8003192:	f001 fd0a 	bl	8004baa <cmox_bn_init>
 8003196:	9801      	ldr	r0, [sp, #4]
 8003198:	6802      	ldr	r2, [r0, #0]
 800319a:	9903      	ldr	r1, [sp, #12]
 800319c:	2001      	movs	r0, #1
 800319e:	f001 fd13 	bl	8004bc8 <cmox_bn_cCopy>
 80031a2:	f8dd b058 	ldr.w	fp, [sp, #88]	@ 0x58
 80031a6:	9700      	str	r7, [sp, #0]
 80031a8:	2700      	movs	r7, #0
 80031aa:	e007      	b.n	80031bc <cmox_ModExpBN_SW+0xac>
 80031ac:	9801      	ldr	r0, [sp, #4]
 80031ae:	6800      	ldr	r0, [r0, #0]
 80031b0:	9a00      	ldr	r2, [sp, #0]
 80031b2:	465b      	mov	r3, fp
 80031b4:	4601      	mov	r1, r0
 80031b6:	f7ff fedf 	bl	8002f78 <cmox_ModularBN_Sqr>
 80031ba:	1c7f      	adds	r7, r7, #1
 80031bc:	1e70      	subs	r0, r6, #1
 80031be:	4287      	cmp	r7, r0
 80031c0:	d3f4      	bcc.n	80031ac <cmox_ModExpBN_SW+0x9c>
 80031c2:	9900      	ldr	r1, [sp, #0]
 80031c4:	9605      	str	r6, [sp, #20]
 80031c6:	4658      	mov	r0, fp
 80031c8:	1e73      	subs	r3, r6, #1
 80031ca:	2701      	movs	r7, #1
 80031cc:	f88d 3009 	strb.w	r3, [sp, #9]
 80031d0:	468b      	mov	fp, r1
 80031d2:	4606      	mov	r6, r0
 80031d4:	e00c      	b.n	80031f0 <cmox_ModExpBN_SW+0xe0>
 80031d6:	9600      	str	r6, [sp, #0]
 80031d8:	465b      	mov	r3, fp
 80031da:	9801      	ldr	r0, [sp, #4]
 80031dc:	9903      	ldr	r1, [sp, #12]
 80031de:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
 80031e2:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 80031e6:	1c7f      	adds	r7, r7, #1
 80031e8:	f85c 0c04 	ldr.w	r0, [ip, #-4]
 80031ec:	f7ff fea1 	bl	8002f32 <cmox_ModularBN_Mul>
 80031f0:	9806      	ldr	r0, [sp, #24]
 80031f2:	4287      	cmp	r7, r0
 80031f4:	d3ef      	bcc.n	80031d6 <cmox_ModExpBN_SW+0xc6>
 80031f6:	9616      	str	r6, [sp, #88]	@ 0x58
 80031f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80031fa:	6801      	ldr	r1, [r0, #0]
 80031fc:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80031fe:	9106      	str	r1, [sp, #24]
 8003200:	2100      	movs	r1, #0
 8003202:	f001 fcd2 	bl	8004baa <cmox_bn_init>
 8003206:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8003208:	9903      	ldr	r1, [sp, #12]
 800320a:	2001      	movs	r0, #1
 800320c:	f001 fcdc 	bl	8004bc8 <cmox_bn_cCopy>
 8003210:	2001      	movs	r0, #1
 8003212:	9008      	str	r0, [sp, #32]
 8003214:	e015      	b.n	8003242 <cmox_ModExpBN_SW+0x132>
 8003216:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003218:	9906      	ldr	r1, [sp, #24]
 800321a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800321e:	9906      	ldr	r1, [sp, #24]
 8003220:	1e49      	subs	r1, r1, #1
 8003222:	2220      	movs	r2, #32
 8003224:	9007      	str	r0, [sp, #28]
 8003226:	9106      	str	r1, [sp, #24]
 8003228:	f88d 2008 	strb.w	r2, [sp, #8]
 800322c:	9807      	ldr	r0, [sp, #28]
 800322e:	9907      	ldr	r1, [sp, #28]
 8003230:	0fc0      	lsrs	r0, r0, #31
 8003232:	0049      	lsls	r1, r1, #1
 8003234:	002a      	movs	r2, r5
 8003236:	9107      	str	r1, [sp, #28]
 8003238:	d13b      	bne.n	80032b2 <cmox_ModExpBN_SW+0x1a2>
 800323a:	2800      	cmp	r0, #0
 800323c:	d001      	beq.n	8003242 <cmox_ModExpBN_SW+0x132>
 800323e:	d043      	beq.n	80032c8 <cmox_ModExpBN_SW+0x1b8>
 8003240:	2501      	movs	r5, #1
 8003242:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003246:	1e41      	subs	r1, r0, #1
 8003248:	f88d 1008 	strb.w	r1, [sp, #8]
 800324c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003250:	2800      	cmp	r0, #0
 8003252:	d1eb      	bne.n	800322c <cmox_ModExpBN_SW+0x11c>
 8003254:	9806      	ldr	r0, [sp, #24]
 8003256:	2800      	cmp	r0, #0
 8003258:	d1dd      	bne.n	8003216 <cmox_ModExpBN_SW+0x106>
 800325a:	2d02      	cmp	r5, #2
 800325c:	d11c      	bne.n	8003298 <cmox_ModExpBN_SW+0x188>
 800325e:	b2e0      	uxtb	r0, r4
 8003260:	b1d0      	cbz	r0, 8003298 <cmox_ModExpBN_SW+0x188>
 8003262:	b2e5      	uxtb	r5, r4
 8003264:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8003266:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8003268:	9f05      	ldr	r7, [sp, #20]
 800326a:	4633      	mov	r3, r6
 800326c:	465a      	mov	r2, fp
 800326e:	4621      	mov	r1, r4
 8003270:	4620      	mov	r0, r4
 8003272:	f7ff fe81 	bl	8002f78 <cmox_ModularBN_Sqr>
 8003276:	9908      	ldr	r1, [sp, #32]
 8003278:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800327c:	40b9      	lsls	r1, r7
 800327e:	fa5f f08a 	uxtb.w	r0, sl
 8003282:	4208      	tst	r0, r1
 8003284:	d006      	beq.n	8003294 <cmox_ModExpBN_SW+0x184>
 8003286:	9600      	str	r6, [sp, #0]
 8003288:	465b      	mov	r3, fp
 800328a:	9903      	ldr	r1, [sp, #12]
 800328c:	4622      	mov	r2, r4
 800328e:	4620      	mov	r0, r4
 8003290:	f7ff fe4f 	bl	8002f32 <cmox_ModularBN_Mul>
 8003294:	1e6d      	subs	r5, r5, #1
 8003296:	d1e8      	bne.n	800326a <cmox_ModExpBN_SW+0x15a>
 8003298:	f1b8 0f00 	cmp.w	r8, #0
 800329c:	d045      	beq.n	800332a <cmox_ModExpBN_SW+0x21a>
 800329e:	9801      	ldr	r0, [sp, #4]
 80032a0:	eb00 0188 	add.w	r1, r0, r8, lsl #2
 80032a4:	1f09      	subs	r1, r1, #4
 80032a6:	4648      	mov	r0, r9
 80032a8:	f001 fc53 	bl	8004b52 <cmox_bn_free>
 80032ac:	f1a8 0801 	sub.w	r8, r8, #1
 80032b0:	e7f2      	b.n	8003298 <cmox_ModExpBN_SW+0x188>
 80032b2:	2d01      	cmp	r5, #1
 80032b4:	bf08      	it	eq
 80032b6:	2800      	cmpeq	r0, #0
 80032b8:	d106      	bne.n	80032c8 <cmox_ModExpBN_SW+0x1b8>
 80032ba:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80032bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80032be:	465a      	mov	r2, fp
 80032c0:	4608      	mov	r0, r1
 80032c2:	f7ff fe59 	bl	8002f78 <cmox_ModularBN_Sqr>
 80032c6:	e7bc      	b.n	8003242 <cmox_ModExpBN_SW+0x132>
 80032c8:	9905      	ldr	r1, [sp, #20]
 80032ca:	9a05      	ldr	r2, [sp, #20]
 80032cc:	1c64      	adds	r4, r4, #1
 80032ce:	1b09      	subs	r1, r1, r4
 80032d0:	4088      	lsls	r0, r1
 80032d2:	ea40 0a0a 	orr.w	sl, r0, sl
 80032d6:	2502      	movs	r5, #2
 80032d8:	b2e0      	uxtb	r0, r4
 80032da:	4290      	cmp	r0, r2
 80032dc:	d1b1      	bne.n	8003242 <cmox_ModExpBN_SW+0x132>
 80032de:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80032e0:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80032e2:	2700      	movs	r7, #0
 80032e4:	4616      	mov	r6, r2
 80032e6:	e006      	b.n	80032f6 <cmox_ModExpBN_SW+0x1e6>
 80032e8:	4623      	mov	r3, r4
 80032ea:	465a      	mov	r2, fp
 80032ec:	4629      	mov	r1, r5
 80032ee:	4628      	mov	r0, r5
 80032f0:	f7ff fe42 	bl	8002f78 <cmox_ModularBN_Sqr>
 80032f4:	1c7f      	adds	r7, r7, #1
 80032f6:	42b7      	cmp	r7, r6
 80032f8:	d3f6      	bcc.n	80032e8 <cmox_ModExpBN_SW+0x1d8>
 80032fa:	9514      	str	r5, [sp, #80]	@ 0x50
 80032fc:	9416      	str	r4, [sp, #88]	@ 0x58
 80032fe:	9605      	str	r6, [sp, #20]
 8003300:	fa5f f48a 	uxtb.w	r4, sl
 8003304:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8003306:	9d08      	ldr	r5, [sp, #32]
 8003308:	f99d 0009 	ldrsb.w	r0, [sp, #9]
 800330c:	9901      	ldr	r1, [sp, #4]
 800330e:	9200      	str	r2, [sp, #0]
 8003310:	4085      	lsls	r5, r0
 8003312:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8003314:	ea24 0a05 	bic.w	sl, r4, r5
 8003318:	f851 102a 	ldr.w	r1, [r1, sl, lsl #2]
 800331c:	465b      	mov	r3, fp
 800331e:	4610      	mov	r0, r2
 8003320:	f7ff fe07 	bl	8002f32 <cmox_ModularBN_Mul>
 8003324:	2400      	movs	r4, #0
 8003326:	46a2      	mov	sl, r4
 8003328:	e78a      	b.n	8003240 <cmox_ModExpBN_SW+0x130>
 800332a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800332c:	a901      	add	r1, sp, #4
 800332e:	4648      	mov	r0, r9
 8003330:	f7ff fec4 	bl	80030bc <cmox_membuf_free>
 8003334:	9804      	ldr	r0, [sp, #16]
 8003336:	b00b      	add	sp, #44	@ 0x2c
 8003338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800333c <cmox_ModExpBN_SM>:
 800333c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003340:	4691      	mov	r9, r2
 8003342:	460d      	mov	r5, r1
 8003344:	9f08      	ldr	r7, [sp, #32]
 8003346:	f8d9 1000 	ldr.w	r1, [r9]
 800334a:	680a      	ldr	r2, [r1, #0]
 800334c:	4680      	mov	r8, r0
 800334e:	6838      	ldr	r0, [r7, #0]
 8003350:	4290      	cmp	r0, r2
 8003352:	bf38      	it	cc
 8003354:	2001      	movcc	r0, #1
 8003356:	d322      	bcc.n	800339e <cmox_ModExpBN_SM+0x62>
 8003358:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800335a:	2101      	movs	r1, #1
 800335c:	4638      	mov	r0, r7
 800335e:	f001 fc24 	bl	8004baa <cmox_bn_init>
 8003362:	4622      	mov	r2, r4
 8003364:	4649      	mov	r1, r9
 8003366:	4638      	mov	r0, r7
 8003368:	f7ff fdb9 	bl	8002ede <cmox_ModularBN_Enter>
 800336c:	682e      	ldr	r6, [r5, #0]
 800336e:	e000      	b.n	8003372 <cmox_ModExpBN_SM+0x36>
 8003370:	1e76      	subs	r6, r6, #1
 8003372:	2e00      	cmp	r6, #0
 8003374:	dd03      	ble.n	800337e <cmox_ModExpBN_SM+0x42>
 8003376:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 800337a:	2800      	cmp	r0, #0
 800337c:	d0f8      	beq.n	8003370 <cmox_ModExpBN_SM+0x34>
 800337e:	0176      	lsls	r6, r6, #5
 8003380:	e008      	b.n	8003394 <cmox_ModExpBN_SM+0x58>
 8003382:	1d28      	adds	r0, r5, #4
 8003384:	0971      	lsrs	r1, r6, #5
 8003386:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 800338a:	f006 001f 	and.w	r0, r6, #31
 800338e:	40c2      	lsrs	r2, r0
 8003390:	07d1      	lsls	r1, r2, #31
 8003392:	d406      	bmi.n	80033a2 <cmox_ModExpBN_SM+0x66>
 8003394:	1e76      	subs	r6, r6, #1
 8003396:	d5f4      	bpl.n	8003382 <cmox_ModExpBN_SM+0x46>
 8003398:	2e00      	cmp	r6, #0
 800339a:	d502      	bpl.n	80033a2 <cmox_ModExpBN_SM+0x66>
 800339c:	2000      	movs	r0, #0
 800339e:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
 80033a2:	4623      	mov	r3, r4
 80033a4:	464a      	mov	r2, r9
 80033a6:	4639      	mov	r1, r7
 80033a8:	4638      	mov	r0, r7
 80033aa:	f7ff fde5 	bl	8002f78 <cmox_ModularBN_Sqr>
 80033ae:	1d28      	adds	r0, r5, #4
 80033b0:	0971      	lsrs	r1, r6, #5
 80033b2:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 80033b6:	f006 001f 	and.w	r0, r6, #31
 80033ba:	40c2      	lsrs	r2, r0
 80033bc:	07d1      	lsls	r1, r2, #31
 80033be:	d506      	bpl.n	80033ce <cmox_ModExpBN_SM+0x92>
 80033c0:	9400      	str	r4, [sp, #0]
 80033c2:	464b      	mov	r3, r9
 80033c4:	463a      	mov	r2, r7
 80033c6:	4641      	mov	r1, r8
 80033c8:	4638      	mov	r0, r7
 80033ca:	f7ff fdb2 	bl	8002f32 <cmox_ModularBN_Mul>
 80033ce:	1e76      	subs	r6, r6, #1
 80033d0:	e7e2      	b.n	8003398 <cmox_ModExpBN_SM+0x5c>

080033d2 <cmox_ScalarMul_FW>:
 80033d2:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d6:	b08c      	sub	sp, #48	@ 0x30
 80033d8:	4607      	mov	r7, r0
 80033da:	2001      	movs	r0, #1
 80033dc:	468b      	mov	fp, r1
 80033de:	9009      	str	r0, [sp, #36]	@ 0x24
 80033e0:	2200      	movs	r2, #0
 80033e2:	69b9      	ldr	r1, [r7, #24]
 80033e4:	6988      	ldr	r0, [r1, #24]
 80033e6:	6846      	ldr	r6, [r0, #4]
 80033e8:	9204      	str	r2, [sp, #16]
 80033ea:	461c      	mov	r4, r3
 80033ec:	2100      	movs	r1, #0
 80033ee:	4658      	mov	r0, fp
 80033f0:	f001 fc86 	bl	8004d00 <cmox_bn_cmpUint>
 80033f4:	b950      	cbnz	r0, 800340c <cmox_ScalarMul_FW+0x3a>
 80033f6:	69b8      	ldr	r0, [r7, #24]
 80033f8:	6800      	ldr	r0, [r0, #0]
 80033fa:	69c1      	ldr	r1, [r0, #28]
 80033fc:	2901      	cmp	r1, #1
 80033fe:	d008      	beq.n	8003412 <cmox_ScalarMul_FW+0x40>
 8003400:	6881      	ldr	r1, [r0, #8]
 8003402:	4658      	mov	r0, fp
 8003404:	f001 fc3b 	bl	8004c7e <cmox_bn_cmp>
 8003408:	2800      	cmp	r0, #0
 800340a:	d402      	bmi.n	8003412 <cmox_ScalarMul_FW+0x40>
 800340c:	f04f 0801 	mov.w	r8, #1
 8003410:	e1d7      	b.n	80037c2 <cmox_ScalarMul_FW+0x3f0>
 8003412:	69b8      	ldr	r0, [r7, #24]
 8003414:	6841      	ldr	r1, [r0, #4]
 8003416:	698a      	ldr	r2, [r1, #24]
 8003418:	69f8      	ldr	r0, [r7, #28]
 800341a:	0092      	lsls	r2, r2, #2
 800341c:	f107 0114 	add.w	r1, r7, #20
 8003420:	f7ff fe2d 	bl	800307e <cmox_membuf_alloc>
 8003424:	ea5f 0800 	movs.w	r8, r0
 8003428:	d1f2      	bne.n	8003410 <cmox_ScalarMul_FW+0x3e>
 800342a:	2500      	movs	r5, #0
 800342c:	e00c      	b.n	8003448 <cmox_ScalarMul_FW+0x76>
 800342e:	6809      	ldr	r1, [r1, #0]
 8003430:	680a      	ldr	r2, [r1, #0]
 8003432:	6979      	ldr	r1, [r7, #20]
 8003434:	6812      	ldr	r2, [r2, #0]
 8003436:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800343a:	f001 fb7f 	bl	8004b3c <cmox_bn_alloc>
 800343e:	ea5f 0800 	movs.w	r8, r0
 8003442:	f040 81b3 	bne.w	80037ac <cmox_ScalarMul_FW+0x3da>
 8003446:	1c6d      	adds	r5, r5, #1
 8003448:	69b9      	ldr	r1, [r7, #24]
 800344a:	684a      	ldr	r2, [r1, #4]
 800344c:	6993      	ldr	r3, [r2, #24]
 800344e:	69f8      	ldr	r0, [r7, #28]
 8003450:	429d      	cmp	r5, r3
 8003452:	d3ec      	bcc.n	800342e <cmox_ScalarMul_FW+0x5c>
 8003454:	f04f 0901 	mov.w	r9, #1
 8003458:	1e72      	subs	r2, r6, #1
 800345a:	fa09 f202 	lsl.w	r2, r9, r2
 800345e:	0092      	lsls	r2, r2, #2
 8003460:	9208      	str	r2, [sp, #32]
 8003462:	a901      	add	r1, sp, #4
 8003464:	f7ff fe0b 	bl	800307e <cmox_membuf_alloc>
 8003468:	ea5f 0800 	movs.w	r8, r0
 800346c:	46aa      	mov	sl, r5
 800346e:	f040 8194 	bne.w	800379a <cmox_ScalarMul_FW+0x3c8>
 8003472:	2500      	movs	r5, #0
 8003474:	e010      	b.n	8003498 <cmox_ScalarMul_FW+0xc6>
 8003476:	9801      	ldr	r0, [sp, #4]
 8003478:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800347c:	4638      	mov	r0, r7
 800347e:	f7fc ff20 	bl	80002c2 <cmox_ECC_AllocPoint>
 8003482:	ea5f 0800 	movs.w	r8, r0
 8003486:	f040 8181 	bne.w	800378c <cmox_ScalarMul_FW+0x3ba>
 800348a:	9801      	ldr	r0, [sp, #4]
 800348c:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
 8003490:	4638      	mov	r0, r7
 8003492:	f7fc fffd 	bl	8000490 <cmox_ECC_SetPointAtInfinity>
 8003496:	1c6d      	adds	r5, r5, #1
 8003498:	1e71      	subs	r1, r6, #1
 800349a:	fa09 f101 	lsl.w	r1, r9, r1
 800349e:	428d      	cmp	r5, r1
 80034a0:	d3e9      	bcc.n	8003476 <cmox_ScalarMul_FW+0xa4>
 80034a2:	9702      	str	r7, [sp, #8]
 80034a4:	950b      	str	r5, [sp, #44]	@ 0x2c
 80034a6:	9403      	str	r4, [sp, #12]
 80034a8:	4621      	mov	r1, r4
 80034aa:	9802      	ldr	r0, [sp, #8]
 80034ac:	f7fc fff0 	bl	8000490 <cmox_ECC_SetPointAtInfinity>
 80034b0:	f89b 0004 	ldrb.w	r0, [fp, #4]
 80034b4:	f000 0001 	and.w	r0, r0, #1
 80034b8:	9007      	str	r0, [sp, #28]
 80034ba:	f04f 0800 	mov.w	r8, #0
 80034be:	9802      	ldr	r0, [sp, #8]
 80034c0:	6981      	ldr	r1, [r0, #24]
 80034c2:	680a      	ldr	r2, [r1, #0]
 80034c4:	9807      	ldr	r0, [sp, #28]
 80034c6:	6892      	ldr	r2, [r2, #8]
 80034c8:	4659      	mov	r1, fp
 80034ca:	f1c0 0001 	rsb	r0, r0, #1
 80034ce:	f7ff fcbf 	bl	8002e50 <cmox_FieldBN_CondNegate>
 80034d2:	f8db 0000 	ldr.w	r0, [fp]
 80034d6:	ebc6 1540 	rsb	r5, r6, r0, lsl #5
 80034da:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 80034de:	f7ff fda4 	bl	800302a <cmox_mathUtils_bitLength>
 80034e2:	f8db 1000 	ldr.w	r1, [fp]
 80034e6:	1e49      	subs	r1, r1, #1
 80034e8:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80034ec:	1e71      	subs	r1, r6, #1
 80034ee:	fa09 f101 	lsl.w	r1, r9, r1
 80034f2:	1e49      	subs	r1, r1, #1
 80034f4:	9105      	str	r1, [sp, #20]
 80034f6:	fa09 f206 	lsl.w	r2, r9, r6
 80034fa:	9206      	str	r2, [sp, #24]
 80034fc:	4634      	mov	r4, r6
 80034fe:	900a      	str	r0, [sp, #40]	@ 0x28
 8003500:	e02d      	b.n	800355e <cmox_ScalarMul_FW+0x18c>
 8003502:	4642      	mov	r2, r8
 8003504:	1c61      	adds	r1, r4, #1
 8003506:	4658      	mov	r0, fp
 8003508:	f001 fc29 	bl	8004d5e <cmox_bn_getBits>
 800350c:	4606      	mov	r6, r0
 800350e:	9806      	ldr	r0, [sp, #24]
 8003510:	1a30      	subs	r0, r6, r0
 8003512:	f7ff fd9c 	bl	800304e <cmox_mathUtils_abs>
 8003516:	4607      	mov	r7, r0
 8003518:	eb04 0008 	add.w	r0, r4, r8
 800351c:	9000      	str	r0, [sp, #0]
 800351e:	4601      	mov	r1, r0
 8003520:	4628      	mov	r0, r5
 8003522:	f7ff fd7b 	bl	800301c <cmox_mathUtils_gt>
 8003526:	9906      	ldr	r1, [sp, #24]
 8003528:	2200      	movs	r2, #0
 800352a:	f7ff fd6a 	bl	8003002 <cmox_mathUtils_mux>
 800352e:	ea40 0757 	orr.w	r7, r0, r7, lsr #1
 8003532:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003534:	4641      	mov	r1, r8
 8003536:	f7ff fd71 	bl	800301c <cmox_mathUtils_gt>
 800353a:	40e6      	lsrs	r6, r4
 800353c:	f006 0601 	and.w	r6, r6, #1
 8003540:	1e63      	subs	r3, r4, #1
 8003542:	9a05      	ldr	r2, [sp, #20]
 8003544:	409e      	lsls	r6, r3
 8003546:	ea46 0107 	orr.w	r1, r6, r7
 800354a:	f7ff fd5a 	bl	8003002 <cmox_mathUtils_mux>
 800354e:	4603      	mov	r3, r0
 8003550:	4642      	mov	r2, r8
 8003552:	1c61      	adds	r1, r4, #1
 8003554:	4658      	mov	r0, fp
 8003556:	f001 fc26 	bl	8004da6 <cmox_bn_setBits>
 800355a:	f8dd 8000 	ldr.w	r8, [sp]
 800355e:	45a8      	cmp	r8, r5
 8003560:	d3cf      	bcc.n	8003502 <cmox_ScalarMul_FW+0x130>
 8003562:	1c65      	adds	r5, r4, #1
 8003564:	4642      	mov	r2, r8
 8003566:	4629      	mov	r1, r5
 8003568:	4658      	mov	r0, fp
 800356a:	f001 fbf8 	bl	8004d5e <cmox_bn_getBits>
 800356e:	0843      	lsrs	r3, r0, #1
 8003570:	4642      	mov	r2, r8
 8003572:	4629      	mov	r1, r5
 8003574:	4658      	mov	r0, fp
 8003576:	f001 fc16 	bl	8004da6 <cmox_bn_setBits>
 800357a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800357c:	7c00      	ldrb	r0, [r0, #16]
 800357e:	2100      	movs	r1, #0
 8003580:	f000 0004 	and.w	r0, r0, #4
 8003584:	f7ff fd45 	bl	8003012 <cmox_mathUtils_neq>
 8003588:	b920      	cbnz	r0, 8003594 <cmox_ScalarMul_FW+0x1c2>
 800358a:	9009      	str	r0, [sp, #36]	@ 0x24
 800358c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800358e:	9802      	ldr	r0, [sp, #8]
 8003590:	f7fd f83e 	bl	8000610 <cmox_ECC_PointToModularDomain>
 8003594:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003596:	9802      	ldr	r0, [sp, #8]
 8003598:	f7fd f892 	bl	80006c0 <cmox_ECC_PointValidation>
 800359c:	ea5f 0800 	movs.w	r8, r0
 80035a0:	f040 80e9 	bne.w	8003776 <cmox_ScalarMul_FW+0x3a4>
 80035a4:	9801      	ldr	r0, [sp, #4]
 80035a6:	6802      	ldr	r2, [r0, #0]
 80035a8:	9802      	ldr	r0, [sp, #8]
 80035aa:	6986      	ldr	r6, [r0, #24]
 80035ac:	6875      	ldr	r5, [r6, #4]
 80035ae:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80035b0:	682e      	ldr	r6, [r5, #0]
 80035b2:	2301      	movs	r3, #1
 80035b4:	47b0      	blx	r6
 80035b6:	9901      	ldr	r1, [sp, #4]
 80035b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80035ba:	2000      	movs	r0, #0
 80035bc:	9000      	str	r0, [sp, #0]
 80035be:	9802      	ldr	r0, [sp, #8]
 80035c0:	6986      	ldr	r6, [r0, #24]
 80035c2:	6875      	ldr	r5, [r6, #4]
 80035c4:	684b      	ldr	r3, [r1, #4]
 80035c6:	6809      	ldr	r1, [r1, #0]
 80035c8:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80035cc:	47e0      	blx	ip
 80035ce:	1e61      	subs	r1, r4, #1
 80035d0:	f88d 1000 	strb.w	r1, [sp]
 80035d4:	2502      	movs	r5, #2
 80035d6:	f89d 0000 	ldrb.w	r0, [sp]
 80035da:	9f02      	ldr	r7, [sp, #8]
 80035dc:	fa09 f600 	lsl.w	r6, r9, r0
 80035e0:	e00e      	b.n	8003600 <cmox_ScalarMul_FW+0x22e>
 80035e2:	f8d7 c018 	ldr.w	ip, [r7, #24]
 80035e6:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 80035ea:	f8dc e004 	ldr.w	lr, [ip, #4]
 80035ee:	f8de c008 	ldr.w	ip, [lr, #8]
 80035f2:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80035f6:	4638      	mov	r0, r7
 80035f8:	f851 1c04 	ldr.w	r1, [r1, #-4]
 80035fc:	47e0      	blx	ip
 80035fe:	1c6d      	adds	r5, r5, #1
 8003600:	9801      	ldr	r0, [sp, #4]
 8003602:	6802      	ldr	r2, [r0, #0]
 8003604:	42b5      	cmp	r5, r6
 8003606:	d3ec      	bcc.n	80035e2 <cmox_ScalarMul_FW+0x210>
 8003608:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800360a:	2001      	movs	r0, #1
 800360c:	f7fc fee6 	bl	80003dc <cmox_ECC_CondCopyPoint>
 8003610:	f8db 5000 	ldr.w	r5, [fp]
 8003614:	016d      	lsls	r5, r5, #5
 8003616:	1b2a      	subs	r2, r5, r4
 8003618:	1e61      	subs	r1, r4, #1
 800361a:	4658      	mov	r0, fp
 800361c:	f001 fb9f 	bl	8004d5e <cmox_bn_getBits>
 8003620:	9901      	ldr	r1, [sp, #4]
 8003622:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8003626:	9a03      	ldr	r2, [sp, #12]
 8003628:	2001      	movs	r0, #1
 800362a:	f7fc fed7 	bl	80003dc <cmox_ECC_CondCopyPoint>
 800362e:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 8003632:	9502      	str	r5, [sp, #8]
 8003634:	e02e      	b.n	8003694 <cmox_ScalarMul_FW+0x2c2>
 8003636:	f8d7 c018 	ldr.w	ip, [r7, #24]
 800363a:	f8dc e004 	ldr.w	lr, [ip, #4]
 800363e:	f8de c000 	ldr.w	ip, [lr]
 8003642:	2301      	movs	r3, #1
 8003644:	464a      	mov	r2, r9
 8003646:	4649      	mov	r1, r9
 8003648:	4638      	mov	r0, r7
 800364a:	47e0      	blx	ip
 800364c:	1e6d      	subs	r5, r5, #1
 800364e:	d1f2      	bne.n	8003636 <cmox_ScalarMul_FW+0x264>
 8003650:	9d04      	ldr	r5, [sp, #16]
 8003652:	9901      	ldr	r1, [sp, #4]
 8003654:	9806      	ldr	r0, [sp, #24]
 8003656:	f8cd 900c 	str.w	r9, [sp, #12]
 800365a:	40f5      	lsrs	r5, r6
 800365c:	f005 0501 	and.w	r5, r5, #1
 8003660:	4045      	eors	r5, r0
 8003662:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
 8003666:	f085 0501 	eor.w	r5, r5, #1
 800366a:	4639      	mov	r1, r7
 800366c:	4628      	mov	r0, r5
 800366e:	f7fc fee8 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 8003672:	9804      	ldr	r0, [sp, #16]
 8003674:	9b03      	ldr	r3, [sp, #12]
 8003676:	40b5      	lsls	r5, r6
 8003678:	4045      	eors	r5, r0
 800367a:	9801      	ldr	r0, [sp, #4]
 800367c:	9504      	str	r5, [sp, #16]
 800367e:	4619      	mov	r1, r3
 8003680:	69bd      	ldr	r5, [r7, #24]
 8003682:	f850 2026 	ldr.w	r2, [r0, r6, lsl #2]
 8003686:	686e      	ldr	r6, [r5, #4]
 8003688:	68b5      	ldr	r5, [r6, #8]
 800368a:	4638      	mov	r0, r7
 800368c:	47a8      	blx	r5
 800368e:	9802      	ldr	r0, [sp, #8]
 8003690:	1b00      	subs	r0, r0, r4
 8003692:	9002      	str	r0, [sp, #8]
 8003694:	9802      	ldr	r0, [sp, #8]
 8003696:	42a0      	cmp	r0, r4
 8003698:	d310      	bcc.n	80036bc <cmox_ScalarMul_FW+0x2ea>
 800369a:	4602      	mov	r2, r0
 800369c:	4621      	mov	r1, r4
 800369e:	4658      	mov	r0, fp
 80036a0:	f001 fb5d 	bl	8004d5e <cmox_bn_getBits>
 80036a4:	f89d 2000 	ldrb.w	r2, [sp]
 80036a8:	9905      	ldr	r1, [sp, #20]
 80036aa:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80036ae:	fa20 f302 	lsr.w	r3, r0, r2
 80036b2:	9306      	str	r3, [sp, #24]
 80036b4:	ea01 0600 	and.w	r6, r1, r0
 80036b8:	0025      	movs	r5, r4
 80036ba:	e7c8      	b.n	800364e <cmox_ScalarMul_FW+0x27c>
 80036bc:	2200      	movs	r2, #0
 80036be:	4621      	mov	r1, r4
 80036c0:	4658      	mov	r0, fp
 80036c2:	f001 fb4c 	bl	8004d5e <cmox_bn_getBits>
 80036c6:	f89d 2000 	ldrb.w	r2, [sp]
 80036ca:	9905      	ldr	r1, [sp, #20]
 80036cc:	fa20 f302 	lsr.w	r3, r0, r2
 80036d0:	ea01 0b00 	and.w	fp, r1, r0
 80036d4:	9801      	ldr	r0, [sp, #4]
 80036d6:	f850 202b 	ldr.w	r2, [r0, fp, lsl #2]
 80036da:	9804      	ldr	r0, [sp, #16]
 80036dc:	fa20 f00b 	lsr.w	r0, r0, fp
 80036e0:	f000 0001 	and.w	r0, r0, #1
 80036e4:	4043      	eors	r3, r0
 80036e6:	4639      	mov	r1, r7
 80036e8:	f083 0001 	eor.w	r0, r3, #1
 80036ec:	f7fc fea9 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 80036f0:	4625      	mov	r5, r4
 80036f2:	9c03      	ldr	r4, [sp, #12]
 80036f4:	e007      	b.n	8003706 <cmox_ScalarMul_FW+0x334>
 80036f6:	f8d6 c000 	ldr.w	ip, [r6]
 80036fa:	2301      	movs	r3, #1
 80036fc:	4622      	mov	r2, r4
 80036fe:	4621      	mov	r1, r4
 8003700:	4638      	mov	r0, r7
 8003702:	47e0      	blx	ip
 8003704:	1e6d      	subs	r5, r5, #1
 8003706:	69b8      	ldr	r0, [r7, #24]
 8003708:	6846      	ldr	r6, [r0, #4]
 800370a:	2d00      	cmp	r5, #0
 800370c:	d1f3      	bne.n	80036f6 <cmox_ScalarMul_FW+0x324>
 800370e:	9702      	str	r7, [sp, #8]
 8003710:	4621      	mov	r1, r4
 8003712:	9801      	ldr	r0, [sp, #4]
 8003714:	6803      	ldr	r3, [r0, #0]
 8003716:	f850 202b 	ldr.w	r2, [r0, fp, lsl #2]
 800371a:	68b5      	ldr	r5, [r6, #8]
 800371c:	4638      	mov	r0, r7
 800371e:	47a8      	blx	r5
 8003720:	9801      	ldr	r0, [sp, #4]
 8003722:	6802      	ldr	r2, [r0, #0]
 8003724:	6890      	ldr	r0, [r2, #8]
 8003726:	2100      	movs	r1, #0
 8003728:	f001 faea 	bl	8004d00 <cmox_bn_cmpUint>
 800372c:	4603      	mov	r3, r0
 800372e:	9801      	ldr	r0, [sp, #4]
 8003730:	6802      	ldr	r2, [r0, #0]
 8003732:	9802      	ldr	r0, [sp, #8]
 8003734:	6986      	ldr	r6, [r0, #24]
 8003736:	6875      	ldr	r5, [r6, #4]
 8003738:	f8d5 c000 	ldr.w	ip, [r5]
 800373c:	4621      	mov	r1, r4
 800373e:	47e0      	blx	ip
 8003740:	9801      	ldr	r0, [sp, #4]
 8003742:	6801      	ldr	r1, [r0, #0]
 8003744:	4622      	mov	r2, r4
 8003746:	2001      	movs	r0, #1
 8003748:	f7fc fe48 	bl	80003dc <cmox_ECC_CondCopyPoint>
 800374c:	9807      	ldr	r0, [sp, #28]
 800374e:	9902      	ldr	r1, [sp, #8]
 8003750:	4622      	mov	r2, r4
 8003752:	f1c0 0001 	rsb	r0, r0, #1
 8003756:	f7fc fe74 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 800375a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800375c:	b958      	cbnz	r0, 8003776 <cmox_ScalarMul_FW+0x3a4>
 800375e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003760:	9802      	ldr	r0, [sp, #8]
 8003762:	f7fc ff7f 	bl	8000664 <cmox_ECC_PointFromModularDomain>
 8003766:	4680      	mov	r8, r0
 8003768:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800376a:	42a0      	cmp	r0, r4
 800376c:	d003      	beq.n	8003776 <cmox_ScalarMul_FW+0x3a4>
 800376e:	9802      	ldr	r0, [sp, #8]
 8003770:	4621      	mov	r1, r4
 8003772:	f7fc ff77 	bl	8000664 <cmox_ECC_PointFromModularDomain>
 8003776:	9f02      	ldr	r7, [sp, #8]
 8003778:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800377a:	e007      	b.n	800378c <cmox_ScalarMul_FW+0x3ba>
 800377c:	9801      	ldr	r0, [sp, #4]
 800377e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003782:	1f09      	subs	r1, r1, #4
 8003784:	4638      	mov	r0, r7
 8003786:	f7fc fdf8 	bl	800037a <cmox_ECC_FreePoint>
 800378a:	1e6d      	subs	r5, r5, #1
 800378c:	2d00      	cmp	r5, #0
 800378e:	d1f5      	bne.n	800377c <cmox_ScalarMul_FW+0x3aa>
 8003790:	9a08      	ldr	r2, [sp, #32]
 8003792:	69f8      	ldr	r0, [r7, #28]
 8003794:	a901      	add	r1, sp, #4
 8003796:	f7ff fc91 	bl	80030bc <cmox_membuf_free>
 800379a:	4655      	mov	r5, sl
 800379c:	e006      	b.n	80037ac <cmox_ScalarMul_FW+0x3da>
 800379e:	6979      	ldr	r1, [r7, #20]
 80037a0:	eb01 0285 	add.w	r2, r1, r5, lsl #2
 80037a4:	1f11      	subs	r1, r2, #4
 80037a6:	f001 f9d4 	bl	8004b52 <cmox_bn_free>
 80037aa:	1e6d      	subs	r5, r5, #1
 80037ac:	69f8      	ldr	r0, [r7, #28]
 80037ae:	2d00      	cmp	r5, #0
 80037b0:	d1f5      	bne.n	800379e <cmox_ScalarMul_FW+0x3cc>
 80037b2:	69b9      	ldr	r1, [r7, #24]
 80037b4:	684a      	ldr	r2, [r1, #4]
 80037b6:	6992      	ldr	r2, [r2, #24]
 80037b8:	0092      	lsls	r2, r2, #2
 80037ba:	f107 0114 	add.w	r1, r7, #20
 80037be:	f7ff fc7d 	bl	80030bc <cmox_membuf_free>
 80037c2:	4640      	mov	r0, r8
 80037c4:	b00d      	add	sp, #52	@ 0x34
 80037c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080037ca <cmox_ScalarMul_SC>:
 80037ca:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ce:	4606      	mov	r6, r0
 80037d0:	b08b      	sub	sp, #44	@ 0x2c
 80037d2:	4689      	mov	r9, r1
 80037d4:	69b1      	ldr	r1, [r6, #24]
 80037d6:	680a      	ldr	r2, [r1, #0]
 80037d8:	6890      	ldr	r0, [r2, #8]
 80037da:	f001 faa7 	bl	8004d2c <cmox_bn_countBits>
 80037de:	69b1      	ldr	r1, [r6, #24]
 80037e0:	688a      	ldr	r2, [r1, #8]
 80037e2:	6813      	ldr	r3, [r2, #0]
 80037e4:	fbb0 f8f3 	udiv	r8, r0, r3
 80037e8:	461d      	mov	r5, r3
 80037ea:	1e5a      	subs	r2, r3, #1
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	fb05 0518 	mls	r5, r5, r8, r0
 80037f2:	f88d 2010 	strb.w	r2, [sp, #16]
 80037f6:	2301      	movs	r3, #1
 80037f8:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80037fc:	4083      	lsls	r3, r0
 80037fe:	1e5b      	subs	r3, r3, #1
 8003800:	9309      	str	r3, [sp, #36]	@ 0x24
 8003802:	2700      	movs	r7, #0
 8003804:	680a      	ldr	r2, [r1, #0]
 8003806:	6813      	ldr	r3, [r2, #0]
 8003808:	681c      	ldr	r4, [r3, #0]
 800380a:	9405      	str	r4, [sp, #20]
 800380c:	2302      	movs	r3, #2
 800380e:	9702      	str	r7, [sp, #8]
 8003810:	9307      	str	r3, [sp, #28]
 8003812:	688a      	ldr	r2, [r1, #8]
 8003814:	9206      	str	r2, [sp, #24]
 8003816:	6848      	ldr	r0, [r1, #4]
 8003818:	69c1      	ldr	r1, [r0, #28]
 800381a:	2902      	cmp	r1, #2
 800381c:	bf04      	itt	eq
 800381e:	2003      	moveq	r0, #3
 8003820:	9007      	streq	r0, [sp, #28]
 8003822:	2100      	movs	r1, #0
 8003824:	4648      	mov	r0, r9
 8003826:	f001 fa6b 	bl	8004d00 <cmox_bn_cmpUint>
 800382a:	b950      	cbnz	r0, 8003842 <cmox_ScalarMul_SC+0x78>
 800382c:	69b0      	ldr	r0, [r6, #24]
 800382e:	6800      	ldr	r0, [r0, #0]
 8003830:	69c1      	ldr	r1, [r0, #28]
 8003832:	2901      	cmp	r1, #1
 8003834:	d007      	beq.n	8003846 <cmox_ScalarMul_SC+0x7c>
 8003836:	6881      	ldr	r1, [r0, #8]
 8003838:	4648      	mov	r0, r9
 800383a:	f001 fa20 	bl	8004c7e <cmox_bn_cmp>
 800383e:	2800      	cmp	r0, #0
 8003840:	d401      	bmi.n	8003846 <cmox_ScalarMul_SC+0x7c>
 8003842:	2401      	movs	r4, #1
 8003844:	e193      	b.n	8003b6e <cmox_ScalarMul_SC+0x3a4>
 8003846:	69b0      	ldr	r0, [r6, #24]
 8003848:	6841      	ldr	r1, [r0, #4]
 800384a:	698a      	ldr	r2, [r1, #24]
 800384c:	69f0      	ldr	r0, [r6, #28]
 800384e:	0092      	lsls	r2, r2, #2
 8003850:	f106 0114 	add.w	r1, r6, #20
 8003854:	f7ff fc13 	bl	800307e <cmox_membuf_alloc>
 8003858:	0004      	movs	r4, r0
 800385a:	d1f3      	bne.n	8003844 <cmox_ScalarMul_SC+0x7a>
 800385c:	46ba      	mov	sl, r7
 800385e:	e00d      	b.n	800387c <cmox_ScalarMul_SC+0xb2>
 8003860:	6800      	ldr	r0, [r0, #0]
 8003862:	6801      	ldr	r1, [r0, #0]
 8003864:	6970      	ldr	r0, [r6, #20]
 8003866:	680a      	ldr	r2, [r1, #0]
 8003868:	eb00 018a 	add.w	r1, r0, sl, lsl #2
 800386c:	69f0      	ldr	r0, [r6, #28]
 800386e:	f001 f965 	bl	8004b3c <cmox_bn_alloc>
 8003872:	0004      	movs	r4, r0
 8003874:	f040 816f 	bne.w	8003b56 <cmox_ScalarMul_SC+0x38c>
 8003878:	f10a 0a01 	add.w	sl, sl, #1
 800387c:	69b0      	ldr	r0, [r6, #24]
 800387e:	6841      	ldr	r1, [r0, #4]
 8003880:	698a      	ldr	r2, [r1, #24]
 8003882:	4592      	cmp	sl, r2
 8003884:	dbec      	blt.n	8003860 <cmox_ScalarMul_SC+0x96>
 8003886:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 800388a:	a902      	add	r1, sp, #8
 800388c:	4630      	mov	r0, r6
 800388e:	f7fc fd18 	bl	80002c2 <cmox_ECC_AllocPoint>
 8003892:	0004      	movs	r4, r0
 8003894:	f040 8154 	bne.w	8003b40 <cmox_ScalarMul_SC+0x376>
 8003898:	9902      	ldr	r1, [sp, #8]
 800389a:	4630      	mov	r0, r6
 800389c:	f7fc fdf8 	bl	8000490 <cmox_ECC_SetPointAtInfinity>
 80038a0:	f899 0004 	ldrb.w	r0, [r9, #4]
 80038a4:	f000 0001 	and.w	r0, r0, #1
 80038a8:	9008      	str	r0, [sp, #32]
 80038aa:	4644      	mov	r4, r8
 80038ac:	69b1      	ldr	r1, [r6, #24]
 80038ae:	6808      	ldr	r0, [r1, #0]
 80038b0:	6882      	ldr	r2, [r0, #8]
 80038b2:	9808      	ldr	r0, [sp, #32]
 80038b4:	4649      	mov	r1, r9
 80038b6:	f1c0 0001 	rsb	r0, r0, #1
 80038ba:	f7ff fac9 	bl	8002e50 <cmox_FieldBN_CondNegate>
 80038be:	f8dd a000 	ldr.w	sl, [sp]
 80038c2:	46b8      	mov	r8, r7
 80038c4:	e00b      	b.n	80038de <cmox_ScalarMul_SC+0x114>
 80038c6:	f108 0b01 	add.w	fp, r8, #1
 80038ca:	fb04 520b 	mla	r2, r4, fp, r5
 80038ce:	2101      	movs	r1, #1
 80038d0:	4648      	mov	r0, r9
 80038d2:	f001 fa44 	bl	8004d5e <cmox_bn_getBits>
 80038d6:	fa00 f008 	lsl.w	r0, r0, r8
 80038da:	4307      	orrs	r7, r0
 80038dc:	46d8      	mov	r8, fp
 80038de:	f1aa 0001 	sub.w	r0, sl, #1
 80038e2:	4580      	cmp	r8, r0
 80038e4:	d3ef      	bcc.n	80038c6 <cmox_ScalarMul_SC+0xfc>
 80038e6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80038e8:	4630      	mov	r0, r6
 80038ea:	f7fc fdd1 	bl	8000490 <cmox_ECC_SetPointAtInfinity>
 80038ee:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80038f0:	9001      	str	r0, [sp, #4]
 80038f2:	2106      	movs	r1, #6
 80038f4:	9100      	str	r1, [sp, #0]
 80038f6:	1c7f      	adds	r7, r7, #1
 80038f8:	9a06      	ldr	r2, [sp, #24]
 80038fa:	9807      	ldr	r0, [sp, #28]
 80038fc:	1d13      	adds	r3, r2, #4
 80038fe:	1d11      	adds	r1, r2, #4
 8003900:	9a05      	ldr	r2, [sp, #20]
 8003902:	4347      	muls	r7, r0
 8003904:	1c7f      	adds	r7, r7, #1
 8003906:	4357      	muls	r7, r2
 8003908:	eb01 0287 	add.w	r2, r1, r7, lsl #2
 800390c:	9905      	ldr	r1, [sp, #20]
 800390e:	2001      	movs	r0, #1
 8003910:	f7fc fe01 	bl	8000516 <cmox_ECC_CondImportPoint>
 8003914:	1ea7      	subs	r7, r4, #2
 8003916:	e052      	b.n	80039be <cmox_ScalarMul_SC+0x1f4>
 8003918:	197a      	adds	r2, r7, r5
 800391a:	fb04 220b 	mla	r2, r4, fp, r2
 800391e:	1c52      	adds	r2, r2, #1
 8003920:	2101      	movs	r1, #1
 8003922:	4648      	mov	r0, r9
 8003924:	f001 fa1b 	bl	8004d5e <cmox_bn_getBits>
 8003928:	fa00 f00b 	lsl.w	r0, r0, fp
 800392c:	ea40 0808 	orr.w	r8, r0, r8
 8003930:	f10b 0b01 	add.w	fp, fp, #1
 8003934:	45d3      	cmp	fp, sl
 8003936:	d3ef      	bcc.n	8003918 <cmox_ScalarMul_SC+0x14e>
 8003938:	f8d6 e018 	ldr.w	lr, [r6, #24]
 800393c:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8003940:	f8de c004 	ldr.w	ip, [lr, #4]
 8003944:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003946:	f8dc c000 	ldr.w	ip, [ip]
 800394a:	fa28 f000 	lsr.w	r0, r8, r0
 800394e:	f000 0b01 	and.w	fp, r0, #1
 8003952:	2301      	movs	r3, #1
 8003954:	4611      	mov	r1, r2
 8003956:	4630      	mov	r0, r6
 8003958:	47e0      	blx	ip
 800395a:	9802      	ldr	r0, [sp, #8]
 800395c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8003960:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003964:	9001      	str	r0, [sp, #4]
 8003966:	2106      	movs	r1, #6
 8003968:	9806      	ldr	r0, [sp, #24]
 800396a:	9100      	str	r1, [sp, #0]
 800396c:	1d02      	adds	r2, r0, #4
 800396e:	f1ab 0101 	sub.w	r1, fp, #1
 8003972:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003974:	ea81 0108 	eor.w	r1, r1, r8
 8003978:	4008      	ands	r0, r1
 800397a:	1c40      	adds	r0, r0, #1
 800397c:	fb00 f00e 	mul.w	r0, r0, lr
 8003980:	1c40      	adds	r0, r0, #1
 8003982:	fb00 f00c 	mul.w	r0, r0, ip
 8003986:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800398a:	2300      	movs	r3, #0
 800398c:	4661      	mov	r1, ip
 800398e:	2001      	movs	r0, #1
 8003990:	f7fc fdc1 	bl	8000516 <cmox_ECC_CondImportPoint>
 8003994:	9a02      	ldr	r2, [sp, #8]
 8003996:	f1cb 0b01 	rsb	fp, fp, #1
 800399a:	4631      	mov	r1, r6
 800399c:	4658      	mov	r0, fp
 800399e:	f7fc fd50 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 80039a2:	2000      	movs	r0, #0
 80039a4:	9000      	str	r0, [sp, #0]
 80039a6:	4630      	mov	r0, r6
 80039a8:	f8d6 c018 	ldr.w	ip, [r6, #24]
 80039ac:	f8dc e004 	ldr.w	lr, [ip, #4]
 80039b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80039b2:	9a02      	ldr	r2, [sp, #8]
 80039b4:	f8de c004 	ldr.w	ip, [lr, #4]
 80039b8:	4619      	mov	r1, r3
 80039ba:	47e0      	blx	ip
 80039bc:	1e7f      	subs	r7, r7, #1
 80039be:	1e68      	subs	r0, r5, #1
 80039c0:	4180      	sbcs	r0, r0
 80039c2:	ebb7 7fd0 	cmp.w	r7, r0, lsr #31
 80039c6:	db03      	blt.n	80039d0 <cmox_ScalarMul_SC+0x206>
 80039c8:	f04f 0800 	mov.w	r8, #0
 80039cc:	46c3      	mov	fp, r8
 80039ce:	e7b1      	b.n	8003934 <cmox_ScalarMul_SC+0x16a>
 80039d0:	bb9d      	cbnz	r5, 8003a3a <cmox_ScalarMul_SC+0x270>
 80039d2:	2700      	movs	r7, #0
 80039d4:	e009      	b.n	80039ea <cmox_ScalarMul_SC+0x220>
 80039d6:	fb04 f207 	mul.w	r2, r4, r7
 80039da:	1c52      	adds	r2, r2, #1
 80039dc:	2101      	movs	r1, #1
 80039de:	4648      	mov	r0, r9
 80039e0:	f001 f9bd 	bl	8004d5e <cmox_bn_getBits>
 80039e4:	40b8      	lsls	r0, r7
 80039e6:	4305      	orrs	r5, r0
 80039e8:	1c7f      	adds	r7, r7, #1
 80039ea:	4557      	cmp	r7, sl
 80039ec:	d3f3      	bcc.n	80039d6 <cmox_ScalarMul_SC+0x20c>
 80039ee:	69b4      	ldr	r4, [r6, #24]
 80039f0:	6864      	ldr	r4, [r4, #4]
 80039f2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80039f4:	f8d4 c000 	ldr.w	ip, [r4]
 80039f8:	2301      	movs	r3, #1
 80039fa:	4611      	mov	r1, r2
 80039fc:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8003a00:	fa25 f700 	lsr.w	r7, r5, r0
 8003a04:	4630      	mov	r0, r6
 8003a06:	47e0      	blx	ip
 8003a08:	9802      	ldr	r0, [sp, #8]
 8003a0a:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003a0e:	9c05      	ldr	r4, [sp, #20]
 8003a10:	9001      	str	r0, [sp, #4]
 8003a12:	2106      	movs	r1, #6
 8003a14:	9806      	ldr	r0, [sp, #24]
 8003a16:	9100      	str	r1, [sp, #0]
 8003a18:	f007 0701 	and.w	r7, r7, #1
 8003a1c:	1d02      	adds	r2, r0, #4
 8003a1e:	1e79      	subs	r1, r7, #1
 8003a20:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003a22:	404d      	eors	r5, r1
 8003a24:	4005      	ands	r5, r0
 8003a26:	1c6d      	adds	r5, r5, #1
 8003a28:	fb05 f50a 	mul.w	r5, r5, sl
 8003a2c:	1c6d      	adds	r5, r5, #1
 8003a2e:	4365      	muls	r5, r4
 8003a30:	2300      	movs	r3, #0
 8003a32:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8003a36:	4621      	mov	r1, r4
 8003a38:	e04b      	b.n	8003ad2 <cmox_ScalarMul_SC+0x308>
 8003a3a:	9806      	ldr	r0, [sp, #24]
 8003a3c:	9a05      	ldr	r2, [sp, #20]
 8003a3e:	1e6f      	subs	r7, r5, #1
 8003a40:	1d01      	adds	r1, r0, #4
 8003a42:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8003a44:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 8003a48:	4692      	mov	sl, r2
 8003a4a:	e029      	b.n	8003aa0 <cmox_ScalarMul_SC+0x2d6>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	462a      	mov	r2, r5
 8003a50:	4629      	mov	r1, r5
 8003a52:	4630      	mov	r0, r6
 8003a54:	47e0      	blx	ip
 8003a56:	1c7a      	adds	r2, r7, #1
 8003a58:	2101      	movs	r1, #1
 8003a5a:	4648      	mov	r0, r9
 8003a5c:	f001 f97f 	bl	8004d5e <cmox_bn_getBits>
 8003a60:	4680      	mov	r8, r0
 8003a62:	9802      	ldr	r0, [sp, #8]
 8003a64:	9001      	str	r0, [sp, #4]
 8003a66:	2106      	movs	r1, #6
 8003a68:	9100      	str	r1, [sp, #0]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	4622      	mov	r2, r4
 8003a6e:	4651      	mov	r1, sl
 8003a70:	2001      	movs	r0, #1
 8003a72:	f7fc fd50 	bl	8000516 <cmox_ECC_CondImportPoint>
 8003a76:	9a02      	ldr	r2, [sp, #8]
 8003a78:	f1c8 0801 	rsb	r8, r8, #1
 8003a7c:	4631      	mov	r1, r6
 8003a7e:	4640      	mov	r0, r8
 8003a80:	f7fc fcdf 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 8003a84:	2000      	movs	r0, #0
 8003a86:	9000      	str	r0, [sp, #0]
 8003a88:	462b      	mov	r3, r5
 8003a8a:	f8d6 c018 	ldr.w	ip, [r6, #24]
 8003a8e:	f8dc e004 	ldr.w	lr, [ip, #4]
 8003a92:	9a02      	ldr	r2, [sp, #8]
 8003a94:	f8de c004 	ldr.w	ip, [lr, #4]
 8003a98:	4629      	mov	r1, r5
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	47e0      	blx	ip
 8003a9e:	1e7f      	subs	r7, r7, #1
 8003aa0:	69b0      	ldr	r0, [r6, #24]
 8003aa2:	6841      	ldr	r1, [r0, #4]
 8003aa4:	f8d1 c000 	ldr.w	ip, [r1]
 8003aa8:	2f00      	cmp	r7, #0
 8003aaa:	dccf      	bgt.n	8003a4c <cmox_ScalarMul_SC+0x282>
 8003aac:	462a      	mov	r2, r5
 8003aae:	950c      	str	r5, [sp, #48]	@ 0x30
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4630      	mov	r0, r6
 8003ab6:	47e0      	blx	ip
 8003ab8:	2201      	movs	r2, #1
 8003aba:	2101      	movs	r1, #1
 8003abc:	4648      	mov	r0, r9
 8003abe:	f001 f94e 	bl	8004d5e <cmox_bn_getBits>
 8003ac2:	4607      	mov	r7, r0
 8003ac4:	2106      	movs	r1, #6
 8003ac6:	9802      	ldr	r0, [sp, #8]
 8003ac8:	9100      	str	r1, [sp, #0]
 8003aca:	9001      	str	r0, [sp, #4]
 8003acc:	2300      	movs	r3, #0
 8003ace:	4622      	mov	r2, r4
 8003ad0:	4651      	mov	r1, sl
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f7fc fd1f 	bl	8000516 <cmox_ECC_CondImportPoint>
 8003ad8:	9a02      	ldr	r2, [sp, #8]
 8003ada:	f1c7 0701 	rsb	r7, r7, #1
 8003ade:	4631      	mov	r1, r6
 8003ae0:	4638      	mov	r0, r7
 8003ae2:	f7fc fcae 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 8003ae6:	a803      	add	r0, sp, #12
 8003ae8:	9000      	str	r0, [sp, #0]
 8003aea:	4630      	mov	r0, r6
 8003aec:	69b4      	ldr	r4, [r6, #24]
 8003aee:	6865      	ldr	r5, [r4, #4]
 8003af0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003af2:	9a02      	ldr	r2, [sp, #8]
 8003af4:	686c      	ldr	r4, [r5, #4]
 8003af6:	4619      	mov	r1, r3
 8003af8:	47a0      	blx	r4
 8003afa:	69b4      	ldr	r4, [r6, #24]
 8003afc:	6865      	ldr	r5, [r4, #4]
 8003afe:	9b03      	ldr	r3, [sp, #12]
 8003b00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003b02:	f8d5 a000 	ldr.w	sl, [r5]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	4630      	mov	r0, r6
 8003b0e:	47d0      	blx	sl
 8003b10:	69b0      	ldr	r0, [r6, #24]
 8003b12:	6801      	ldr	r1, [r0, #0]
 8003b14:	9c08      	ldr	r4, [sp, #32]
 8003b16:	688a      	ldr	r2, [r1, #8]
 8003b18:	f1c4 0401 	rsb	r4, r4, #1
 8003b1c:	4649      	mov	r1, r9
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f7ff f996 	bl	8002e50 <cmox_FieldBN_CondNegate>
 8003b24:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003b26:	4631      	mov	r1, r6
 8003b28:	4620      	mov	r0, r4
 8003b2a:	f7fc fc8a 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 8003b2e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003b30:	4630      	mov	r0, r6
 8003b32:	f7fc fd97 	bl	8000664 <cmox_ECC_PointFromModularDomain>
 8003b36:	4604      	mov	r4, r0
 8003b38:	a902      	add	r1, sp, #8
 8003b3a:	4630      	mov	r0, r6
 8003b3c:	f7fc fc1d 	bl	800037a <cmox_ECC_FreePoint>
 8003b40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003b44:	e007      	b.n	8003b56 <cmox_ScalarMul_SC+0x38c>
 8003b46:	6971      	ldr	r1, [r6, #20]
 8003b48:	eb01 028a 	add.w	r2, r1, sl, lsl #2
 8003b4c:	1f11      	subs	r1, r2, #4
 8003b4e:	f001 f800 	bl	8004b52 <cmox_bn_free>
 8003b52:	f1aa 0a01 	sub.w	sl, sl, #1
 8003b56:	69f0      	ldr	r0, [r6, #28]
 8003b58:	f1ba 0f00 	cmp.w	sl, #0
 8003b5c:	dcf3      	bgt.n	8003b46 <cmox_ScalarMul_SC+0x37c>
 8003b5e:	69b1      	ldr	r1, [r6, #24]
 8003b60:	684a      	ldr	r2, [r1, #4]
 8003b62:	6992      	ldr	r2, [r2, #24]
 8003b64:	0092      	lsls	r2, r2, #2
 8003b66:	f106 0114 	add.w	r1, r6, #20
 8003b6a:	f7ff faa7 	bl	80030bc <cmox_membuf_free>
 8003b6e:	4620      	mov	r0, r4
 8003b70:	b00d      	add	sp, #52	@ 0x34
 8003b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003b78 <cmox_ScalarMul_wMOF>:
 8003b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b7c:	b099      	sub	sp, #100	@ 0x64
 8003b7e:	460e      	mov	r6, r1
 8003b80:	f04f 31ff 	mov.w	r1, #4294967295
 8003b84:	9112      	str	r1, [sp, #72]	@ 0x48
 8003b86:	9111      	str	r1, [sp, #68]	@ 0x44
 8003b88:	9110      	str	r1, [sp, #64]	@ 0x40
 8003b8a:	9101      	str	r1, [sp, #4]
 8003b8c:	4617      	mov	r7, r2
 8003b8e:	2101      	movs	r1, #1
 8003b90:	4605      	mov	r5, r0
 8003b92:	9117      	str	r1, [sp, #92]	@ 0x5c
 8003b94:	2200      	movs	r2, #0
 8003b96:	9207      	str	r2, [sp, #28]
 8003b98:	9206      	str	r2, [sp, #24]
 8003b9a:	461c      	mov	r4, r3
 8003b9c:	69a9      	ldr	r1, [r5, #24]
 8003b9e:	6808      	ldr	r0, [r1, #0]
 8003ba0:	6802      	ldr	r2, [r0, #0]
 8003ba2:	6813      	ldr	r3, [r2, #0]
 8003ba4:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ba6:	f04f 0902 	mov.w	r9, #2
 8003baa:	68ca      	ldr	r2, [r1, #12]
 8003bac:	6813      	ldr	r3, [r2, #0]
 8003bae:	9304      	str	r3, [sp, #16]
 8003bb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8003bb2:	9804      	ldr	r0, [sp, #16]
 8003bb4:	f8df 2634 	ldr.w	r2, [pc, #1588]	@ 80041ec <cmox_ScalarMul_wMOF+0x674>
 8003bb8:	1e40      	subs	r0, r0, #1
 8003bba:	0840      	lsrs	r0, r0, #1
 8003bbc:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8003bc0:	1f1a      	subs	r2, r3, #4
 8003bc2:	920c      	str	r2, [sp, #48]	@ 0x30
 8003bc4:	f8df 2628 	ldr.w	r2, [pc, #1576]	@ 80041f0 <cmox_ScalarMul_wMOF+0x678>
 8003bc8:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8003bcc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8003bd0:	1f03      	subs	r3, r0, #4
 8003bd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003bd4:	6848      	ldr	r0, [r1, #4]
 8003bd6:	69c1      	ldr	r1, [r0, #28]
 8003bd8:	2902      	cmp	r1, #2
 8003bda:	bf08      	it	eq
 8003bdc:	f04f 0903 	moveq.w	r9, #3
 8003be0:	4641      	mov	r1, r8
 8003be2:	4628      	mov	r0, r5
 8003be4:	f7fc fc54 	bl	8000490 <cmox_ECC_SetPointAtInfinity>
 8003be8:	4641      	mov	r1, r8
 8003bea:	4628      	mov	r0, r5
 8003bec:	f7fc fd10 	bl	8000610 <cmox_ECC_PointToModularDomain>
 8003bf0:	69a8      	ldr	r0, [r5, #24]
 8003bf2:	6800      	ldr	r0, [r0, #0]
 8003bf4:	9408      	str	r4, [sp, #32]
 8003bf6:	69c1      	ldr	r1, [r0, #28]
 8003bf8:	2901      	cmp	r1, #1
 8003bfa:	d010      	beq.n	8003c1e <cmox_ScalarMul_wMOF+0xa6>
 8003bfc:	6881      	ldr	r1, [r0, #8]
 8003bfe:	4630      	mov	r0, r6
 8003c00:	f001 f83d 	bl	8004c7e <cmox_bn_cmp>
 8003c04:	2800      	cmp	r0, #0
 8003c06:	d507      	bpl.n	8003c18 <cmox_ScalarMul_wMOF+0xa0>
 8003c08:	69a8      	ldr	r0, [r5, #24]
 8003c0a:	6801      	ldr	r1, [r0, #0]
 8003c0c:	9808      	ldr	r0, [sp, #32]
 8003c0e:	6889      	ldr	r1, [r1, #8]
 8003c10:	f001 f835 	bl	8004c7e <cmox_bn_cmp>
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d402      	bmi.n	8003c1e <cmox_ScalarMul_wMOF+0xa6>
 8003c18:	2001      	movs	r0, #1
 8003c1a:	9005      	str	r0, [sp, #20]
 8003c1c:	e2e1      	b.n	80041e2 <cmox_ScalarMul_wMOF+0x66a>
 8003c1e:	69a8      	ldr	r0, [r5, #24]
 8003c20:	6841      	ldr	r1, [r0, #4]
 8003c22:	698a      	ldr	r2, [r1, #24]
 8003c24:	69e8      	ldr	r0, [r5, #28]
 8003c26:	0092      	lsls	r2, r2, #2
 8003c28:	f105 0114 	add.w	r1, r5, #20
 8003c2c:	f7ff fa27 	bl	800307e <cmox_membuf_alloc>
 8003c30:	2800      	cmp	r0, #0
 8003c32:	9005      	str	r0, [sp, #20]
 8003c34:	d1f2      	bne.n	8003c1c <cmox_ScalarMul_wMOF+0xa4>
 8003c36:	2400      	movs	r4, #0
 8003c38:	e00c      	b.n	8003c54 <cmox_ScalarMul_wMOF+0xdc>
 8003c3a:	6809      	ldr	r1, [r1, #0]
 8003c3c:	680a      	ldr	r2, [r1, #0]
 8003c3e:	6969      	ldr	r1, [r5, #20]
 8003c40:	6812      	ldr	r2, [r2, #0]
 8003c42:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003c46:	f000 ff79 	bl	8004b3c <cmox_bn_alloc>
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	9005      	str	r0, [sp, #20]
 8003c4e:	f040 82bd 	bne.w	80041cc <cmox_ScalarMul_wMOF+0x654>
 8003c52:	1c64      	adds	r4, r4, #1
 8003c54:	69a9      	ldr	r1, [r5, #24]
 8003c56:	684a      	ldr	r2, [r1, #4]
 8003c58:	6993      	ldr	r3, [r2, #24]
 8003c5a:	69e8      	ldr	r0, [r5, #28]
 8003c5c:	429c      	cmp	r4, r3
 8003c5e:	d3ec      	bcc.n	8003c3a <cmox_ScalarMul_wMOF+0xc2>
 8003c60:	9b04      	ldr	r3, [sp, #16]
 8003c62:	2201      	movs	r2, #1
 8003c64:	1e99      	subs	r1, r3, #2
 8003c66:	408a      	lsls	r2, r1
 8003c68:	0092      	lsls	r2, r2, #2
 8003c6a:	9215      	str	r2, [sp, #84]	@ 0x54
 8003c6c:	a902      	add	r1, sp, #8
 8003c6e:	f7ff fa06 	bl	800307e <cmox_membuf_alloc>
 8003c72:	2800      	cmp	r0, #0
 8003c74:	46a3      	mov	fp, r4
 8003c76:	9005      	str	r0, [sp, #20]
 8003c78:	f040 829f 	bne.w	80041ba <cmox_ScalarMul_wMOF+0x642>
 8003c7c:	9904      	ldr	r1, [sp, #16]
 8003c7e:	2001      	movs	r0, #1
 8003c80:	1e89      	subs	r1, r1, #2
 8003c82:	2400      	movs	r4, #0
 8003c84:	fa00 fa01 	lsl.w	sl, r0, r1
 8003c88:	e010      	b.n	8003cac <cmox_ScalarMul_wMOF+0x134>
 8003c8a:	9802      	ldr	r0, [sp, #8]
 8003c8c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8003c90:	4628      	mov	r0, r5
 8003c92:	f7fc fb16 	bl	80002c2 <cmox_ECC_AllocPoint>
 8003c96:	2800      	cmp	r0, #0
 8003c98:	9005      	str	r0, [sp, #20]
 8003c9a:	f040 8287 	bne.w	80041ac <cmox_ScalarMul_wMOF+0x634>
 8003c9e:	9802      	ldr	r0, [sp, #8]
 8003ca0:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	f7fc fbf3 	bl	8000490 <cmox_ECC_SetPointAtInfinity>
 8003caa:	1c64      	adds	r4, r4, #1
 8003cac:	4554      	cmp	r4, sl
 8003cae:	d3ec      	bcc.n	8003c8a <cmox_ScalarMul_wMOF+0x112>
 8003cb0:	9503      	str	r5, [sp, #12]
 8003cb2:	9418      	str	r4, [sp, #96]	@ 0x60
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	463c      	mov	r4, r7
 8003cb8:	7c20      	ldrb	r0, [r4, #16]
 8003cba:	f000 0004 	and.w	r0, r0, #4
 8003cbe:	f7ff f9a8 	bl	8003012 <cmox_mathUtils_neq>
 8003cc2:	b920      	cbnz	r0, 8003cce <cmox_ScalarMul_wMOF+0x156>
 8003cc4:	9017      	str	r0, [sp, #92]	@ 0x5c
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	9803      	ldr	r0, [sp, #12]
 8003cca:	f7fc fca1 	bl	8000610 <cmox_ECC_PointToModularDomain>
 8003cce:	9803      	ldr	r0, [sp, #12]
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	f7fc fcf5 	bl	80006c0 <cmox_ECC_PointValidation>
 8003cd6:	2800      	cmp	r0, #0
 8003cd8:	9005      	str	r0, [sp, #20]
 8003cda:	f040 825c 	bne.w	8004196 <cmox_ScalarMul_wMOF+0x61e>
 8003cde:	9803      	ldr	r0, [sp, #12]
 8003ce0:	6985      	ldr	r5, [r0, #24]
 8003ce2:	9f02      	ldr	r7, [sp, #8]
 8003ce4:	686d      	ldr	r5, [r5, #4]
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	68ef      	ldr	r7, [r5, #12]
 8003cea:	2301      	movs	r3, #1
 8003cec:	4621      	mov	r1, r4
 8003cee:	47b8      	blx	r7
 8003cf0:	9902      	ldr	r1, [sp, #8]
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	9000      	str	r0, [sp, #0]
 8003cf6:	4622      	mov	r2, r4
 8003cf8:	9803      	ldr	r0, [sp, #12]
 8003cfa:	6985      	ldr	r5, [r0, #24]
 8003cfc:	686d      	ldr	r5, [r5, #4]
 8003cfe:	684b      	ldr	r3, [r1, #4]
 8003d00:	6809      	ldr	r1, [r1, #0]
 8003d02:	692f      	ldr	r7, [r5, #16]
 8003d04:	47b8      	blx	r7
 8003d06:	9f03      	ldr	r7, [sp, #12]
 8003d08:	2502      	movs	r5, #2
 8003d0a:	e010      	b.n	8003d2e <cmox_ScalarMul_wMOF+0x1b6>
 8003d0c:	9802      	ldr	r0, [sp, #8]
 8003d0e:	f8d7 c018 	ldr.w	ip, [r7, #24]
 8003d12:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 8003d16:	6802      	ldr	r2, [r0, #0]
 8003d18:	f8dc e004 	ldr.w	lr, [ip, #4]
 8003d1c:	f8de c014 	ldr.w	ip, [lr, #20]
 8003d20:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8003d24:	1c6d      	adds	r5, r5, #1
 8003d26:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8003d2a:	4638      	mov	r0, r7
 8003d2c:	47e0      	blx	ip
 8003d2e:	2001      	movs	r0, #1
 8003d30:	4555      	cmp	r5, sl
 8003d32:	900e      	str	r0, [sp, #56]	@ 0x38
 8003d34:	d3ea      	bcc.n	8003d0c <cmox_ScalarMul_wMOF+0x194>
 8003d36:	9808      	ldr	r0, [sp, #32]
 8003d38:	f000 fff8 	bl	8004d2c <cmox_bn_countBits>
 8003d3c:	4605      	mov	r5, r0
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f000 fff4 	bl	8004d2c <cmox_bn_countBits>
 8003d44:	4285      	cmp	r5, r0
 8003d46:	bf2c      	ite	cs
 8003d48:	9808      	ldrcs	r0, [sp, #32]
 8003d4a:	4630      	movcc	r0, r6
 8003d4c:	f000 ffee 	bl	8004d2c <cmox_bn_countBits>
 8003d50:	960d      	str	r6, [sp, #52]	@ 0x34
 8003d52:	940f      	str	r4, [sp, #60]	@ 0x3c
 8003d54:	9d01      	ldr	r5, [sp, #4]
 8003d56:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8003d58:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8003d5a:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 8003d5e:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
 8003d62:	4681      	mov	r9, r0
 8003d64:	e075      	b.n	8003e52 <cmox_ScalarMul_wMOF+0x2da>
 8003d66:	f8dd c030 	ldr.w	ip, [sp, #48]	@ 0x30
 8003d6a:	9a03      	ldr	r2, [sp, #12]
 8003d6c:	9806      	ldr	r0, [sp, #24]
 8003d6e:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8003d70:	9101      	str	r1, [sp, #4]
 8003d72:	1a10      	subs	r0, r2, r0
 8003d74:	f1a0 0e01 	sub.w	lr, r0, #1
 8003d78:	ea4f 0ede 	mov.w	lr, lr, lsr #3
 8003d7c:	1e40      	subs	r0, r0, #1
 8003d7e:	2106      	movs	r1, #6
 8003d80:	0080      	lsls	r0, r0, #2
 8003d82:	9100      	str	r1, [sp, #0]
 8003d84:	f000 001c 	and.w	r0, r0, #28
 8003d88:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
 8003d8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d8e:	fa2c f000 	lsr.w	r0, ip, r0
 8003d92:	1d13      	adds	r3, r2, #4
 8003d94:	1d11      	adds	r1, r2, #4
 8003d96:	f000 000f 	and.w	r0, r0, #15
 8003d9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003d9c:	4346      	muls	r6, r0
 8003d9e:	1c76      	adds	r6, r6, #1
 8003da0:	4372      	muls	r2, r6
 8003da2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003da6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003da8:	2001      	movs	r0, #1
 8003daa:	f7fc fbb4 	bl	8000516 <cmox_ECC_CondImportPoint>
 8003dae:	9802      	ldr	r0, [sp, #8]
 8003db0:	6802      	ldr	r2, [r0, #0]
 8003db2:	4639      	mov	r1, r7
 8003db4:	2001      	movs	r0, #1
 8003db6:	f7fc fb44 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 8003dba:	e03a      	b.n	8003e32 <cmox_ScalarMul_wMOF+0x2ba>
 8003dbc:	9903      	ldr	r1, [sp, #12]
 8003dbe:	1a08      	subs	r0, r1, r0
 8003dc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003dc2:	1e42      	subs	r2, r0, #1
 8003dc4:	08d2      	lsrs	r2, r2, #3
 8003dc6:	1e40      	subs	r0, r0, #1
 8003dc8:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 8003dcc:	0080      	lsls	r0, r0, #2
 8003dce:	f000 001c 	and.w	r0, r0, #28
 8003dd2:	40c5      	lsrs	r5, r0
 8003dd4:	f89d 6002 	ldrb.w	r6, [sp, #2]
 8003dd8:	f005 050f 	and.w	r5, r5, #15
 8003ddc:	1b76      	subs	r6, r6, r5
 8003dde:	b276      	sxtb	r6, r6
 8003de0:	bbae      	cbnz	r6, 8003e4e <cmox_ScalarMul_wMOF+0x2d6>
 8003de2:	9802      	ldr	r0, [sp, #8]
 8003de4:	6801      	ldr	r1, [r0, #0]
 8003de6:	9a06      	ldr	r2, [sp, #24]
 8003de8:	9801      	ldr	r0, [sp, #4]
 8003dea:	4282      	cmp	r2, r0
 8003dec:	dabb      	bge.n	8003d66 <cmox_ScalarMul_wMOF+0x1ee>
 8003dee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003df0:	f8dd c018 	ldr.w	ip, [sp, #24]
 8003df4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8003df6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003df8:	9101      	str	r1, [sp, #4]
 8003dfa:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8003dfe:	2106      	movs	r1, #6
 8003e00:	9100      	str	r1, [sp, #0]
 8003e02:	1d03      	adds	r3, r0, #4
 8003e04:	f856 602c 	ldr.w	r6, [r6, ip, lsl #2]
 8003e08:	f8dd c018 	ldr.w	ip, [sp, #24]
 8003e0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003e0e:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
 8003e12:	f00e 0e1c 	and.w	lr, lr, #28
 8003e16:	fa26 f60e 	lsr.w	r6, r6, lr
 8003e1a:	f006 060f 	and.w	r6, r6, #15
 8003e1e:	4372      	muls	r2, r6
 8003e20:	1c52      	adds	r2, r2, #1
 8003e22:	1d00      	adds	r0, r0, #4
 8003e24:	4351      	muls	r1, r2
 8003e26:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8003e2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003e2c:	2001      	movs	r0, #1
 8003e2e:	f7fc fb72 	bl	8000516 <cmox_ECC_CondImportPoint>
 8003e32:	9902      	ldr	r1, [sp, #8]
 8003e34:	2000      	movs	r0, #0
 8003e36:	9000      	str	r0, [sp, #0]
 8003e38:	4643      	mov	r3, r8
 8003e3a:	69be      	ldr	r6, [r7, #24]
 8003e3c:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8003e40:	680a      	ldr	r2, [r1, #0]
 8003e42:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8003e46:	4641      	mov	r1, r8
 8003e48:	4638      	mov	r0, r7
 8003e4a:	47b0      	blx	r6
 8003e4c:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003e4e:	f1a9 0901 	sub.w	r9, r9, #1
 8003e52:	f1b9 0f00 	cmp.w	r9, #0
 8003e56:	bfd8      	it	le
 8003e58:	2c00      	cmple	r4, #0
 8003e5a:	dc06      	bgt.n	8003e6a <cmox_ScalarMul_wMOF+0x2f2>
 8003e5c:	f1ba 0f00 	cmp.w	sl, #0
 8003e60:	bfdc      	itt	le
 8003e62:	2e00      	cmple	r6, #0
 8003e64:	2d00      	cmple	r5, #0
 8003e66:	f340 813a 	ble.w	80040de <cmox_ScalarMul_wMOF+0x566>
 8003e6a:	f1b9 0f00 	cmp.w	r9, #0
 8003e6e:	d40a      	bmi.n	8003e86 <cmox_ScalarMul_wMOF+0x30e>
 8003e70:	f8d7 c018 	ldr.w	ip, [r7, #24]
 8003e74:	f8dc e004 	ldr.w	lr, [ip, #4]
 8003e78:	f8de c00c 	ldr.w	ip, [lr, #12]
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	4642      	mov	r2, r8
 8003e80:	4641      	mov	r1, r8
 8003e82:	4638      	mov	r0, r7
 8003e84:	47e0      	blx	ip
 8003e86:	2c00      	cmp	r4, #0
 8003e88:	dd02      	ble.n	8003e90 <cmox_ScalarMul_wMOF+0x318>
 8003e8a:	1e64      	subs	r4, r4, #1
 8003e8c:	b264      	sxtb	r4, r4
 8003e8e:	e006      	b.n	8003e9e <cmox_ScalarMul_wMOF+0x326>
 8003e90:	f1ba 0f00 	cmp.w	sl, #0
 8003e94:	bfc4      	itt	gt
 8003e96:	f1aa 0001 	subgt.w	r0, sl, #1
 8003e9a:	fa4f fa80 	sxtbgt.w	sl, r0
 8003e9e:	2e00      	cmp	r6, #0
 8003ea0:	dd02      	ble.n	8003ea8 <cmox_ScalarMul_wMOF+0x330>
 8003ea2:	1e76      	subs	r6, r6, #1
 8003ea4:	b276      	sxtb	r6, r6
 8003ea6:	e003      	b.n	8003eb0 <cmox_ScalarMul_wMOF+0x338>
 8003ea8:	2d00      	cmp	r5, #0
 8003eaa:	bfc4      	itt	gt
 8003eac:	1e6d      	subgt	r5, r5, #1
 8003eae:	b26d      	sxtbgt	r5, r5
 8003eb0:	9904      	ldr	r1, [sp, #16]
 8003eb2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8003eb4:	1c49      	adds	r1, r1, #1
 8003eb6:	4088      	lsls	r0, r1
 8003eb8:	1e40      	subs	r0, r0, #1
 8003eba:	f88d 0003 	strb.w	r0, [sp, #3]
 8003ebe:	9804      	ldr	r0, [sp, #16]
 8003ec0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003ec2:	1e42      	subs	r2, r0, #1
 8003ec4:	4091      	lsls	r1, r2
 8003ec6:	9101      	str	r1, [sp, #4]
 8003ec8:	9804      	ldr	r0, [sp, #16]
 8003eca:	9a04      	ldr	r2, [sp, #16]
 8003ecc:	1e41      	subs	r1, r0, #1
 8003ece:	f88d 1002 	strb.w	r1, [sp, #2]
 8003ed2:	eba2 0209 	sub.w	r2, r2, r9
 8003ed6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8003ed8:	9904      	ldr	r1, [sp, #16]
 8003eda:	f88d 2001 	strb.w	r2, [sp, #1]
 8003ede:	4088      	lsls	r0, r1
 8003ee0:	9904      	ldr	r1, [sp, #16]
 8003ee2:	9003      	str	r0, [sp, #12]
 8003ee4:	eba9 0101 	sub.w	r1, r9, r1
 8003ee8:	9114      	str	r1, [sp, #80]	@ 0x50
 8003eea:	f1c9 0201 	rsb	r2, r9, #1
 8003eee:	9904      	ldr	r1, [sp, #16]
 8003ef0:	9804      	ldr	r0, [sp, #16]
 8003ef2:	f88d 2000 	strb.w	r2, [sp]
 8003ef6:	eba9 0101 	sub.w	r1, r9, r1
 8003efa:	9112      	str	r1, [sp, #72]	@ 0x48
 8003efc:	1c40      	adds	r0, r0, #1
 8003efe:	2c00      	cmp	r4, #0
 8003f00:	f1a9 0101 	sub.w	r1, r9, #1
 8003f04:	f04f 32ff 	mov.w	r2, #4294967295
 8003f08:	bfc8      	it	gt
 8003f0a:	f1ba 0f00 	cmpgt.w	sl, #0
 8003f0e:	9013      	str	r0, [sp, #76]	@ 0x4c
 8003f10:	9111      	str	r1, [sp, #68]	@ 0x44
 8003f12:	9210      	str	r2, [sp, #64]	@ 0x40
 8003f14:	dc56      	bgt.n	8003fc4 <cmox_ScalarMul_wMOF+0x44c>
 8003f16:	f1b9 0f00 	cmp.w	r9, #0
 8003f1a:	dd06      	ble.n	8003f2a <cmox_ScalarMul_wMOF+0x3b2>
 8003f1c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003f1e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003f20:	2102      	movs	r1, #2
 8003f22:	f000 ff1c 	bl	8004d5e <cmox_bn_getBits>
 8003f26:	b2c0      	uxtb	r0, r0
 8003f28:	e007      	b.n	8003f3a <cmox_ScalarMul_wMOF+0x3c2>
 8003f2a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003f2c:	6841      	ldr	r1, [r0, #4]
 8003f2e:	f89d 0000 	ldrb.w	r0, [sp]
 8003f32:	fa01 f000 	lsl.w	r0, r1, r0
 8003f36:	f000 0003 	and.w	r0, r0, #3
 8003f3a:	2c00      	cmp	r4, #0
 8003f3c:	d541      	bpl.n	8003fc2 <cmox_ScalarMul_wMOF+0x44a>
 8003f3e:	f1ba 0f00 	cmp.w	sl, #0
 8003f42:	dc3f      	bgt.n	8003fc4 <cmox_ScalarMul_wMOF+0x44c>
 8003f44:	f000 0101 	and.w	r1, r0, #1
 8003f48:	ea91 0f60 	teq	r1, r0, asr #1
 8003f4c:	f000 8080 	beq.w	8004050 <cmox_ScalarMul_wMOF+0x4d8>
 8003f50:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8003f52:	2800      	cmp	r0, #0
 8003f54:	d405      	bmi.n	8003f62 <cmox_ScalarMul_wMOF+0x3ea>
 8003f56:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003f58:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8003f5a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003f5c:	f000 feff 	bl	8004d5e <cmox_bn_getBits>
 8003f60:	e008      	b.n	8003f74 <cmox_ScalarMul_wMOF+0x3fc>
 8003f62:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003f64:	6841      	ldr	r1, [r0, #4]
 8003f66:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8003f6a:	fa01 f000 	lsl.w	r0, r1, r0
 8003f6e:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8003f72:	4008      	ands	r0, r1
 8003f74:	9a01      	ldr	r2, [sp, #4]
 8003f76:	9901      	ldr	r1, [sp, #4]
 8003f78:	1a80      	subs	r0, r0, r2
 8003f7a:	b2c0      	uxtb	r0, r0
 8003f7c:	4288      	cmp	r0, r1
 8003f7e:	9007      	str	r0, [sp, #28]
 8003f80:	da0b      	bge.n	8003f9a <cmox_ScalarMul_wMOF+0x422>
 8003f82:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003f84:	9907      	ldr	r1, [sp, #28]
 8003f86:	08c9      	lsrs	r1, r1, #3
 8003f88:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 8003f8c:	9807      	ldr	r0, [sp, #28]
 8003f8e:	0081      	lsls	r1, r0, #2
 8003f90:	f001 011c 	and.w	r1, r1, #28
 8003f94:	fa22 f001 	lsr.w	r0, r2, r1
 8003f98:	e00c      	b.n	8003fb4 <cmox_ScalarMul_wMOF+0x43c>
 8003f9a:	9903      	ldr	r1, [sp, #12]
 8003f9c:	1a08      	subs	r0, r1, r0
 8003f9e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003fa0:	1e42      	subs	r2, r0, #1
 8003fa2:	08d2      	lsrs	r2, r2, #3
 8003fa4:	1e40      	subs	r0, r0, #1
 8003fa6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8003faa:	0080      	lsls	r0, r0, #2
 8003fac:	f000 001c 	and.w	r0, r0, #28
 8003fb0:	fa21 f000 	lsr.w	r0, r1, r0
 8003fb4:	f89d 4002 	ldrb.w	r4, [sp, #2]
 8003fb8:	f000 0a0f 	and.w	sl, r0, #15
 8003fbc:	eba4 040a 	sub.w	r4, r4, sl
 8003fc0:	b264      	sxtb	r4, r4
 8003fc2:	2c00      	cmp	r4, #0
 8003fc4:	d144      	bne.n	8004050 <cmox_ScalarMul_wMOF+0x4d8>
 8003fc6:	9807      	ldr	r0, [sp, #28]
 8003fc8:	9901      	ldr	r1, [sp, #4]
 8003fca:	4288      	cmp	r0, r1
 8003fcc:	da16      	bge.n	8003ffc <cmox_ScalarMul_wMOF+0x484>
 8003fce:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003fd0:	9907      	ldr	r1, [sp, #28]
 8003fd2:	08c9      	lsrs	r1, r1, #3
 8003fd4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8003fd8:	9907      	ldr	r1, [sp, #28]
 8003fda:	008a      	lsls	r2, r1, #2
 8003fdc:	69b9      	ldr	r1, [r7, #24]
 8003fde:	f002 021c 	and.w	r2, r2, #28
 8003fe2:	40d0      	lsrs	r0, r2
 8003fe4:	684a      	ldr	r2, [r1, #4]
 8003fe6:	6954      	ldr	r4, [r2, #20]
 8003fe8:	f010 000f 	ands.w	r0, r0, #15
 8003fec:	4643      	mov	r3, r8
 8003fee:	d101      	bne.n	8003ff4 <cmox_ScalarMul_wMOF+0x47c>
 8003ff0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8003ff2:	e029      	b.n	8004048 <cmox_ScalarMul_wMOF+0x4d0>
 8003ff4:	9902      	ldr	r1, [sp, #8]
 8003ff6:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 8003ffa:	e025      	b.n	8004048 <cmox_ScalarMul_wMOF+0x4d0>
 8003ffc:	9803      	ldr	r0, [sp, #12]
 8003ffe:	9907      	ldr	r1, [sp, #28]
 8004000:	1a41      	subs	r1, r0, r1
 8004002:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004004:	1e4a      	subs	r2, r1, #1
 8004006:	08d2      	lsrs	r2, r2, #3
 8004008:	1e49      	subs	r1, r1, #1
 800400a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800400e:	0089      	lsls	r1, r1, #2
 8004010:	f001 011c 	and.w	r1, r1, #28
 8004014:	40c8      	lsrs	r0, r1
 8004016:	9902      	ldr	r1, [sp, #8]
 8004018:	680a      	ldr	r2, [r1, #0]
 800401a:	f010 000f 	ands.w	r0, r0, #15
 800401e:	bf0c      	ite	eq
 8004020:	990f      	ldreq	r1, [sp, #60]	@ 0x3c
 8004022:	f851 1020 	ldrne.w	r1, [r1, r0, lsl #2]
 8004026:	2001      	movs	r0, #1
 8004028:	f7fc f9d8 	bl	80003dc <cmox_ECC_CondCopyPoint>
 800402c:	9802      	ldr	r0, [sp, #8]
 800402e:	6802      	ldr	r2, [r0, #0]
 8004030:	4639      	mov	r1, r7
 8004032:	2001      	movs	r0, #1
 8004034:	f7fc fa05 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 8004038:	69bc      	ldr	r4, [r7, #24]
 800403a:	9802      	ldr	r0, [sp, #8]
 800403c:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8004040:	6802      	ldr	r2, [r0, #0]
 8004042:	f8dc 4014 	ldr.w	r4, [ip, #20]
 8004046:	4643      	mov	r3, r8
 8004048:	4641      	mov	r1, r8
 800404a:	4638      	mov	r0, r7
 800404c:	47a0      	blx	r4
 800404e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8004050:	2e00      	cmp	r6, #0
 8004052:	bfc8      	it	gt
 8004054:	2d00      	cmpgt	r5, #0
 8004056:	dc15      	bgt.n	8004084 <cmox_ScalarMul_wMOF+0x50c>
 8004058:	f1b9 0f00 	cmp.w	r9, #0
 800405c:	dd06      	ble.n	800406c <cmox_ScalarMul_wMOF+0x4f4>
 800405e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004060:	9808      	ldr	r0, [sp, #32]
 8004062:	2102      	movs	r1, #2
 8004064:	f000 fe7b 	bl	8004d5e <cmox_bn_getBits>
 8004068:	b2c0      	uxtb	r0, r0
 800406a:	e007      	b.n	800407c <cmox_ScalarMul_wMOF+0x504>
 800406c:	9808      	ldr	r0, [sp, #32]
 800406e:	6841      	ldr	r1, [r0, #4]
 8004070:	f89d 0000 	ldrb.w	r0, [sp]
 8004074:	fa01 f000 	lsl.w	r0, r1, r0
 8004078:	f000 0003 	and.w	r0, r0, #3
 800407c:	2e00      	cmp	r6, #0
 800407e:	f57f aeaf 	bpl.w	8003de0 <cmox_ScalarMul_wMOF+0x268>
 8004082:	2d00      	cmp	r5, #0
 8004084:	f73f aee3 	bgt.w	8003e4e <cmox_ScalarMul_wMOF+0x2d6>
 8004088:	f000 0101 	and.w	r1, r0, #1
 800408c:	ea91 0f60 	teq	r1, r0, asr #1
 8004090:	f43f aedd 	beq.w	8003e4e <cmox_ScalarMul_wMOF+0x2d6>
 8004094:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8004096:	2800      	cmp	r0, #0
 8004098:	d405      	bmi.n	80040a6 <cmox_ScalarMul_wMOF+0x52e>
 800409a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800409c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800409e:	9808      	ldr	r0, [sp, #32]
 80040a0:	f000 fe5d 	bl	8004d5e <cmox_bn_getBits>
 80040a4:	e008      	b.n	80040b8 <cmox_ScalarMul_wMOF+0x540>
 80040a6:	9808      	ldr	r0, [sp, #32]
 80040a8:	6841      	ldr	r1, [r0, #4]
 80040aa:	f89d 0001 	ldrb.w	r0, [sp, #1]
 80040ae:	fa01 f000 	lsl.w	r0, r1, r0
 80040b2:	f89d 1003 	ldrb.w	r1, [sp, #3]
 80040b6:	4008      	ands	r0, r1
 80040b8:	9a01      	ldr	r2, [sp, #4]
 80040ba:	9901      	ldr	r1, [sp, #4]
 80040bc:	1a80      	subs	r0, r0, r2
 80040be:	b2c0      	uxtb	r0, r0
 80040c0:	4288      	cmp	r0, r1
 80040c2:	9006      	str	r0, [sp, #24]
 80040c4:	f6bf ae7a 	bge.w	8003dbc <cmox_ScalarMul_wMOF+0x244>
 80040c8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80040ca:	9906      	ldr	r1, [sp, #24]
 80040cc:	08c9      	lsrs	r1, r1, #3
 80040ce:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 80040d2:	9806      	ldr	r0, [sp, #24]
 80040d4:	0081      	lsls	r1, r0, #2
 80040d6:	f001 011c 	and.w	r1, r1, #28
 80040da:	40cd      	lsrs	r5, r1
 80040dc:	e67a      	b.n	8003dd4 <cmox_ScalarMul_wMOF+0x25c>
 80040de:	9703      	str	r7, [sp, #12]
 80040e0:	f1b9 0f00 	cmp.w	r9, #0
 80040e4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80040e6:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80040e8:	9f08      	ldr	r7, [sp, #32]
 80040ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80040ee:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80040f0:	d146      	bne.n	8004180 <cmox_ScalarMul_wMOF+0x608>
 80040f2:	9803      	ldr	r0, [sp, #12]
 80040f4:	f8d0 e018 	ldr.w	lr, [r0, #24]
 80040f8:	f8de 9004 	ldr.w	r9, [lr, #4]
 80040fc:	f8d9 c00c 	ldr.w	ip, [r9, #12]
 8004100:	2301      	movs	r3, #1
 8004102:	4642      	mov	r2, r8
 8004104:	4641      	mov	r1, r8
 8004106:	47e0      	blx	ip
 8004108:	7920      	ldrb	r0, [r4, #4]
 800410a:	07c1      	lsls	r1, r0, #31
 800410c:	d517      	bpl.n	800413e <cmox_ScalarMul_wMOF+0x5c6>
 800410e:	9802      	ldr	r0, [sp, #8]
 8004110:	6802      	ldr	r2, [r0, #0]
 8004112:	4631      	mov	r1, r6
 8004114:	2001      	movs	r0, #1
 8004116:	f7fc f961 	bl	80003dc <cmox_ECC_CondCopyPoint>
 800411a:	9802      	ldr	r0, [sp, #8]
 800411c:	6802      	ldr	r2, [r0, #0]
 800411e:	9903      	ldr	r1, [sp, #12]
 8004120:	2001      	movs	r0, #1
 8004122:	f7fc f98e 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 8004126:	9803      	ldr	r0, [sp, #12]
 8004128:	f8d0 c018 	ldr.w	ip, [r0, #24]
 800412c:	9a02      	ldr	r2, [sp, #8]
 800412e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	f8d4 c014 	ldr.w	ip, [r4, #20]
 8004138:	4643      	mov	r3, r8
 800413a:	4641      	mov	r1, r8
 800413c:	47e0      	blx	ip
 800413e:	7938      	ldrb	r0, [r7, #4]
 8004140:	07c1      	lsls	r1, r0, #31
 8004142:	d51d      	bpl.n	8004180 <cmox_ScalarMul_wMOF+0x608>
 8004144:	9802      	ldr	r0, [sp, #8]
 8004146:	6801      	ldr	r1, [r0, #0]
 8004148:	9101      	str	r1, [sp, #4]
 800414a:	2206      	movs	r2, #6
 800414c:	9200      	str	r2, [sp, #0]
 800414e:	1d28      	adds	r0, r5, #4
 8004150:	eb00 028a 	add.w	r2, r0, sl, lsl #2
 8004154:	1d2b      	adds	r3, r5, #4
 8004156:	4651      	mov	r1, sl
 8004158:	2001      	movs	r0, #1
 800415a:	f7fc f9dc 	bl	8000516 <cmox_ECC_CondImportPoint>
 800415e:	9802      	ldr	r0, [sp, #8]
 8004160:	6802      	ldr	r2, [r0, #0]
 8004162:	9903      	ldr	r1, [sp, #12]
 8004164:	2001      	movs	r0, #1
 8004166:	f7fc f96c 	bl	8000442 <cmox_ECC_CondSymmetricPoint>
 800416a:	9902      	ldr	r1, [sp, #8]
 800416c:	2000      	movs	r0, #0
 800416e:	9000      	str	r0, [sp, #0]
 8004170:	4643      	mov	r3, r8
 8004172:	9803      	ldr	r0, [sp, #12]
 8004174:	6987      	ldr	r7, [r0, #24]
 8004176:	687c      	ldr	r4, [r7, #4]
 8004178:	680a      	ldr	r2, [r1, #0]
 800417a:	6927      	ldr	r7, [r4, #16]
 800417c:	4641      	mov	r1, r8
 800417e:	47b8      	blx	r7
 8004180:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8004182:	b940      	cbnz	r0, 8004196 <cmox_ScalarMul_wMOF+0x61e>
 8004184:	9803      	ldr	r0, [sp, #12]
 8004186:	4631      	mov	r1, r6
 8004188:	f7fc fa6c 	bl	8000664 <cmox_ECC_PointFromModularDomain>
 800418c:	9005      	str	r0, [sp, #20]
 800418e:	4641      	mov	r1, r8
 8004190:	9803      	ldr	r0, [sp, #12]
 8004192:	f7fc fa67 	bl	8000664 <cmox_ECC_PointFromModularDomain>
 8004196:	9d03      	ldr	r5, [sp, #12]
 8004198:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 800419a:	e007      	b.n	80041ac <cmox_ScalarMul_wMOF+0x634>
 800419c:	9802      	ldr	r0, [sp, #8]
 800419e:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 80041a2:	1f09      	subs	r1, r1, #4
 80041a4:	4628      	mov	r0, r5
 80041a6:	f7fc f8e8 	bl	800037a <cmox_ECC_FreePoint>
 80041aa:	1e64      	subs	r4, r4, #1
 80041ac:	2c00      	cmp	r4, #0
 80041ae:	d1f5      	bne.n	800419c <cmox_ScalarMul_wMOF+0x624>
 80041b0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80041b2:	69e8      	ldr	r0, [r5, #28]
 80041b4:	a902      	add	r1, sp, #8
 80041b6:	f7fe ff81 	bl	80030bc <cmox_membuf_free>
 80041ba:	465c      	mov	r4, fp
 80041bc:	e006      	b.n	80041cc <cmox_ScalarMul_wMOF+0x654>
 80041be:	6969      	ldr	r1, [r5, #20]
 80041c0:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 80041c4:	1f11      	subs	r1, r2, #4
 80041c6:	f000 fcc4 	bl	8004b52 <cmox_bn_free>
 80041ca:	1e64      	subs	r4, r4, #1
 80041cc:	69e8      	ldr	r0, [r5, #28]
 80041ce:	2c00      	cmp	r4, #0
 80041d0:	d1f5      	bne.n	80041be <cmox_ScalarMul_wMOF+0x646>
 80041d2:	69a9      	ldr	r1, [r5, #24]
 80041d4:	684a      	ldr	r2, [r1, #4]
 80041d6:	6992      	ldr	r2, [r2, #24]
 80041d8:	0092      	lsls	r2, r2, #2
 80041da:	f105 0114 	add.w	r1, r5, #20
 80041de:	f7fe ff6d 	bl	80030bc <cmox_membuf_free>
 80041e2:	9805      	ldr	r0, [sp, #20]
 80041e4:	b019      	add	sp, #100	@ 0x64
 80041e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ea:	bf00      	nop
 80041ec:	080041f4 	.word	0x080041f4
 80041f0:	08004200 	.word	0x08004200

080041f4 <cmox_ScalarMul_wMOF::T_Pi>:
 80041f4:	00000110 15522440 07733661              ....@$R.a6s.

08004200 <cmox_ScalarMul_wMOF::T_DblAfter>:
 8004200:	00002001 20011003 40011002              . ..... ...@

0800420c <cmox_ScalarMul_wNAFRecoding>:
 800420c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004210:	4681      	mov	r9, r0
 8004212:	460f      	mov	r7, r1
 8004214:	2000      	movs	r0, #0
 8004216:	4692      	mov	sl, r2
 8004218:	9000      	str	r0, [sp, #0]
 800421a:	461e      	mov	r6, r3
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	4669      	mov	r1, sp
 8004220:	4648      	mov	r0, r9
 8004222:	f000 fc8b 	bl	8004b3c <cmox_bn_alloc>
 8004226:	2500      	movs	r5, #0
 8004228:	ea5f 0800 	movs.w	r8, r0
 800422c:	d138      	bne.n	80042a0 <cmox_ScalarMul_wNAFRecoding+0x94>
 800422e:	9800      	ldr	r0, [sp, #0]
 8004230:	2100      	movs	r1, #0
 8004232:	f000 fcba 	bl	8004baa <cmox_bn_init>
 8004236:	9a00      	ldr	r2, [sp, #0]
 8004238:	4639      	mov	r1, r7
 800423a:	2001      	movs	r0, #1
 800423c:	f000 fcc4 	bl	8004bc8 <cmox_bn_cCopy>
 8004240:	2401      	movs	r4, #1
 8004242:	f1aa 0701 	sub.w	r7, sl, #1
 8004246:	fa04 f707 	lsl.w	r7, r4, r7
 800424a:	e01c      	b.n	8004286 <cmox_ScalarMul_wNAFRecoding+0x7a>
 800424c:	2100      	movs	r1, #0
 800424e:	5571      	strb	r1, [r6, r5]
 8004250:	e013      	b.n	800427a <cmox_ScalarMul_wNAFRecoding+0x6e>
 8004252:	9800      	ldr	r0, [sp, #0]
 8004254:	6841      	ldr	r1, [r0, #4]
 8004256:	07c8      	lsls	r0, r1, #31
 8004258:	d5f8      	bpl.n	800424c <cmox_ScalarMul_wNAFRecoding+0x40>
 800425a:	fa04 f00a 	lsl.w	r0, r4, sl
 800425e:	1e42      	subs	r2, r0, #1
 8004260:	4011      	ands	r1, r2
 8004262:	b24a      	sxtb	r2, r1
 8004264:	b27b      	sxtb	r3, r7
 8004266:	429a      	cmp	r2, r3
 8004268:	bfa8      	it	ge
 800426a:	1bc9      	subge	r1, r1, r7
 800426c:	5571      	strb	r1, [r6, r5]
 800426e:	b249      	sxtb	r1, r1
 8004270:	9a00      	ldr	r2, [sp, #0]
 8004272:	4249      	negs	r1, r1
 8004274:	4610      	mov	r0, r2
 8004276:	f7fe fd1b 	bl	8002cb0 <cmox_AddBN_Int>
 800427a:	9a00      	ldr	r2, [sp, #0]
 800427c:	2101      	movs	r1, #1
 800427e:	4610      	mov	r0, r2
 8004280:	f7fe fba7 	bl	80029d2 <cmox_RightShiftBN>
 8004284:	1c6d      	adds	r5, r5, #1
 8004286:	9800      	ldr	r0, [sp, #0]
 8004288:	2100      	movs	r1, #0
 800428a:	f000 fd39 	bl	8004d00 <cmox_bn_cmpUint>
 800428e:	2800      	cmp	r0, #0
 8004290:	d0df      	beq.n	8004252 <cmox_ScalarMul_wNAFRecoding+0x46>
 8004292:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004294:	b100      	cbz	r0, 8004298 <cmox_ScalarMul_wNAFRecoding+0x8c>
 8004296:	6005      	str	r5, [r0, #0]
 8004298:	4669      	mov	r1, sp
 800429a:	4648      	mov	r0, r9
 800429c:	f000 fc59 	bl	8004b52 <cmox_bn_free>
 80042a0:	4640      	mov	r0, r8
 80042a2:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

080042a6 <cmox_ScalarMul_Monty_Ladder>:
 80042a6:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042aa:	4605      	mov	r5, r0
 80042ac:	2000      	movs	r0, #0
 80042ae:	460f      	mov	r7, r1
 80042b0:	9000      	str	r0, [sp, #0]
 80042b2:	4691      	mov	r9, r2
 80042b4:	69a9      	ldr	r1, [r5, #24]
 80042b6:	6848      	ldr	r0, [r1, #4]
 80042b8:	6982      	ldr	r2, [r0, #24]
 80042ba:	69e8      	ldr	r0, [r5, #28]
 80042bc:	461c      	mov	r4, r3
 80042be:	0092      	lsls	r2, r2, #2
 80042c0:	f105 0114 	add.w	r1, r5, #20
 80042c4:	f7fe fedb 	bl	800307e <cmox_membuf_alloc>
 80042c8:	ea5f 0800 	movs.w	r8, r0
 80042cc:	f04f 0a01 	mov.w	sl, #1
 80042d0:	f040 809d 	bne.w	800440e <cmox_ScalarMul_Monty_Ladder+0x168>
 80042d4:	2600      	movs	r6, #0
 80042d6:	e00c      	b.n	80042f2 <cmox_ScalarMul_Monty_Ladder+0x4c>
 80042d8:	6800      	ldr	r0, [r0, #0]
 80042da:	6801      	ldr	r1, [r0, #0]
 80042dc:	6968      	ldr	r0, [r5, #20]
 80042de:	680a      	ldr	r2, [r1, #0]
 80042e0:	eb00 0186 	add.w	r1, r0, r6, lsl #2
 80042e4:	69e8      	ldr	r0, [r5, #28]
 80042e6:	f000 fc29 	bl	8004b3c <cmox_bn_alloc>
 80042ea:	ea5f 0800 	movs.w	r8, r0
 80042ee:	d10b      	bne.n	8004308 <cmox_ScalarMul_Monty_Ladder+0x62>
 80042f0:	1c76      	adds	r6, r6, #1
 80042f2:	69a8      	ldr	r0, [r5, #24]
 80042f4:	6841      	ldr	r1, [r0, #4]
 80042f6:	698a      	ldr	r2, [r1, #24]
 80042f8:	4296      	cmp	r6, r2
 80042fa:	dbed      	blt.n	80042d8 <cmox_ScalarMul_Monty_Ladder+0x32>
 80042fc:	4669      	mov	r1, sp
 80042fe:	4628      	mov	r0, r5
 8004300:	f7fb ffdf 	bl	80002c2 <cmox_ECC_AllocPoint>
 8004304:	ea5f 0800 	movs.w	r8, r0
 8004308:	d176      	bne.n	80043f8 <cmox_ScalarMul_Monty_Ladder+0x152>
 800430a:	f899 0010 	ldrb.w	r0, [r9, #16]
 800430e:	2100      	movs	r1, #0
 8004310:	f000 0004 	and.w	r0, r0, #4
 8004314:	f7fe fe7d 	bl	8003012 <cmox_mathUtils_neq>
 8004318:	b928      	cbnz	r0, 8004326 <cmox_ScalarMul_Monty_Ladder+0x80>
 800431a:	4649      	mov	r1, r9
 800431c:	4628      	mov	r0, r5
 800431e:	f7fc f977 	bl	8000610 <cmox_ECC_PointToModularDomain>
 8004322:	f04f 0a00 	mov.w	sl, #0
 8004326:	9900      	ldr	r1, [sp, #0]
 8004328:	4628      	mov	r0, r5
 800432a:	f7fc f8b1 	bl	8000490 <cmox_ECC_SetPointAtInfinity>
 800432e:	9a00      	ldr	r2, [sp, #0]
 8004330:	4649      	mov	r1, r9
 8004332:	2001      	movs	r0, #1
 8004334:	f7fc f852 	bl	80003dc <cmox_ECC_CondCopyPoint>
 8004338:	4621      	mov	r1, r4
 800433a:	4628      	mov	r0, r5
 800433c:	f7fc f8a8 	bl	8000490 <cmox_ECC_SetPointAtInfinity>
 8004340:	4621      	mov	r1, r4
 8004342:	4628      	mov	r0, r5
 8004344:	f7fc f964 	bl	8000610 <cmox_ECC_PointToModularDomain>
 8004348:	4649      	mov	r1, r9
 800434a:	4628      	mov	r0, r5
 800434c:	f7fc f9b8 	bl	80006c0 <cmox_ECC_PointValidation>
 8004350:	ea5f 0800 	movs.w	r8, r0
 8004354:	d143      	bne.n	80043de <cmox_ScalarMul_Monty_Ladder+0x138>
 8004356:	6838      	ldr	r0, [r7, #0]
 8004358:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800435c:	f7fe fe65 	bl	800302a <cmox_mathUtils_bitLength>
 8004360:	6839      	ldr	r1, [r7, #0]
 8004362:	9701      	str	r7, [sp, #4]
 8004364:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8004368:	3821      	subs	r0, #33	@ 0x21
 800436a:	4607      	mov	r7, r0
 800436c:	e029      	b.n	80043c2 <cmox_ScalarMul_Monty_Ladder+0x11c>
 800436e:	9801      	ldr	r0, [sp, #4]
 8004370:	0979      	lsrs	r1, r7, #5
 8004372:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8004376:	f007 001f 	and.w	r0, r7, #31
 800437a:	6851      	ldr	r1, [r2, #4]
 800437c:	fa21 f000 	lsr.w	r0, r1, r0
 8004380:	9900      	ldr	r1, [sp, #0]
 8004382:	680a      	ldr	r2, [r1, #0]
 8004384:	6821      	ldr	r1, [r4, #0]
 8004386:	f000 0b01 	and.w	fp, r0, #1
 800438a:	4658      	mov	r0, fp
 800438c:	f000 fc54 	bl	8004c38 <cmox_bn_cSwap>
 8004390:	9800      	ldr	r0, [sp, #0]
 8004392:	6882      	ldr	r2, [r0, #8]
 8004394:	68a1      	ldr	r1, [r4, #8]
 8004396:	4658      	mov	r0, fp
 8004398:	f000 fc4e 	bl	8004c38 <cmox_bn_cSwap>
 800439c:	9a00      	ldr	r2, [sp, #0]
 800439e:	4623      	mov	r3, r4
 80043a0:	4649      	mov	r1, r9
 80043a2:	4628      	mov	r0, r5
 80043a4:	f7fd fca7 	bl	8001cf6 <cmox_ECC_MONTY_Ladder_XzAff>
 80043a8:	9800      	ldr	r0, [sp, #0]
 80043aa:	6802      	ldr	r2, [r0, #0]
 80043ac:	6821      	ldr	r1, [r4, #0]
 80043ae:	4658      	mov	r0, fp
 80043b0:	f000 fc42 	bl	8004c38 <cmox_bn_cSwap>
 80043b4:	9800      	ldr	r0, [sp, #0]
 80043b6:	6882      	ldr	r2, [r0, #8]
 80043b8:	68a1      	ldr	r1, [r4, #8]
 80043ba:	4658      	mov	r0, fp
 80043bc:	f000 fc3c 	bl	8004c38 <cmox_bn_cSwap>
 80043c0:	1e7f      	subs	r7, r7, #1
 80043c2:	2f00      	cmp	r7, #0
 80043c4:	d5d3      	bpl.n	800436e <cmox_ScalarMul_Monty_Ladder+0xc8>
 80043c6:	f1ba 0f00 	cmp.w	sl, #0
 80043ca:	4649      	mov	r1, r9
 80043cc:	d107      	bne.n	80043de <cmox_ScalarMul_Monty_Ladder+0x138>
 80043ce:	4628      	mov	r0, r5
 80043d0:	f7fc f948 	bl	8000664 <cmox_ECC_PointFromModularDomain>
 80043d4:	4680      	mov	r8, r0
 80043d6:	4621      	mov	r1, r4
 80043d8:	4628      	mov	r0, r5
 80043da:	f7fc f943 	bl	8000664 <cmox_ECC_PointFromModularDomain>
 80043de:	4669      	mov	r1, sp
 80043e0:	4628      	mov	r0, r5
 80043e2:	f7fb ffca 	bl	800037a <cmox_ECC_FreePoint>
 80043e6:	e007      	b.n	80043f8 <cmox_ScalarMul_Monty_Ladder+0x152>
 80043e8:	6968      	ldr	r0, [r5, #20]
 80043ea:	eb00 0186 	add.w	r1, r0, r6, lsl #2
 80043ee:	69e8      	ldr	r0, [r5, #28]
 80043f0:	1f09      	subs	r1, r1, #4
 80043f2:	f000 fbae 	bl	8004b52 <cmox_bn_free>
 80043f6:	1e76      	subs	r6, r6, #1
 80043f8:	2e00      	cmp	r6, #0
 80043fa:	dcf5      	bgt.n	80043e8 <cmox_ScalarMul_Monty_Ladder+0x142>
 80043fc:	69a8      	ldr	r0, [r5, #24]
 80043fe:	6841      	ldr	r1, [r0, #4]
 8004400:	698a      	ldr	r2, [r1, #24]
 8004402:	69e8      	ldr	r0, [r5, #28]
 8004404:	0092      	lsls	r2, r2, #2
 8004406:	f105 0114 	add.w	r1, r5, #20
 800440a:	f7fe fe57 	bl	80030bc <cmox_membuf_free>
 800440e:	4640      	mov	r0, r8
 8004410:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004414 <cmox_sha224_cleanup>:
 8004414:	b500      	push	{lr}
 8004416:	b081      	sub	sp, #4
 8004418:	6801      	ldr	r1, [r0, #0]
 800441a:	4a07      	ldr	r2, [pc, #28]	@ (8004438 <cmox_sha224_cleanup+0x24>)
 800441c:	4291      	cmp	r1, r2
 800441e:	d100      	bne.n	8004422 <cmox_sha224_cleanup+0xe>
 8004420:	b910      	cbnz	r0, 8004428 <cmox_sha224_cleanup+0x14>
 8004422:	4806      	ldr	r0, [pc, #24]	@ (800443c <cmox_sha224_cleanup+0x28>)
 8004424:	b001      	add	sp, #4
 8004426:	bd00      	pop	{pc}
 8004428:	217c      	movs	r1, #124	@ 0x7c
 800442a:	f006 ff98 	bl	800b35e <__aeabi_memclr>
 800442e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8004432:	b001      	add	sp, #4
 8004434:	bd00      	pop	{pc}
 8004436:	bf00      	nop
 8004438:	08004520 	.word	0x08004520
 800443c:	00020003 	.word	0x00020003

08004440 <cmox_sha224_init>:
 8004440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004444:	4a0b      	ldr	r2, [pc, #44]	@ (8004474 <cmox_sha224_init+0x34>)
 8004446:	e892 51f8 	ldmia.w	r2, {r3, r4, r5, r6, r7, r8, ip, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	4669      	mov	r1, sp
 800444e:	e881 51f8 	stmia.w	r1, {r3, r4, r5, r6, r7, r8, ip, lr}
 8004452:	6802      	ldr	r2, [r0, #0]
 8004454:	4b08      	ldr	r3, [pc, #32]	@ (8004478 <cmox_sha224_init+0x38>)
 8004456:	429a      	cmp	r2, r3
 8004458:	d100      	bne.n	800445c <cmox_sha224_init+0x1c>
 800445a:	b918      	cbnz	r0, 8004464 <cmox_sha224_init+0x24>
 800445c:	4807      	ldr	r0, [pc, #28]	@ (800447c <cmox_sha224_init+0x3c>)
 800445e:	b008      	add	sp, #32
 8004460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004464:	221c      	movs	r2, #28
 8004466:	3008      	adds	r0, #8
 8004468:	f001 fb4e 	bl	8005b08 <cmox_md_init>
 800446c:	b008      	add	sp, #32
 800446e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004472:	bf00      	nop
 8004474:	08004500 	.word	0x08004500
 8004478:	08004520 	.word	0x08004520
 800447c:	00020003 	.word	0x00020003

08004480 <cmox_sha224_setTagLen>:
 8004480:	291d      	cmp	r1, #29
 8004482:	d204      	bcs.n	800448e <cmox_sha224_setTagLen+0xe>
 8004484:	6802      	ldr	r2, [r0, #0]
 8004486:	4b04      	ldr	r3, [pc, #16]	@ (8004498 <cmox_sha224_setTagLen+0x18>)
 8004488:	429a      	cmp	r2, r3
 800448a:	d100      	bne.n	800448e <cmox_sha224_setTagLen+0xe>
 800448c:	b908      	cbnz	r0, 8004492 <cmox_sha224_setTagLen+0x12>
 800448e:	4803      	ldr	r0, [pc, #12]	@ (800449c <cmox_sha224_setTagLen+0x1c>)
 8004490:	4770      	bx	lr
 8004492:	3008      	adds	r0, #8
 8004494:	f001 bb47 	b.w	8005b26 <cmox_md_setTagSize>
 8004498:	08004520 	.word	0x08004520
 800449c:	00020003 	.word	0x00020003

080044a0 <cmox_sha224_append>:
 80044a0:	b410      	push	{r4}
 80044a2:	b081      	sub	sp, #4
 80044a4:	4613      	mov	r3, r2
 80044a6:	6802      	ldr	r2, [r0, #0]
 80044a8:	4c07      	ldr	r4, [pc, #28]	@ (80044c8 <cmox_sha224_append+0x28>)
 80044aa:	42a2      	cmp	r2, r4
 80044ac:	d100      	bne.n	80044b0 <cmox_sha224_append+0x10>
 80044ae:	b918      	cbnz	r0, 80044b8 <cmox_sha224_append+0x18>
 80044b0:	b001      	add	sp, #4
 80044b2:	bc10      	pop	{r4}
 80044b4:	4805      	ldr	r0, [pc, #20]	@ (80044cc <cmox_sha224_append+0x2c>)
 80044b6:	4770      	bx	lr
 80044b8:	b001      	add	sp, #4
 80044ba:	f100 0224 	add.w	r2, r0, #36	@ 0x24
 80044be:	bc10      	pop	{r4}
 80044c0:	3008      	adds	r0, #8
 80044c2:	f001 bb35 	b.w	8005b30 <cmox_md_append>
 80044c6:	bf00      	nop
 80044c8:	08004520 	.word	0x08004520
 80044cc:	00020003 	.word	0x00020003

080044d0 <cmox_sha224_generateTag>:
 80044d0:	b410      	push	{r4}
 80044d2:	b081      	sub	sp, #4
 80044d4:	4613      	mov	r3, r2
 80044d6:	6802      	ldr	r2, [r0, #0]
 80044d8:	4c07      	ldr	r4, [pc, #28]	@ (80044f8 <cmox_sha224_generateTag+0x28>)
 80044da:	42a2      	cmp	r2, r4
 80044dc:	d100      	bne.n	80044e0 <cmox_sha224_generateTag+0x10>
 80044de:	b918      	cbnz	r0, 80044e8 <cmox_sha224_generateTag+0x18>
 80044e0:	b001      	add	sp, #4
 80044e2:	bc10      	pop	{r4}
 80044e4:	4805      	ldr	r0, [pc, #20]	@ (80044fc <cmox_sha224_generateTag+0x2c>)
 80044e6:	4770      	bx	lr
 80044e8:	460a      	mov	r2, r1
 80044ea:	b001      	add	sp, #4
 80044ec:	f100 0124 	add.w	r1, r0, #36	@ 0x24
 80044f0:	bc10      	pop	{r4}
 80044f2:	3008      	adds	r0, #8
 80044f4:	f001 bb70 	b.w	8005bd8 <cmox_md_generateTag>
 80044f8:	08004520 	.word	0x08004520
 80044fc:	00020003 	.word	0x00020003
 8004500:	c1059ed8 	.word	0xc1059ed8
 8004504:	367cd507 	.word	0x367cd507
 8004508:	3070dd17 	.word	0x3070dd17
 800450c:	f70e5939 	.word	0xf70e5939
 8004510:	ffc00b31 	.word	0xffc00b31
 8004514:	68581511 	.word	0x68581511
 8004518:	64f98fa7 	.word	0x64f98fa7
 800451c:	befa4fa4 	.word	0xbefa4fa4

08004520 <CMOX_SHA224_VTABLE>:
 8004520:	08004415 08004441 08004481 080044a1     .D..AD...D...D..
 8004530:	080044d1                                .D..

08004534 <cmox_sha224_compute>:
 8004534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004536:	b0a3      	sub	sp, #140	@ 0x8c
 8004538:	4604      	mov	r4, r0
 800453a:	480b      	ldr	r0, [pc, #44]	@ (8004568 <cmox_sha224_compute+0x34>)
 800453c:	9002      	str	r0, [sp, #8]
 800453e:	460d      	mov	r5, r1
 8004540:	4616      	mov	r6, r2
 8004542:	461f      	mov	r7, r3
 8004544:	4b09      	ldr	r3, [pc, #36]	@ (800456c <cmox_sha224_compute+0x38>)
 8004546:	2208      	movs	r2, #8
 8004548:	2140      	movs	r1, #64	@ 0x40
 800454a:	a804      	add	r0, sp, #16
 800454c:	f001 fad8 	bl	8005b00 <cmox_md_construct>
 8004550:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8004552:	9001      	str	r0, [sp, #4]
 8004554:	9700      	str	r7, [sp, #0]
 8004556:	4633      	mov	r3, r6
 8004558:	462a      	mov	r2, r5
 800455a:	4621      	mov	r1, r4
 800455c:	a802      	add	r0, sp, #8
 800455e:	f7fe f9e3 	bl	8002928 <cmox_hash_common_compute>
 8004562:	b023      	add	sp, #140	@ 0x8c
 8004564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004566:	bf00      	nop
 8004568:	08004520 	.word	0x08004520
 800456c:	0800f500 	.word	0x0800f500

08004570 <cmox_sha256_cleanup>:
 8004570:	b500      	push	{lr}
 8004572:	b081      	sub	sp, #4
 8004574:	6801      	ldr	r1, [r0, #0]
 8004576:	4a07      	ldr	r2, [pc, #28]	@ (8004594 <cmox_sha256_cleanup+0x24>)
 8004578:	4291      	cmp	r1, r2
 800457a:	d100      	bne.n	800457e <cmox_sha256_cleanup+0xe>
 800457c:	b910      	cbnz	r0, 8004584 <cmox_sha256_cleanup+0x14>
 800457e:	4806      	ldr	r0, [pc, #24]	@ (8004598 <cmox_sha256_cleanup+0x28>)
 8004580:	b001      	add	sp, #4
 8004582:	bd00      	pop	{pc}
 8004584:	217c      	movs	r1, #124	@ 0x7c
 8004586:	f006 feea 	bl	800b35e <__aeabi_memclr>
 800458a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800458e:	b001      	add	sp, #4
 8004590:	bd00      	pop	{pc}
 8004592:	bf00      	nop
 8004594:	0800467c 	.word	0x0800467c
 8004598:	00020003 	.word	0x00020003

0800459c <cmox_sha256_init>:
 800459c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a0:	4a0b      	ldr	r2, [pc, #44]	@ (80045d0 <cmox_sha256_init+0x34>)
 80045a2:	e892 51f8 	ldmia.w	r2, {r3, r4, r5, r6, r7, r8, ip, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	4669      	mov	r1, sp
 80045aa:	e881 51f8 	stmia.w	r1, {r3, r4, r5, r6, r7, r8, ip, lr}
 80045ae:	6802      	ldr	r2, [r0, #0]
 80045b0:	4b08      	ldr	r3, [pc, #32]	@ (80045d4 <cmox_sha256_init+0x38>)
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d100      	bne.n	80045b8 <cmox_sha256_init+0x1c>
 80045b6:	b918      	cbnz	r0, 80045c0 <cmox_sha256_init+0x24>
 80045b8:	4807      	ldr	r0, [pc, #28]	@ (80045d8 <cmox_sha256_init+0x3c>)
 80045ba:	b008      	add	sp, #32
 80045bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045c0:	2220      	movs	r2, #32
 80045c2:	3008      	adds	r0, #8
 80045c4:	f001 faa0 	bl	8005b08 <cmox_md_init>
 80045c8:	b008      	add	sp, #32
 80045ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045ce:	bf00      	nop
 80045d0:	0800465c 	.word	0x0800465c
 80045d4:	0800467c 	.word	0x0800467c
 80045d8:	00020003 	.word	0x00020003

080045dc <cmox_sha256_setTagLen>:
 80045dc:	2921      	cmp	r1, #33	@ 0x21
 80045de:	d204      	bcs.n	80045ea <cmox_sha256_setTagLen+0xe>
 80045e0:	6802      	ldr	r2, [r0, #0]
 80045e2:	4b04      	ldr	r3, [pc, #16]	@ (80045f4 <cmox_sha256_setTagLen+0x18>)
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d100      	bne.n	80045ea <cmox_sha256_setTagLen+0xe>
 80045e8:	b908      	cbnz	r0, 80045ee <cmox_sha256_setTagLen+0x12>
 80045ea:	4803      	ldr	r0, [pc, #12]	@ (80045f8 <cmox_sha256_setTagLen+0x1c>)
 80045ec:	4770      	bx	lr
 80045ee:	3008      	adds	r0, #8
 80045f0:	f001 ba99 	b.w	8005b26 <cmox_md_setTagSize>
 80045f4:	0800467c 	.word	0x0800467c
 80045f8:	00020003 	.word	0x00020003

080045fc <cmox_sha256_append>:
 80045fc:	b410      	push	{r4}
 80045fe:	b081      	sub	sp, #4
 8004600:	4613      	mov	r3, r2
 8004602:	6802      	ldr	r2, [r0, #0]
 8004604:	4c07      	ldr	r4, [pc, #28]	@ (8004624 <cmox_sha256_append+0x28>)
 8004606:	42a2      	cmp	r2, r4
 8004608:	d100      	bne.n	800460c <cmox_sha256_append+0x10>
 800460a:	b918      	cbnz	r0, 8004614 <cmox_sha256_append+0x18>
 800460c:	b001      	add	sp, #4
 800460e:	bc10      	pop	{r4}
 8004610:	4805      	ldr	r0, [pc, #20]	@ (8004628 <cmox_sha256_append+0x2c>)
 8004612:	4770      	bx	lr
 8004614:	b001      	add	sp, #4
 8004616:	f100 0224 	add.w	r2, r0, #36	@ 0x24
 800461a:	bc10      	pop	{r4}
 800461c:	3008      	adds	r0, #8
 800461e:	f001 ba87 	b.w	8005b30 <cmox_md_append>
 8004622:	bf00      	nop
 8004624:	0800467c 	.word	0x0800467c
 8004628:	00020003 	.word	0x00020003

0800462c <cmox_sha256_generateTag>:
 800462c:	b410      	push	{r4}
 800462e:	b081      	sub	sp, #4
 8004630:	4613      	mov	r3, r2
 8004632:	6802      	ldr	r2, [r0, #0]
 8004634:	4c07      	ldr	r4, [pc, #28]	@ (8004654 <cmox_sha256_generateTag+0x28>)
 8004636:	42a2      	cmp	r2, r4
 8004638:	d100      	bne.n	800463c <cmox_sha256_generateTag+0x10>
 800463a:	b918      	cbnz	r0, 8004644 <cmox_sha256_generateTag+0x18>
 800463c:	b001      	add	sp, #4
 800463e:	bc10      	pop	{r4}
 8004640:	4805      	ldr	r0, [pc, #20]	@ (8004658 <cmox_sha256_generateTag+0x2c>)
 8004642:	4770      	bx	lr
 8004644:	460a      	mov	r2, r1
 8004646:	b001      	add	sp, #4
 8004648:	f100 0124 	add.w	r1, r0, #36	@ 0x24
 800464c:	bc10      	pop	{r4}
 800464e:	3008      	adds	r0, #8
 8004650:	f001 bac2 	b.w	8005bd8 <cmox_md_generateTag>
 8004654:	0800467c 	.word	0x0800467c
 8004658:	00020003 	.word	0x00020003
 800465c:	6a09e667 	.word	0x6a09e667
 8004660:	bb67ae85 	.word	0xbb67ae85
 8004664:	3c6ef372 	.word	0x3c6ef372
 8004668:	a54ff53a 	.word	0xa54ff53a
 800466c:	510e527f 	.word	0x510e527f
 8004670:	9b05688c 	.word	0x9b05688c
 8004674:	1f83d9ab 	.word	0x1f83d9ab
 8004678:	5be0cd19 	.word	0x5be0cd19

0800467c <CMOX_SHA256_VTABLE>:
 800467c:	08004571 0800459d 080045dd 080045fd     qE...E...E...E..
 800468c:	0800462d                                -F..

08004690 <cmox_sha256_compute>:
 8004690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004692:	b0a3      	sub	sp, #140	@ 0x8c
 8004694:	4604      	mov	r4, r0
 8004696:	480b      	ldr	r0, [pc, #44]	@ (80046c4 <cmox_sha256_compute+0x34>)
 8004698:	9002      	str	r0, [sp, #8]
 800469a:	460d      	mov	r5, r1
 800469c:	4616      	mov	r6, r2
 800469e:	461f      	mov	r7, r3
 80046a0:	4b09      	ldr	r3, [pc, #36]	@ (80046c8 <cmox_sha256_compute+0x38>)
 80046a2:	2208      	movs	r2, #8
 80046a4:	2140      	movs	r1, #64	@ 0x40
 80046a6:	a804      	add	r0, sp, #16
 80046a8:	f001 fa2a 	bl	8005b00 <cmox_md_construct>
 80046ac:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 80046ae:	9001      	str	r0, [sp, #4]
 80046b0:	9700      	str	r7, [sp, #0]
 80046b2:	4633      	mov	r3, r6
 80046b4:	462a      	mov	r2, r5
 80046b6:	4621      	mov	r1, r4
 80046b8:	a802      	add	r0, sp, #8
 80046ba:	f7fe f935 	bl	8002928 <cmox_hash_common_compute>
 80046be:	b023      	add	sp, #140	@ 0x8c
 80046c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046c2:	bf00      	nop
 80046c4:	0800467c 	.word	0x0800467c
 80046c8:	0800f500 	.word	0x0800f500

080046cc <cmox_sha256_transform>:
 80046cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d0:	b0c1      	sub	sp, #260	@ 0x104
 80046d2:	680b      	ldr	r3, [r1, #0]
 80046d4:	ba1b      	rev	r3, r3
 80046d6:	9301      	str	r3, [sp, #4]
 80046d8:	4602      	mov	r2, r0
 80046da:	684b      	ldr	r3, [r1, #4]
 80046dc:	a801      	add	r0, sp, #4
 80046de:	ba1b      	rev	r3, r3
 80046e0:	6043      	str	r3, [r0, #4]
 80046e2:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80046e6:	688b      	ldr	r3, [r1, #8]
 80046e8:	ba1b      	rev	r3, r3
 80046ea:	6083      	str	r3, [r0, #8]
 80046ec:	68cb      	ldr	r3, [r1, #12]
 80046ee:	ba1b      	rev	r3, r3
 80046f0:	60c3      	str	r3, [r0, #12]
 80046f2:	690b      	ldr	r3, [r1, #16]
 80046f4:	ba1b      	rev	r3, r3
 80046f6:	6103      	str	r3, [r0, #16]
 80046f8:	694b      	ldr	r3, [r1, #20]
 80046fa:	ba1b      	rev	r3, r3
 80046fc:	6143      	str	r3, [r0, #20]
 80046fe:	698b      	ldr	r3, [r1, #24]
 8004700:	ba1b      	rev	r3, r3
 8004702:	6183      	str	r3, [r0, #24]
 8004704:	69cb      	ldr	r3, [r1, #28]
 8004706:	ba1b      	rev	r3, r3
 8004708:	61c3      	str	r3, [r0, #28]
 800470a:	6a0b      	ldr	r3, [r1, #32]
 800470c:	ba1b      	rev	r3, r3
 800470e:	6203      	str	r3, [r0, #32]
 8004710:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8004712:	ba1b      	rev	r3, r3
 8004714:	6243      	str	r3, [r0, #36]	@ 0x24
 8004716:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8004718:	ba1b      	rev	r3, r3
 800471a:	6283      	str	r3, [r0, #40]	@ 0x28
 800471c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800471e:	ba1b      	rev	r3, r3
 8004720:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8004722:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8004724:	ba1b      	rev	r3, r3
 8004726:	6303      	str	r3, [r0, #48]	@ 0x30
 8004728:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800472a:	ba1b      	rev	r3, r3
 800472c:	6343      	str	r3, [r0, #52]	@ 0x34
 800472e:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8004730:	ba1b      	rev	r3, r3
 8004732:	6383      	str	r3, [r0, #56]	@ 0x38
 8004734:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8004736:	ba09      	rev	r1, r1
 8004738:	63c1      	str	r1, [r0, #60]	@ 0x3c
 800473a:	2018      	movs	r0, #24
 800473c:	f85c 4c08 	ldr.w	r4, [ip, #-8]
 8004740:	ea4f 41f4 	mov.w	r1, r4, ror #19
 8004744:	ea91 4374 	eors.w	r3, r1, r4, ror #17
 8004748:	f85c 1c3c 	ldr.w	r1, [ip, #-60]
 800474c:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
 8004750:	ea4f 47b1 	mov.w	r7, r1, ror #18
 8004754:	f85c 4c1c 	ldr.w	r4, [ip, #-28]
 8004758:	ea97 16f1 	eors.w	r6, r7, r1, ror #7
 800475c:	4423      	add	r3, r4
 800475e:	ea86 06d1 	eor.w	r6, r6, r1, lsr #3
 8004762:	18f3      	adds	r3, r6, r3
 8004764:	f85c 6c40 	ldr.w	r6, [ip, #-64]
 8004768:	18f3      	adds	r3, r6, r3
 800476a:	f8cc 3000 	str.w	r3, [ip]
 800476e:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 8004772:	ea4f 46f4 	mov.w	r6, r4, ror #19
 8004776:	ea96 4374 	eors.w	r3, r6, r4, ror #17
 800477a:	f85c 6c38 	ldr.w	r6, [ip, #-56]
 800477e:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
 8004782:	ea4f 4ab6 	mov.w	sl, r6, ror #18
 8004786:	f85c 4c18 	ldr.w	r4, [ip, #-24]
 800478a:	ea8a 17f6 	eor.w	r7, sl, r6, ror #7
 800478e:	4423      	add	r3, r4
 8004790:	ea87 07d6 	eor.w	r7, r7, r6, lsr #3
 8004794:	18fb      	adds	r3, r7, r3
 8004796:	18c9      	adds	r1, r1, r3
 8004798:	f8cc 1004 	str.w	r1, [ip, #4]
 800479c:	1e40      	subs	r0, r0, #1
 800479e:	f10c 0c08 	add.w	ip, ip, #8
 80047a2:	d1cb      	bne.n	800473c <cmox_sha256_transform+0x70>
 80047a4:	4610      	mov	r0, r2
 80047a6:	9200      	str	r2, [sp, #0]
 80047a8:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 80047aa:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80047ac:	f8d0 e060 	ldr.w	lr, [r0, #96]	@ 0x60
 80047b0:	f8d0 8070 	ldr.w	r8, [r0, #112]	@ 0x70
 80047b4:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80047b6:	6f44      	ldr	r4, [r0, #116]	@ 0x74
 80047b8:	f8d0 a068 	ldr.w	sl, [r0, #104]	@ 0x68
 80047bc:	6f85      	ldr	r5, [r0, #120]	@ 0x78
 80047be:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 80048b4 <cmox_sha256_transform+0x1e8>
 80047c2:	f10d 0c04 	add.w	ip, sp, #4
 80047c6:	2020      	movs	r0, #32
 80047c8:	ea4f 16b3 	mov.w	r6, r3, ror #6
 80047cc:	ea86 26f3 	eor.w	r6, r6, r3, ror #11
 80047d0:	ea86 6673 	eor.w	r6, r6, r3, ror #25
 80047d4:	1975      	adds	r5, r6, r5
 80047d6:	ea84 0608 	eor.w	r6, r4, r8
 80047da:	401e      	ands	r6, r3
 80047dc:	4066      	eors	r6, r4
 80047de:	1975      	adds	r5, r6, r5
 80047e0:	f859 6b04 	ldr.w	r6, [r9], #4
 80047e4:	f85c 7b04 	ldr.w	r7, [ip], #4
 80047e8:	1975      	adds	r5, r6, r5
 80047ea:	197e      	adds	r6, r7, r5
 80047ec:	ea4f 07b1 	mov.w	r7, r1, ror #2
 80047f0:	ea4e 0b01 	orr.w	fp, lr, r1
 80047f4:	ea87 3771 	eor.w	r7, r7, r1, ror #13
 80047f8:	ea0e 0501 	and.w	r5, lr, r1
 80047fc:	ea0b 0b02 	and.w	fp, fp, r2
 8004800:	ea87 57b1 	eor.w	r7, r7, r1, ror #22
 8004804:	ea4b 0505 	orr.w	r5, fp, r5
 8004808:	19ef      	adds	r7, r5, r7
 800480a:	4645      	mov	r5, r8
 800480c:	eb06 080a 	add.w	r8, r6, sl
 8004810:	4692      	mov	sl, r2
 8004812:	4672      	mov	r2, lr
 8004814:	eb07 0e06 	add.w	lr, r7, r6
 8004818:	ea4f 16b8 	mov.w	r6, r8, ror #6
 800481c:	ea86 26f8 	eor.w	r6, r6, r8, ror #11
 8004820:	ea86 6678 	eor.w	r6, r6, r8, ror #25
 8004824:	1934      	adds	r4, r6, r4
 8004826:	ea85 0603 	eor.w	r6, r5, r3
 800482a:	ea06 0608 	and.w	r6, r6, r8
 800482e:	406e      	eors	r6, r5
 8004830:	1934      	adds	r4, r6, r4
 8004832:	f859 6b04 	ldr.w	r6, [r9], #4
 8004836:	f85c 7b04 	ldr.w	r7, [ip], #4
 800483a:	1934      	adds	r4, r6, r4
 800483c:	193e      	adds	r6, r7, r4
 800483e:	ea4f 07be 	mov.w	r7, lr, ror #2
 8004842:	ea41 0b0e 	orr.w	fp, r1, lr
 8004846:	ea87 377e 	eor.w	r7, r7, lr, ror #13
 800484a:	ea01 040e 	and.w	r4, r1, lr
 800484e:	ea0b 0b02 	and.w	fp, fp, r2
 8004852:	ea87 57be 	eor.w	r7, r7, lr, ror #22
 8004856:	ea4b 0404 	orr.w	r4, fp, r4
 800485a:	19e7      	adds	r7, r4, r7
 800485c:	461c      	mov	r4, r3
 800485e:	eb06 030a 	add.w	r3, r6, sl
 8004862:	4692      	mov	sl, r2
 8004864:	460a      	mov	r2, r1
 8004866:	19b9      	adds	r1, r7, r6
 8004868:	1e40      	subs	r0, r0, #1
 800486a:	d1ad      	bne.n	80047c8 <cmox_sha256_transform+0xfc>
 800486c:	9800      	ldr	r0, [sp, #0]
 800486e:	6dc6      	ldr	r6, [r0, #92]	@ 0x5c
 8004870:	4431      	add	r1, r6
 8004872:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8004874:	9900      	ldr	r1, [sp, #0]
 8004876:	6e08      	ldr	r0, [r1, #96]	@ 0x60
 8004878:	4470      	add	r0, lr
 800487a:	6608      	str	r0, [r1, #96]	@ 0x60
 800487c:	9800      	ldr	r0, [sp, #0]
 800487e:	6e41      	ldr	r1, [r0, #100]	@ 0x64
 8004880:	1852      	adds	r2, r2, r1
 8004882:	6642      	str	r2, [r0, #100]	@ 0x64
 8004884:	9900      	ldr	r1, [sp, #0]
 8004886:	6e88      	ldr	r0, [r1, #104]	@ 0x68
 8004888:	4450      	add	r0, sl
 800488a:	6688      	str	r0, [r1, #104]	@ 0x68
 800488c:	9800      	ldr	r0, [sp, #0]
 800488e:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 8004890:	185b      	adds	r3, r3, r1
 8004892:	66c3      	str	r3, [r0, #108]	@ 0x6c
 8004894:	9900      	ldr	r1, [sp, #0]
 8004896:	6f08      	ldr	r0, [r1, #112]	@ 0x70
 8004898:	4440      	add	r0, r8
 800489a:	6708      	str	r0, [r1, #112]	@ 0x70
 800489c:	9800      	ldr	r0, [sp, #0]
 800489e:	6f41      	ldr	r1, [r0, #116]	@ 0x74
 80048a0:	1864      	adds	r4, r4, r1
 80048a2:	6744      	str	r4, [r0, #116]	@ 0x74
 80048a4:	9900      	ldr	r1, [sp, #0]
 80048a6:	6f88      	ldr	r0, [r1, #120]	@ 0x78
 80048a8:	182d      	adds	r5, r5, r0
 80048aa:	678d      	str	r5, [r1, #120]	@ 0x78
 80048ac:	b041      	add	sp, #260	@ 0x104
 80048ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048b2:	bf00      	nop
 80048b4:	0800f400 	.word	0x0800f400

080048b8 <firstloop_bb_cmp>:
 80048b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ba:	2401      	movs	r4, #1
 80048bc:	9400      	str	r4, [sp, #0]
 80048be:	2300      	movs	r3, #0
 80048c0:	2400      	movs	r4, #0
 80048c2:	e00d      	b.n	80048e0 <firstloop_bb_cmp+0x28>
 80048c4:	9d00      	ldr	r5, [sp, #0]
 80048c6:	5d06      	ldrb	r6, [r0, r4]
 80048c8:	5d0f      	ldrb	r7, [r1, r4]
 80048ca:	407e      	eors	r6, r7
 80048cc:	43f6      	mvns	r6, r6
 80048ce:	1c76      	adds	r6, r6, #1
 80048d0:	0ff6      	lsrs	r6, r6, #31
 80048d2:	f086 0601 	eor.w	r6, r6, #1
 80048d6:	4035      	ands	r5, r6
 80048d8:	9500      	str	r5, [sp, #0]
 80048da:	1c64      	adds	r4, r4, #1
 80048dc:	9d00      	ldr	r5, [sp, #0]
 80048de:	18eb      	adds	r3, r5, r3
 80048e0:	4294      	cmp	r4, r2
 80048e2:	d3ef      	bcc.n	80048c4 <firstloop_bb_cmp+0xc>
 80048e4:	4618      	mov	r0, r3
 80048e6:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080048e8 <secondloop_bb_cmp>:
 80048e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ea:	2300      	movs	r3, #0
 80048ec:	2401      	movs	r4, #1
 80048ee:	9400      	str	r4, [sp, #0]
 80048f0:	2a00      	cmp	r2, #0
 80048f2:	e011      	b.n	8004918 <secondloop_bb_cmp+0x30>
 80048f4:	9c00      	ldr	r4, [sp, #0]
 80048f6:	1885      	adds	r5, r0, r2
 80048f8:	188f      	adds	r7, r1, r2
 80048fa:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 80048fe:	f817 5c01 	ldrb.w	r5, [r7, #-1]
 8004902:	406e      	eors	r6, r5
 8004904:	43f6      	mvns	r6, r6
 8004906:	1c76      	adds	r6, r6, #1
 8004908:	0ff6      	lsrs	r6, r6, #31
 800490a:	f086 0601 	eor.w	r6, r6, #1
 800490e:	4034      	ands	r4, r6
 8004910:	9400      	str	r4, [sp, #0]
 8004912:	9c00      	ldr	r4, [sp, #0]
 8004914:	18e3      	adds	r3, r4, r3
 8004916:	1e52      	subs	r2, r2, #1
 8004918:	d1ec      	bne.n	80048f4 <secondloop_bb_cmp+0xc>
 800491a:	4618      	mov	r0, r3
 800491c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800491e <firstloop_bw_be_r_cmp>:
 800491e:	e92d 41f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, lr}
 8004922:	2401      	movs	r4, #1
 8004924:	9400      	str	r4, [sp, #0]
 8004926:	460b      	mov	r3, r1
 8004928:	0895      	lsrs	r5, r2, #2
 800492a:	2100      	movs	r1, #0
 800492c:	eba2 0585 	sub.w	r5, r2, r5, lsl #2
 8004930:	2400      	movs	r4, #0
 8004932:	1f1b      	subs	r3, r3, #4
 8004934:	e01c      	b.n	8004970 <firstloop_bw_be_r_cmp+0x52>
 8004936:	f102 0c03 	add.w	ip, r2, #3
 800493a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 800493e:	9e00      	ldr	r6, [sp, #0]
 8004940:	f853 e02c 	ldr.w	lr, [r3, ip, lsl #2]
 8004944:	5d07      	ldrb	r7, [r0, r4]
 8004946:	eba5 0804 	sub.w	r8, r5, r4
 800494a:	f1a8 0c01 	sub.w	ip, r8, #1
 800494e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8004952:	fa2e fe0c 	lsr.w	lr, lr, ip
 8004956:	ea8e 0707 	eor.w	r7, lr, r7
 800495a:	b2ff      	uxtb	r7, r7
 800495c:	43ff      	mvns	r7, r7
 800495e:	1c7f      	adds	r7, r7, #1
 8004960:	0fff      	lsrs	r7, r7, #31
 8004962:	f087 0701 	eor.w	r7, r7, #1
 8004966:	403e      	ands	r6, r7
 8004968:	9600      	str	r6, [sp, #0]
 800496a:	1c64      	adds	r4, r4, #1
 800496c:	9e00      	ldr	r6, [sp, #0]
 800496e:	1871      	adds	r1, r6, r1
 8004970:	42ac      	cmp	r4, r5
 8004972:	d3e0      	bcc.n	8004936 <firstloop_bw_be_r_cmp+0x18>
 8004974:	2500      	movs	r5, #0
 8004976:	0892      	lsrs	r2, r2, #2
 8004978:	e017      	b.n	80049aa <firstloop_bw_be_r_cmp+0x8c>
 800497a:	1906      	adds	r6, r0, r4
 800497c:	1b57      	subs	r7, r2, r5
 800497e:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
 8004982:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8004986:	ba36      	rev	r6, r6
 8004988:	407e      	eors	r6, r7
 800498a:	ea6f 0e06 	mvn.w	lr, r6
 800498e:	f10e 0e01 	add.w	lr, lr, #1
 8004992:	ea4e 0606 	orr.w	r6, lr, r6
 8004996:	9f00      	ldr	r7, [sp, #0]
 8004998:	0ff6      	lsrs	r6, r6, #31
 800499a:	f086 0601 	eor.w	r6, r6, #1
 800499e:	403e      	ands	r6, r7
 80049a0:	9600      	str	r6, [sp, #0]
 80049a2:	1c6d      	adds	r5, r5, #1
 80049a4:	9e00      	ldr	r6, [sp, #0]
 80049a6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80049aa:	4295      	cmp	r5, r2
 80049ac:	d3e5      	bcc.n	800497a <firstloop_bw_be_r_cmp+0x5c>
 80049ae:	4608      	mov	r0, r1
 80049b0:	e8bd 81f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, pc}

080049b4 <secondloop_bw_be_r_cmp>:
 80049b4:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
 80049b6:	2501      	movs	r5, #1
 80049b8:	0896      	lsrs	r6, r2, #2
 80049ba:	4603      	mov	r3, r0
 80049bc:	9500      	str	r5, [sp, #0]
 80049be:	eba2 0686 	sub.w	r6, r2, r6, lsl #2
 80049c2:	2400      	movs	r4, #0
 80049c4:	9601      	str	r6, [sp, #4]
 80049c6:	4610      	mov	r0, r2
 80049c8:	e015      	b.n	80049f6 <secondloop_bw_be_r_cmp+0x42>
 80049ca:	181d      	adds	r5, r3, r0
 80049cc:	1a16      	subs	r6, r2, r0
 80049ce:	f855 5c04 	ldr.w	r5, [r5, #-4]
 80049d2:	08b6      	lsrs	r6, r6, #2
 80049d4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80049d8:	9f00      	ldr	r7, [sp, #0]
 80049da:	ba2d      	rev	r5, r5
 80049dc:	4075      	eors	r5, r6
 80049de:	43ee      	mvns	r6, r5
 80049e0:	1c76      	adds	r6, r6, #1
 80049e2:	4335      	orrs	r5, r6
 80049e4:	0fed      	lsrs	r5, r5, #31
 80049e6:	f085 0501 	eor.w	r5, r5, #1
 80049ea:	403d      	ands	r5, r7
 80049ec:	9500      	str	r5, [sp, #0]
 80049ee:	1f00      	subs	r0, r0, #4
 80049f0:	9d00      	ldr	r5, [sp, #0]
 80049f2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 80049f6:	2803      	cmp	r0, #3
 80049f8:	d8e7      	bhi.n	80049ca <secondloop_bw_be_r_cmp+0x16>
 80049fa:	9801      	ldr	r0, [sp, #4]
 80049fc:	2800      	cmp	r0, #0
 80049fe:	e01c      	b.n	8004a3a <secondloop_bw_be_r_cmp+0x86>
 8004a00:	9d01      	ldr	r5, [sp, #4]
 8004a02:	9e00      	ldr	r6, [sp, #0]
 8004a04:	181f      	adds	r7, r3, r0
 8004a06:	1a2d      	subs	r5, r5, r0
 8004a08:	f817 cc01 	ldrb.w	ip, [r7, #-1]
 8004a0c:	1cd7      	adds	r7, r2, #3
 8004a0e:	ea4f 0e97 	mov.w	lr, r7, lsr #2
 8004a12:	eb01 078e 	add.w	r7, r1, lr, lsl #2
 8004a16:	00ed      	lsls	r5, r5, #3
 8004a18:	f857 7c04 	ldr.w	r7, [r7, #-4]
 8004a1c:	fa27 f505 	lsr.w	r5, r7, r5
 8004a20:	ea85 050c 	eor.w	r5, r5, ip
 8004a24:	b2ed      	uxtb	r5, r5
 8004a26:	43ed      	mvns	r5, r5
 8004a28:	1c6d      	adds	r5, r5, #1
 8004a2a:	0fed      	lsrs	r5, r5, #31
 8004a2c:	f085 0501 	eor.w	r5, r5, #1
 8004a30:	402e      	ands	r6, r5
 8004a32:	9600      	str	r6, [sp, #0]
 8004a34:	9d00      	ldr	r5, [sp, #0]
 8004a36:	192c      	adds	r4, r5, r4
 8004a38:	1e40      	subs	r0, r0, #1
 8004a3a:	d1e1      	bne.n	8004a00 <secondloop_bw_be_r_cmp+0x4c>
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}

08004a40 <bufType_bb>:
 8004a40:	48b9 0800 48e9 0800 0001 0000               .H...H......

08004a4c <cmox_utils_robustCmp>:
 8004a4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a50:	461d      	mov	r5, r3
 8004a52:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8004a56:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8004a58:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8004a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	460e      	mov	r6, r1
 8004a62:	4692      	mov	sl, r2
 8004a64:	f8d9 b000 	ldr.w	fp, [r9]
 8004a68:	4680      	mov	r8, r0
 8004a6a:	4632      	mov	r2, r6
 8004a6c:	4651      	mov	r1, sl
 8004a6e:	47d8      	blx	fp
 8004a70:	4683      	mov	fp, r0
 8004a72:	b364      	cbz	r4, 8004ace <cmox_utils_robustCmp+0x82>
 8004a74:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004a78:	4632      	mov	r2, r6
 8004a7a:	4651      	mov	r1, sl
 8004a7c:	4640      	mov	r0, r8
 8004a7e:	4798      	blx	r3
 8004a80:	ea6f 020b 	mvn.w	r2, fp
 8004a84:	1c52      	adds	r2, r2, #1
 8004a86:	ea42 020b 	orr.w	r2, r2, fp
 8004a8a:	9900      	ldr	r1, [sp, #0]
 8004a8c:	ea6f 73d2 	mvn.w	r3, r2, lsr #31
 8004a90:	1c5b      	adds	r3, r3, #1
 8004a92:	4019      	ands	r1, r3
 8004a94:	43c2      	mvns	r2, r0
 8004a96:	9100      	str	r1, [sp, #0]
 8004a98:	1c52      	adds	r2, r2, #1
 8004a9a:	4302      	orrs	r2, r0
 8004a9c:	9900      	ldr	r1, [sp, #0]
 8004a9e:	ea6f 73d2 	mvn.w	r3, r2, lsr #31
 8004aa2:	1c5b      	adds	r3, r3, #1
 8004aa4:	4019      	ands	r1, r3
 8004aa6:	9100      	str	r1, [sp, #0]
 8004aa8:	f086 3155 	eor.w	r1, r6, #1431655765	@ 0x55555555
 8004aac:	4048      	eors	r0, r1
 8004aae:	ea87 0100 	eor.w	r1, r7, r0
 8004ab2:	f081 3155 	eor.w	r1, r1, #1431655765	@ 0x55555555
 8004ab6:	6021      	str	r1, [r4, #0]
 8004ab8:	f080 3155 	eor.w	r1, r0, #1431655765	@ 0x55555555
 8004abc:	43c9      	mvns	r1, r1
 8004abe:	1c49      	adds	r1, r1, #1
 8004ac0:	4308      	orrs	r0, r1
 8004ac2:	9a00      	ldr	r2, [sp, #0]
 8004ac4:	ea6f 70d0 	mvn.w	r0, r0, lsr #31
 8004ac8:	1c40      	adds	r0, r0, #1
 8004aca:	4382      	bics	r2, r0
 8004acc:	9200      	str	r2, [sp, #0]
 8004ace:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8004ad2:	2801      	cmp	r0, #1
 8004ad4:	d109      	bne.n	8004aea <cmox_utils_robustCmp+0x9e>
 8004ad6:	4075      	eors	r5, r6
 8004ad8:	43e9      	mvns	r1, r5
 8004ada:	1c49      	adds	r1, r1, #1
 8004adc:	430d      	orrs	r5, r1
 8004ade:	9800      	ldr	r0, [sp, #0]
 8004ae0:	ea6f 72d5 	mvn.w	r2, r5, lsr #31
 8004ae4:	1c52      	adds	r2, r2, #1
 8004ae6:	4390      	bics	r0, r2
 8004ae8:	e00a      	b.n	8004b00 <cmox_utils_robustCmp+0xb4>
 8004aea:	1cf1      	adds	r1, r6, #3
 8004aec:	ea85 0291 	eor.w	r2, r5, r1, lsr #2
 8004af0:	43d2      	mvns	r2, r2
 8004af2:	1c52      	adds	r2, r2, #1
 8004af4:	4315      	orrs	r5, r2
 8004af6:	9800      	ldr	r0, [sp, #0]
 8004af8:	ea6f 73d5 	mvn.w	r3, r5, lsr #31
 8004afc:	1c5b      	adds	r3, r3, #1
 8004afe:	4398      	bics	r0, r3
 8004b00:	f086 36aa 	eor.w	r6, r6, #2863311530	@ 0xaaaaaaaa
 8004b04:	9000      	str	r0, [sp, #0]
 8004b06:	ea86 060b 	eor.w	r6, r6, fp
 8004b0a:	f086 33aa 	eor.w	r3, r6, #2863311530	@ 0xaaaaaaaa
 8004b0e:	43f2      	mvns	r2, r6
 8004b10:	43db      	mvns	r3, r3
 8004b12:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004b14:	f3c2 72c0 	ubfx	r2, r2, #31, #1
 8004b18:	1c5b      	adds	r3, r3, #1
 8004b1a:	ea42 72d3 	orr.w	r2, r2, r3, lsr #31
 8004b1e:	9900      	ldr	r1, [sp, #0]
 8004b20:	43d2      	mvns	r2, r2
 8004b22:	1c52      	adds	r2, r2, #1
 8004b24:	4391      	bics	r1, r2
 8004b26:	9100      	str	r1, [sp, #0]
 8004b28:	4077      	eors	r7, r6
 8004b2a:	9900      	ldr	r1, [sp, #0]
 8004b2c:	4388      	bics	r0, r1
 8004b2e:	9900      	ldr	r1, [sp, #0]
 8004b30:	f087 37aa 	eor.w	r7, r7, #2863311530	@ 0xaaaaaaaa
 8004b34:	400f      	ands	r7, r1
 8004b36:	4338      	orrs	r0, r7
 8004b38:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004b3c <cmox_bn_alloc>:
 8004b3c:	b538      	push	{r3, r4, r5, lr}
 8004b3e:	4615      	mov	r5, r2
 8004b40:	00aa      	lsls	r2, r5, #2
 8004b42:	460c      	mov	r4, r1
 8004b44:	1d12      	adds	r2, r2, #4
 8004b46:	f7fe fa9a 	bl	800307e <cmox_membuf_alloc>
 8004b4a:	b908      	cbnz	r0, 8004b50 <cmox_bn_alloc+0x14>
 8004b4c:	6821      	ldr	r1, [r4, #0]
 8004b4e:	600d      	str	r5, [r1, #0]
 8004b50:	bd32      	pop	{r1, r4, r5, pc}

08004b52 <cmox_bn_free>:
 8004b52:	b510      	push	{r4, lr}
 8004b54:	460c      	mov	r4, r1
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	0092      	lsls	r2, r2, #2
 8004b5c:	1d12      	adds	r2, r2, #4
 8004b5e:	f7fe faad 	bl	80030bc <cmox_membuf_free>
 8004b62:	2300      	movs	r3, #0
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	bd10      	pop	{r4, pc}

08004b68 <cmox_bn_import>:
 8004b68:	b570      	push	{r4, r5, r6, lr}
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	bf18      	it	ne
 8004b72:	2900      	cmpne	r1, #0
 8004b74:	d000      	beq.n	8004b78 <cmox_bn_import+0x10>
 8004b76:	b90a      	cbnz	r2, 8004b7c <cmox_bn_import+0x14>
 8004b78:	2001      	movs	r0, #1
 8004b7a:	bd70      	pop	{r4, r5, r6, pc}
 8004b7c:	681c      	ldr	r4, [r3, #0]
 8004b7e:	42a2      	cmp	r2, r4
 8004b80:	bf28      	it	cs
 8004b82:	4622      	movcs	r2, r4
 8004b84:	2401      	movs	r4, #1
 8004b86:	e006      	b.n	8004b96 <cmox_bn_import+0x2e>
 8004b88:	eb01 0584 	add.w	r5, r1, r4, lsl #2
 8004b8c:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8004b90:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8004b94:	1c64      	adds	r4, r4, #1
 8004b96:	42a2      	cmp	r2, r4
 8004b98:	d2f6      	bcs.n	8004b88 <cmox_bn_import+0x20>
 8004b9a:	6819      	ldr	r1, [r3, #0]
 8004b9c:	42a1      	cmp	r1, r4
 8004b9e:	bf24      	itt	cs
 8004ba0:	f843 0024 	strcs.w	r0, [r3, r4, lsl #2]
 8004ba4:	1c64      	addcs	r4, r4, #1
 8004ba6:	d2f8      	bcs.n	8004b9a <cmox_bn_import+0x32>
 8004ba8:	bd70      	pop	{r4, r5, r6, pc}

08004baa <cmox_bn_init>:
 8004baa:	4602      	mov	r2, r0
 8004bac:	2000      	movs	r0, #0
 8004bae:	b90a      	cbnz	r2, 8004bb4 <cmox_bn_init+0xa>
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	4770      	bx	lr
 8004bb4:	6051      	str	r1, [r2, #4]
 8004bb6:	2102      	movs	r1, #2
 8004bb8:	e002      	b.n	8004bc0 <cmox_bn_init+0x16>
 8004bba:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
 8004bbe:	1c49      	adds	r1, r1, #1
 8004bc0:	6813      	ldr	r3, [r2, #0]
 8004bc2:	428b      	cmp	r3, r1
 8004bc4:	d2f9      	bcs.n	8004bba <cmox_bn_init+0x10>
 8004bc6:	4770      	bx	lr

08004bc8 <cmox_bn_cCopy>:
 8004bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bcc:	4616      	mov	r6, r2
 8004bce:	4607      	mov	r7, r0
 8004bd0:	4688      	mov	r8, r1
 8004bd2:	6830      	ldr	r0, [r6, #0]
 8004bd4:	f8d8 4000 	ldr.w	r4, [r8]
 8004bd8:	2500      	movs	r5, #0
 8004bda:	1c40      	adds	r0, r0, #1
 8004bdc:	427a      	negs	r2, r7
 8004bde:	e004      	b.n	8004bea <cmox_bn_cCopy+0x22>
 8004be0:	f858 1020 	ldr.w	r1, [r8, r0, lsl #2]
 8004be4:	4011      	ands	r1, r2
 8004be6:	430d      	orrs	r5, r1
 8004be8:	1c40      	adds	r0, r0, #1
 8004bea:	4284      	cmp	r4, r0
 8004bec:	d2f8      	bcs.n	8004be0 <cmox_bn_cCopy+0x18>
 8004bee:	6830      	ldr	r0, [r6, #0]
 8004bf0:	42a0      	cmp	r0, r4
 8004bf2:	bf38      	it	cc
 8004bf4:	4604      	movcc	r4, r0
 8004bf6:	ea5f 0904 	movs.w	r9, r4
 8004bfa:	e00a      	b.n	8004c12 <cmox_bn_cCopy+0x4a>
 8004bfc:	f856 2029 	ldr.w	r2, [r6, r9, lsl #2]
 8004c00:	f858 1029 	ldr.w	r1, [r8, r9, lsl #2]
 8004c04:	4638      	mov	r0, r7
 8004c06:	f7fe f9fc 	bl	8003002 <cmox_mathUtils_mux>
 8004c0a:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
 8004c0e:	f1b9 0901 	subs.w	r9, r9, #1
 8004c12:	d1f3      	bne.n	8004bfc <cmox_bn_cCopy+0x34>
 8004c14:	1c64      	adds	r4, r4, #1
 8004c16:	1e79      	subs	r1, r7, #1
 8004c18:	e005      	b.n	8004c26 <cmox_bn_cCopy+0x5e>
 8004c1a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004c1e:	4008      	ands	r0, r1
 8004c20:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 8004c24:	1c64      	adds	r4, r4, #1
 8004c26:	6830      	ldr	r0, [r6, #0]
 8004c28:	42a0      	cmp	r0, r4
 8004c2a:	d2f6      	bcs.n	8004c1a <cmox_bn_cCopy+0x52>
 8004c2c:	2d00      	cmp	r5, #0
 8004c2e:	bf14      	ite	ne
 8004c30:	2003      	movne	r0, #3
 8004c32:	2000      	moveq	r0, #0
 8004c34:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08004c38 <cmox_bn_cSwap>:
 8004c38:	b570      	push	{r4, r5, r6, lr}
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	4264      	negs	r4, r4
 8004c3e:	2000      	movs	r0, #0
 8004c40:	2900      	cmp	r1, #0
 8004c42:	bf18      	it	ne
 8004c44:	2a00      	cmpne	r2, #0
 8004c46:	d101      	bne.n	8004c4c <cmox_bn_cSwap+0x14>
 8004c48:	2001      	movs	r0, #1
 8004c4a:	bd70      	pop	{r4, r5, r6, pc}
 8004c4c:	680b      	ldr	r3, [r1, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	e00e      	b.n	8004c70 <cmox_bn_cSwap+0x38>
 8004c52:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8004c56:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8004c5a:	406e      	eors	r6, r5
 8004c5c:	4026      	ands	r6, r4
 8004c5e:	4075      	eors	r5, r6
 8004c60:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 8004c64:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8004c68:	406e      	eors	r6, r5
 8004c6a:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
 8004c6e:	1e5b      	subs	r3, r3, #1
 8004c70:	d1ef      	bne.n	8004c52 <cmox_bn_cSwap+0x1a>
 8004c72:	bd70      	pop	{r4, r5, r6, pc}

08004c74 <cmox_bn_mux>:
 8004c74:	4240      	negs	r0, r0
 8004c76:	4051      	eors	r1, r2
 8004c78:	4008      	ands	r0, r1
 8004c7a:	4050      	eors	r0, r2
 8004c7c:	4770      	bx	lr

08004c7e <cmox_bn_cmp>:
 8004c7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c82:	4684      	mov	ip, r0
 8004c84:	468e      	mov	lr, r1
 8004c86:	f8dc 1000 	ldr.w	r1, [ip]
 8004c8a:	f8de 5000 	ldr.w	r5, [lr]
 8004c8e:	2601      	movs	r6, #1
 8004c90:	2700      	movs	r7, #0
 8004c92:	42a9      	cmp	r1, r5
 8004c94:	46ba      	mov	sl, r7
 8004c96:	d30f      	bcc.n	8004cb8 <cmox_bn_cmp+0x3a>
 8004c98:	4608      	mov	r0, r1
 8004c9a:	4664      	mov	r4, ip
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	4285      	cmp	r5, r0
 8004ca0:	d224      	bcs.n	8004cec <cmox_bn_cmp+0x6e>
 8004ca2:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	4252      	negs	r2, r2
 8004caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	431f      	orrs	r7, r3
 8004cb4:	1e40      	subs	r0, r0, #1
 8004cb6:	e7f2      	b.n	8004c9e <cmox_bn_cmp+0x20>
 8004cb8:	4628      	mov	r0, r5
 8004cba:	460d      	mov	r5, r1
 8004cbc:	4674      	mov	r4, lr
 8004cbe:	f04f 31ff 	mov.w	r1, #4294967295
 8004cc2:	e7ee      	b.n	8004ca2 <cmox_bn_cmp+0x24>
 8004cc4:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 8004cc8:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 8004ccc:	2500      	movs	r5, #0
 8004cce:	2300      	movs	r3, #0
 8004cd0:	ebb4 0802 	subs.w	r8, r4, r2
 8004cd4:	eb65 0903 	sbc.w	r9, r5, r3
 8004cd8:	4062      	eors	r2, r4
 8004cda:	1e52      	subs	r2, r2, #1
 8004cdc:	ea06 0509 	and.w	r5, r6, r9
 8004ce0:	f163 0300 	sbc.w	r3, r3, #0
 8004ce4:	ea45 0a0a 	orr.w	sl, r5, sl
 8004ce8:	401e      	ands	r6, r3
 8004cea:	1e40      	subs	r0, r0, #1
 8004cec:	2800      	cmp	r0, #0
 8004cee:	d1e9      	bne.n	8004cc4 <cmox_bn_cmp+0x46>
 8004cf0:	4638      	mov	r0, r7
 8004cf2:	eb06 024a 	add.w	r2, r6, sl, lsl #1
 8004cf6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cfa:	1e52      	subs	r2, r2, #1
 8004cfc:	f7fe b981 	b.w	8003002 <cmox_mathUtils_mux>

08004d00 <cmox_bn_cmpUint>:
 8004d00:	b510      	push	{r4, lr}
 8004d02:	460a      	mov	r2, r1
 8004d04:	6801      	ldr	r1, [r0, #0]
 8004d06:	2300      	movs	r3, #0
 8004d08:	e003      	b.n	8004d12 <cmox_bn_cmpUint+0x12>
 8004d0a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 8004d0e:	4323      	orrs	r3, r4
 8004d10:	1e49      	subs	r1, r1, #1
 8004d12:	2902      	cmp	r1, #2
 8004d14:	d2f9      	bcs.n	8004d0a <cmox_bn_cmpUint+0xa>
 8004d16:	6840      	ldr	r0, [r0, #4]
 8004d18:	4042      	eors	r2, r0
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	ea42 0003 	orr.w	r0, r2, r3
 8004d20:	f7fe f977 	bl	8003012 <cmox_mathUtils_neq>
 8004d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d28:	f7fe b970 	b.w	800300c <cmox_mathUtils_not>

08004d2c <cmox_bn_countBits>:
 8004d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2e:	4605      	mov	r5, r0
 8004d30:	2200      	movs	r2, #0
 8004d32:	682e      	ldr	r6, [r5, #0]
 8004d34:	0034      	movs	r4, r6
 8004d36:	e00b      	b.n	8004d50 <cmox_bn_countBits+0x24>
 8004d38:	4257      	negs	r7, r2
 8004d3a:	4317      	orrs	r7, r2
 8004d3c:	43ff      	mvns	r7, r7
 8004d3e:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
 8004d42:	0ff8      	lsrs	r0, r7, #31
 8004d44:	f7fe f95d 	bl	8003002 <cmox_mathUtils_mux>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	eba6 76d7 	sub.w	r6, r6, r7, lsr #31
 8004d4e:	1e64      	subs	r4, r4, #1
 8004d50:	d1f2      	bne.n	8004d38 <cmox_bn_countBits+0xc>
 8004d52:	4610      	mov	r0, r2
 8004d54:	f7fe f969 	bl	800302a <cmox_mathUtils_bitLength>
 8004d58:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8004d5c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004d5e <cmox_bn_getBits>:
 8004d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d60:	4606      	mov	r6, r0
 8004d62:	460c      	mov	r4, r1
 8004d64:	0957      	lsrs	r7, r2, #5
 8004d66:	6830      	ldr	r0, [r6, #0]
 8004d68:	f002 051f 	and.w	r5, r2, #31
 8004d6c:	1c79      	adds	r1, r7, #1
 8004d6e:	f7fe f955 	bl	800301c <cmox_mathUtils_gt>
 8004d72:	1cbb      	adds	r3, r7, #2
 8004d74:	4241      	negs	r1, r0
 8004d76:	400b      	ands	r3, r1
 8004d78:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f7fe f940 	bl	8003002 <cmox_mathUtils_mux>
 8004d82:	eb06 0187 	add.w	r1, r6, r7, lsl #2
 8004d86:	f004 041f 	and.w	r4, r4, #31
 8004d8a:	684a      	ldr	r2, [r1, #4]
 8004d8c:	40ea      	lsrs	r2, r5
 8004d8e:	f1c5 0520 	rsb	r5, r5, #32
 8004d92:	fa00 f505 	lsl.w	r5, r0, r5
 8004d96:	2001      	movs	r0, #1
 8004d98:	fa00 f404 	lsl.w	r4, r0, r4
 8004d9c:	4315      	orrs	r5, r2
 8004d9e:	1e64      	subs	r4, r4, #1
 8004da0:	ea04 0005 	and.w	r0, r4, r5
 8004da4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004da6 <cmox_bn_setBits>:
 8004da6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004daa:	4680      	mov	r8, r0
 8004dac:	2001      	movs	r0, #1
 8004dae:	f001 061f 	and.w	r6, r1, #31
 8004db2:	fa00 f606 	lsl.w	r6, r0, r6
 8004db6:	0955      	lsrs	r5, r2, #5
 8004db8:	1e76      	subs	r6, r6, #1
 8004dba:	1c6d      	adds	r5, r5, #1
 8004dbc:	f8d8 0000 	ldr.w	r0, [r8]
 8004dc0:	ea06 0903 	and.w	r9, r6, r3
 8004dc4:	f002 0a1f 	and.w	sl, r2, #31
 8004dc8:	f001 071f 	and.w	r7, r1, #31
 8004dcc:	4629      	mov	r1, r5
 8004dce:	f7fe f925 	bl	800301c <cmox_mathUtils_gt>
 8004dd2:	4457      	add	r7, sl
 8004dd4:	3f20      	subs	r7, #32
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	43f8      	mvns	r0, r7
 8004dda:	f858 1025 	ldr.w	r1, [r8, r5, lsl #2]
 8004dde:	f3c0 70c0 	ubfx	r0, r0, #31, #1
 8004de2:	fa06 f60a 	lsl.w	r6, r6, sl
 8004de6:	4004      	ands	r4, r0
 8004de8:	ea21 0606 	bic.w	r6, r1, r6
 8004dec:	4278      	negs	r0, r7
 8004dee:	f848 6025 	str.w	r6, [r8, r5, lsl #2]
 8004df2:	ea04 74d0 	and.w	r4, r4, r0, lsr #31
 8004df6:	fa09 f00a 	lsl.w	r0, r9, sl
 8004dfa:	4306      	orrs	r6, r0
 8004dfc:	f848 6025 	str.w	r6, [r8, r5, lsl #2]
 8004e00:	f04f 32ff 	mov.w	r2, #4294967295
 8004e04:	fa02 f107 	lsl.w	r1, r2, r7
 8004e08:	4620      	mov	r0, r4
 8004e0a:	f7fe f8fa 	bl	8003002 <cmox_mathUtils_mux>
 8004e0e:	1c6d      	adds	r5, r5, #1
 8004e10:	4261      	negs	r1, r4
 8004e12:	400d      	ands	r5, r1
 8004e14:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 8004e18:	4010      	ands	r0, r2
 8004e1a:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 8004e1e:	f1ca 0a20 	rsb	sl, sl, #32
 8004e22:	2200      	movs	r2, #0
 8004e24:	fa29 f10a 	lsr.w	r1, r9, sl
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f7fe f8ea 	bl	8003002 <cmox_mathUtils_mux>
 8004e2e:	f858 1025 	ldr.w	r1, [r8, r5, lsl #2]
 8004e32:	4308      	orrs	r0, r1
 8004e34:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 8004e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004e3c <cmox_bn_fromU8BE>:
 8004e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3e:	b10a      	cbz	r2, 8004e44 <cmox_bn_fromU8BE+0x8>
 8004e40:	b910      	cbnz	r0, 8004e48 <cmox_bn_fromU8BE+0xc>
 8004e42:	b109      	cbz	r1, 8004e48 <cmox_bn_fromU8BE+0xc>
 8004e44:	2001      	movs	r0, #1
 8004e46:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004e48:	6813      	ldr	r3, [r2, #0]
 8004e4a:	1ccc      	adds	r4, r1, #3
 8004e4c:	ebb3 0f94 	cmp.w	r3, r4, lsr #2
 8004e50:	d201      	bcs.n	8004e56 <cmox_bn_fromU8BE+0x1a>
 8004e52:	2003      	movs	r0, #3
 8004e54:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004e56:	b379      	cbz	r1, 8004eb8 <cmox_bn_fromU8BE+0x7c>
 8004e58:	088b      	lsrs	r3, r1, #2
 8004e5a:	1c5b      	adds	r3, r3, #1
 8004e5c:	2401      	movs	r4, #1
 8004e5e:	e00f      	b.n	8004e80 <cmox_bn_fromU8BE+0x44>
 8004e60:	eba1 0584 	sub.w	r5, r1, r4, lsl #2
 8004e64:	4405      	add	r5, r0
 8004e66:	786f      	ldrb	r7, [r5, #1]
 8004e68:	782e      	ldrb	r6, [r5, #0]
 8004e6a:	043f      	lsls	r7, r7, #16
 8004e6c:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
 8004e70:	78ae      	ldrb	r6, [r5, #2]
 8004e72:	78ed      	ldrb	r5, [r5, #3]
 8004e74:	ea47 2706 	orr.w	r7, r7, r6, lsl #8
 8004e78:	432f      	orrs	r7, r5
 8004e7a:	f842 7024 	str.w	r7, [r2, r4, lsl #2]
 8004e7e:	1c64      	adds	r4, r4, #1
 8004e80:	429c      	cmp	r4, r3
 8004e82:	d3ed      	bcc.n	8004e60 <cmox_bn_fromU8BE+0x24>
 8004e84:	6815      	ldr	r5, [r2, #0]
 8004e86:	42a5      	cmp	r5, r4
 8004e88:	bf22      	ittt	cs
 8004e8a:	2600      	movcs	r6, #0
 8004e8c:	f842 6024 	strcs.w	r6, [r2, r4, lsl #2]
 8004e90:	1c64      	addcs	r4, r4, #1
 8004e92:	d2f7      	bcs.n	8004e84 <cmox_bn_fromU8BE+0x48>
 8004e94:	f011 0103 	ands.w	r1, r1, #3
 8004e98:	d011      	beq.n	8004ebe <cmox_bn_fromU8BE+0x82>
 8004e9a:	7804      	ldrb	r4, [r0, #0]
 8004e9c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8004ea0:	2401      	movs	r4, #1
 8004ea2:	428c      	cmp	r4, r1
 8004ea4:	d20b      	bcs.n	8004ebe <cmox_bn_fromU8BE+0x82>
 8004ea6:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8004eaa:	5d06      	ldrb	r6, [r0, r4]
 8004eac:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
 8004eb0:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
 8004eb4:	1c64      	adds	r4, r4, #1
 8004eb6:	e7f4      	b.n	8004ea2 <cmox_bn_fromU8BE+0x66>
 8004eb8:	4610      	mov	r0, r2
 8004eba:	f7ff fe76 	bl	8004baa <cmox_bn_init>
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004ec2 <cmox_bn_toU8BE>:
 8004ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec6:	4605      	mov	r5, r0
 8004ec8:	4617      	mov	r7, r2
 8004eca:	6828      	ldr	r0, [r5, #0]
 8004ecc:	0080      	lsls	r0, r0, #2
 8004ece:	463c      	mov	r4, r7
 8004ed0:	1a3e      	subs	r6, r7, r0
 8004ed2:	42a0      	cmp	r0, r4
 8004ed4:	4688      	mov	r8, r1
 8004ed6:	d206      	bcs.n	8004ee6 <cmox_bn_toU8BE+0x24>
 8004ed8:	4631      	mov	r1, r6
 8004eda:	4640      	mov	r0, r8
 8004edc:	1e64      	subs	r4, r4, #1
 8004ede:	f006 fa3e 	bl	800b35e <__aeabi_memclr>
 8004ee2:	1ba4      	subs	r4, r4, r6
 8004ee4:	1c64      	adds	r4, r4, #1
 8004ee6:	f014 0003 	ands.w	r0, r4, #3
 8004eea:	d021      	beq.n	8004f30 <cmox_bn_toU8BE+0x6e>
 8004eec:	08a1      	lsrs	r1, r4, #2
 8004eee:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8004ef2:	6851      	ldr	r1, [r2, #4]
 8004ef4:	1e42      	subs	r2, r0, #1
 8004ef6:	00d2      	lsls	r2, r2, #3
 8004ef8:	fa21 f302 	lsr.w	r3, r1, r2
 8004efc:	1b3a      	subs	r2, r7, r4
 8004efe:	1e64      	subs	r4, r4, #1
 8004f00:	f808 3002 	strb.w	r3, [r8, r2]
 8004f04:	1e40      	subs	r0, r0, #1
 8004f06:	d1f5      	bne.n	8004ef4 <cmox_bn_toU8BE+0x32>
 8004f08:	e012      	b.n	8004f30 <cmox_bn_toU8BE+0x6e>
 8004f0a:	08a1      	lsrs	r1, r4, #2
 8004f0c:	1b38      	subs	r0, r7, r4
 8004f0e:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 8004f12:	4440      	add	r0, r8
 8004f14:	0e12      	lsrs	r2, r2, #24
 8004f16:	7002      	strb	r2, [r0, #0]
 8004f18:	1f24      	subs	r4, r4, #4
 8004f1a:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
 8004f1e:	0c1b      	lsrs	r3, r3, #16
 8004f20:	7043      	strb	r3, [r0, #1]
 8004f22:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 8004f26:	0a12      	lsrs	r2, r2, #8
 8004f28:	7082      	strb	r2, [r0, #2]
 8004f2a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8004f2e:	70c1      	strb	r1, [r0, #3]
 8004f30:	2c00      	cmp	r4, #0
 8004f32:	d1ea      	bne.n	8004f0a <cmox_bn_toU8BE+0x48>
 8004f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004f38 <cmox_bn_fromU8LE>:
 8004f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	b10a      	cbz	r2, 8004f42 <cmox_bn_fromU8LE+0xa>
 8004f3e:	b910      	cbnz	r0, 8004f46 <cmox_bn_fromU8LE+0xe>
 8004f40:	b109      	cbz	r1, 8004f46 <cmox_bn_fromU8LE+0xe>
 8004f42:	2001      	movs	r0, #1
 8004f44:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004f46:	6814      	ldr	r4, [r2, #0]
 8004f48:	1ccd      	adds	r5, r1, #3
 8004f4a:	ebb4 0f95 	cmp.w	r4, r5, lsr #2
 8004f4e:	d201      	bcs.n	8004f54 <cmox_bn_fromU8LE+0x1c>
 8004f50:	2003      	movs	r0, #3
 8004f52:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004f54:	b3b9      	cbz	r1, 8004fc6 <cmox_bn_fromU8LE+0x8e>
 8004f56:	2400      	movs	r4, #0
 8004f58:	e010      	b.n	8004f7c <cmox_bn_fromU8LE+0x44>
 8004f5a:	1906      	adds	r6, r0, r4
 8004f5c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8004f60:	f896 c002 	ldrb.w	ip, [r6, #2]
 8004f64:	78f7      	ldrb	r7, [r6, #3]
 8004f66:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8004f6a:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
 8004f6e:	7877      	ldrb	r7, [r6, #1]
 8004f70:	7836      	ldrb	r6, [r6, #0]
 8004f72:	ea4c 2707 	orr.w	r7, ip, r7, lsl #8
 8004f76:	433e      	orrs	r6, r7
 8004f78:	606e      	str	r6, [r5, #4]
 8004f7a:	1d24      	adds	r4, r4, #4
 8004f7c:	08a5      	lsrs	r5, r4, #2
 8004f7e:	1ece      	subs	r6, r1, #3
 8004f80:	42b4      	cmp	r4, r6
 8004f82:	d3ea      	bcc.n	8004f5a <cmox_bn_fromU8LE+0x22>
 8004f84:	f011 0f03 	tst.w	r1, #3
 8004f88:	d011      	beq.n	8004fae <cmox_bn_fromU8LE+0x76>
 8004f8a:	1c6d      	adds	r5, r5, #1
 8004f8c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8004f90:	e00b      	b.n	8004faa <cmox_bn_fromU8LE+0x72>
 8004f92:	5d07      	ldrb	r7, [r0, r4]
 8004f94:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 8004f98:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8004f9c:	fa07 f70c 	lsl.w	r7, r7, ip
 8004fa0:	433e      	orrs	r6, r7
 8004fa2:	f842 6025 	str.w	r6, [r2, r5, lsl #2]
 8004fa6:	1c5b      	adds	r3, r3, #1
 8004fa8:	1c64      	adds	r4, r4, #1
 8004faa:	428c      	cmp	r4, r1
 8004fac:	d3f1      	bcc.n	8004f92 <cmox_bn_fromU8LE+0x5a>
 8004fae:	1ce4      	adds	r4, r4, #3
 8004fb0:	08a4      	lsrs	r4, r4, #2
 8004fb2:	1c64      	adds	r4, r4, #1
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	6810      	ldr	r0, [r2, #0]
 8004fb8:	42a0      	cmp	r0, r4
 8004fba:	bf24      	itt	cs
 8004fbc:	f842 1024 	strcs.w	r1, [r2, r4, lsl #2]
 8004fc0:	1c64      	addcs	r4, r4, #1
 8004fc2:	d2f8      	bcs.n	8004fb6 <cmox_bn_fromU8LE+0x7e>
 8004fc4:	e002      	b.n	8004fcc <cmox_bn_fromU8LE+0x94>
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	f7ff fdef 	bl	8004baa <cmox_bn_init>
 8004fcc:	2000      	movs	r0, #0
 8004fce:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004fd0 <cmox_bn_toU8LE>:
 8004fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	1e4c      	subs	r4, r1, #1
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	0080      	lsls	r0, r0, #2
 8004fda:	2500      	movs	r5, #0
 8004fdc:	e001      	b.n	8004fe2 <cmox_bn_toU8LE+0x12>
 8004fde:	54a5      	strb	r5, [r4, r2]
 8004fe0:	1e52      	subs	r2, r2, #1
 8004fe2:	4290      	cmp	r0, r2
 8004fe4:	d3fb      	bcc.n	8004fde <cmox_bn_toU8LE+0xe>
 8004fe6:	f012 0003 	ands.w	r0, r2, #3
 8004fea:	d01f      	beq.n	800502c <cmox_bn_toU8LE+0x5c>
 8004fec:	0895      	lsrs	r5, r2, #2
 8004fee:	eb03 0685 	add.w	r6, r3, r5, lsl #2
 8004ff2:	6875      	ldr	r5, [r6, #4]
 8004ff4:	1e46      	subs	r6, r0, #1
 8004ff6:	00f6      	lsls	r6, r6, #3
 8004ff8:	fa25 f706 	lsr.w	r7, r5, r6
 8004ffc:	54a7      	strb	r7, [r4, r2]
 8004ffe:	1e52      	subs	r2, r2, #1
 8005000:	1e40      	subs	r0, r0, #1
 8005002:	d1f7      	bne.n	8004ff4 <cmox_bn_toU8LE+0x24>
 8005004:	e012      	b.n	800502c <cmox_bn_toU8LE+0x5c>
 8005006:	0894      	lsrs	r4, r2, #2
 8005008:	1888      	adds	r0, r1, r2
 800500a:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 800500e:	1f00      	subs	r0, r0, #4
 8005010:	0e2d      	lsrs	r5, r5, #24
 8005012:	70c5      	strb	r5, [r0, #3]
 8005014:	1f12      	subs	r2, r2, #4
 8005016:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 800501a:	0c2d      	lsrs	r5, r5, #16
 800501c:	7085      	strb	r5, [r0, #2]
 800501e:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8005022:	0a2d      	lsrs	r5, r5, #8
 8005024:	7045      	strb	r5, [r0, #1]
 8005026:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800502a:	7004      	strb	r4, [r0, #0]
 800502c:	2a00      	cmp	r2, #0
 800502e:	d1ea      	bne.n	8005006 <cmox_bn_toU8LE+0x36>
 8005030:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005032 <cmox_asm_montymul_fast256>:
 8005032:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005036:	e891 5fc0 	ldmia.w	r1, {r6, r7, r8, r9, sl, fp, ip, lr}
 800503a:	e92d 5000 	stmdb	sp!, {ip, lr}
 800503e:	469c      	mov	ip, r3
 8005040:	f8dd e030 	ldr.w	lr, [sp, #48]	@ 0x30
 8005044:	c820      	ldmia	r0!, {r5}
 8005046:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8005048:	f8de 0000 	ldr.w	r0, [lr]
 800504c:	fba5 2306 	umull	r2, r3, r5, r6
 8005050:	fb02 f404 	mul.w	r4, r2, r4
 8005054:	f04f 0100 	mov.w	r1, #0
 8005058:	fbe4 2160 	umaal	r2, r1, r4, r0
 800505c:	f8de 0004 	ldr.w	r0, [lr, #4]
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	fbe5 3267 	umaal	r3, r2, r5, r7
 8005068:	fbe0 1364 	umaal	r1, r3, r0, r4
 800506c:	f8cc 1000 	str.w	r1, [ip]
 8005070:	f8de 0008 	ldr.w	r0, [lr, #8]
 8005074:	f04f 0100 	mov.w	r1, #0
 8005078:	fbe5 2168 	umaal	r2, r1, r5, r8
 800507c:	fbe0 3264 	umaal	r3, r2, r0, r4
 8005080:	f8cc 3004 	str.w	r3, [ip, #4]
 8005084:	f8de 000c 	ldr.w	r0, [lr, #12]
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	fbe5 1369 	umaal	r1, r3, r5, r9
 8005090:	fbe0 2164 	umaal	r2, r1, r0, r4
 8005094:	f8cc 2008 	str.w	r2, [ip, #8]
 8005098:	f8de 0010 	ldr.w	r0, [lr, #16]
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	fbe5 326a 	umaal	r3, r2, r5, sl
 80050a4:	fbe0 1364 	umaal	r1, r3, r0, r4
 80050a8:	f8cc 100c 	str.w	r1, [ip, #12]
 80050ac:	f8de 0014 	ldr.w	r0, [lr, #20]
 80050b0:	f04f 0100 	mov.w	r1, #0
 80050b4:	fbe5 216b 	umaal	r2, r1, r5, fp
 80050b8:	fbe0 3264 	umaal	r3, r2, r0, r4
 80050bc:	f8cc 3010 	str.w	r3, [ip, #16]
 80050c0:	9800      	ldr	r0, [sp, #0]
 80050c2:	f04f 0300 	mov.w	r3, #0
 80050c6:	fbe5 1360 	umaal	r1, r3, r5, r0
 80050ca:	f8de 0018 	ldr.w	r0, [lr, #24]
 80050ce:	fbe0 2164 	umaal	r2, r1, r0, r4
 80050d2:	f8cc 2014 	str.w	r2, [ip, #20]
 80050d6:	9801      	ldr	r0, [sp, #4]
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	fbe5 3260 	umaal	r3, r2, r5, r0
 80050e0:	f8de 001c 	ldr.w	r0, [lr, #28]
 80050e4:	fbe0 1364 	umaal	r1, r3, r0, r4
 80050e8:	f8cc 1018 	str.w	r1, [ip, #24]
 80050ec:	18d1      	adds	r1, r2, r3
 80050ee:	f8cc 101c 	str.w	r1, [ip, #28]
 80050f2:	f04f 0100 	mov.w	r1, #0
 80050f6:	eb41 0101 	adc.w	r1, r1, r1
 80050fa:	910c      	str	r1, [sp, #48]	@ 0x30
 80050fc:	9d02      	ldr	r5, [sp, #8]
 80050fe:	f8dc 2000 	ldr.w	r2, [ip]
 8005102:	686d      	ldr	r5, [r5, #4]
 8005104:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8005106:	f8de 0000 	ldr.w	r0, [lr]
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	fbe5 2366 	umaal	r2, r3, r5, r6
 8005112:	fb02 f404 	mul.w	r4, r2, r4
 8005116:	f04f 0100 	mov.w	r1, #0
 800511a:	fbe4 2160 	umaal	r2, r1, r4, r0
 800511e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8005122:	f8de 0004 	ldr.w	r0, [lr, #4]
 8005126:	fbe5 3267 	umaal	r3, r2, r5, r7
 800512a:	fbe0 1364 	umaal	r1, r3, r0, r4
 800512e:	f8cc 1000 	str.w	r1, [ip]
 8005132:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8005136:	f8de 0008 	ldr.w	r0, [lr, #8]
 800513a:	fbe5 2168 	umaal	r2, r1, r5, r8
 800513e:	fbe0 3264 	umaal	r3, r2, r0, r4
 8005142:	f8cc 3004 	str.w	r3, [ip, #4]
 8005146:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800514a:	f8de 000c 	ldr.w	r0, [lr, #12]
 800514e:	fbe5 1369 	umaal	r1, r3, r5, r9
 8005152:	fbe0 2164 	umaal	r2, r1, r0, r4
 8005156:	f8cc 2008 	str.w	r2, [ip, #8]
 800515a:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800515e:	f8de 0010 	ldr.w	r0, [lr, #16]
 8005162:	fbe5 326a 	umaal	r3, r2, r5, sl
 8005166:	fbe0 1364 	umaal	r1, r3, r0, r4
 800516a:	f8cc 100c 	str.w	r1, [ip, #12]
 800516e:	f8dc 1014 	ldr.w	r1, [ip, #20]
 8005172:	f8de 0014 	ldr.w	r0, [lr, #20]
 8005176:	fbe5 216b 	umaal	r2, r1, r5, fp
 800517a:	fbe0 3264 	umaal	r3, r2, r0, r4
 800517e:	f8cc 3010 	str.w	r3, [ip, #16]
 8005182:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8005186:	9800      	ldr	r0, [sp, #0]
 8005188:	fbe5 1360 	umaal	r1, r3, r5, r0
 800518c:	f8de 0018 	ldr.w	r0, [lr, #24]
 8005190:	fbe0 2164 	umaal	r2, r1, r0, r4
 8005194:	f8cc 2014 	str.w	r2, [ip, #20]
 8005198:	f8dc 201c 	ldr.w	r2, [ip, #28]
 800519c:	9801      	ldr	r0, [sp, #4]
 800519e:	fbe5 3260 	umaal	r3, r2, r5, r0
 80051a2:	f8de 001c 	ldr.w	r0, [lr, #28]
 80051a6:	fbe0 1364 	umaal	r1, r3, r0, r4
 80051aa:	f8cc 1018 	str.w	r1, [ip, #24]
 80051ae:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80051b0:	f04f 0400 	mov.w	r4, #0
 80051b4:	1880      	adds	r0, r0, r2
 80051b6:	eb44 0104 	adc.w	r1, r4, r4
 80051ba:	18c0      	adds	r0, r0, r3
 80051bc:	eb44 0204 	adc.w	r2, r4, r4
 80051c0:	f8cc 001c 	str.w	r0, [ip, #28]
 80051c4:	eb01 0002 	add.w	r0, r1, r2
 80051c8:	900c      	str	r0, [sp, #48]	@ 0x30
 80051ca:	9d02      	ldr	r5, [sp, #8]
 80051cc:	f8dc 2000 	ldr.w	r2, [ip]
 80051d0:	68ad      	ldr	r5, [r5, #8]
 80051d2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80051d4:	f8de 0000 	ldr.w	r0, [lr]
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	fbe5 2366 	umaal	r2, r3, r5, r6
 80051e0:	fb02 f404 	mul.w	r4, r2, r4
 80051e4:	f04f 0100 	mov.w	r1, #0
 80051e8:	fbe4 2160 	umaal	r2, r1, r4, r0
 80051ec:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80051f0:	f8de 0004 	ldr.w	r0, [lr, #4]
 80051f4:	fbe5 3267 	umaal	r3, r2, r5, r7
 80051f8:	fbe0 1364 	umaal	r1, r3, r0, r4
 80051fc:	f8cc 1000 	str.w	r1, [ip]
 8005200:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8005204:	f8de 0008 	ldr.w	r0, [lr, #8]
 8005208:	fbe5 2168 	umaal	r2, r1, r5, r8
 800520c:	fbe0 3264 	umaal	r3, r2, r0, r4
 8005210:	f8cc 3004 	str.w	r3, [ip, #4]
 8005214:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8005218:	f8de 000c 	ldr.w	r0, [lr, #12]
 800521c:	fbe5 1369 	umaal	r1, r3, r5, r9
 8005220:	fbe0 2164 	umaal	r2, r1, r0, r4
 8005224:	f8cc 2008 	str.w	r2, [ip, #8]
 8005228:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800522c:	f8de 0010 	ldr.w	r0, [lr, #16]
 8005230:	fbe5 326a 	umaal	r3, r2, r5, sl
 8005234:	fbe0 1364 	umaal	r1, r3, r0, r4
 8005238:	f8cc 100c 	str.w	r1, [ip, #12]
 800523c:	f8dc 1014 	ldr.w	r1, [ip, #20]
 8005240:	f8de 0014 	ldr.w	r0, [lr, #20]
 8005244:	fbe5 216b 	umaal	r2, r1, r5, fp
 8005248:	fbe0 3264 	umaal	r3, r2, r0, r4
 800524c:	f8cc 3010 	str.w	r3, [ip, #16]
 8005250:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8005254:	9800      	ldr	r0, [sp, #0]
 8005256:	fbe5 1360 	umaal	r1, r3, r5, r0
 800525a:	f8de 0018 	ldr.w	r0, [lr, #24]
 800525e:	fbe0 2164 	umaal	r2, r1, r0, r4
 8005262:	f8cc 2014 	str.w	r2, [ip, #20]
 8005266:	f8dc 201c 	ldr.w	r2, [ip, #28]
 800526a:	9801      	ldr	r0, [sp, #4]
 800526c:	fbe5 3260 	umaal	r3, r2, r5, r0
 8005270:	f8de 001c 	ldr.w	r0, [lr, #28]
 8005274:	fbe0 1364 	umaal	r1, r3, r0, r4
 8005278:	f8cc 1018 	str.w	r1, [ip, #24]
 800527c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800527e:	f04f 0400 	mov.w	r4, #0
 8005282:	1880      	adds	r0, r0, r2
 8005284:	eb44 0104 	adc.w	r1, r4, r4
 8005288:	18c0      	adds	r0, r0, r3
 800528a:	eb44 0204 	adc.w	r2, r4, r4
 800528e:	f8cc 001c 	str.w	r0, [ip, #28]
 8005292:	eb01 0002 	add.w	r0, r1, r2
 8005296:	900c      	str	r0, [sp, #48]	@ 0x30
 8005298:	9d02      	ldr	r5, [sp, #8]
 800529a:	f8dc 2000 	ldr.w	r2, [ip]
 800529e:	68ed      	ldr	r5, [r5, #12]
 80052a0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80052a2:	f8de 0000 	ldr.w	r0, [lr]
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	fbe5 2366 	umaal	r2, r3, r5, r6
 80052ae:	fb02 f404 	mul.w	r4, r2, r4
 80052b2:	f04f 0100 	mov.w	r1, #0
 80052b6:	fbe4 2160 	umaal	r2, r1, r4, r0
 80052ba:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80052be:	f8de 0004 	ldr.w	r0, [lr, #4]
 80052c2:	fbe5 3267 	umaal	r3, r2, r5, r7
 80052c6:	fbe0 1364 	umaal	r1, r3, r0, r4
 80052ca:	f8cc 1000 	str.w	r1, [ip]
 80052ce:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80052d2:	f8de 0008 	ldr.w	r0, [lr, #8]
 80052d6:	fbe5 2168 	umaal	r2, r1, r5, r8
 80052da:	fbe0 3264 	umaal	r3, r2, r0, r4
 80052de:	f8cc 3004 	str.w	r3, [ip, #4]
 80052e2:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80052e6:	f8de 000c 	ldr.w	r0, [lr, #12]
 80052ea:	fbe5 1369 	umaal	r1, r3, r5, r9
 80052ee:	fbe0 2164 	umaal	r2, r1, r0, r4
 80052f2:	f8cc 2008 	str.w	r2, [ip, #8]
 80052f6:	f8dc 2010 	ldr.w	r2, [ip, #16]
 80052fa:	f8de 0010 	ldr.w	r0, [lr, #16]
 80052fe:	fbe5 326a 	umaal	r3, r2, r5, sl
 8005302:	fbe0 1364 	umaal	r1, r3, r0, r4
 8005306:	f8cc 100c 	str.w	r1, [ip, #12]
 800530a:	f8dc 1014 	ldr.w	r1, [ip, #20]
 800530e:	f8de 0014 	ldr.w	r0, [lr, #20]
 8005312:	fbe5 216b 	umaal	r2, r1, r5, fp
 8005316:	fbe0 3264 	umaal	r3, r2, r0, r4
 800531a:	f8cc 3010 	str.w	r3, [ip, #16]
 800531e:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8005322:	9800      	ldr	r0, [sp, #0]
 8005324:	fbe5 1360 	umaal	r1, r3, r5, r0
 8005328:	f8de 0018 	ldr.w	r0, [lr, #24]
 800532c:	fbe0 2164 	umaal	r2, r1, r0, r4
 8005330:	f8cc 2014 	str.w	r2, [ip, #20]
 8005334:	f8dc 201c 	ldr.w	r2, [ip, #28]
 8005338:	9801      	ldr	r0, [sp, #4]
 800533a:	fbe5 3260 	umaal	r3, r2, r5, r0
 800533e:	f8de 001c 	ldr.w	r0, [lr, #28]
 8005342:	fbe0 1364 	umaal	r1, r3, r0, r4
 8005346:	f8cc 1018 	str.w	r1, [ip, #24]
 800534a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800534c:	f04f 0400 	mov.w	r4, #0
 8005350:	1880      	adds	r0, r0, r2
 8005352:	eb44 0104 	adc.w	r1, r4, r4
 8005356:	18c0      	adds	r0, r0, r3
 8005358:	eb44 0204 	adc.w	r2, r4, r4
 800535c:	f8cc 001c 	str.w	r0, [ip, #28]
 8005360:	eb01 0002 	add.w	r0, r1, r2
 8005364:	900c      	str	r0, [sp, #48]	@ 0x30
 8005366:	9d02      	ldr	r5, [sp, #8]
 8005368:	f8dc 2000 	ldr.w	r2, [ip]
 800536c:	692d      	ldr	r5, [r5, #16]
 800536e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8005370:	f8de 0000 	ldr.w	r0, [lr]
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	fbe5 2366 	umaal	r2, r3, r5, r6
 800537c:	fb02 f404 	mul.w	r4, r2, r4
 8005380:	f04f 0100 	mov.w	r1, #0
 8005384:	fbe4 2160 	umaal	r2, r1, r4, r0
 8005388:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800538c:	f8de 0004 	ldr.w	r0, [lr, #4]
 8005390:	fbe5 3267 	umaal	r3, r2, r5, r7
 8005394:	fbe0 1364 	umaal	r1, r3, r0, r4
 8005398:	f8cc 1000 	str.w	r1, [ip]
 800539c:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80053a0:	f8de 0008 	ldr.w	r0, [lr, #8]
 80053a4:	fbe5 2168 	umaal	r2, r1, r5, r8
 80053a8:	fbe0 3264 	umaal	r3, r2, r0, r4
 80053ac:	f8cc 3004 	str.w	r3, [ip, #4]
 80053b0:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80053b4:	f8de 000c 	ldr.w	r0, [lr, #12]
 80053b8:	fbe5 1369 	umaal	r1, r3, r5, r9
 80053bc:	fbe0 2164 	umaal	r2, r1, r0, r4
 80053c0:	f8cc 2008 	str.w	r2, [ip, #8]
 80053c4:	f8dc 2010 	ldr.w	r2, [ip, #16]
 80053c8:	f8de 0010 	ldr.w	r0, [lr, #16]
 80053cc:	fbe5 326a 	umaal	r3, r2, r5, sl
 80053d0:	fbe0 1364 	umaal	r1, r3, r0, r4
 80053d4:	f8cc 100c 	str.w	r1, [ip, #12]
 80053d8:	f8dc 1014 	ldr.w	r1, [ip, #20]
 80053dc:	f8de 0014 	ldr.w	r0, [lr, #20]
 80053e0:	fbe5 216b 	umaal	r2, r1, r5, fp
 80053e4:	fbe0 3264 	umaal	r3, r2, r0, r4
 80053e8:	f8cc 3010 	str.w	r3, [ip, #16]
 80053ec:	f8dc 3018 	ldr.w	r3, [ip, #24]
 80053f0:	9800      	ldr	r0, [sp, #0]
 80053f2:	fbe5 1360 	umaal	r1, r3, r5, r0
 80053f6:	f8de 0018 	ldr.w	r0, [lr, #24]
 80053fa:	fbe0 2164 	umaal	r2, r1, r0, r4
 80053fe:	f8cc 2014 	str.w	r2, [ip, #20]
 8005402:	f8dc 201c 	ldr.w	r2, [ip, #28]
 8005406:	9801      	ldr	r0, [sp, #4]
 8005408:	fbe5 3260 	umaal	r3, r2, r5, r0
 800540c:	f8de 001c 	ldr.w	r0, [lr, #28]
 8005410:	fbe0 1364 	umaal	r1, r3, r0, r4
 8005414:	f8cc 1018 	str.w	r1, [ip, #24]
 8005418:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800541a:	f04f 0400 	mov.w	r4, #0
 800541e:	1880      	adds	r0, r0, r2
 8005420:	eb44 0104 	adc.w	r1, r4, r4
 8005424:	18c0      	adds	r0, r0, r3
 8005426:	eb44 0204 	adc.w	r2, r4, r4
 800542a:	f8cc 001c 	str.w	r0, [ip, #28]
 800542e:	eb01 0002 	add.w	r0, r1, r2
 8005432:	900c      	str	r0, [sp, #48]	@ 0x30
 8005434:	9d02      	ldr	r5, [sp, #8]
 8005436:	f8dc 2000 	ldr.w	r2, [ip]
 800543a:	696d      	ldr	r5, [r5, #20]
 800543c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800543e:	f8de 0000 	ldr.w	r0, [lr]
 8005442:	f04f 0300 	mov.w	r3, #0
 8005446:	fbe5 2366 	umaal	r2, r3, r5, r6
 800544a:	fb02 f404 	mul.w	r4, r2, r4
 800544e:	f04f 0100 	mov.w	r1, #0
 8005452:	fbe4 2160 	umaal	r2, r1, r4, r0
 8005456:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800545a:	f8de 0004 	ldr.w	r0, [lr, #4]
 800545e:	fbe5 3267 	umaal	r3, r2, r5, r7
 8005462:	fbe0 1364 	umaal	r1, r3, r0, r4
 8005466:	f8cc 1000 	str.w	r1, [ip]
 800546a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800546e:	f8de 0008 	ldr.w	r0, [lr, #8]
 8005472:	fbe5 2168 	umaal	r2, r1, r5, r8
 8005476:	fbe0 3264 	umaal	r3, r2, r0, r4
 800547a:	f8cc 3004 	str.w	r3, [ip, #4]
 800547e:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8005482:	f8de 000c 	ldr.w	r0, [lr, #12]
 8005486:	fbe5 1369 	umaal	r1, r3, r5, r9
 800548a:	fbe0 2164 	umaal	r2, r1, r0, r4
 800548e:	f8cc 2008 	str.w	r2, [ip, #8]
 8005492:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8005496:	f8de 0010 	ldr.w	r0, [lr, #16]
 800549a:	fbe5 326a 	umaal	r3, r2, r5, sl
 800549e:	fbe0 1364 	umaal	r1, r3, r0, r4
 80054a2:	f8cc 100c 	str.w	r1, [ip, #12]
 80054a6:	f8dc 1014 	ldr.w	r1, [ip, #20]
 80054aa:	f8de 0014 	ldr.w	r0, [lr, #20]
 80054ae:	fbe5 216b 	umaal	r2, r1, r5, fp
 80054b2:	fbe0 3264 	umaal	r3, r2, r0, r4
 80054b6:	f8cc 3010 	str.w	r3, [ip, #16]
 80054ba:	f8dc 3018 	ldr.w	r3, [ip, #24]
 80054be:	9800      	ldr	r0, [sp, #0]
 80054c0:	fbe5 1360 	umaal	r1, r3, r5, r0
 80054c4:	f8de 0018 	ldr.w	r0, [lr, #24]
 80054c8:	fbe0 2164 	umaal	r2, r1, r0, r4
 80054cc:	f8cc 2014 	str.w	r2, [ip, #20]
 80054d0:	f8dc 201c 	ldr.w	r2, [ip, #28]
 80054d4:	9801      	ldr	r0, [sp, #4]
 80054d6:	fbe5 3260 	umaal	r3, r2, r5, r0
 80054da:	f8de 001c 	ldr.w	r0, [lr, #28]
 80054de:	fbe0 1364 	umaal	r1, r3, r0, r4
 80054e2:	f8cc 1018 	str.w	r1, [ip, #24]
 80054e6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80054e8:	f04f 0400 	mov.w	r4, #0
 80054ec:	1880      	adds	r0, r0, r2
 80054ee:	eb44 0104 	adc.w	r1, r4, r4
 80054f2:	18c0      	adds	r0, r0, r3
 80054f4:	eb44 0204 	adc.w	r2, r4, r4
 80054f8:	f8cc 001c 	str.w	r0, [ip, #28]
 80054fc:	eb01 0002 	add.w	r0, r1, r2
 8005500:	900c      	str	r0, [sp, #48]	@ 0x30
 8005502:	9d02      	ldr	r5, [sp, #8]
 8005504:	f8dc 2000 	ldr.w	r2, [ip]
 8005508:	69ad      	ldr	r5, [r5, #24]
 800550a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800550c:	f8de 0000 	ldr.w	r0, [lr]
 8005510:	f04f 0300 	mov.w	r3, #0
 8005514:	fbe5 2366 	umaal	r2, r3, r5, r6
 8005518:	fb02 f404 	mul.w	r4, r2, r4
 800551c:	f04f 0100 	mov.w	r1, #0
 8005520:	fbe4 2160 	umaal	r2, r1, r4, r0
 8005524:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8005528:	f8de 0004 	ldr.w	r0, [lr, #4]
 800552c:	fbe5 3267 	umaal	r3, r2, r5, r7
 8005530:	fbe0 1364 	umaal	r1, r3, r0, r4
 8005534:	f8cc 1000 	str.w	r1, [ip]
 8005538:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800553c:	f8de 0008 	ldr.w	r0, [lr, #8]
 8005540:	fbe5 2168 	umaal	r2, r1, r5, r8
 8005544:	fbe0 3264 	umaal	r3, r2, r0, r4
 8005548:	f8cc 3004 	str.w	r3, [ip, #4]
 800554c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8005550:	f8de 000c 	ldr.w	r0, [lr, #12]
 8005554:	fbe5 1369 	umaal	r1, r3, r5, r9
 8005558:	fbe0 2164 	umaal	r2, r1, r0, r4
 800555c:	f8cc 2008 	str.w	r2, [ip, #8]
 8005560:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8005564:	f8de 0010 	ldr.w	r0, [lr, #16]
 8005568:	fbe5 326a 	umaal	r3, r2, r5, sl
 800556c:	fbe0 1364 	umaal	r1, r3, r0, r4
 8005570:	f8cc 100c 	str.w	r1, [ip, #12]
 8005574:	f8dc 1014 	ldr.w	r1, [ip, #20]
 8005578:	f8de 0014 	ldr.w	r0, [lr, #20]
 800557c:	fbe5 216b 	umaal	r2, r1, r5, fp
 8005580:	fbe0 3264 	umaal	r3, r2, r0, r4
 8005584:	f8cc 3010 	str.w	r3, [ip, #16]
 8005588:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800558c:	9800      	ldr	r0, [sp, #0]
 800558e:	fbe5 1360 	umaal	r1, r3, r5, r0
 8005592:	f8de 0018 	ldr.w	r0, [lr, #24]
 8005596:	fbe0 2164 	umaal	r2, r1, r0, r4
 800559a:	f8cc 2014 	str.w	r2, [ip, #20]
 800559e:	f8dc 201c 	ldr.w	r2, [ip, #28]
 80055a2:	9801      	ldr	r0, [sp, #4]
 80055a4:	fbe5 3260 	umaal	r3, r2, r5, r0
 80055a8:	f8de 001c 	ldr.w	r0, [lr, #28]
 80055ac:	fbe0 1364 	umaal	r1, r3, r0, r4
 80055b0:	f8cc 1018 	str.w	r1, [ip, #24]
 80055b4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80055b6:	f04f 0400 	mov.w	r4, #0
 80055ba:	1880      	adds	r0, r0, r2
 80055bc:	eb44 0104 	adc.w	r1, r4, r4
 80055c0:	18c0      	adds	r0, r0, r3
 80055c2:	eb44 0204 	adc.w	r2, r4, r4
 80055c6:	f8cc 001c 	str.w	r0, [ip, #28]
 80055ca:	eb01 0002 	add.w	r0, r1, r2
 80055ce:	900c      	str	r0, [sp, #48]	@ 0x30
 80055d0:	9d02      	ldr	r5, [sp, #8]
 80055d2:	f8dc 2000 	ldr.w	r2, [ip]
 80055d6:	69ed      	ldr	r5, [r5, #28]
 80055d8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80055da:	f8de 0000 	ldr.w	r0, [lr]
 80055de:	f04f 0300 	mov.w	r3, #0
 80055e2:	fbe5 2366 	umaal	r2, r3, r5, r6
 80055e6:	fb02 f404 	mul.w	r4, r2, r4
 80055ea:	f04f 0100 	mov.w	r1, #0
 80055ee:	fbe4 2160 	umaal	r2, r1, r4, r0
 80055f2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80055f6:	f8de 0004 	ldr.w	r0, [lr, #4]
 80055fa:	fbe5 3267 	umaal	r3, r2, r5, r7
 80055fe:	fbe0 1364 	umaal	r1, r3, r0, r4
 8005602:	f8cc 1000 	str.w	r1, [ip]
 8005606:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800560a:	f8de 0008 	ldr.w	r0, [lr, #8]
 800560e:	fbe5 2168 	umaal	r2, r1, r5, r8
 8005612:	fbe0 3264 	umaal	r3, r2, r0, r4
 8005616:	f8cc 3004 	str.w	r3, [ip, #4]
 800561a:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800561e:	f8de 000c 	ldr.w	r0, [lr, #12]
 8005622:	fbe5 1369 	umaal	r1, r3, r5, r9
 8005626:	fbe0 2164 	umaal	r2, r1, r0, r4
 800562a:	f8cc 2008 	str.w	r2, [ip, #8]
 800562e:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8005632:	f8de 0010 	ldr.w	r0, [lr, #16]
 8005636:	fbe5 326a 	umaal	r3, r2, r5, sl
 800563a:	fbe0 1364 	umaal	r1, r3, r0, r4
 800563e:	f8cc 100c 	str.w	r1, [ip, #12]
 8005642:	f8dc 1014 	ldr.w	r1, [ip, #20]
 8005646:	f8de 0014 	ldr.w	r0, [lr, #20]
 800564a:	fbe5 216b 	umaal	r2, r1, r5, fp
 800564e:	fbe0 3264 	umaal	r3, r2, r0, r4
 8005652:	f8cc 3010 	str.w	r3, [ip, #16]
 8005656:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800565a:	9800      	ldr	r0, [sp, #0]
 800565c:	fbe5 1360 	umaal	r1, r3, r5, r0
 8005660:	f8de 0018 	ldr.w	r0, [lr, #24]
 8005664:	fbe0 2164 	umaal	r2, r1, r0, r4
 8005668:	f8cc 2014 	str.w	r2, [ip, #20]
 800566c:	f8dc 201c 	ldr.w	r2, [ip, #28]
 8005670:	9801      	ldr	r0, [sp, #4]
 8005672:	fbe5 3260 	umaal	r3, r2, r5, r0
 8005676:	f8de 001c 	ldr.w	r0, [lr, #28]
 800567a:	fbe0 1364 	umaal	r1, r3, r0, r4
 800567e:	f8cc 1018 	str.w	r1, [ip, #24]
 8005682:	f04f 0400 	mov.w	r4, #0
 8005686:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005688:	1880      	adds	r0, r0, r2
 800568a:	eb44 0104 	adc.w	r1, r4, r4
 800568e:	18c0      	adds	r0, r0, r3
 8005690:	eb44 0204 	adc.w	r2, r4, r4
 8005694:	f8cc 001c 	str.w	r0, [ip, #28]
 8005698:	eb01 0002 	add.w	r0, r1, r2
 800569c:	e8bc 00f0 	ldmia.w	ip!, {r4, r5, r6, r7}
 80056a0:	e8be 0f00 	ldmia.w	lr!, {r8, r9, sl, fp}
 80056a4:	ebb4 0108 	subs.w	r1, r4, r8
 80056a8:	eb75 0109 	sbcs.w	r1, r5, r9
 80056ac:	eb76 010a 	sbcs.w	r1, r6, sl
 80056b0:	eb77 010b 	sbcs.w	r1, r7, fp
 80056b4:	e8bc 00f0 	ldmia.w	ip!, {r4, r5, r6, r7}
 80056b8:	e8be 0f00 	ldmia.w	lr!, {r8, r9, sl, fp}
 80056bc:	eb74 0108 	sbcs.w	r1, r4, r8
 80056c0:	eb75 0109 	sbcs.w	r1, r5, r9
 80056c4:	eb76 010a 	sbcs.w	r1, r6, sl
 80056c8:	eb77 010b 	sbcs.w	r1, r7, fp
 80056cc:	eb61 0101 	sbc.w	r1, r1, r1
 80056d0:	4408      	add	r0, r1
 80056d2:	ea6f 0000 	mvn.w	r0, r0
 80056d6:	f1ac 0c20 	sub.w	ip, ip, #32
 80056da:	f1ae 0e20 	sub.w	lr, lr, #32
 80056de:	e8bc 00f0 	ldmia.w	ip!, {r4, r5, r6, r7}
 80056e2:	e8be 0f00 	ldmia.w	lr!, {r8, r9, sl, fp}
 80056e6:	ea08 0800 	and.w	r8, r8, r0
 80056ea:	ebb4 0408 	subs.w	r4, r4, r8
 80056ee:	ea09 0900 	and.w	r9, r9, r0
 80056f2:	eb75 0509 	sbcs.w	r5, r5, r9
 80056f6:	ea0a 0a00 	and.w	sl, sl, r0
 80056fa:	eb76 060a 	sbcs.w	r6, r6, sl
 80056fe:	ea0b 0b00 	and.w	fp, fp, r0
 8005702:	eb77 070b 	sbcs.w	r7, r7, fp
 8005706:	e8be 0f00 	ldmia.w	lr!, {r8, r9, sl, fp}
 800570a:	e8bc 400e 	ldmia.w	ip!, {r1, r2, r3, lr}
 800570e:	ea08 0800 	and.w	r8, r8, r0
 8005712:	eb71 0808 	sbcs.w	r8, r1, r8
 8005716:	ea09 0900 	and.w	r9, r9, r0
 800571a:	eb72 0909 	sbcs.w	r9, r2, r9
 800571e:	ea0a 0a00 	and.w	sl, sl, r0
 8005722:	eb73 0a0a 	sbcs.w	sl, r3, sl
 8005726:	ea0b 0b00 	and.w	fp, fp, r0
 800572a:	eb7e 0b0b 	sbcs.w	fp, lr, fp
 800572e:	f1ac 0c20 	sub.w	ip, ip, #32
 8005732:	e88c 0ff0 	stmia.w	ip, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005736:	b003      	add	sp, #12
 8005738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800573c <cmox_asm_montymul_x128>:
 800573c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005740:	b086      	sub	sp, #24
 8005742:	f851 4b04 	ldr.w	r4, [r1], #4
 8005746:	e9cd 0100 	strd	r0, r1, [sp]
 800574a:	9202      	str	r2, [sp, #8]
 800574c:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 8005750:	fba4 9a05 	umull	r9, sl, r4, r5
 8005754:	f04f 0e00 	mov.w	lr, #0
 8005758:	fbae bc0e 	umull	fp, ip, lr, lr
 800575c:	fbe4 ab66 	umaal	sl, fp, r4, r6
 8005760:	fbe4 bc67 	umaal	fp, ip, r4, r7
 8005764:	fbe4 ce68 	umaal	ip, lr, r4, r8
 8005768:	e8a3 1e00 	stmia.w	r3!, {r9, sl, fp, ip}
 800576c:	1f12      	subs	r2, r2, #4
 800576e:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 8005772:	46f1      	mov	r9, lr
 8005774:	f04f 0e00 	mov.w	lr, #0
 8005778:	fbae ab0e 	umull	sl, fp, lr, lr
 800577c:	46f4      	mov	ip, lr
 800577e:	fbe4 9a65 	umaal	r9, sl, r4, r5
 8005782:	fbe4 ab66 	umaal	sl, fp, r4, r6
 8005786:	fbe4 bc67 	umaal	fp, ip, r4, r7
 800578a:	fbe4 ce68 	umaal	ip, lr, r4, r8
 800578e:	e8a3 1e00 	stmia.w	r3!, {r9, sl, fp, ip}
 8005792:	1f12      	subs	r2, r2, #4
 8005794:	d1eb      	bne.n	800576e <cmox_asm_montymul_x128+0x32>
 8005796:	9a02      	ldr	r2, [sp, #8]
 8005798:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 800579c:	f8cd e00c 	str.w	lr, [sp, #12]
 80057a0:	e9dd 040f 	ldrd	r0, r4, [sp, #60]	@ 0x3c
 80057a4:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 80057a8:	f04f 0900 	mov.w	r9, #0
 80057ac:	4619      	mov	r1, r3
 80057ae:	e8b3 5c00 	ldmia.w	r3!, {sl, fp, ip, lr}
 80057b2:	fb04 f40a 	mul.w	r4, r4, sl
 80057b6:	fbe4 9a65 	umaal	r9, sl, r4, r5
 80057ba:	fbe4 ab66 	umaal	sl, fp, r4, r6
 80057be:	fbe4 bc67 	umaal	fp, ip, r4, r7
 80057c2:	fbe4 ce68 	umaal	ip, lr, r4, r8
 80057c6:	e8a1 1c00 	stmia.w	r1!, {sl, fp, ip}
 80057ca:	f1b2 0204 	subs.w	r2, r2, #4
 80057ce:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 80057d2:	46f1      	mov	r9, lr
 80057d4:	e8b3 5c00 	ldmia.w	r3!, {sl, fp, ip, lr}
 80057d8:	fbe4 9a65 	umaal	r9, sl, r4, r5
 80057dc:	fbe4 ab66 	umaal	sl, fp, r4, r6
 80057e0:	fbe4 bc67 	umaal	fp, ip, r4, r7
 80057e4:	fbe4 ce68 	umaal	ip, lr, r4, r8
 80057e8:	e8a1 1e00 	stmia.w	r1!, {r9, sl, fp, ip}
 80057ec:	1f12      	subs	r2, r2, #4
 80057ee:	d1ee      	bne.n	80057ce <cmox_asm_montymul_x128+0x92>
 80057f0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80057f4:	f04f 0a00 	mov.w	sl, #0
 80057f8:	eb1c 0c0e 	adds.w	ip, ip, lr
 80057fc:	f14a 0b00 	adc.w	fp, sl, #0
 8005800:	f8c1 c000 	str.w	ip, [r1]
 8005804:	f8cd b00c 	str.w	fp, [sp, #12]
 8005808:	9a02      	ldr	r2, [sp, #8]
 800580a:	f1a2 0a01 	sub.w	sl, r2, #1
 800580e:	f8cd a014 	str.w	sl, [sp, #20]
 8005812:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005816:	f851 4b04 	ldr.w	r4, [r1], #4
 800581a:	f8cd 1004 	str.w	r1, [sp, #4]
 800581e:	f04f 0e00 	mov.w	lr, #0
 8005822:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8005826:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 800582a:	46f1      	mov	r9, lr
 800582c:	e893 5c00 	ldmia.w	r3, {sl, fp, ip, lr}
 8005830:	fbe4 9a65 	umaal	r9, sl, r4, r5
 8005834:	fbe4 ab66 	umaal	sl, fp, r4, r6
 8005838:	fbe4 bc67 	umaal	fp, ip, r4, r7
 800583c:	fbe4 ce68 	umaal	ip, lr, r4, r8
 8005840:	e8a3 1e00 	stmia.w	r3!, {r9, sl, fp, ip}
 8005844:	1f12      	subs	r2, r2, #4
 8005846:	d1ee      	bne.n	8005826 <cmox_asm_montymul_x128+0xea>
 8005848:	9a02      	ldr	r2, [sp, #8]
 800584a:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 800584e:	9d03      	ldr	r5, [sp, #12]
 8005850:	f04f 0900 	mov.w	r9, #0
 8005854:	eb1e 0505 	adds.w	r5, lr, r5
 8005858:	eb49 0609 	adc.w	r6, r9, r9
 800585c:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8005860:	e9dd 040f 	ldrd	r0, r4, [sp, #60]	@ 0x3c
 8005864:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 8005868:	4619      	mov	r1, r3
 800586a:	e8b3 5c00 	ldmia.w	r3!, {sl, fp, ip, lr}
 800586e:	fb04 f40a 	mul.w	r4, r4, sl
 8005872:	fbe4 9a65 	umaal	r9, sl, r4, r5
 8005876:	fbe4 ab66 	umaal	sl, fp, r4, r6
 800587a:	fbe4 bc67 	umaal	fp, ip, r4, r7
 800587e:	fbe4 ce68 	umaal	ip, lr, r4, r8
 8005882:	e8a1 1c00 	stmia.w	r1!, {sl, fp, ip}
 8005886:	1f12      	subs	r2, r2, #4
 8005888:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 800588c:	46f1      	mov	r9, lr
 800588e:	e8b3 5c00 	ldmia.w	r3!, {sl, fp, ip, lr}
 8005892:	fbe4 9a65 	umaal	r9, sl, r4, r5
 8005896:	fbe4 ab66 	umaal	sl, fp, r4, r6
 800589a:	fbe4 bc67 	umaal	fp, ip, r4, r7
 800589e:	fbe4 ce68 	umaal	ip, lr, r4, r8
 80058a2:	e8a1 1e00 	stmia.w	r1!, {r9, sl, fp, ip}
 80058a6:	1f12      	subs	r2, r2, #4
 80058a8:	d1ee      	bne.n	8005888 <cmox_asm_montymul_x128+0x14c>
 80058aa:	e9dd bc03 	ldrd	fp, ip, [sp, #12]
 80058ae:	eb1b 0b0e 	adds.w	fp, fp, lr
 80058b2:	f15c 0c00 	adcs.w	ip, ip, #0
 80058b6:	f8c1 b000 	str.w	fp, [r1]
 80058ba:	f8cd c00c 	str.w	ip, [sp, #12]
 80058be:	f8dd a014 	ldr.w	sl, [sp, #20]
 80058c2:	f1ba 0a01 	subs.w	sl, sl, #1
 80058c6:	f8cd a014 	str.w	sl, [sp, #20]
 80058ca:	9a02      	ldr	r2, [sp, #8]
 80058cc:	d1a1      	bne.n	8005812 <cmox_asm_montymul_x128+0xd6>
 80058ce:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 80058d2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80058d4:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
 80058d6:	e8b0 0f00 	ldmia.w	r0!, {r8, r9, sl, fp}
 80058da:	ebb4 0408 	subs.w	r4, r4, r8
 80058de:	eb75 0509 	sbcs.w	r5, r5, r9
 80058e2:	eb76 060a 	sbcs.w	r6, r6, sl
 80058e6:	eb77 070b 	sbcs.w	r7, r7, fp
 80058ea:	f1a2 0204 	sub.w	r2, r2, #4
 80058ee:	b16a      	cbz	r2, 800590c <cmox_asm_montymul_x128+0x1d0>
 80058f0:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
 80058f2:	e8b0 0f00 	ldmia.w	r0!, {r8, r9, sl, fp}
 80058f6:	eb74 0408 	sbcs.w	r4, r4, r8
 80058fa:	eb75 0509 	sbcs.w	r5, r5, r9
 80058fe:	eb76 060a 	sbcs.w	r6, r6, sl
 8005902:	eb77 070b 	sbcs.w	r7, r7, fp
 8005906:	f1a2 0204 	sub.w	r2, r2, #4
 800590a:	e7f0      	b.n	80058ee <cmox_asm_montymul_x128+0x1b2>
 800590c:	f17c 0c00 	sbcs.w	ip, ip, #0
 8005910:	ea6f 0c0c 	mvn.w	ip, ip
 8005914:	9a02      	ldr	r2, [sp, #8]
 8005916:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 800591a:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800591e:	e893 00f0 	ldmia.w	r3, {r4, r5, r6, r7}
 8005922:	e8b0 0f00 	ldmia.w	r0!, {r8, r9, sl, fp}
 8005926:	ea08 080c 	and.w	r8, r8, ip
 800592a:	ea09 090c 	and.w	r9, r9, ip
 800592e:	ea0a 0a0c 	and.w	sl, sl, ip
 8005932:	ea0b 0b0c 	and.w	fp, fp, ip
 8005936:	ebb4 0408 	subs.w	r4, r4, r8
 800593a:	eb75 0509 	sbcs.w	r5, r5, r9
 800593e:	eb76 060a 	sbcs.w	r6, r6, sl
 8005942:	eb77 070b 	sbcs.w	r7, r7, fp
 8005946:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
 8005948:	f1a2 0204 	sub.w	r2, r2, #4
 800594c:	b1ba      	cbz	r2, 800597e <cmox_asm_montymul_x128+0x242>
 800594e:	e893 00f0 	ldmia.w	r3, {r4, r5, r6, r7}
 8005952:	e8b0 0f00 	ldmia.w	r0!, {r8, r9, sl, fp}
 8005956:	ea08 080c 	and.w	r8, r8, ip
 800595a:	ea09 090c 	and.w	r9, r9, ip
 800595e:	ea0a 0a0c 	and.w	sl, sl, ip
 8005962:	ea0b 0b0c 	and.w	fp, fp, ip
 8005966:	eb74 0408 	sbcs.w	r4, r4, r8
 800596a:	eb75 0509 	sbcs.w	r5, r5, r9
 800596e:	eb76 060a 	sbcs.w	r6, r6, sl
 8005972:	eb77 070b 	sbcs.w	r7, r7, fp
 8005976:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
 8005978:	f1a2 0204 	sub.w	r2, r2, #4
 800597c:	e7e6      	b.n	800594c <cmox_asm_montymul_x128+0x210>
 800597e:	b006      	add	sp, #24
 8005980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005984 <cmox_asm_montyred>:
 8005984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005988:	f8dd 4024 	ldr.w	r4, [sp, #36]	@ 0x24
 800598c:	9209      	str	r2, [sp, #36]	@ 0x24
 800598e:	ea4f 0181 	mov.w	r1, r1, lsl #2
 8005992:	f04f 0b00 	mov.w	fp, #0
 8005996:	fbab a50b 	umull	sl, r5, fp, fp
 800599a:	468c      	mov	ip, r1
 800599c:	f1bc 0c04 	subs.w	ip, ip, #4
 80059a0:	f850 e00c 	ldr.w	lr, [r0, ip]
 80059a4:	f843 e00c 	str.w	lr, [r3, ip]
 80059a8:	d000      	beq.n	80059ac <cmox_asm_montyred+0x28>
 80059aa:	e7f7      	b.n	800599c <cmox_asm_montyred+0x18>
 80059ac:	4408      	add	r0, r1
 80059ae:	f8d3 9000 	ldr.w	r9, [r3]
 80059b2:	fbab 780b 	umull	r7, r8, fp, fp
 80059b6:	fb09 f904 	mul.w	r9, r9, r4
 80059ba:	460e      	mov	r6, r1
 80059bc:	469e      	mov	lr, r3
 80059be:	f8de 7000 	ldr.w	r7, [lr]
 80059c2:	f852 cb04 	ldr.w	ip, [r2], #4
 80059c6:	f1a6 0604 	sub.w	r6, r6, #4
 80059ca:	fbe9 786c 	umaal	r7, r8, r9, ip
 80059ce:	b156      	cbz	r6, 80059e6 <cmox_asm_montyred+0x62>
 80059d0:	f8de 7004 	ldr.w	r7, [lr, #4]
 80059d4:	f852 cb04 	ldr.w	ip, [r2], #4
 80059d8:	f1a6 0604 	sub.w	r6, r6, #4
 80059dc:	fbe9 786c 	umaal	r7, r8, r9, ip
 80059e0:	f84e 7b04 	str.w	r7, [lr], #4
 80059e4:	e7f3      	b.n	80059ce <cmox_asm_montyred+0x4a>
 80059e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059e8:	c880      	ldmia	r0!, {r7}
 80059ea:	f04f 0c01 	mov.w	ip, #1
 80059ee:	fbea 786c 	umaal	r7, r8, sl, ip
 80059f2:	f8ce 7000 	str.w	r7, [lr]
 80059f6:	46c2      	mov	sl, r8
 80059f8:	f105 0504 	add.w	r5, r5, #4
 80059fc:	428d      	cmp	r5, r1
 80059fe:	dbd6      	blt.n	80059ae <cmox_asm_montyred+0x2a>
 8005a00:	469c      	mov	ip, r3
 8005a02:	4693      	mov	fp, r2
 8005a04:	1e0d      	subs	r5, r1, #0
 8005a06:	b135      	cbz	r5, 8005a16 <cmox_asm_montyred+0x92>
 8005a08:	f85c 6b04 	ldr.w	r6, [ip], #4
 8005a0c:	ca80      	ldmia	r2!, {r7}
 8005a0e:	41be      	sbcs	r6, r7
 8005a10:	f1a5 0504 	sub.w	r5, r5, #4
 8005a14:	e7f7      	b.n	8005a06 <cmox_asm_montyred+0x82>
 8005a16:	eb66 0606 	sbc.w	r6, r6, r6
 8005a1a:	eb0a 0c06 	add.w	ip, sl, r6
 8005a1e:	ea6f 0c0c 	mvn.w	ip, ip
 8005a22:	469a      	mov	sl, r3
 8005a24:	465a      	mov	r2, fp
 8005a26:	1e0d      	subs	r5, r1, #0
 8005a28:	b14d      	cbz	r5, 8005a3e <cmox_asm_montyred+0xba>
 8005a2a:	ca80      	ldmia	r2!, {r7}
 8005a2c:	f85a 6b04 	ldr.w	r6, [sl], #4
 8005a30:	ea07 070c 	and.w	r7, r7, ip
 8005a34:	41be      	sbcs	r6, r7
 8005a36:	c340      	stmia	r3!, {r6}
 8005a38:	f1a5 0504 	sub.w	r5, r5, #4
 8005a3c:	e7f4      	b.n	8005a28 <cmox_asm_montyred+0xa4>
 8005a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005a42 <cmox_asm_mul>:
 8005a42:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8005a46:	0092      	lsls	r2, r2, #2
 8005a48:	f05f 0900 	movs.w	r9, #0
 8005a4c:	ea5f 0b42 	movs.w	fp, r2, lsl #1
 8005a50:	f1ab 0b04 	sub.w	fp, fp, #4
 8005a54:	d004      	beq.n	8005a60 <cmox_asm_mul+0x1e>
 8005a56:	f1bb 0b04 	subs.w	fp, fp, #4
 8005a5a:	f843 900b 	str.w	r9, [r3, fp]
 8005a5e:	d1fa      	bne.n	8005a56 <cmox_asm_mul+0x14>
 8005a60:	ea5f 0b02 	movs.w	fp, r2
 8005a64:	d017      	beq.n	8005a96 <cmox_asm_mul+0x54>
 8005a66:	2400      	movs	r4, #0
 8005a68:	f850 cb04 	ldr.w	ip, [r0], #4
 8005a6c:	469e      	mov	lr, r3
 8005a6e:	4692      	mov	sl, r2
 8005a70:	460e      	mov	r6, r1
 8005a72:	f8de 5000 	ldr.w	r5, [lr]
 8005a76:	f856 8b04 	ldr.w	r8, [r6], #4
 8005a7a:	fbec 5468 	umaal	r5, r4, ip, r8
 8005a7e:	f84e 5b04 	str.w	r5, [lr], #4
 8005a82:	f1ba 0a04 	subs.w	sl, sl, #4
 8005a86:	d1f4      	bne.n	8005a72 <cmox_asm_mul+0x30>
 8005a88:	f8ce 4000 	str.w	r4, [lr]
 8005a8c:	f103 0304 	add.w	r3, r3, #4
 8005a90:	f1bb 0b04 	subs.w	fp, fp, #4
 8005a94:	d1e7      	bne.n	8005a66 <cmox_asm_mul+0x24>
 8005a96:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08005a9a <cmox_md_updateState_small>:
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	305c      	adds	r0, #92	@ 0x5c
 8005a9e:	f005 bc5c 	b.w	800b35a <__aeabi_memcpy>

08005aa2 <cmox_md_copyLastState_small>:
 8005aa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aa4:	6884      	ldr	r4, [r0, #8]
 8005aa6:	08a3      	lsrs	r3, r4, #2
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f004 0403 	and.w	r4, r4, #3
 8005aae:	e007      	b.n	8005ac0 <cmox_md_copyLastState_small+0x1e>
 8005ab0:	f100 055c 	add.w	r5, r0, #92	@ 0x5c
 8005ab4:	f855 6022 	ldr.w	r6, [r5, r2, lsl #2]
 8005ab8:	ba35      	rev	r5, r6
 8005aba:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 8005abe:	1c52      	adds	r2, r2, #1
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d3f5      	bcc.n	8005ab0 <cmox_md_copyLastState_small+0xe>
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	e00b      	b.n	8005ae0 <cmox_md_copyLastState_small+0x3e>
 8005ac8:	f100 055c 	add.w	r5, r0, #92	@ 0x5c
 8005acc:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8005ad0:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
 8005ad4:	00d5      	lsls	r5, r2, #3
 8005ad6:	f1c5 0518 	rsb	r5, r5, #24
 8005ada:	40ee      	lsrs	r6, r5
 8005adc:	55ce      	strb	r6, [r1, r7]
 8005ade:	1c52      	adds	r2, r2, #1
 8005ae0:	42a2      	cmp	r2, r4
 8005ae2:	d3f1      	bcc.n	8005ac8 <cmox_md_copyLastState_small+0x26>
 8005ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ae6 <cmox_md_padMsgLen_small>:
 8005ae6:	b530      	push	{r4, r5, lr}
 8005ae8:	68c4      	ldr	r4, [r0, #12]
 8005aea:	6903      	ldr	r3, [r0, #16]
 8005aec:	2200      	movs	r2, #0
 8005aee:	1ae3      	subs	r3, r4, r3
 8005af0:	18d5      	adds	r5, r2, r3
 8005af2:	5c8c      	ldrb	r4, [r1, r2]
 8005af4:	4405      	add	r5, r0
 8005af6:	1c52      	adds	r2, r2, #1
 8005af8:	2a08      	cmp	r2, #8
 8005afa:	772c      	strb	r4, [r5, #28]
 8005afc:	d3f8      	bcc.n	8005af0 <cmox_md_padMsgLen_small+0xa>
 8005afe:	bd30      	pop	{r4, r5, pc}

08005b00 <cmox_md_construct>:
 8005b00:	6003      	str	r3, [r0, #0]
 8005b02:	60c1      	str	r1, [r0, #12]
 8005b04:	6102      	str	r2, [r0, #16]
 8005b06:	4770      	bx	lr

08005b08 <cmox_md_init>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	4615      	mov	r5, r2
 8005b0e:	2200      	movs	r2, #0
 8005b10:	6062      	str	r2, [r4, #4]
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	4790      	blx	r2
 8005b18:	2000      	movs	r0, #0
 8005b1a:	6160      	str	r0, [r4, #20]
 8005b1c:	61a0      	str	r0, [r4, #24]
 8005b1e:	60a5      	str	r5, [r4, #8]
 8005b20:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8005b24:	bd32      	pop	{r1, r4, r5, pc}

08005b26 <cmox_md_setTagSize>:
 8005b26:	6081      	str	r1, [r0, #8]
 8005b28:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8005b2c:	4770      	bx	lr
	...

08005b30 <cmox_md_append>:
 8005b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b34:	4604      	mov	r4, r0
 8005b36:	7920      	ldrb	r0, [r4, #4]
 8005b38:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8005b3c:	0745      	lsls	r5, r0, #29
 8005b3e:	bf48      	it	mi
 8005b40:	4824      	ldrmi	r0, [pc, #144]	@ (8005bd4 <cmox_md_append+0xa4>)
 8005b42:	d445      	bmi.n	8005bd0 <cmox_md_append+0xa0>
 8005b44:	6966      	ldr	r6, [r4, #20]
 8005b46:	461d      	mov	r5, r3
 8005b48:	f1a8 0001 	sub.w	r0, r8, #1
 8005b4c:	ea00 03d6 	and.w	r3, r0, r6, lsr #3
 8005b50:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 8005b54:	ebb6 0fc5 	cmp.w	r6, r5, lsl #3
 8005b58:	6166      	str	r6, [r4, #20]
 8005b5a:	d202      	bcs.n	8005b62 <cmox_md_append+0x32>
 8005b5c:	69a6      	ldr	r6, [r4, #24]
 8005b5e:	1c76      	adds	r6, r6, #1
 8005b60:	61a6      	str	r6, [r4, #24]
 8005b62:	4617      	mov	r7, r2
 8005b64:	69a6      	ldr	r6, [r4, #24]
 8005b66:	eb06 7655 	add.w	r6, r6, r5, lsr #29
 8005b6a:	61a6      	str	r6, [r4, #24]
 8005b6c:	460e      	mov	r6, r1
 8005b6e:	18e9      	adds	r1, r5, r3
 8005b70:	4288      	cmp	r0, r1
 8005b72:	d225      	bcs.n	8005bc0 <cmox_md_append+0x90>
 8005b74:	eba8 0903 	sub.w	r9, r8, r3
 8005b78:	464a      	mov	r2, r9
 8005b7a:	4631      	mov	r1, r6
 8005b7c:	18f8      	adds	r0, r7, r3
 8005b7e:	f005 fbec 	bl	800b35a <__aeabi_memcpy>
 8005b82:	6822      	ldr	r2, [r4, #0]
 8005b84:	6813      	ldr	r3, [r2, #0]
 8005b86:	4639      	mov	r1, r7
 8005b88:	e00f      	b.n	8005baa <cmox_md_append+0x7a>
 8005b8a:	4642      	mov	r2, r8
 8005b8c:	4638      	mov	r0, r7
 8005b8e:	f005 fbe4 	bl	800b35a <__aeabi_memcpy>
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	4639      	mov	r1, r7
 8005b98:	4620      	mov	r0, r4
 8005b9a:	4790      	blx	r2
 8005b9c:	e007      	b.n	8005bae <cmox_md_append+0x7e>
 8005b9e:	1831      	adds	r1, r6, r0
 8005ba0:	f011 0003 	ands.w	r0, r1, #3
 8005ba4:	d1f1      	bne.n	8005b8a <cmox_md_append+0x5a>
 8005ba6:	6822      	ldr	r2, [r4, #0]
 8005ba8:	6813      	ldr	r3, [r2, #0]
 8005baa:	4620      	mov	r0, r4
 8005bac:	4798      	blx	r3
 8005bae:	4648      	mov	r0, r9
 8005bb0:	eb00 0908 	add.w	r9, r0, r8
 8005bb4:	f1a9 0101 	sub.w	r1, r9, #1
 8005bb8:	42a9      	cmp	r1, r5
 8005bba:	d3f0      	bcc.n	8005b9e <cmox_md_append+0x6e>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	e000      	b.n	8005bc2 <cmox_md_append+0x92>
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	1a2a      	subs	r2, r5, r0
 8005bc4:	1831      	adds	r1, r6, r0
 8005bc6:	18f8      	adds	r0, r7, r3
 8005bc8:	f005 fbc7 	bl	800b35a <__aeabi_memcpy>
 8005bcc:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8005bd0:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
 8005bd4:	00020004 	.word	0x00020004

08005bd8 <cmox_md_generateTag>:
 8005bd8:	e92d 4ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bdc:	4602      	mov	r2, r0
 8005bde:	b085      	sub	sp, #20
 8005be0:	68d0      	ldr	r0, [r2, #12]
 8005be2:	6913      	ldr	r3, [r2, #16]
 8005be4:	f8df c16c 	ldr.w	ip, [pc, #364]	@ 8005d54 <cmox_md_generateTag+0x17c>
 8005be8:	f8df 816c 	ldr.w	r8, [pc, #364]	@ 8005d58 <cmox_md_generateTag+0x180>
 8005bec:	eba0 0a03 	sub.w	sl, r0, r3
 8005bf0:	6850      	ldr	r0, [r2, #4]
 8005bf2:	f040 0004 	orr.w	r0, r0, #4
 8005bf6:	6050      	str	r0, [r2, #4]
 8005bf8:	2700      	movs	r7, #0
 8005bfa:	a803      	add	r0, sp, #12
 8005bfc:	9002      	str	r0, [sp, #8]
 8005bfe:	f10d 0e0c 	add.w	lr, sp, #12
 8005c02:	e9d8 3400 	ldrd	r3, r4, [r8]
 8005c06:	a803      	add	r0, sp, #12
 8005c08:	4d54      	ldr	r5, [pc, #336]	@ (8005d5c <cmox_md_generateTag+0x184>)
 8005c0a:	e9c0 3400 	strd	r3, r4, [r0]
 8005c0e:	7828      	ldrb	r0, [r5, #0]
 8005c10:	4d53      	ldr	r5, [pc, #332]	@ (8005d60 <cmox_md_generateTag+0x188>)
 8005c12:	2800      	cmp	r0, #0
 8005c14:	bf0c      	ite	eq
 8005c16:	2300      	moveq	r3, #0
 8005c18:	2304      	movne	r3, #4
 8005c1a:	4699      	mov	r9, r3
 8005c1c:	f85c 3003 	ldr.w	r3, [ip, r3]
 8005c20:	f85e 4009 	ldr.w	r4, [lr, r9]
 8005c24:	4423      	add	r3, r4
 8005c26:	2601      	movs	r6, #1
 8005c28:	601d      	str	r5, [r3, #0]
 8005c2a:	681c      	ldr	r4, [r3, #0]
 8005c2c:	609e      	str	r6, [r3, #8]
 8005c2e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8005c32:	9d03      	ldr	r5, [sp, #12]
 8005c34:	f8dc 9000 	ldr.w	r9, [ip]
 8005c38:	f8de 6004 	ldr.w	r6, [lr, #4]
 8005c3c:	405d      	eors	r5, r3
 8005c3e:	4065      	eors	r5, r4
 8005c40:	4c48      	ldr	r4, [pc, #288]	@ (8005d64 <cmox_md_generateTag+0x18c>)
 8005c42:	4065      	eors	r5, r4
 8005c44:	ea89 0606 	eor.w	r6, r9, r6
 8005c48:	4c47      	ldr	r4, [pc, #284]	@ (8005d68 <cmox_md_generateTag+0x190>)
 8005c4a:	4066      	eors	r6, r4
 8005c4c:	1975      	adds	r5, r6, r5
 8005c4e:	4c47      	ldr	r4, [pc, #284]	@ (8005d6c <cmox_md_generateTag+0x194>)
 8005c50:	4065      	eors	r5, r4
 8005c52:	e9d8 6b00 	ldrd	r6, fp, [r8]
 8005c56:	ac03      	add	r4, sp, #12
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	e9c4 6b00 	strd	r6, fp, [r4]
 8005c5e:	bf0e      	itee	eq
 8005c60:	2400      	moveq	r4, #0
 8005c62:	2004      	movne	r0, #4
 8005c64:	2404      	movne	r4, #4
 8005c66:	9e02      	ldr	r6, [sp, #8]
 8005c68:	f85c 0000 	ldr.w	r0, [ip, r0]
 8005c6c:	5934      	ldr	r4, [r6, r4]
 8005c6e:	1820      	adds	r0, r4, r0
 8005c70:	4c3f      	ldr	r4, [pc, #252]	@ (8005d70 <cmox_md_generateTag+0x198>)
 8005c72:	6004      	str	r4, [r0, #0]
 8005c74:	2601      	movs	r6, #1
 8005c76:	6804      	ldr	r4, [r0, #0]
 8005c78:	6086      	str	r6, [r0, #8]
 8005c7a:	9803      	ldr	r0, [sp, #12]
 8005c7c:	9e02      	ldr	r6, [sp, #8]
 8005c7e:	4043      	eors	r3, r0
 8005c80:	4063      	eors	r3, r4
 8005c82:	4c38      	ldr	r4, [pc, #224]	@ (8005d64 <cmox_md_generateTag+0x18c>)
 8005c84:	6870      	ldr	r0, [r6, #4]
 8005c86:	4063      	eors	r3, r4
 8005c88:	ea89 0000 	eor.w	r0, r9, r0
 8005c8c:	4c36      	ldr	r4, [pc, #216]	@ (8005d68 <cmox_md_generateTag+0x190>)
 8005c8e:	4060      	eors	r0, r4
 8005c90:	4403      	add	r3, r0
 8005c92:	4838      	ldr	r0, [pc, #224]	@ (8005d74 <cmox_md_generateTag+0x19c>)
 8005c94:	4043      	eors	r3, r0
 8005c96:	0028      	movs	r0, r5
 8005c98:	bf18      	it	ne
 8005c9a:	2001      	movne	r0, #1
 8005c9c:	1e5b      	subs	r3, r3, #1
 8005c9e:	419b      	sbcs	r3, r3
 8005ca0:	2f04      	cmp	r7, #4
 8005ca2:	bf2c      	ite	cs
 8005ca4:	b2c0      	uxtbcs	r0, r0
 8005ca6:	0fd8      	lsrcc	r0, r3, #31
 8005ca8:	f102 0314 	add.w	r3, r2, #20
 8005cac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005cb0:	f007 0303 	and.w	r3, r7, #3
 8005cb4:	f1c3 0303 	rsb	r3, r3, #3
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	40d8      	lsrs	r0, r3
 8005cbc:	f80d 0007 	strb.w	r0, [sp, r7]
 8005cc0:	1c7f      	adds	r7, r7, #1
 8005cc2:	2f08      	cmp	r7, #8
 8005cc4:	d39d      	bcc.n	8005c02 <cmox_md_generateTag+0x2a>
 8005cc6:	4615      	mov	r5, r2
 8005cc8:	460c      	mov	r4, r1
 8005cca:	696a      	ldr	r2, [r5, #20]
 8005ccc:	69ab      	ldr	r3, [r5, #24]
 8005cce:	68e8      	ldr	r0, [r5, #12]
 8005cd0:	08d2      	lsrs	r2, r2, #3
 8005cd2:	ea42 7243 	orr.w	r2, r2, r3, lsl #29
 8005cd6:	1e40      	subs	r0, r0, #1
 8005cd8:	ea00 0702 	and.w	r7, r0, r2
 8005cdc:	2300      	movs	r3, #0
 8005cde:	4002      	ands	r2, r0
 8005ce0:	429b      	cmp	r3, r3
 8005ce2:	d80a      	bhi.n	8005cfa <cmox_md_generateTag+0x122>
 8005ce4:	4552      	cmp	r2, sl
 8005ce6:	d208      	bcs.n	8005cfa <cmox_md_generateTag+0x122>
 8005ce8:	2080      	movs	r0, #128	@ 0x80
 8005cea:	55e0      	strb	r0, [r4, r7]
 8005cec:	1c7f      	adds	r7, r7, #1
 8005cee:	4557      	cmp	r7, sl
 8005cf0:	d216      	bcs.n	8005d20 <cmox_md_generateTag+0x148>
 8005cf2:	ebaa 0107 	sub.w	r1, sl, r7
 8005cf6:	19e0      	adds	r0, r4, r7
 8005cf8:	e010      	b.n	8005d1c <cmox_md_generateTag+0x144>
 8005cfa:	2080      	movs	r0, #128	@ 0x80
 8005cfc:	55e0      	strb	r0, [r4, r7]
 8005cfe:	e000      	b.n	8005d02 <cmox_md_generateTag+0x12a>
 8005d00:	55e3      	strb	r3, [r4, r7]
 8005d02:	68e8      	ldr	r0, [r5, #12]
 8005d04:	1c7f      	adds	r7, r7, #1
 8005d06:	4287      	cmp	r7, r0
 8005d08:	d3fa      	bcc.n	8005d00 <cmox_md_generateTag+0x128>
 8005d0a:	682a      	ldr	r2, [r5, #0]
 8005d0c:	6813      	ldr	r3, [r2, #0]
 8005d0e:	4628      	mov	r0, r5
 8005d10:	4798      	blx	r3
 8005d12:	f1ba 0f00 	cmp.w	sl, #0
 8005d16:	d003      	beq.n	8005d20 <cmox_md_generateTag+0x148>
 8005d18:	4651      	mov	r1, sl
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f005 fb1f 	bl	800b35e <__aeabi_memclr>
 8005d20:	682a      	ldr	r2, [r5, #0]
 8005d22:	9e06      	ldr	r6, [sp, #24]
 8005d24:	9f05      	ldr	r7, [sp, #20]
 8005d26:	6893      	ldr	r3, [r2, #8]
 8005d28:	4669      	mov	r1, sp
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	4798      	blx	r3
 8005d2e:	682a      	ldr	r2, [r5, #0]
 8005d30:	f8d2 9000 	ldr.w	r9, [r2]
 8005d34:	4621      	mov	r1, r4
 8005d36:	4628      	mov	r0, r5
 8005d38:	47c8      	blx	r9
 8005d3a:	682b      	ldr	r3, [r5, #0]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	4639      	mov	r1, r7
 8005d40:	4628      	mov	r0, r5
 8005d42:	4790      	blx	r2
 8005d44:	b10e      	cbz	r6, 8005d4a <cmox_md_generateTag+0x172>
 8005d46:	68a8      	ldr	r0, [r5, #8]
 8005d48:	6030      	str	r0, [r6, #0]
 8005d4a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8005d4e:	b007      	add	sp, #28
 8005d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d54:	0800f370 	.word	0x0800f370
 8005d58:	08005d78 	.word	0x08005d78
 8005d5c:	200001f0 	.word	0x200001f0
 8005d60:	9310c55f 	.word	0x9310c55f
 8005d64:	12008504 	.word	0x12008504
 8005d68:	7a0168fc 	.word	0x7a0168fc
 8005d6c:	ff24f5c0 	.word	0xff24f5c0
 8005d70:	d433af24 	.word	0xd433af24
 8005d74:	8b69af26 	.word	0x8b69af26
 8005d78:	0101b004 	.word	0x0101b004
 8005d7c:	45011700 	.word	0x45011700

08005d80 <strcmp>:
 8005d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d88:	2a01      	cmp	r2, #1
 8005d8a:	bf28      	it	cs
 8005d8c:	429a      	cmpcs	r2, r3
 8005d8e:	d0f7      	beq.n	8005d80 <strcmp>
 8005d90:	1ad0      	subs	r0, r2, r3
 8005d92:	4770      	bx	lr
	...

08005da0 <memchr>:
 8005da0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8005da4:	2a10      	cmp	r2, #16
 8005da6:	db2b      	blt.n	8005e00 <memchr+0x60>
 8005da8:	f010 0f07 	tst.w	r0, #7
 8005dac:	d008      	beq.n	8005dc0 <memchr+0x20>
 8005dae:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005db2:	3a01      	subs	r2, #1
 8005db4:	428b      	cmp	r3, r1
 8005db6:	d02d      	beq.n	8005e14 <memchr+0x74>
 8005db8:	f010 0f07 	tst.w	r0, #7
 8005dbc:	b342      	cbz	r2, 8005e10 <memchr+0x70>
 8005dbe:	d1f6      	bne.n	8005dae <memchr+0xe>
 8005dc0:	b4f0      	push	{r4, r5, r6, r7}
 8005dc2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005dc6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8005dca:	f022 0407 	bic.w	r4, r2, #7
 8005dce:	f07f 0700 	mvns.w	r7, #0
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005dd8:	3c08      	subs	r4, #8
 8005dda:	ea85 0501 	eor.w	r5, r5, r1
 8005dde:	ea86 0601 	eor.w	r6, r6, r1
 8005de2:	fa85 f547 	uadd8	r5, r5, r7
 8005de6:	faa3 f587 	sel	r5, r3, r7
 8005dea:	fa86 f647 	uadd8	r6, r6, r7
 8005dee:	faa5 f687 	sel	r6, r5, r7
 8005df2:	b98e      	cbnz	r6, 8005e18 <memchr+0x78>
 8005df4:	d1ee      	bne.n	8005dd4 <memchr+0x34>
 8005df6:	bcf0      	pop	{r4, r5, r6, r7}
 8005df8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8005dfc:	f002 0207 	and.w	r2, r2, #7
 8005e00:	b132      	cbz	r2, 8005e10 <memchr+0x70>
 8005e02:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005e06:	3a01      	subs	r2, #1
 8005e08:	ea83 0301 	eor.w	r3, r3, r1
 8005e0c:	b113      	cbz	r3, 8005e14 <memchr+0x74>
 8005e0e:	d1f8      	bne.n	8005e02 <memchr+0x62>
 8005e10:	2000      	movs	r0, #0
 8005e12:	4770      	bx	lr
 8005e14:	3801      	subs	r0, #1
 8005e16:	4770      	bx	lr
 8005e18:	2d00      	cmp	r5, #0
 8005e1a:	bf06      	itte	eq
 8005e1c:	4635      	moveq	r5, r6
 8005e1e:	3803      	subeq	r0, #3
 8005e20:	3807      	subne	r0, #7
 8005e22:	f015 0f01 	tst.w	r5, #1
 8005e26:	d107      	bne.n	8005e38 <memchr+0x98>
 8005e28:	3001      	adds	r0, #1
 8005e2a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8005e2e:	bf02      	ittt	eq
 8005e30:	3001      	addeq	r0, #1
 8005e32:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8005e36:	3001      	addeq	r0, #1
 8005e38:	bcf0      	pop	{r4, r5, r6, r7}
 8005e3a:	3801      	subs	r0, #1
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop

08005e40 <strlen>:
 8005e40:	4603      	mov	r3, r0
 8005e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e46:	2a00      	cmp	r2, #0
 8005e48:	d1fb      	bne.n	8005e42 <strlen+0x2>
 8005e4a:	1a18      	subs	r0, r3, r0
 8005e4c:	3801      	subs	r0, #1
 8005e4e:	4770      	bx	lr

08005e50 <__aeabi_memset>:
 8005e50:	b470      	push	{r4, r5, r6}
 8005e52:	0784      	lsls	r4, r0, #30
 8005e54:	d046      	beq.n	8005ee4 <__aeabi_memset+0x94>
 8005e56:	1e4c      	subs	r4, r1, #1
 8005e58:	2900      	cmp	r1, #0
 8005e5a:	d041      	beq.n	8005ee0 <__aeabi_memset+0x90>
 8005e5c:	b2d5      	uxtb	r5, r2
 8005e5e:	4603      	mov	r3, r0
 8005e60:	e002      	b.n	8005e68 <__aeabi_memset+0x18>
 8005e62:	1e61      	subs	r1, r4, #1
 8005e64:	b3e4      	cbz	r4, 8005ee0 <__aeabi_memset+0x90>
 8005e66:	460c      	mov	r4, r1
 8005e68:	f803 5b01 	strb.w	r5, [r3], #1
 8005e6c:	0799      	lsls	r1, r3, #30
 8005e6e:	d1f8      	bne.n	8005e62 <__aeabi_memset+0x12>
 8005e70:	2c03      	cmp	r4, #3
 8005e72:	d92e      	bls.n	8005ed2 <__aeabi_memset+0x82>
 8005e74:	b2d5      	uxtb	r5, r2
 8005e76:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005e7a:	2c0f      	cmp	r4, #15
 8005e7c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005e80:	d919      	bls.n	8005eb6 <__aeabi_memset+0x66>
 8005e82:	4626      	mov	r6, r4
 8005e84:	f103 0110 	add.w	r1, r3, #16
 8005e88:	3e10      	subs	r6, #16
 8005e8a:	2e0f      	cmp	r6, #15
 8005e8c:	f841 5c10 	str.w	r5, [r1, #-16]
 8005e90:	f841 5c0c 	str.w	r5, [r1, #-12]
 8005e94:	f841 5c08 	str.w	r5, [r1, #-8]
 8005e98:	f841 5c04 	str.w	r5, [r1, #-4]
 8005e9c:	f101 0110 	add.w	r1, r1, #16
 8005ea0:	d8f2      	bhi.n	8005e88 <__aeabi_memset+0x38>
 8005ea2:	f1a4 0110 	sub.w	r1, r4, #16
 8005ea6:	f021 010f 	bic.w	r1, r1, #15
 8005eaa:	f004 040f 	and.w	r4, r4, #15
 8005eae:	3110      	adds	r1, #16
 8005eb0:	2c03      	cmp	r4, #3
 8005eb2:	440b      	add	r3, r1
 8005eb4:	d90d      	bls.n	8005ed2 <__aeabi_memset+0x82>
 8005eb6:	461e      	mov	r6, r3
 8005eb8:	4621      	mov	r1, r4
 8005eba:	3904      	subs	r1, #4
 8005ebc:	2903      	cmp	r1, #3
 8005ebe:	f846 5b04 	str.w	r5, [r6], #4
 8005ec2:	d8fa      	bhi.n	8005eba <__aeabi_memset+0x6a>
 8005ec4:	1f21      	subs	r1, r4, #4
 8005ec6:	f021 0103 	bic.w	r1, r1, #3
 8005eca:	3104      	adds	r1, #4
 8005ecc:	440b      	add	r3, r1
 8005ece:	f004 0403 	and.w	r4, r4, #3
 8005ed2:	b12c      	cbz	r4, 8005ee0 <__aeabi_memset+0x90>
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	441c      	add	r4, r3
 8005ed8:	f803 2b01 	strb.w	r2, [r3], #1
 8005edc:	42a3      	cmp	r3, r4
 8005ede:	d1fb      	bne.n	8005ed8 <__aeabi_memset+0x88>
 8005ee0:	bc70      	pop	{r4, r5, r6}
 8005ee2:	4770      	bx	lr
 8005ee4:	460c      	mov	r4, r1
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	e7c2      	b.n	8005e70 <__aeabi_memset+0x20>
	...

08005eec <__aeabi_drsub>:
 8005eec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8005ef0:	e002      	b.n	8005ef8 <__adddf3>
 8005ef2:	bf00      	nop

08005ef4 <__aeabi_dsub>:
 8005ef4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08005ef8 <__adddf3>:
 8005ef8:	b530      	push	{r4, r5, lr}
 8005efa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005efe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005f02:	ea94 0f05 	teq	r4, r5
 8005f06:	bf08      	it	eq
 8005f08:	ea90 0f02 	teqeq	r0, r2
 8005f0c:	bf1f      	itttt	ne
 8005f0e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005f12:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005f16:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005f1a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005f1e:	f000 80e2 	beq.w	80060e6 <__adddf3+0x1ee>
 8005f22:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005f26:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005f2a:	bfb8      	it	lt
 8005f2c:	426d      	neglt	r5, r5
 8005f2e:	dd0c      	ble.n	8005f4a <__adddf3+0x52>
 8005f30:	442c      	add	r4, r5
 8005f32:	ea80 0202 	eor.w	r2, r0, r2
 8005f36:	ea81 0303 	eor.w	r3, r1, r3
 8005f3a:	ea82 0000 	eor.w	r0, r2, r0
 8005f3e:	ea83 0101 	eor.w	r1, r3, r1
 8005f42:	ea80 0202 	eor.w	r2, r0, r2
 8005f46:	ea81 0303 	eor.w	r3, r1, r3
 8005f4a:	2d36      	cmp	r5, #54	@ 0x36
 8005f4c:	bf88      	it	hi
 8005f4e:	bd30      	pophi	{r4, r5, pc}
 8005f50:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8005f54:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005f58:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8005f5c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005f60:	d002      	beq.n	8005f68 <__adddf3+0x70>
 8005f62:	4240      	negs	r0, r0
 8005f64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005f68:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8005f6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005f70:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005f74:	d002      	beq.n	8005f7c <__adddf3+0x84>
 8005f76:	4252      	negs	r2, r2
 8005f78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005f7c:	ea94 0f05 	teq	r4, r5
 8005f80:	f000 80a7 	beq.w	80060d2 <__adddf3+0x1da>
 8005f84:	f1a4 0401 	sub.w	r4, r4, #1
 8005f88:	f1d5 0e20 	rsbs	lr, r5, #32
 8005f8c:	db0d      	blt.n	8005faa <__adddf3+0xb2>
 8005f8e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005f92:	fa22 f205 	lsr.w	r2, r2, r5
 8005f96:	1880      	adds	r0, r0, r2
 8005f98:	f141 0100 	adc.w	r1, r1, #0
 8005f9c:	fa03 f20e 	lsl.w	r2, r3, lr
 8005fa0:	1880      	adds	r0, r0, r2
 8005fa2:	fa43 f305 	asr.w	r3, r3, r5
 8005fa6:	4159      	adcs	r1, r3
 8005fa8:	e00e      	b.n	8005fc8 <__adddf3+0xd0>
 8005faa:	f1a5 0520 	sub.w	r5, r5, #32
 8005fae:	f10e 0e20 	add.w	lr, lr, #32
 8005fb2:	2a01      	cmp	r2, #1
 8005fb4:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005fb8:	bf28      	it	cs
 8005fba:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005fbe:	fa43 f305 	asr.w	r3, r3, r5
 8005fc2:	18c0      	adds	r0, r0, r3
 8005fc4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005fc8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8005fcc:	d507      	bpl.n	8005fde <__adddf3+0xe6>
 8005fce:	f04f 0e00 	mov.w	lr, #0
 8005fd2:	f1dc 0c00 	rsbs	ip, ip, #0
 8005fd6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005fda:	eb6e 0101 	sbc.w	r1, lr, r1
 8005fde:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8005fe2:	d31b      	bcc.n	800601c <__adddf3+0x124>
 8005fe4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8005fe8:	d30c      	bcc.n	8006004 <__adddf3+0x10c>
 8005fea:	0849      	lsrs	r1, r1, #1
 8005fec:	ea5f 0030 	movs.w	r0, r0, rrx
 8005ff0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005ff4:	f104 0401 	add.w	r4, r4, #1
 8005ff8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005ffc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8006000:	f080 809a 	bcs.w	8006138 <__adddf3+0x240>
 8006004:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8006008:	bf08      	it	eq
 800600a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800600e:	f150 0000 	adcs.w	r0, r0, #0
 8006012:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006016:	ea41 0105 	orr.w	r1, r1, r5
 800601a:	bd30      	pop	{r4, r5, pc}
 800601c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006020:	4140      	adcs	r0, r0
 8006022:	eb41 0101 	adc.w	r1, r1, r1
 8006026:	3c01      	subs	r4, #1
 8006028:	bf28      	it	cs
 800602a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800602e:	d2e9      	bcs.n	8006004 <__adddf3+0x10c>
 8006030:	f091 0f00 	teq	r1, #0
 8006034:	bf04      	itt	eq
 8006036:	4601      	moveq	r1, r0
 8006038:	2000      	moveq	r0, #0
 800603a:	fab1 f381 	clz	r3, r1
 800603e:	bf08      	it	eq
 8006040:	3320      	addeq	r3, #32
 8006042:	f1a3 030b 	sub.w	r3, r3, #11
 8006046:	f1b3 0220 	subs.w	r2, r3, #32
 800604a:	da0c      	bge.n	8006066 <__adddf3+0x16e>
 800604c:	320c      	adds	r2, #12
 800604e:	dd08      	ble.n	8006062 <__adddf3+0x16a>
 8006050:	f102 0c14 	add.w	ip, r2, #20
 8006054:	f1c2 020c 	rsb	r2, r2, #12
 8006058:	fa01 f00c 	lsl.w	r0, r1, ip
 800605c:	fa21 f102 	lsr.w	r1, r1, r2
 8006060:	e00c      	b.n	800607c <__adddf3+0x184>
 8006062:	f102 0214 	add.w	r2, r2, #20
 8006066:	bfd8      	it	le
 8006068:	f1c2 0c20 	rsble	ip, r2, #32
 800606c:	fa01 f102 	lsl.w	r1, r1, r2
 8006070:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006074:	bfdc      	itt	le
 8006076:	ea41 010c 	orrle.w	r1, r1, ip
 800607a:	4090      	lslle	r0, r2
 800607c:	1ae4      	subs	r4, r4, r3
 800607e:	bfa2      	ittt	ge
 8006080:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006084:	4329      	orrge	r1, r5
 8006086:	bd30      	popge	{r4, r5, pc}
 8006088:	ea6f 0404 	mvn.w	r4, r4
 800608c:	3c1f      	subs	r4, #31
 800608e:	da1c      	bge.n	80060ca <__adddf3+0x1d2>
 8006090:	340c      	adds	r4, #12
 8006092:	dc0e      	bgt.n	80060b2 <__adddf3+0x1ba>
 8006094:	f104 0414 	add.w	r4, r4, #20
 8006098:	f1c4 0220 	rsb	r2, r4, #32
 800609c:	fa20 f004 	lsr.w	r0, r0, r4
 80060a0:	fa01 f302 	lsl.w	r3, r1, r2
 80060a4:	ea40 0003 	orr.w	r0, r0, r3
 80060a8:	fa21 f304 	lsr.w	r3, r1, r4
 80060ac:	ea45 0103 	orr.w	r1, r5, r3
 80060b0:	bd30      	pop	{r4, r5, pc}
 80060b2:	f1c4 040c 	rsb	r4, r4, #12
 80060b6:	f1c4 0220 	rsb	r2, r4, #32
 80060ba:	fa20 f002 	lsr.w	r0, r0, r2
 80060be:	fa01 f304 	lsl.w	r3, r1, r4
 80060c2:	ea40 0003 	orr.w	r0, r0, r3
 80060c6:	4629      	mov	r1, r5
 80060c8:	bd30      	pop	{r4, r5, pc}
 80060ca:	fa21 f004 	lsr.w	r0, r1, r4
 80060ce:	4629      	mov	r1, r5
 80060d0:	bd30      	pop	{r4, r5, pc}
 80060d2:	f094 0f00 	teq	r4, #0
 80060d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80060da:	bf06      	itte	eq
 80060dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80060e0:	3401      	addeq	r4, #1
 80060e2:	3d01      	subne	r5, #1
 80060e4:	e74e      	b.n	8005f84 <__adddf3+0x8c>
 80060e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80060ea:	bf18      	it	ne
 80060ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80060f0:	d029      	beq.n	8006146 <__adddf3+0x24e>
 80060f2:	ea94 0f05 	teq	r4, r5
 80060f6:	bf08      	it	eq
 80060f8:	ea90 0f02 	teqeq	r0, r2
 80060fc:	d005      	beq.n	800610a <__adddf3+0x212>
 80060fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8006102:	bf04      	itt	eq
 8006104:	4619      	moveq	r1, r3
 8006106:	4610      	moveq	r0, r2
 8006108:	bd30      	pop	{r4, r5, pc}
 800610a:	ea91 0f03 	teq	r1, r3
 800610e:	bf1e      	ittt	ne
 8006110:	2100      	movne	r1, #0
 8006112:	2000      	movne	r0, #0
 8006114:	bd30      	popne	{r4, r5, pc}
 8006116:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800611a:	d105      	bne.n	8006128 <__adddf3+0x230>
 800611c:	0040      	lsls	r0, r0, #1
 800611e:	4149      	adcs	r1, r1
 8006120:	bf28      	it	cs
 8006122:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8006126:	bd30      	pop	{r4, r5, pc}
 8006128:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800612c:	bf3c      	itt	cc
 800612e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8006132:	bd30      	popcc	{r4, r5, pc}
 8006134:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8006138:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800613c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006140:	f04f 0000 	mov.w	r0, #0
 8006144:	bd30      	pop	{r4, r5, pc}
 8006146:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800614a:	bf1a      	itte	ne
 800614c:	4619      	movne	r1, r3
 800614e:	4610      	movne	r0, r2
 8006150:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006154:	bf1c      	itt	ne
 8006156:	460b      	movne	r3, r1
 8006158:	4602      	movne	r2, r0
 800615a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800615e:	bf06      	itte	eq
 8006160:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006164:	ea91 0f03 	teqeq	r1, r3
 8006168:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800616c:	bd30      	pop	{r4, r5, pc}
 800616e:	bf00      	nop

08006170 <__aeabi_ui2d>:
 8006170:	f090 0f00 	teq	r0, #0
 8006174:	bf04      	itt	eq
 8006176:	2100      	moveq	r1, #0
 8006178:	4770      	bxeq	lr
 800617a:	b530      	push	{r4, r5, lr}
 800617c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8006180:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8006184:	f04f 0500 	mov.w	r5, #0
 8006188:	f04f 0100 	mov.w	r1, #0
 800618c:	e750      	b.n	8006030 <__adddf3+0x138>
 800618e:	bf00      	nop

08006190 <__aeabi_i2d>:
 8006190:	f090 0f00 	teq	r0, #0
 8006194:	bf04      	itt	eq
 8006196:	2100      	moveq	r1, #0
 8006198:	4770      	bxeq	lr
 800619a:	b530      	push	{r4, r5, lr}
 800619c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80061a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80061a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80061a8:	bf48      	it	mi
 80061aa:	4240      	negmi	r0, r0
 80061ac:	f04f 0100 	mov.w	r1, #0
 80061b0:	e73e      	b.n	8006030 <__adddf3+0x138>
 80061b2:	bf00      	nop

080061b4 <__aeabi_f2d>:
 80061b4:	0042      	lsls	r2, r0, #1
 80061b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80061ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80061be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80061c2:	bf1f      	itttt	ne
 80061c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80061c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80061cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80061d0:	4770      	bxne	lr
 80061d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80061d6:	bf08      	it	eq
 80061d8:	4770      	bxeq	lr
 80061da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80061de:	bf04      	itt	eq
 80061e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80061e4:	4770      	bxeq	lr
 80061e6:	b530      	push	{r4, r5, lr}
 80061e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80061ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80061f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80061f4:	e71c      	b.n	8006030 <__adddf3+0x138>
 80061f6:	bf00      	nop

080061f8 <__aeabi_ul2d>:
 80061f8:	ea50 0201 	orrs.w	r2, r0, r1
 80061fc:	bf08      	it	eq
 80061fe:	4770      	bxeq	lr
 8006200:	b530      	push	{r4, r5, lr}
 8006202:	f04f 0500 	mov.w	r5, #0
 8006206:	e00a      	b.n	800621e <__aeabi_l2d+0x16>

08006208 <__aeabi_l2d>:
 8006208:	ea50 0201 	orrs.w	r2, r0, r1
 800620c:	bf08      	it	eq
 800620e:	4770      	bxeq	lr
 8006210:	b530      	push	{r4, r5, lr}
 8006212:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8006216:	d502      	bpl.n	800621e <__aeabi_l2d+0x16>
 8006218:	4240      	negs	r0, r0
 800621a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800621e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8006222:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8006226:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800622a:	f43f aed8 	beq.w	8005fde <__adddf3+0xe6>
 800622e:	f04f 0203 	mov.w	r2, #3
 8006232:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006236:	bf18      	it	ne
 8006238:	3203      	addne	r2, #3
 800623a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800623e:	bf18      	it	ne
 8006240:	3203      	addne	r2, #3
 8006242:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006246:	f1c2 0320 	rsb	r3, r2, #32
 800624a:	fa00 fc03 	lsl.w	ip, r0, r3
 800624e:	fa20 f002 	lsr.w	r0, r0, r2
 8006252:	fa01 fe03 	lsl.w	lr, r1, r3
 8006256:	ea40 000e 	orr.w	r0, r0, lr
 800625a:	fa21 f102 	lsr.w	r1, r1, r2
 800625e:	4414      	add	r4, r2
 8006260:	e6bd      	b.n	8005fde <__adddf3+0xe6>
 8006262:	bf00      	nop

08006264 <__aeabi_dmul>:
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800626a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800626e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006272:	bf1d      	ittte	ne
 8006274:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006278:	ea94 0f0c 	teqne	r4, ip
 800627c:	ea95 0f0c 	teqne	r5, ip
 8006280:	f000 f8de 	bleq	8006440 <__aeabi_dmul+0x1dc>
 8006284:	442c      	add	r4, r5
 8006286:	ea81 0603 	eor.w	r6, r1, r3
 800628a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800628e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006292:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006296:	bf18      	it	ne
 8006298:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800629c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80062a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062a4:	d038      	beq.n	8006318 <__aeabi_dmul+0xb4>
 80062a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80062aa:	f04f 0500 	mov.w	r5, #0
 80062ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80062b2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80062b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80062ba:	f04f 0600 	mov.w	r6, #0
 80062be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80062c2:	f09c 0f00 	teq	ip, #0
 80062c6:	bf18      	it	ne
 80062c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80062cc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80062d0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80062d4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80062d8:	d204      	bcs.n	80062e4 <__aeabi_dmul+0x80>
 80062da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80062de:	416d      	adcs	r5, r5
 80062e0:	eb46 0606 	adc.w	r6, r6, r6
 80062e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80062e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80062ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80062f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80062f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80062f8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80062fc:	bf88      	it	hi
 80062fe:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8006302:	d81e      	bhi.n	8006342 <__aeabi_dmul+0xde>
 8006304:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8006308:	bf08      	it	eq
 800630a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800630e:	f150 0000 	adcs.w	r0, r0, #0
 8006312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006316:	bd70      	pop	{r4, r5, r6, pc}
 8006318:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800631c:	ea46 0101 	orr.w	r1, r6, r1
 8006320:	ea40 0002 	orr.w	r0, r0, r2
 8006324:	ea81 0103 	eor.w	r1, r1, r3
 8006328:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800632c:	bfc2      	ittt	gt
 800632e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006332:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006336:	bd70      	popgt	{r4, r5, r6, pc}
 8006338:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800633c:	f04f 0e00 	mov.w	lr, #0
 8006340:	3c01      	subs	r4, #1
 8006342:	f300 80ab 	bgt.w	800649c <__aeabi_dmul+0x238>
 8006346:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800634a:	bfde      	ittt	le
 800634c:	2000      	movle	r0, #0
 800634e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8006352:	bd70      	pople	{r4, r5, r6, pc}
 8006354:	f1c4 0400 	rsb	r4, r4, #0
 8006358:	3c20      	subs	r4, #32
 800635a:	da35      	bge.n	80063c8 <__aeabi_dmul+0x164>
 800635c:	340c      	adds	r4, #12
 800635e:	dc1b      	bgt.n	8006398 <__aeabi_dmul+0x134>
 8006360:	f104 0414 	add.w	r4, r4, #20
 8006364:	f1c4 0520 	rsb	r5, r4, #32
 8006368:	fa00 f305 	lsl.w	r3, r0, r5
 800636c:	fa20 f004 	lsr.w	r0, r0, r4
 8006370:	fa01 f205 	lsl.w	r2, r1, r5
 8006374:	ea40 0002 	orr.w	r0, r0, r2
 8006378:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800637c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8006380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006384:	fa21 f604 	lsr.w	r6, r1, r4
 8006388:	eb42 0106 	adc.w	r1, r2, r6
 800638c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006390:	bf08      	it	eq
 8006392:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006396:	bd70      	pop	{r4, r5, r6, pc}
 8006398:	f1c4 040c 	rsb	r4, r4, #12
 800639c:	f1c4 0520 	rsb	r5, r4, #32
 80063a0:	fa00 f304 	lsl.w	r3, r0, r4
 80063a4:	fa20 f005 	lsr.w	r0, r0, r5
 80063a8:	fa01 f204 	lsl.w	r2, r1, r4
 80063ac:	ea40 0002 	orr.w	r0, r0, r2
 80063b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80063b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80063b8:	f141 0100 	adc.w	r1, r1, #0
 80063bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80063c0:	bf08      	it	eq
 80063c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80063c6:	bd70      	pop	{r4, r5, r6, pc}
 80063c8:	f1c4 0520 	rsb	r5, r4, #32
 80063cc:	fa00 f205 	lsl.w	r2, r0, r5
 80063d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80063d4:	fa20 f304 	lsr.w	r3, r0, r4
 80063d8:	fa01 f205 	lsl.w	r2, r1, r5
 80063dc:	ea43 0302 	orr.w	r3, r3, r2
 80063e0:	fa21 f004 	lsr.w	r0, r1, r4
 80063e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80063e8:	fa21 f204 	lsr.w	r2, r1, r4
 80063ec:	ea20 0002 	bic.w	r0, r0, r2
 80063f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80063f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80063f8:	bf08      	it	eq
 80063fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80063fe:	bd70      	pop	{r4, r5, r6, pc}
 8006400:	f094 0f00 	teq	r4, #0
 8006404:	d10f      	bne.n	8006426 <__aeabi_dmul+0x1c2>
 8006406:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800640a:	0040      	lsls	r0, r0, #1
 800640c:	eb41 0101 	adc.w	r1, r1, r1
 8006410:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8006414:	bf08      	it	eq
 8006416:	3c01      	subeq	r4, #1
 8006418:	d0f7      	beq.n	800640a <__aeabi_dmul+0x1a6>
 800641a:	ea41 0106 	orr.w	r1, r1, r6
 800641e:	f095 0f00 	teq	r5, #0
 8006422:	bf18      	it	ne
 8006424:	4770      	bxne	lr
 8006426:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800642a:	0052      	lsls	r2, r2, #1
 800642c:	eb43 0303 	adc.w	r3, r3, r3
 8006430:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8006434:	bf08      	it	eq
 8006436:	3d01      	subeq	r5, #1
 8006438:	d0f7      	beq.n	800642a <__aeabi_dmul+0x1c6>
 800643a:	ea43 0306 	orr.w	r3, r3, r6
 800643e:	4770      	bx	lr
 8006440:	ea94 0f0c 	teq	r4, ip
 8006444:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006448:	bf18      	it	ne
 800644a:	ea95 0f0c 	teqne	r5, ip
 800644e:	d00c      	beq.n	800646a <__aeabi_dmul+0x206>
 8006450:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006454:	bf18      	it	ne
 8006456:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800645a:	d1d1      	bne.n	8006400 <__aeabi_dmul+0x19c>
 800645c:	ea81 0103 	eor.w	r1, r1, r3
 8006460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8006464:	f04f 0000 	mov.w	r0, #0
 8006468:	bd70      	pop	{r4, r5, r6, pc}
 800646a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800646e:	bf06      	itte	eq
 8006470:	4610      	moveq	r0, r2
 8006472:	4619      	moveq	r1, r3
 8006474:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006478:	d019      	beq.n	80064ae <__aeabi_dmul+0x24a>
 800647a:	ea94 0f0c 	teq	r4, ip
 800647e:	d102      	bne.n	8006486 <__aeabi_dmul+0x222>
 8006480:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006484:	d113      	bne.n	80064ae <__aeabi_dmul+0x24a>
 8006486:	ea95 0f0c 	teq	r5, ip
 800648a:	d105      	bne.n	8006498 <__aeabi_dmul+0x234>
 800648c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006490:	bf1c      	itt	ne
 8006492:	4610      	movne	r0, r2
 8006494:	4619      	movne	r1, r3
 8006496:	d10a      	bne.n	80064ae <__aeabi_dmul+0x24a>
 8006498:	ea81 0103 	eor.w	r1, r1, r3
 800649c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80064a0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80064a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80064a8:	f04f 0000 	mov.w	r0, #0
 80064ac:	bd70      	pop	{r4, r5, r6, pc}
 80064ae:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80064b2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80064b6:	bd70      	pop	{r4, r5, r6, pc}

080064b8 <__aeabi_ddiv>:
 80064b8:	b570      	push	{r4, r5, r6, lr}
 80064ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80064be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80064c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80064c6:	bf1d      	ittte	ne
 80064c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80064cc:	ea94 0f0c 	teqne	r4, ip
 80064d0:	ea95 0f0c 	teqne	r5, ip
 80064d4:	f000 f8a7 	bleq	8006626 <__aeabi_ddiv+0x16e>
 80064d8:	eba4 0405 	sub.w	r4, r4, r5
 80064dc:	ea81 0e03 	eor.w	lr, r1, r3
 80064e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80064e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80064e8:	f000 8088 	beq.w	80065fc <__aeabi_ddiv+0x144>
 80064ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80064f0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80064f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80064f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80064fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006500:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006504:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006508:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800650c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8006510:	429d      	cmp	r5, r3
 8006512:	bf08      	it	eq
 8006514:	4296      	cmpeq	r6, r2
 8006516:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800651a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800651e:	d202      	bcs.n	8006526 <__aeabi_ddiv+0x6e>
 8006520:	085b      	lsrs	r3, r3, #1
 8006522:	ea4f 0232 	mov.w	r2, r2, rrx
 8006526:	1ab6      	subs	r6, r6, r2
 8006528:	eb65 0503 	sbc.w	r5, r5, r3
 800652c:	085b      	lsrs	r3, r3, #1
 800652e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006532:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006536:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800653a:	ebb6 0e02 	subs.w	lr, r6, r2
 800653e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006542:	bf22      	ittt	cs
 8006544:	1ab6      	subcs	r6, r6, r2
 8006546:	4675      	movcs	r5, lr
 8006548:	ea40 000c 	orrcs.w	r0, r0, ip
 800654c:	085b      	lsrs	r3, r3, #1
 800654e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006552:	ebb6 0e02 	subs.w	lr, r6, r2
 8006556:	eb75 0e03 	sbcs.w	lr, r5, r3
 800655a:	bf22      	ittt	cs
 800655c:	1ab6      	subcs	r6, r6, r2
 800655e:	4675      	movcs	r5, lr
 8006560:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006564:	085b      	lsrs	r3, r3, #1
 8006566:	ea4f 0232 	mov.w	r2, r2, rrx
 800656a:	ebb6 0e02 	subs.w	lr, r6, r2
 800656e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006572:	bf22      	ittt	cs
 8006574:	1ab6      	subcs	r6, r6, r2
 8006576:	4675      	movcs	r5, lr
 8006578:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800657c:	085b      	lsrs	r3, r3, #1
 800657e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006582:	ebb6 0e02 	subs.w	lr, r6, r2
 8006586:	eb75 0e03 	sbcs.w	lr, r5, r3
 800658a:	bf22      	ittt	cs
 800658c:	1ab6      	subcs	r6, r6, r2
 800658e:	4675      	movcs	r5, lr
 8006590:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006594:	ea55 0e06 	orrs.w	lr, r5, r6
 8006598:	d018      	beq.n	80065cc <__aeabi_ddiv+0x114>
 800659a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800659e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80065a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80065a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80065aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80065ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80065b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80065b6:	d1c0      	bne.n	800653a <__aeabi_ddiv+0x82>
 80065b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80065bc:	d10b      	bne.n	80065d6 <__aeabi_ddiv+0x11e>
 80065be:	ea41 0100 	orr.w	r1, r1, r0
 80065c2:	f04f 0000 	mov.w	r0, #0
 80065c6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80065ca:	e7b6      	b.n	800653a <__aeabi_ddiv+0x82>
 80065cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80065d0:	bf04      	itt	eq
 80065d2:	4301      	orreq	r1, r0
 80065d4:	2000      	moveq	r0, #0
 80065d6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80065da:	bf88      	it	hi
 80065dc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80065e0:	f63f aeaf 	bhi.w	8006342 <__aeabi_dmul+0xde>
 80065e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80065e8:	bf04      	itt	eq
 80065ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80065ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80065f2:	f150 0000 	adcs.w	r0, r0, #0
 80065f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80065fa:	bd70      	pop	{r4, r5, r6, pc}
 80065fc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8006600:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006604:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006608:	bfc2      	ittt	gt
 800660a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800660e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006612:	bd70      	popgt	{r4, r5, r6, pc}
 8006614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8006618:	f04f 0e00 	mov.w	lr, #0
 800661c:	3c01      	subs	r4, #1
 800661e:	e690      	b.n	8006342 <__aeabi_dmul+0xde>
 8006620:	ea45 0e06 	orr.w	lr, r5, r6
 8006624:	e68d      	b.n	8006342 <__aeabi_dmul+0xde>
 8006626:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800662a:	ea94 0f0c 	teq	r4, ip
 800662e:	bf08      	it	eq
 8006630:	ea95 0f0c 	teqeq	r5, ip
 8006634:	f43f af3b 	beq.w	80064ae <__aeabi_dmul+0x24a>
 8006638:	ea94 0f0c 	teq	r4, ip
 800663c:	d10a      	bne.n	8006654 <__aeabi_ddiv+0x19c>
 800663e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006642:	f47f af34 	bne.w	80064ae <__aeabi_dmul+0x24a>
 8006646:	ea95 0f0c 	teq	r5, ip
 800664a:	f47f af25 	bne.w	8006498 <__aeabi_dmul+0x234>
 800664e:	4610      	mov	r0, r2
 8006650:	4619      	mov	r1, r3
 8006652:	e72c      	b.n	80064ae <__aeabi_dmul+0x24a>
 8006654:	ea95 0f0c 	teq	r5, ip
 8006658:	d106      	bne.n	8006668 <__aeabi_ddiv+0x1b0>
 800665a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800665e:	f43f aefd 	beq.w	800645c <__aeabi_dmul+0x1f8>
 8006662:	4610      	mov	r0, r2
 8006664:	4619      	mov	r1, r3
 8006666:	e722      	b.n	80064ae <__aeabi_dmul+0x24a>
 8006668:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800666c:	bf18      	it	ne
 800666e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006672:	f47f aec5 	bne.w	8006400 <__aeabi_dmul+0x19c>
 8006676:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800667a:	f47f af0d 	bne.w	8006498 <__aeabi_dmul+0x234>
 800667e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006682:	f47f aeeb 	bne.w	800645c <__aeabi_dmul+0x1f8>
 8006686:	e712      	b.n	80064ae <__aeabi_dmul+0x24a>

08006688 <__gedf2>:
 8006688:	f04f 3cff 	mov.w	ip, #4294967295
 800668c:	e006      	b.n	800669c <__cmpdf2+0x4>
 800668e:	bf00      	nop

08006690 <__ledf2>:
 8006690:	f04f 0c01 	mov.w	ip, #1
 8006694:	e002      	b.n	800669c <__cmpdf2+0x4>
 8006696:	bf00      	nop

08006698 <__cmpdf2>:
 8006698:	f04f 0c01 	mov.w	ip, #1
 800669c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80066a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80066a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80066a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80066ac:	bf18      	it	ne
 80066ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80066b2:	d01b      	beq.n	80066ec <__cmpdf2+0x54>
 80066b4:	b001      	add	sp, #4
 80066b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80066ba:	bf0c      	ite	eq
 80066bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80066c0:	ea91 0f03 	teqne	r1, r3
 80066c4:	bf02      	ittt	eq
 80066c6:	ea90 0f02 	teqeq	r0, r2
 80066ca:	2000      	moveq	r0, #0
 80066cc:	4770      	bxeq	lr
 80066ce:	f110 0f00 	cmn.w	r0, #0
 80066d2:	ea91 0f03 	teq	r1, r3
 80066d6:	bf58      	it	pl
 80066d8:	4299      	cmppl	r1, r3
 80066da:	bf08      	it	eq
 80066dc:	4290      	cmpeq	r0, r2
 80066de:	bf2c      	ite	cs
 80066e0:	17d8      	asrcs	r0, r3, #31
 80066e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80066e6:	f040 0001 	orr.w	r0, r0, #1
 80066ea:	4770      	bx	lr
 80066ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80066f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80066f4:	d102      	bne.n	80066fc <__cmpdf2+0x64>
 80066f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80066fa:	d107      	bne.n	800670c <__cmpdf2+0x74>
 80066fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006700:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006704:	d1d6      	bne.n	80066b4 <__cmpdf2+0x1c>
 8006706:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800670a:	d0d3      	beq.n	80066b4 <__cmpdf2+0x1c>
 800670c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop

08006714 <__aeabi_cdrcmple>:
 8006714:	4684      	mov	ip, r0
 8006716:	4610      	mov	r0, r2
 8006718:	4662      	mov	r2, ip
 800671a:	468c      	mov	ip, r1
 800671c:	4619      	mov	r1, r3
 800671e:	4663      	mov	r3, ip
 8006720:	e000      	b.n	8006724 <__aeabi_cdcmpeq>
 8006722:	bf00      	nop

08006724 <__aeabi_cdcmpeq>:
 8006724:	b501      	push	{r0, lr}
 8006726:	f7ff ffb7 	bl	8006698 <__cmpdf2>
 800672a:	2800      	cmp	r0, #0
 800672c:	bf48      	it	mi
 800672e:	f110 0f00 	cmnmi.w	r0, #0
 8006732:	bd01      	pop	{r0, pc}

08006734 <__aeabi_dcmpeq>:
 8006734:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006738:	f7ff fff4 	bl	8006724 <__aeabi_cdcmpeq>
 800673c:	bf0c      	ite	eq
 800673e:	2001      	moveq	r0, #1
 8006740:	2000      	movne	r0, #0
 8006742:	f85d fb08 	ldr.w	pc, [sp], #8
 8006746:	bf00      	nop

08006748 <__aeabi_dcmplt>:
 8006748:	f84d ed08 	str.w	lr, [sp, #-8]!
 800674c:	f7ff ffea 	bl	8006724 <__aeabi_cdcmpeq>
 8006750:	bf34      	ite	cc
 8006752:	2001      	movcc	r0, #1
 8006754:	2000      	movcs	r0, #0
 8006756:	f85d fb08 	ldr.w	pc, [sp], #8
 800675a:	bf00      	nop

0800675c <__aeabi_dcmple>:
 800675c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006760:	f7ff ffe0 	bl	8006724 <__aeabi_cdcmpeq>
 8006764:	bf94      	ite	ls
 8006766:	2001      	movls	r0, #1
 8006768:	2000      	movhi	r0, #0
 800676a:	f85d fb08 	ldr.w	pc, [sp], #8
 800676e:	bf00      	nop

08006770 <__aeabi_dcmpge>:
 8006770:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006774:	f7ff ffce 	bl	8006714 <__aeabi_cdrcmple>
 8006778:	bf94      	ite	ls
 800677a:	2001      	movls	r0, #1
 800677c:	2000      	movhi	r0, #0
 800677e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006782:	bf00      	nop

08006784 <__aeabi_dcmpgt>:
 8006784:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006788:	f7ff ffc4 	bl	8006714 <__aeabi_cdrcmple>
 800678c:	bf34      	ite	cc
 800678e:	2001      	movcc	r0, #1
 8006790:	2000      	movcs	r0, #0
 8006792:	f85d fb08 	ldr.w	pc, [sp], #8
 8006796:	bf00      	nop

08006798 <__aeabi_dcmpun>:
 8006798:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800679c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80067a0:	d102      	bne.n	80067a8 <__aeabi_dcmpun+0x10>
 80067a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80067a6:	d10a      	bne.n	80067be <__aeabi_dcmpun+0x26>
 80067a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80067ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80067b0:	d102      	bne.n	80067b8 <__aeabi_dcmpun+0x20>
 80067b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80067b6:	d102      	bne.n	80067be <__aeabi_dcmpun+0x26>
 80067b8:	f04f 0000 	mov.w	r0, #0
 80067bc:	4770      	bx	lr
 80067be:	f04f 0001 	mov.w	r0, #1
 80067c2:	4770      	bx	lr

080067c4 <__aeabi_d2iz>:
 80067c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80067c8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80067cc:	d215      	bcs.n	80067fa <__aeabi_d2iz+0x36>
 80067ce:	d511      	bpl.n	80067f4 <__aeabi_d2iz+0x30>
 80067d0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80067d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80067d8:	d912      	bls.n	8006800 <__aeabi_d2iz+0x3c>
 80067da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80067de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80067e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80067e6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80067ea:	fa23 f002 	lsr.w	r0, r3, r2
 80067ee:	bf18      	it	ne
 80067f0:	4240      	negne	r0, r0
 80067f2:	4770      	bx	lr
 80067f4:	f04f 0000 	mov.w	r0, #0
 80067f8:	4770      	bx	lr
 80067fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80067fe:	d105      	bne.n	800680c <__aeabi_d2iz+0x48>
 8006800:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8006804:	bf08      	it	eq
 8006806:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800680a:	4770      	bx	lr
 800680c:	f04f 0000 	mov.w	r0, #0
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop

08006814 <__aeabi_d2uiz>:
 8006814:	004a      	lsls	r2, r1, #1
 8006816:	d211      	bcs.n	800683c <__aeabi_d2uiz+0x28>
 8006818:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800681c:	d211      	bcs.n	8006842 <__aeabi_d2uiz+0x2e>
 800681e:	d50d      	bpl.n	800683c <__aeabi_d2uiz+0x28>
 8006820:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8006824:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006828:	d40e      	bmi.n	8006848 <__aeabi_d2uiz+0x34>
 800682a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800682e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006832:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006836:	fa23 f002 	lsr.w	r0, r3, r2
 800683a:	4770      	bx	lr
 800683c:	f04f 0000 	mov.w	r0, #0
 8006840:	4770      	bx	lr
 8006842:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006846:	d102      	bne.n	800684e <__aeabi_d2uiz+0x3a>
 8006848:	f04f 30ff 	mov.w	r0, #4294967295
 800684c:	4770      	bx	lr
 800684e:	f04f 0000 	mov.w	r0, #0
 8006852:	4770      	bx	lr

08006854 <__aeabi_d2f>:
 8006854:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006858:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800685c:	bf24      	itt	cs
 800685e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8006862:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8006866:	d90d      	bls.n	8006884 <__aeabi_d2f+0x30>
 8006868:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800686c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006870:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8006874:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8006878:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800687c:	bf08      	it	eq
 800687e:	f020 0001 	biceq.w	r0, r0, #1
 8006882:	4770      	bx	lr
 8006884:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8006888:	d121      	bne.n	80068ce <__aeabi_d2f+0x7a>
 800688a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800688e:	bfbc      	itt	lt
 8006890:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8006894:	4770      	bxlt	lr
 8006896:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800689a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800689e:	f1c2 0218 	rsb	r2, r2, #24
 80068a2:	f1c2 0c20 	rsb	ip, r2, #32
 80068a6:	fa10 f30c 	lsls.w	r3, r0, ip
 80068aa:	fa20 f002 	lsr.w	r0, r0, r2
 80068ae:	bf18      	it	ne
 80068b0:	f040 0001 	orrne.w	r0, r0, #1
 80068b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80068b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80068bc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80068c0:	ea40 000c 	orr.w	r0, r0, ip
 80068c4:	fa23 f302 	lsr.w	r3, r3, r2
 80068c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80068cc:	e7cc      	b.n	8006868 <__aeabi_d2f+0x14>
 80068ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80068d2:	d107      	bne.n	80068e4 <__aeabi_d2f+0x90>
 80068d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80068d8:	bf1e      	ittt	ne
 80068da:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80068de:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80068e2:	4770      	bxne	lr
 80068e4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80068e8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80068ec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop

080068f4 <__aeabi_uldivmod>:
 80068f4:	b953      	cbnz	r3, 800690c <__aeabi_uldivmod+0x18>
 80068f6:	b94a      	cbnz	r2, 800690c <__aeabi_uldivmod+0x18>
 80068f8:	2900      	cmp	r1, #0
 80068fa:	bf08      	it	eq
 80068fc:	2800      	cmpeq	r0, #0
 80068fe:	bf1c      	itt	ne
 8006900:	f04f 31ff 	movne.w	r1, #4294967295
 8006904:	f04f 30ff 	movne.w	r0, #4294967295
 8006908:	f000 b9a0 	b.w	8006c4c <__aeabi_idiv0>
 800690c:	f1ad 0c08 	sub.w	ip, sp, #8
 8006910:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006914:	f000 f83c 	bl	8006990 <__udivmoddi4>
 8006918:	f8dd e004 	ldr.w	lr, [sp, #4]
 800691c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006920:	b004      	add	sp, #16
 8006922:	4770      	bx	lr

08006924 <__aeabi_d2lz>:
 8006924:	b538      	push	{r3, r4, r5, lr}
 8006926:	2200      	movs	r2, #0
 8006928:	2300      	movs	r3, #0
 800692a:	4604      	mov	r4, r0
 800692c:	460d      	mov	r5, r1
 800692e:	f7ff ff0b 	bl	8006748 <__aeabi_dcmplt>
 8006932:	b928      	cbnz	r0, 8006940 <__aeabi_d2lz+0x1c>
 8006934:	4620      	mov	r0, r4
 8006936:	4629      	mov	r1, r5
 8006938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800693c:	f000 b80a 	b.w	8006954 <__aeabi_d2ulz>
 8006940:	4620      	mov	r0, r4
 8006942:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8006946:	f000 f805 	bl	8006954 <__aeabi_d2ulz>
 800694a:	4240      	negs	r0, r0
 800694c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006950:	bd38      	pop	{r3, r4, r5, pc}
 8006952:	bf00      	nop

08006954 <__aeabi_d2ulz>:
 8006954:	b5d0      	push	{r4, r6, r7, lr}
 8006956:	4b0c      	ldr	r3, [pc, #48]	@ (8006988 <__aeabi_d2ulz+0x34>)
 8006958:	2200      	movs	r2, #0
 800695a:	4606      	mov	r6, r0
 800695c:	460f      	mov	r7, r1
 800695e:	f7ff fc81 	bl	8006264 <__aeabi_dmul>
 8006962:	f7ff ff57 	bl	8006814 <__aeabi_d2uiz>
 8006966:	4604      	mov	r4, r0
 8006968:	f7ff fc02 	bl	8006170 <__aeabi_ui2d>
 800696c:	4b07      	ldr	r3, [pc, #28]	@ (800698c <__aeabi_d2ulz+0x38>)
 800696e:	2200      	movs	r2, #0
 8006970:	f7ff fc78 	bl	8006264 <__aeabi_dmul>
 8006974:	4602      	mov	r2, r0
 8006976:	460b      	mov	r3, r1
 8006978:	4630      	mov	r0, r6
 800697a:	4639      	mov	r1, r7
 800697c:	f7ff faba 	bl	8005ef4 <__aeabi_dsub>
 8006980:	f7ff ff48 	bl	8006814 <__aeabi_d2uiz>
 8006984:	4621      	mov	r1, r4
 8006986:	bdd0      	pop	{r4, r6, r7, pc}
 8006988:	3df00000 	.word	0x3df00000
 800698c:	41f00000 	.word	0x41f00000

08006990 <__udivmoddi4>:
 8006990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006994:	9d08      	ldr	r5, [sp, #32]
 8006996:	460c      	mov	r4, r1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d14e      	bne.n	8006a3a <__udivmoddi4+0xaa>
 800699c:	4694      	mov	ip, r2
 800699e:	458c      	cmp	ip, r1
 80069a0:	4686      	mov	lr, r0
 80069a2:	fab2 f282 	clz	r2, r2
 80069a6:	d962      	bls.n	8006a6e <__udivmoddi4+0xde>
 80069a8:	b14a      	cbz	r2, 80069be <__udivmoddi4+0x2e>
 80069aa:	f1c2 0320 	rsb	r3, r2, #32
 80069ae:	4091      	lsls	r1, r2
 80069b0:	fa20 f303 	lsr.w	r3, r0, r3
 80069b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80069b8:	4319      	orrs	r1, r3
 80069ba:	fa00 fe02 	lsl.w	lr, r0, r2
 80069be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80069c2:	fa1f f68c 	uxth.w	r6, ip
 80069c6:	fbb1 f4f7 	udiv	r4, r1, r7
 80069ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80069ce:	fb07 1114 	mls	r1, r7, r4, r1
 80069d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80069d6:	fb04 f106 	mul.w	r1, r4, r6
 80069da:	4299      	cmp	r1, r3
 80069dc:	d90a      	bls.n	80069f4 <__udivmoddi4+0x64>
 80069de:	eb1c 0303 	adds.w	r3, ip, r3
 80069e2:	f104 30ff 	add.w	r0, r4, #4294967295
 80069e6:	f080 8112 	bcs.w	8006c0e <__udivmoddi4+0x27e>
 80069ea:	4299      	cmp	r1, r3
 80069ec:	f240 810f 	bls.w	8006c0e <__udivmoddi4+0x27e>
 80069f0:	3c02      	subs	r4, #2
 80069f2:	4463      	add	r3, ip
 80069f4:	1a59      	subs	r1, r3, r1
 80069f6:	fa1f f38e 	uxth.w	r3, lr
 80069fa:	fbb1 f0f7 	udiv	r0, r1, r7
 80069fe:	fb07 1110 	mls	r1, r7, r0, r1
 8006a02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006a06:	fb00 f606 	mul.w	r6, r0, r6
 8006a0a:	429e      	cmp	r6, r3
 8006a0c:	d90a      	bls.n	8006a24 <__udivmoddi4+0x94>
 8006a0e:	eb1c 0303 	adds.w	r3, ip, r3
 8006a12:	f100 31ff 	add.w	r1, r0, #4294967295
 8006a16:	f080 80fc 	bcs.w	8006c12 <__udivmoddi4+0x282>
 8006a1a:	429e      	cmp	r6, r3
 8006a1c:	f240 80f9 	bls.w	8006c12 <__udivmoddi4+0x282>
 8006a20:	4463      	add	r3, ip
 8006a22:	3802      	subs	r0, #2
 8006a24:	1b9b      	subs	r3, r3, r6
 8006a26:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	b11d      	cbz	r5, 8006a36 <__udivmoddi4+0xa6>
 8006a2e:	40d3      	lsrs	r3, r2
 8006a30:	2200      	movs	r2, #0
 8006a32:	e9c5 3200 	strd	r3, r2, [r5]
 8006a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a3a:	428b      	cmp	r3, r1
 8006a3c:	d905      	bls.n	8006a4a <__udivmoddi4+0xba>
 8006a3e:	b10d      	cbz	r5, 8006a44 <__udivmoddi4+0xb4>
 8006a40:	e9c5 0100 	strd	r0, r1, [r5]
 8006a44:	2100      	movs	r1, #0
 8006a46:	4608      	mov	r0, r1
 8006a48:	e7f5      	b.n	8006a36 <__udivmoddi4+0xa6>
 8006a4a:	fab3 f183 	clz	r1, r3
 8006a4e:	2900      	cmp	r1, #0
 8006a50:	d146      	bne.n	8006ae0 <__udivmoddi4+0x150>
 8006a52:	42a3      	cmp	r3, r4
 8006a54:	d302      	bcc.n	8006a5c <__udivmoddi4+0xcc>
 8006a56:	4290      	cmp	r0, r2
 8006a58:	f0c0 80f0 	bcc.w	8006c3c <__udivmoddi4+0x2ac>
 8006a5c:	1a86      	subs	r6, r0, r2
 8006a5e:	eb64 0303 	sbc.w	r3, r4, r3
 8006a62:	2001      	movs	r0, #1
 8006a64:	2d00      	cmp	r5, #0
 8006a66:	d0e6      	beq.n	8006a36 <__udivmoddi4+0xa6>
 8006a68:	e9c5 6300 	strd	r6, r3, [r5]
 8006a6c:	e7e3      	b.n	8006a36 <__udivmoddi4+0xa6>
 8006a6e:	2a00      	cmp	r2, #0
 8006a70:	f040 8090 	bne.w	8006b94 <__udivmoddi4+0x204>
 8006a74:	eba1 040c 	sub.w	r4, r1, ip
 8006a78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8006a7c:	fa1f f78c 	uxth.w	r7, ip
 8006a80:	2101      	movs	r1, #1
 8006a82:	fbb4 f6f8 	udiv	r6, r4, r8
 8006a86:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8006a8a:	fb08 4416 	mls	r4, r8, r6, r4
 8006a8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006a92:	fb07 f006 	mul.w	r0, r7, r6
 8006a96:	4298      	cmp	r0, r3
 8006a98:	d908      	bls.n	8006aac <__udivmoddi4+0x11c>
 8006a9a:	eb1c 0303 	adds.w	r3, ip, r3
 8006a9e:	f106 34ff 	add.w	r4, r6, #4294967295
 8006aa2:	d202      	bcs.n	8006aaa <__udivmoddi4+0x11a>
 8006aa4:	4298      	cmp	r0, r3
 8006aa6:	f200 80cd 	bhi.w	8006c44 <__udivmoddi4+0x2b4>
 8006aaa:	4626      	mov	r6, r4
 8006aac:	1a1c      	subs	r4, r3, r0
 8006aae:	fa1f f38e 	uxth.w	r3, lr
 8006ab2:	fbb4 f0f8 	udiv	r0, r4, r8
 8006ab6:	fb08 4410 	mls	r4, r8, r0, r4
 8006aba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006abe:	fb00 f707 	mul.w	r7, r0, r7
 8006ac2:	429f      	cmp	r7, r3
 8006ac4:	d908      	bls.n	8006ad8 <__udivmoddi4+0x148>
 8006ac6:	eb1c 0303 	adds.w	r3, ip, r3
 8006aca:	f100 34ff 	add.w	r4, r0, #4294967295
 8006ace:	d202      	bcs.n	8006ad6 <__udivmoddi4+0x146>
 8006ad0:	429f      	cmp	r7, r3
 8006ad2:	f200 80b0 	bhi.w	8006c36 <__udivmoddi4+0x2a6>
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	1bdb      	subs	r3, r3, r7
 8006ada:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8006ade:	e7a5      	b.n	8006a2c <__udivmoddi4+0x9c>
 8006ae0:	f1c1 0620 	rsb	r6, r1, #32
 8006ae4:	408b      	lsls	r3, r1
 8006ae6:	fa22 f706 	lsr.w	r7, r2, r6
 8006aea:	431f      	orrs	r7, r3
 8006aec:	fa20 fc06 	lsr.w	ip, r0, r6
 8006af0:	fa04 f301 	lsl.w	r3, r4, r1
 8006af4:	ea43 030c 	orr.w	r3, r3, ip
 8006af8:	40f4      	lsrs	r4, r6
 8006afa:	fa00 f801 	lsl.w	r8, r0, r1
 8006afe:	0c38      	lsrs	r0, r7, #16
 8006b00:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8006b04:	fbb4 fef0 	udiv	lr, r4, r0
 8006b08:	fa1f fc87 	uxth.w	ip, r7
 8006b0c:	fb00 441e 	mls	r4, r0, lr, r4
 8006b10:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8006b14:	fb0e f90c 	mul.w	r9, lr, ip
 8006b18:	45a1      	cmp	r9, r4
 8006b1a:	fa02 f201 	lsl.w	r2, r2, r1
 8006b1e:	d90a      	bls.n	8006b36 <__udivmoddi4+0x1a6>
 8006b20:	193c      	adds	r4, r7, r4
 8006b22:	f10e 3aff 	add.w	sl, lr, #4294967295
 8006b26:	f080 8084 	bcs.w	8006c32 <__udivmoddi4+0x2a2>
 8006b2a:	45a1      	cmp	r9, r4
 8006b2c:	f240 8081 	bls.w	8006c32 <__udivmoddi4+0x2a2>
 8006b30:	f1ae 0e02 	sub.w	lr, lr, #2
 8006b34:	443c      	add	r4, r7
 8006b36:	eba4 0409 	sub.w	r4, r4, r9
 8006b3a:	fa1f f983 	uxth.w	r9, r3
 8006b3e:	fbb4 f3f0 	udiv	r3, r4, r0
 8006b42:	fb00 4413 	mls	r4, r0, r3, r4
 8006b46:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8006b4a:	fb03 fc0c 	mul.w	ip, r3, ip
 8006b4e:	45a4      	cmp	ip, r4
 8006b50:	d907      	bls.n	8006b62 <__udivmoddi4+0x1d2>
 8006b52:	193c      	adds	r4, r7, r4
 8006b54:	f103 30ff 	add.w	r0, r3, #4294967295
 8006b58:	d267      	bcs.n	8006c2a <__udivmoddi4+0x29a>
 8006b5a:	45a4      	cmp	ip, r4
 8006b5c:	d965      	bls.n	8006c2a <__udivmoddi4+0x29a>
 8006b5e:	3b02      	subs	r3, #2
 8006b60:	443c      	add	r4, r7
 8006b62:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8006b66:	fba0 9302 	umull	r9, r3, r0, r2
 8006b6a:	eba4 040c 	sub.w	r4, r4, ip
 8006b6e:	429c      	cmp	r4, r3
 8006b70:	46ce      	mov	lr, r9
 8006b72:	469c      	mov	ip, r3
 8006b74:	d351      	bcc.n	8006c1a <__udivmoddi4+0x28a>
 8006b76:	d04e      	beq.n	8006c16 <__udivmoddi4+0x286>
 8006b78:	b155      	cbz	r5, 8006b90 <__udivmoddi4+0x200>
 8006b7a:	ebb8 030e 	subs.w	r3, r8, lr
 8006b7e:	eb64 040c 	sbc.w	r4, r4, ip
 8006b82:	fa04 f606 	lsl.w	r6, r4, r6
 8006b86:	40cb      	lsrs	r3, r1
 8006b88:	431e      	orrs	r6, r3
 8006b8a:	40cc      	lsrs	r4, r1
 8006b8c:	e9c5 6400 	strd	r6, r4, [r5]
 8006b90:	2100      	movs	r1, #0
 8006b92:	e750      	b.n	8006a36 <__udivmoddi4+0xa6>
 8006b94:	f1c2 0320 	rsb	r3, r2, #32
 8006b98:	fa20 f103 	lsr.w	r1, r0, r3
 8006b9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8006ba0:	fa24 f303 	lsr.w	r3, r4, r3
 8006ba4:	4094      	lsls	r4, r2
 8006ba6:	430c      	orrs	r4, r1
 8006ba8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8006bac:	fa00 fe02 	lsl.w	lr, r0, r2
 8006bb0:	fa1f f78c 	uxth.w	r7, ip
 8006bb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8006bb8:	fb08 3110 	mls	r1, r8, r0, r3
 8006bbc:	0c23      	lsrs	r3, r4, #16
 8006bbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006bc2:	fb00 f107 	mul.w	r1, r0, r7
 8006bc6:	4299      	cmp	r1, r3
 8006bc8:	d908      	bls.n	8006bdc <__udivmoddi4+0x24c>
 8006bca:	eb1c 0303 	adds.w	r3, ip, r3
 8006bce:	f100 36ff 	add.w	r6, r0, #4294967295
 8006bd2:	d22c      	bcs.n	8006c2e <__udivmoddi4+0x29e>
 8006bd4:	4299      	cmp	r1, r3
 8006bd6:	d92a      	bls.n	8006c2e <__udivmoddi4+0x29e>
 8006bd8:	3802      	subs	r0, #2
 8006bda:	4463      	add	r3, ip
 8006bdc:	1a5b      	subs	r3, r3, r1
 8006bde:	b2a4      	uxth	r4, r4
 8006be0:	fbb3 f1f8 	udiv	r1, r3, r8
 8006be4:	fb08 3311 	mls	r3, r8, r1, r3
 8006be8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006bec:	fb01 f307 	mul.w	r3, r1, r7
 8006bf0:	42a3      	cmp	r3, r4
 8006bf2:	d908      	bls.n	8006c06 <__udivmoddi4+0x276>
 8006bf4:	eb1c 0404 	adds.w	r4, ip, r4
 8006bf8:	f101 36ff 	add.w	r6, r1, #4294967295
 8006bfc:	d213      	bcs.n	8006c26 <__udivmoddi4+0x296>
 8006bfe:	42a3      	cmp	r3, r4
 8006c00:	d911      	bls.n	8006c26 <__udivmoddi4+0x296>
 8006c02:	3902      	subs	r1, #2
 8006c04:	4464      	add	r4, ip
 8006c06:	1ae4      	subs	r4, r4, r3
 8006c08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006c0c:	e739      	b.n	8006a82 <__udivmoddi4+0xf2>
 8006c0e:	4604      	mov	r4, r0
 8006c10:	e6f0      	b.n	80069f4 <__udivmoddi4+0x64>
 8006c12:	4608      	mov	r0, r1
 8006c14:	e706      	b.n	8006a24 <__udivmoddi4+0x94>
 8006c16:	45c8      	cmp	r8, r9
 8006c18:	d2ae      	bcs.n	8006b78 <__udivmoddi4+0x1e8>
 8006c1a:	ebb9 0e02 	subs.w	lr, r9, r2
 8006c1e:	eb63 0c07 	sbc.w	ip, r3, r7
 8006c22:	3801      	subs	r0, #1
 8006c24:	e7a8      	b.n	8006b78 <__udivmoddi4+0x1e8>
 8006c26:	4631      	mov	r1, r6
 8006c28:	e7ed      	b.n	8006c06 <__udivmoddi4+0x276>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	e799      	b.n	8006b62 <__udivmoddi4+0x1d2>
 8006c2e:	4630      	mov	r0, r6
 8006c30:	e7d4      	b.n	8006bdc <__udivmoddi4+0x24c>
 8006c32:	46d6      	mov	lr, sl
 8006c34:	e77f      	b.n	8006b36 <__udivmoddi4+0x1a6>
 8006c36:	4463      	add	r3, ip
 8006c38:	3802      	subs	r0, #2
 8006c3a:	e74d      	b.n	8006ad8 <__udivmoddi4+0x148>
 8006c3c:	4606      	mov	r6, r0
 8006c3e:	4623      	mov	r3, r4
 8006c40:	4608      	mov	r0, r1
 8006c42:	e70f      	b.n	8006a64 <__udivmoddi4+0xd4>
 8006c44:	3e02      	subs	r6, #2
 8006c46:	4463      	add	r3, ip
 8006c48:	e730      	b.n	8006aac <__udivmoddi4+0x11c>
 8006c4a:	bf00      	nop

08006c4c <__aeabi_idiv0>:
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop

08006c50 <trimWhitespace>:
// RDFProcessor "class"
typedef struct {
    RDFGraph *graph;
} RDFProcessor;

char *trimWhitespace(const char *str) {
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
    if (!str) return NULL;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <trimWhitespace+0x12>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	e044      	b.n	8006cec <trimWhitespace+0x9c>
    char *mutableStr = strdup(str);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f004 face 	bl	800b204 <strdup>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	60fb      	str	r3, [r7, #12]
    if (!mutableStr) return NULL;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <trimWhitespace+0x26>
 8006c72:	2300      	movs	r3, #0
 8006c74:	e03a      	b.n	8006cec <trimWhitespace+0x9c>

    char *start = mutableStr;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	617b      	str	r3, [r7, #20]
    char *end;

    while (isspace((unsigned char)*start)) start++;
 8006c7a:	e002      	b.n	8006c82 <trimWhitespace+0x32>
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	617b      	str	r3, [r7, #20]
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	3301      	adds	r3, #1
 8006c88:	4a1a      	ldr	r2, [pc, #104]	@ (8006cf4 <trimWhitespace+0xa4>)
 8006c8a:	4413      	add	r3, r2
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	f003 0308 	and.w	r3, r3, #8
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1f2      	bne.n	8006c7c <trimWhitespace+0x2c>

    if (*start == 0) {
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d104      	bne.n	8006ca8 <trimWhitespace+0x58>
        *mutableStr = '\0';
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	701a      	strb	r2, [r3, #0]
        return mutableStr;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	e021      	b.n	8006cec <trimWhitespace+0x9c>
    }

    end = start + strlen(start) - 1;
 8006ca8:	6978      	ldr	r0, [r7, #20]
 8006caa:	f7ff f8c9 	bl	8005e40 <strlen>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	613b      	str	r3, [r7, #16]
    while (end > start && isspace((unsigned char)*end)) end--;
 8006cb8:	e002      	b.n	8006cc0 <trimWhitespace+0x70>
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	613b      	str	r3, [r7, #16]
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d909      	bls.n	8006cdc <trimWhitespace+0x8c>
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	4a09      	ldr	r2, [pc, #36]	@ (8006cf4 <trimWhitespace+0xa4>)
 8006cd0:	4413      	add	r3, r2
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	f003 0308 	and.w	r3, r3, #8
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1ee      	bne.n	8006cba <trimWhitespace+0x6a>

    end[1] = '\0';
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	701a      	strb	r2, [r3, #0]
    return strdup(start);
 8006ce4:	6978      	ldr	r0, [r7, #20]
 8006ce6:	f004 fa8d 	bl	800b204 <strdup>
 8006cea:	4603      	mov	r3, r0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	0800f558 	.word	0x0800f558

08006cf8 <RDFGraph_new>:

// RDFGraph "constructor" to initialize the graph
RDFGraph *RDFGraph_new() {
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
    RDFGraph *graph = (RDFGraph *)malloc(sizeof(RDFGraph));
 8006cfe:	f240 40b4 	movw	r0, #1204	@ 0x4b4
 8006d02:	f003 fa19 	bl	800a138 <malloc>
 8006d06:	4603      	mov	r3, r0
 8006d08:	607b      	str	r3, [r7, #4]
    graph->size = 0;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f8c3 24b0 	str.w	r2, [r3, #1200]	@ 0x4b0
    return graph;
 8006d12:	687b      	ldr	r3, [r7, #4]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <RDFGraph_addTriple>:

// Add a triple to the RDF graph
void RDFGraph_addTriple(RDFGraph *graph, const char *subject, const char *predicate, const char *object) {
 8006d1c:	b590      	push	{r4, r7, lr}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
    if (graph->size < MAX_TRIPLES) {
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	@ 0x4b0
 8006d30:	2b63      	cmp	r3, #99	@ 0x63
 8006d32:	dc41      	bgt.n	8006db8 <RDFGraph_addTriple+0x9c>
        graph->triples[graph->size].subject = strdup(trimWhitespace(subject));
 8006d34:	68b8      	ldr	r0, [r7, #8]
 8006d36:	f7ff ff8b 	bl	8006c50 <trimWhitespace>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f8d3 44b0 	ldr.w	r4, [r3, #1200]	@ 0x4b0
 8006d42:	4610      	mov	r0, r2
 8006d44:	f004 fa5e 	bl	800b204 <strdup>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	4623      	mov	r3, r4
 8006d50:	005b      	lsls	r3, r3, #1
 8006d52:	4423      	add	r3, r4
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	6019      	str	r1, [r3, #0]
        graph->triples[graph->size].predicate = strdup(trimWhitespace(predicate));
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7ff ff78 	bl	8006c50 <trimWhitespace>
 8006d60:	4602      	mov	r2, r0
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8d3 44b0 	ldr.w	r4, [r3, #1200]	@ 0x4b0
 8006d68:	4610      	mov	r0, r2
 8006d6a:	f004 fa4b 	bl	800b204 <strdup>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	4619      	mov	r1, r3
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	4623      	mov	r3, r4
 8006d76:	005b      	lsls	r3, r3, #1
 8006d78:	4423      	add	r3, r4
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	3304      	adds	r3, #4
 8006d80:	6019      	str	r1, [r3, #0]
        graph->triples[graph->size].object = strdup(trimWhitespace(object));
 8006d82:	6838      	ldr	r0, [r7, #0]
 8006d84:	f7ff ff64 	bl	8006c50 <trimWhitespace>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f8d3 44b0 	ldr.w	r4, [r3, #1200]	@ 0x4b0
 8006d90:	4610      	mov	r0, r2
 8006d92:	f004 fa37 	bl	800b204 <strdup>
 8006d96:	4603      	mov	r3, r0
 8006d98:	4619      	mov	r1, r3
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	4623      	mov	r3, r4
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	4423      	add	r3, r4
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	3308      	adds	r3, #8
 8006da8:	6019      	str	r1, [r3, #0]
        graph->size++;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	@ 0x4b0
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f8c3 24b0 	str.w	r2, [r3, #1200]	@ 0x4b0
    }
}
 8006db8:	bf00      	nop
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd90      	pop	{r4, r7, pc}

08006dc0 <RDFGraph_serializeToJsonLD>:
void RDFGraph_canonicalize(RDFGraph *graph) {
    qsort(graph->triples, graph->size, sizeof(RDFTriple), compareTriples);
}
// char hexSignature[]="4A19274429E40522234B8785DC25FC524F179DCC95FF09B3C9770FC71F54CA0D4259F0A9B3E9A1E9DB434EF0E3374B3084CA19416FE9F9265A796240E0B05DC1";
// Serialize the RDF graph to JSON-LD format
void RDFGraph_serializeToJsonLD(RDFGraph *graph, char *output) {
 8006dc0:	b5b0      	push	{r4, r5, r7, lr}
 8006dc2:	b09a      	sub	sp, #104	@ 0x68
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
    char context[] = "[\"http://schema.org/\", \"https://w3id.org/security/v2\"]";
 8006dca:	4bad      	ldr	r3, [pc, #692]	@ (8007080 <RDFGraph_serializeToJsonLD+0x2c0>)
 8006dcc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8006dd0:	461d      	mov	r5, r3
 8006dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dde:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006de2:	6020      	str	r0, [r4, #0]
 8006de4:	3404      	adds	r4, #4
 8006de6:	8021      	strh	r1, [r4, #0]
 8006de8:	3402      	adds	r4, #2
 8006dea:	0c0b      	lsrs	r3, r1, #16
 8006dec:	7023      	strb	r3, [r4, #0]
    char description[] = "\"description\": \"Hello World!\"";
 8006dee:	4ba5      	ldr	r3, [pc, #660]	@ (8007084 <RDFGraph_serializeToJsonLD+0x2c4>)
 8006df0:	f107 0408 	add.w	r4, r7, #8
 8006df4:	461d      	mov	r5, r3
 8006df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dfa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006dfe:	c407      	stmia	r4!, {r0, r1, r2}
 8006e00:	8023      	strh	r3, [r4, #0]
    int offset = 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	663b      	str	r3, [r7, #96]	@ 0x60

    // Manually construct the JSON string
    strcpy(output, "{\r\n");
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	4a9f      	ldr	r2, [pc, #636]	@ (8007088 <RDFGraph_serializeToJsonLD+0x2c8>)
 8006e0a:	6810      	ldr	r0, [r2, #0]
 8006e0c:	6018      	str	r0, [r3, #0]
    strcat(output, "  \"@context\": ");
 8006e0e:	6838      	ldr	r0, [r7, #0]
 8006e10:	f7ff f816 	bl	8005e40 <strlen>
 8006e14:	4603      	mov	r3, r0
 8006e16:	461a      	mov	r2, r3
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	4a9b      	ldr	r2, [pc, #620]	@ (800708c <RDFGraph_serializeToJsonLD+0x2cc>)
 8006e1e:	461c      	mov	r4, r3
 8006e20:	4613      	mov	r3, r2
 8006e22:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006e24:	6020      	str	r0, [r4, #0]
 8006e26:	6061      	str	r1, [r4, #4]
 8006e28:	60a2      	str	r2, [r4, #8]
 8006e2a:	881a      	ldrh	r2, [r3, #0]
 8006e2c:	789b      	ldrb	r3, [r3, #2]
 8006e2e:	81a2      	strh	r2, [r4, #12]
 8006e30:	73a3      	strb	r3, [r4, #14]
    strcat(output, context);
 8006e32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006e36:	4619      	mov	r1, r3
 8006e38:	6838      	ldr	r0, [r7, #0]
 8006e3a:	f004 f9d4 	bl	800b1e6 <strcat>
    strcat(output, ",\r\n");
 8006e3e:	6838      	ldr	r0, [r7, #0]
 8006e40:	f7fe fffe 	bl	8005e40 <strlen>
 8006e44:	4603      	mov	r3, r0
 8006e46:	461a      	mov	r2, r3
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	4a90      	ldr	r2, [pc, #576]	@ (8007090 <RDFGraph_serializeToJsonLD+0x2d0>)
 8006e4e:	6810      	ldr	r0, [r2, #0]
 8006e50:	6018      	str	r0, [r3, #0]
    strcat(output, "  ");
 8006e52:	6838      	ldr	r0, [r7, #0]
 8006e54:	f7fe fff4 	bl	8005e40 <strlen>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	4413      	add	r3, r2
 8006e60:	4a8c      	ldr	r2, [pc, #560]	@ (8007094 <RDFGraph_serializeToJsonLD+0x2d4>)
 8006e62:	8811      	ldrh	r1, [r2, #0]
 8006e64:	7892      	ldrb	r2, [r2, #2]
 8006e66:	8019      	strh	r1, [r3, #0]
 8006e68:	709a      	strb	r2, [r3, #2]
    strcat(output, description);
 8006e6a:	f107 0308 	add.w	r3, r7, #8
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6838      	ldr	r0, [r7, #0]
 8006e72:	f004 f9b8 	bl	800b1e6 <strcat>
    strcat(output, ",\r\n");
 8006e76:	6838      	ldr	r0, [r7, #0]
 8006e78:	f7fe ffe2 	bl	8005e40 <strlen>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	461a      	mov	r2, r3
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	4413      	add	r3, r2
 8006e84:	4a82      	ldr	r2, [pc, #520]	@ (8007090 <RDFGraph_serializeToJsonLD+0x2d0>)
 8006e86:	6810      	ldr	r0, [r2, #0]
 8006e88:	6018      	str	r0, [r3, #0]
    strcat(output, "  \"proof\": {\r\n");
 8006e8a:	6838      	ldr	r0, [r7, #0]
 8006e8c:	f7fe ffd8 	bl	8005e40 <strlen>
 8006e90:	4603      	mov	r3, r0
 8006e92:	461a      	mov	r2, r3
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	4413      	add	r3, r2
 8006e98:	4a7f      	ldr	r2, [pc, #508]	@ (8007098 <RDFGraph_serializeToJsonLD+0x2d8>)
 8006e9a:	461c      	mov	r4, r3
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006ea0:	6020      	str	r0, [r4, #0]
 8006ea2:	6061      	str	r1, [r4, #4]
 8006ea4:	60a2      	str	r2, [r4, #8]
 8006ea6:	881a      	ldrh	r2, [r3, #0]
 8006ea8:	789b      	ldrb	r3, [r3, #2]
 8006eaa:	81a2      	strh	r2, [r4, #12]
 8006eac:	73a3      	strb	r3, [r4, #14]

    // Add proof properties
    for (int i = 0; i < graph->size; i++) {
 8006eae:	2300      	movs	r3, #0
 8006eb0:	667b      	str	r3, [r7, #100]	@ 0x64
 8006eb2:	e138      	b.n	8007126 <RDFGraph_serializeToJsonLD+0x366>
        if (strcmp(graph->triples[i].predicate, "ProofCreated") == 0) {
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006eb8:	4613      	mov	r3, r2
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	440b      	add	r3, r1
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4975      	ldr	r1, [pc, #468]	@ (800709c <RDFGraph_serializeToJsonLD+0x2dc>)
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fe ff59 	bl	8005d80 <strcmp>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d121      	bne.n	8006f18 <RDFGraph_serializeToJsonLD+0x158>
            strcat(output, "    \"created\": \"");
 8006ed4:	6838      	ldr	r0, [r7, #0]
 8006ed6:	f7fe ffb3 	bl	8005e40 <strlen>
 8006eda:	4603      	mov	r3, r0
 8006edc:	461a      	mov	r2, r3
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	4a6f      	ldr	r2, [pc, #444]	@ (80070a0 <RDFGraph_serializeToJsonLD+0x2e0>)
 8006ee4:	461d      	mov	r5, r3
 8006ee6:	4614      	mov	r4, r2
 8006ee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006eea:	6028      	str	r0, [r5, #0]
 8006eec:	6069      	str	r1, [r5, #4]
 8006eee:	60aa      	str	r2, [r5, #8]
 8006ef0:	60eb      	str	r3, [r5, #12]
 8006ef2:	7823      	ldrb	r3, [r4, #0]
 8006ef4:	742b      	strb	r3, [r5, #16]
            strcat(output, global_time); // Replace with actual value
 8006ef6:	496b      	ldr	r1, [pc, #428]	@ (80070a4 <RDFGraph_serializeToJsonLD+0x2e4>)
 8006ef8:	6838      	ldr	r0, [r7, #0]
 8006efa:	f004 f974 	bl	800b1e6 <strcat>
            strcat(output, "\",\r\n");
 8006efe:	6838      	ldr	r0, [r7, #0]
 8006f00:	f7fe ff9e 	bl	8005e40 <strlen>
 8006f04:	4603      	mov	r3, r0
 8006f06:	461a      	mov	r2, r3
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	4a66      	ldr	r2, [pc, #408]	@ (80070a8 <RDFGraph_serializeToJsonLD+0x2e8>)
 8006f0e:	6810      	ldr	r0, [r2, #0]
 8006f10:	6018      	str	r0, [r3, #0]
 8006f12:	7912      	ldrb	r2, [r2, #4]
 8006f14:	711a      	strb	r2, [r3, #4]
 8006f16:	e103      	b.n	8007120 <RDFGraph_serializeToJsonLD+0x360>
        } else if (strcmp(graph->triples[i].predicate, "ProofType") == 0) {
 8006f18:	6879      	ldr	r1, [r7, #4]
 8006f1a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	440b      	add	r3, r1
 8006f26:	3304      	adds	r3, #4
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4960      	ldr	r1, [pc, #384]	@ (80070ac <RDFGraph_serializeToJsonLD+0x2ec>)
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fe ff27 	bl	8005d80 <strcmp>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d129      	bne.n	8006f8c <RDFGraph_serializeToJsonLD+0x1cc>
            strcat(output, "    \"type\": \"");
 8006f38:	6838      	ldr	r0, [r7, #0]
 8006f3a:	f7fe ff81 	bl	8005e40 <strlen>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	461a      	mov	r2, r3
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	4413      	add	r3, r2
 8006f46:	4a5a      	ldr	r2, [pc, #360]	@ (80070b0 <RDFGraph_serializeToJsonLD+0x2f0>)
 8006f48:	461c      	mov	r4, r3
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006f4e:	6020      	str	r0, [r4, #0]
 8006f50:	6061      	str	r1, [r4, #4]
 8006f52:	60a2      	str	r2, [r4, #8]
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	81a3      	strh	r3, [r4, #12]
            strcat(output, graph->triples[i].object);
 8006f58:	6879      	ldr	r1, [r7, #4]
 8006f5a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	005b      	lsls	r3, r3, #1
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	440b      	add	r3, r1
 8006f66:	3308      	adds	r3, #8
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	6838      	ldr	r0, [r7, #0]
 8006f6e:	f004 f93a 	bl	800b1e6 <strcat>
            strcat(output, "\",\r\n");
 8006f72:	6838      	ldr	r0, [r7, #0]
 8006f74:	f7fe ff64 	bl	8005e40 <strlen>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	4413      	add	r3, r2
 8006f80:	4a49      	ldr	r2, [pc, #292]	@ (80070a8 <RDFGraph_serializeToJsonLD+0x2e8>)
 8006f82:	6810      	ldr	r0, [r2, #0]
 8006f84:	6018      	str	r0, [r3, #0]
 8006f86:	7912      	ldrb	r2, [r2, #4]
 8006f88:	711a      	strb	r2, [r3, #4]
 8006f8a:	e0c9      	b.n	8007120 <RDFGraph_serializeToJsonLD+0x360>
        } else if (strcmp(graph->triples[i].predicate, "VerificationMethod") == 0) {
 8006f8c:	6879      	ldr	r1, [r7, #4]
 8006f8e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f90:	4613      	mov	r3, r2
 8006f92:	005b      	lsls	r3, r3, #1
 8006f94:	4413      	add	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	440b      	add	r3, r1
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4945      	ldr	r1, [pc, #276]	@ (80070b4 <RDFGraph_serializeToJsonLD+0x2f4>)
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7fe feed 	bl	8005d80 <strcmp>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d12c      	bne.n	8007006 <RDFGraph_serializeToJsonLD+0x246>
            strcat(output, "    \"verificationMethod\": \"");
 8006fac:	6838      	ldr	r0, [r7, #0]
 8006fae:	f7fe ff47 	bl	8005e40 <strlen>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	4413      	add	r3, r2
 8006fba:	4a3f      	ldr	r2, [pc, #252]	@ (80070b8 <RDFGraph_serializeToJsonLD+0x2f8>)
 8006fbc:	461d      	mov	r5, r3
 8006fbe:	4614      	mov	r4, r2
 8006fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006fc2:	6028      	str	r0, [r5, #0]
 8006fc4:	6069      	str	r1, [r5, #4]
 8006fc6:	60aa      	str	r2, [r5, #8]
 8006fc8:	60eb      	str	r3, [r5, #12]
 8006fca:	cc07      	ldmia	r4!, {r0, r1, r2}
 8006fcc:	6128      	str	r0, [r5, #16]
 8006fce:	6169      	str	r1, [r5, #20]
 8006fd0:	61aa      	str	r2, [r5, #24]
            strcat(output, graph->triples[i].object);
 8006fd2:	6879      	ldr	r1, [r7, #4]
 8006fd4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	4413      	add	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	440b      	add	r3, r1
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6838      	ldr	r0, [r7, #0]
 8006fe8:	f004 f8fd 	bl	800b1e6 <strcat>
            strcat(output, "\",\r\n");
 8006fec:	6838      	ldr	r0, [r7, #0]
 8006fee:	f7fe ff27 	bl	8005e40 <strlen>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	4a2b      	ldr	r2, [pc, #172]	@ (80070a8 <RDFGraph_serializeToJsonLD+0x2e8>)
 8006ffc:	6810      	ldr	r0, [r2, #0]
 8006ffe:	6018      	str	r0, [r3, #0]
 8007000:	7912      	ldrb	r2, [r2, #4]
 8007002:	711a      	strb	r2, [r3, #4]
 8007004:	e08c      	b.n	8007120 <RDFGraph_serializeToJsonLD+0x360>
        } else if (strcmp(graph->triples[i].predicate, "ProofPurpose") == 0) {
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800700a:	4613      	mov	r3, r2
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	4413      	add	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	440b      	add	r3, r1
 8007014:	3304      	adds	r3, #4
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4928      	ldr	r1, [pc, #160]	@ (80070bc <RDFGraph_serializeToJsonLD+0x2fc>)
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe feb0 	bl	8005d80 <strcmp>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d14e      	bne.n	80070c4 <RDFGraph_serializeToJsonLD+0x304>
            strcat(output, "    \"proofPurpose\": \"");
 8007026:	6838      	ldr	r0, [r7, #0]
 8007028:	f7fe ff0a 	bl	8005e40 <strlen>
 800702c:	4603      	mov	r3, r0
 800702e:	461a      	mov	r2, r3
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	4413      	add	r3, r2
 8007034:	4a22      	ldr	r2, [pc, #136]	@ (80070c0 <RDFGraph_serializeToJsonLD+0x300>)
 8007036:	461d      	mov	r5, r3
 8007038:	4614      	mov	r4, r2
 800703a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800703c:	6028      	str	r0, [r5, #0]
 800703e:	6069      	str	r1, [r5, #4]
 8007040:	60aa      	str	r2, [r5, #8]
 8007042:	60eb      	str	r3, [r5, #12]
 8007044:	6820      	ldr	r0, [r4, #0]
 8007046:	6128      	str	r0, [r5, #16]
 8007048:	88a3      	ldrh	r3, [r4, #4]
 800704a:	82ab      	strh	r3, [r5, #20]
            strcat(output, graph->triples[i].object);
 800704c:	6879      	ldr	r1, [r7, #4]
 800704e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007050:	4613      	mov	r3, r2
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	4413      	add	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	440b      	add	r3, r1
 800705a:	3308      	adds	r3, #8
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4619      	mov	r1, r3
 8007060:	6838      	ldr	r0, [r7, #0]
 8007062:	f004 f8c0 	bl	800b1e6 <strcat>
            strcat(output, "\",\r\n");
 8007066:	6838      	ldr	r0, [r7, #0]
 8007068:	f7fe feea 	bl	8005e40 <strlen>
 800706c:	4603      	mov	r3, r0
 800706e:	461a      	mov	r2, r3
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	4413      	add	r3, r2
 8007074:	4a0c      	ldr	r2, [pc, #48]	@ (80070a8 <RDFGraph_serializeToJsonLD+0x2e8>)
 8007076:	6810      	ldr	r0, [r2, #0]
 8007078:	6018      	str	r0, [r3, #0]
 800707a:	7912      	ldrb	r2, [r2, #4]
 800707c:	711a      	strb	r2, [r3, #4]
 800707e:	e04f      	b.n	8007120 <RDFGraph_serializeToJsonLD+0x360>
 8007080:	0800e998 	.word	0x0800e998
 8007084:	0800e9d0 	.word	0x0800e9d0
 8007088:	0800e8a8 	.word	0x0800e8a8
 800708c:	0800e8ac 	.word	0x0800e8ac
 8007090:	0800e8bc 	.word	0x0800e8bc
 8007094:	0800e8c0 	.word	0x0800e8c0
 8007098:	0800e8c4 	.word	0x0800e8c4
 800709c:	0800e8d4 	.word	0x0800e8d4
 80070a0:	0800e8e4 	.word	0x0800e8e4
 80070a4:	200005f4 	.word	0x200005f4
 80070a8:	0800e8f8 	.word	0x0800e8f8
 80070ac:	0800e900 	.word	0x0800e900
 80070b0:	0800e90c 	.word	0x0800e90c
 80070b4:	0800e91c 	.word	0x0800e91c
 80070b8:	0800e930 	.word	0x0800e930
 80070bc:	0800e94c 	.word	0x0800e94c
 80070c0:	0800e95c 	.word	0x0800e95c
        } else if (strcmp(graph->triples[i].predicate, "jws") == 0) {
 80070c4:	6879      	ldr	r1, [r7, #4]
 80070c6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80070c8:	4613      	mov	r3, r2
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	4413      	add	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	440b      	add	r3, r1
 80070d2:	3304      	adds	r3, #4
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4924      	ldr	r1, [pc, #144]	@ (8007168 <RDFGraph_serializeToJsonLD+0x3a8>)
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fe fe51 	bl	8005d80 <strcmp>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d11d      	bne.n	8007120 <RDFGraph_serializeToJsonLD+0x360>
            strcat(output, "    \"jws\": \"");
 80070e4:	6838      	ldr	r0, [r7, #0]
 80070e6:	f7fe feab 	bl	8005e40 <strlen>
 80070ea:	4603      	mov	r3, r0
 80070ec:	461a      	mov	r2, r3
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	4413      	add	r3, r2
 80070f2:	4a1e      	ldr	r2, [pc, #120]	@ (800716c <RDFGraph_serializeToJsonLD+0x3ac>)
 80070f4:	461c      	mov	r4, r3
 80070f6:	4613      	mov	r3, r2
 80070f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80070fa:	6020      	str	r0, [r4, #0]
 80070fc:	6061      	str	r1, [r4, #4]
 80070fe:	60a2      	str	r2, [r4, #8]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	7323      	strb	r3, [r4, #12]
            strcat(output, hexSignature); // Replace with actual value
 8007104:	491a      	ldr	r1, [pc, #104]	@ (8007170 <RDFGraph_serializeToJsonLD+0x3b0>)
 8007106:	6838      	ldr	r0, [r7, #0]
 8007108:	f004 f86d 	bl	800b1e6 <strcat>
            strcat(output, "\"\r\n");
 800710c:	6838      	ldr	r0, [r7, #0]
 800710e:	f7fe fe97 	bl	8005e40 <strlen>
 8007112:	4603      	mov	r3, r0
 8007114:	461a      	mov	r2, r3
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	4413      	add	r3, r2
 800711a:	4a16      	ldr	r2, [pc, #88]	@ (8007174 <RDFGraph_serializeToJsonLD+0x3b4>)
 800711c:	6810      	ldr	r0, [r2, #0]
 800711e:	6018      	str	r0, [r3, #0]
    for (int i = 0; i < graph->size; i++) {
 8007120:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007122:	3301      	adds	r3, #1
 8007124:	667b      	str	r3, [r7, #100]	@ 0x64
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	@ 0x4b0
 800712c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800712e:	429a      	cmp	r2, r3
 8007130:	f6ff aec0 	blt.w	8006eb4 <RDFGraph_serializeToJsonLD+0xf4>
        }
    }

    // Close the JSON object
    strcat(output, "  }\r\n");
 8007134:	6838      	ldr	r0, [r7, #0]
 8007136:	f7fe fe83 	bl	8005e40 <strlen>
 800713a:	4603      	mov	r3, r0
 800713c:	461a      	mov	r2, r3
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	4413      	add	r3, r2
 8007142:	4a0d      	ldr	r2, [pc, #52]	@ (8007178 <RDFGraph_serializeToJsonLD+0x3b8>)
 8007144:	6810      	ldr	r0, [r2, #0]
 8007146:	6018      	str	r0, [r3, #0]
 8007148:	8892      	ldrh	r2, [r2, #4]
 800714a:	809a      	strh	r2, [r3, #4]
    strcat(output, "}\r\n");
 800714c:	6838      	ldr	r0, [r7, #0]
 800714e:	f7fe fe77 	bl	8005e40 <strlen>
 8007152:	4603      	mov	r3, r0
 8007154:	461a      	mov	r2, r3
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	4413      	add	r3, r2
 800715a:	4a08      	ldr	r2, [pc, #32]	@ (800717c <RDFGraph_serializeToJsonLD+0x3bc>)
 800715c:	6810      	ldr	r0, [r2, #0]
 800715e:	6018      	str	r0, [r3, #0]
}
 8007160:	bf00      	nop
 8007162:	3768      	adds	r7, #104	@ 0x68
 8007164:	46bd      	mov	sp, r7
 8007166:	bdb0      	pop	{r4, r5, r7, pc}
 8007168:	0800e974 	.word	0x0800e974
 800716c:	0800e978 	.word	0x0800e978
 8007170:	200001f4 	.word	0x200001f4
 8007174:	0800e988 	.word	0x0800e988
 8007178:	0800e98c 	.word	0x0800e98c
 800717c:	0800e994 	.word	0x0800e994

08007180 <RDFGraph_free>:
void RDFProcessor_process(RDFProcessor *processor, char *output) {
    RDFGraph_canonicalize(processor->graph);
    RDFGraph_serializeToJsonLD(processor->graph, output);
}

void RDFGraph_free(RDFGraph *graph) {
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < graph->size; i++) {
 8007188:	2300      	movs	r3, #0
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	e025      	b.n	80071da <RDFGraph_free+0x5a>
        free(graph->triples[i].subject);
 800718e:	6879      	ldr	r1, [r7, #4]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	4613      	mov	r3, r2
 8007194:	005b      	lsls	r3, r3, #1
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	440b      	add	r3, r1
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4618      	mov	r0, r3
 80071a0:	f002 ffd2 	bl	800a148 <free>
        free(graph->triples[i].predicate);
 80071a4:	6879      	ldr	r1, [r7, #4]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	4613      	mov	r3, r2
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	4413      	add	r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	440b      	add	r3, r1
 80071b2:	3304      	adds	r3, #4
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f002 ffc6 	bl	800a148 <free>
        free(graph->triples[i].object);
 80071bc:	6879      	ldr	r1, [r7, #4]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	4613      	mov	r3, r2
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	4413      	add	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	440b      	add	r3, r1
 80071ca:	3308      	adds	r3, #8
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f002 ffba 	bl	800a148 <free>
    for (int i = 0; i < graph->size; i++) {
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	3301      	adds	r3, #1
 80071d8:	60fb      	str	r3, [r7, #12]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	@ 0x4b0
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	dbd3      	blt.n	800718e <RDFGraph_free+0xe>
    }
    free(graph);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f002 ffae 	bl	800a148 <free>
}
 80071ec:	bf00      	nop
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <processRDF>:
void RDFProcessor_free(RDFProcessor *processor) {
    free(processor);
}

// Function to process the RDF graph and store it in the output variable
void processRDF(char *output) {
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
    // Create a new RDF graph
    RDFGraph *graph = RDFGraph_new();
 80071fc:	f7ff fd7c 	bl	8006cf8 <RDFGraph_new>
 8007200:	60f8      	str	r0, [r7, #12]

    // Add RDF triples to the graph
    RDFGraph_addTriple(graph, "credential1", "ProofType", "EcdsaSignature2018");
 8007202:	4b14      	ldr	r3, [pc, #80]	@ (8007254 <processRDF+0x60>)
 8007204:	4a14      	ldr	r2, [pc, #80]	@ (8007258 <processRDF+0x64>)
 8007206:	4915      	ldr	r1, [pc, #84]	@ (800725c <processRDF+0x68>)
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f7ff fd87 	bl	8006d1c <RDFGraph_addTriple>
    RDFGraph_addTriple(graph, "credential1", "ProofCreated", "2025-10-23T05:50:16Z");
 800720e:	4b14      	ldr	r3, [pc, #80]	@ (8007260 <processRDF+0x6c>)
 8007210:	4a14      	ldr	r2, [pc, #80]	@ (8007264 <processRDF+0x70>)
 8007212:	4912      	ldr	r1, [pc, #72]	@ (800725c <processRDF+0x68>)
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f7ff fd81 	bl	8006d1c <RDFGraph_addTriple>
    RDFGraph_addTriple(graph, "credential1", "VerificationMethod", "did:example:123456789abcdefghi#key1");
 800721a:	4b13      	ldr	r3, [pc, #76]	@ (8007268 <processRDF+0x74>)
 800721c:	4a13      	ldr	r2, [pc, #76]	@ (800726c <processRDF+0x78>)
 800721e:	490f      	ldr	r1, [pc, #60]	@ (800725c <processRDF+0x68>)
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f7ff fd7b 	bl	8006d1c <RDFGraph_addTriple>
    RDFGraph_addTriple(graph, "credential1", "ProofPurpose", "assertionMethod");
 8007226:	4b12      	ldr	r3, [pc, #72]	@ (8007270 <processRDF+0x7c>)
 8007228:	4a12      	ldr	r2, [pc, #72]	@ (8007274 <processRDF+0x80>)
 800722a:	490c      	ldr	r1, [pc, #48]	@ (800725c <processRDF+0x68>)
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f7ff fd75 	bl	8006d1c <RDFGraph_addTriple>
    RDFGraph_addTriple(graph, "credential1", "jws", hexSignature); // Add the signature value
 8007232:	4b11      	ldr	r3, [pc, #68]	@ (8007278 <processRDF+0x84>)
 8007234:	4a11      	ldr	r2, [pc, #68]	@ (800727c <processRDF+0x88>)
 8007236:	4909      	ldr	r1, [pc, #36]	@ (800725c <processRDF+0x68>)
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7ff fd6f 	bl	8006d1c <RDFGraph_addTriple>

    // Serialize the RDF graph to JSON-LD format and store in output
    RDFGraph_serializeToJsonLD(graph, output);
 800723e:	6879      	ldr	r1, [r7, #4]
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f7ff fdbd 	bl	8006dc0 <RDFGraph_serializeToJsonLD>

    // Free the RDF graph resources
    RDFGraph_free(graph);
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f7ff ff9a 	bl	8007180 <RDFGraph_free>
}
 800724c:	bf00      	nop
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	0800e9f0 	.word	0x0800e9f0
 8007258:	0800e900 	.word	0x0800e900
 800725c:	0800ea04 	.word	0x0800ea04
 8007260:	0800ea10 	.word	0x0800ea10
 8007264:	0800e8d4 	.word	0x0800e8d4
 8007268:	0800ea28 	.word	0x0800ea28
 800726c:	0800e91c 	.word	0x0800e91c
 8007270:	0800ea4c 	.word	0x0800ea4c
 8007274:	0800e94c 	.word	0x0800e94c
 8007278:	200001f4 	.word	0x200001f4
 800727c:	0800e974 	.word	0x0800e974

08007280 <UART_ReceiveChar>:
void Print_Computed_Keys(const uint8_t *data, size_t length);
void UART_PrintSignature(const uint8_t *data, size_t length);
void print_time(void);

void UART_ReceiveChar(void)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	af00      	add	r7, sp, #0
    HAL_UART_Receive(&huart2, (uint8_t *)rx_buffer, 1, HAL_MAX_DELAY);
 8007284:	f04f 33ff 	mov.w	r3, #4294967295
 8007288:	2201      	movs	r2, #1
 800728a:	4906      	ldr	r1, [pc, #24]	@ (80072a4 <UART_ReceiveChar+0x24>)
 800728c:	4806      	ldr	r0, [pc, #24]	@ (80072a8 <UART_ReceiveChar+0x28>)
 800728e:	f002 fb8c 	bl	80099aa <HAL_UART_Receive>
    HAL_UART_Transmit(&huart2, (uint8_t *)rx_buffer, 1, HAL_MAX_DELAY); // Echo received character
 8007292:	f04f 33ff 	mov.w	r3, #4294967295
 8007296:	2201      	movs	r2, #1
 8007298:	4902      	ldr	r1, [pc, #8]	@ (80072a4 <UART_ReceiveChar+0x24>)
 800729a:	4803      	ldr	r0, [pc, #12]	@ (80072a8 <UART_ReceiveChar+0x28>)
 800729c:	f002 fafa 	bl	8009894 <HAL_UART_Transmit>
}
 80072a0:	bf00      	nop
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	20000610 	.word	0x20000610
 80072a8:	20000e1c 	.word	0x20000e1c

080072ac <UART_SendString>:

void UART_SendString(char *str)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7fe fdc3 	bl	8005e40 <strlen>
 80072ba:	4603      	mov	r3, r0
 80072bc:	b29a      	uxth	r2, r3
 80072be:	f04f 33ff 	mov.w	r3, #4294967295
 80072c2:	6879      	ldr	r1, [r7, #4]
 80072c4:	4803      	ldr	r0, [pc, #12]	@ (80072d4 <UART_SendString+0x28>)
 80072c6:	f002 fae5 	bl	8009894 <HAL_UART_Transmit>
}
 80072ca:	bf00      	nop
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	20000e1c 	.word	0x20000e1c

080072d8 <main>:
uint8_t Computed_Signature[CMOX_ECC_SECP256R1_SIG_LEN];  // Computed signature buffer

/* Functions Definition ------------------------------------------------------*/

int main(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	f5ad 6d2f 	sub.w	sp, sp, #2800	@ 0xaf0
 80072de:	af06      	add	r7, sp, #24
    cmox_hash_retval_t hretval;
    cmox_ecc_retval_t retval;
    size_t computed_size;
    uint32_t fault_check = CMOX_ECC_AUTH_FAIL;
 80072e0:	4ba3      	ldr	r3, [pc, #652]	@ (8007570 <main+0x298>)
 80072e2:	f8c7 3ab4 	str.w	r3, [r7, #2740]	@ 0xab4

    HAL_Init();               // STM32 HAL initialization
 80072e6:	f000 ff3b 	bl	8008160 <HAL_Init>
    SystemClock_Config();      // System clock configuration
 80072ea:	f000 fc19 	bl	8007b20 <SystemClock_Config>
    MX_GPIO_Init();            // GPIO initialization
 80072ee:	f000 fd11 	bl	8007d14 <MX_GPIO_Init>
    MX_RTC_Init();
 80072f2:	f000 fc8b 	bl	8007c0c <MX_RTC_Init>
    MX_USART2_UART_Init();     // UART initialization
 80072f6:	f000 fce3 	bl	8007cc0 <MX_USART2_UART_Init>
    MX_CRC_Init();             // CRC initialization
 80072fa:	f000 fc73 	bl	8007be4 <MX_CRC_Init>
    print_time();
 80072fe:	f000 fabd 	bl	800787c <print_time>

    uint32_t start_time = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	f8c7 3ad4 	str.w	r3, [r7, #2772]	@ 0xad4

    char Message[MAX_MESSAGE_SIZE] = {0};
 8007308:	f607 23d8 	addw	r3, r7, #2776	@ 0xad8
 800730c:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8007310:	2200      	movs	r2, #0
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	3304      	adds	r3, #4
 8007316:	f240 72fc 	movw	r2, #2044	@ 0x7fc
 800731a:	2100      	movs	r1, #0
 800731c:	4618      	mov	r0, r3
 800731e:	f003 ff5a 	bl	800b1d6 <memset>
    // Call the RDF processing function and pass the Message variable
    processRDF(Message);
 8007322:	f507 732d 	add.w	r3, r7, #692	@ 0x2b4
 8007326:	4618      	mov	r0, r3
 8007328:	f7ff ff64 	bl	80071f4 <processRDF>

    uint8_t private_key[32];
    uint8_t private_key_len = sizeof(private_key);
 800732c:	2320      	movs	r3, #32
 800732e:	f887 3ad3 	strb.w	r3, [r7, #2771]	@ 0xad3
    uint8_t public_key[32];
    uint8_t public_key_len = sizeof(public_key);
 8007332:	2320      	movs	r3, #32
 8007334:	f887 3ad2 	strb.w	r3, [r7, #2770]	@ 0xad2
    uint8_t shared_secret[32];
    size_t shared_secret_len;
    uint8_t aes_key[32];

    uint8_t privKey[32];
    size_t privKeyLen = sizeof(privKey);
 8007338:	f607 23d8 	addw	r3, r7, #2776	@ 0xad8
 800733c:	f6a3 03cc 	subw	r3, r3, #2252	@ 0x8cc
 8007340:	2220      	movs	r2, #32
 8007342:	601a      	str	r2, [r3, #0]
    uint8_t pubKey[64];
    size_t pubKeyLen = sizeof(pubKey);
 8007344:	f607 23d8 	addw	r3, r7, #2776	@ 0xad8
 8007348:	f5a3 6311 	sub.w	r3, r3, #2320	@ 0x910
 800734c:	2240      	movs	r2, #64	@ 0x40
 800734e:	601a      	str	r2, [r3, #0]

    UART_SendString("\r\nWelcome credentials signing application!\r\n");
 8007350:	4888      	ldr	r0, [pc, #544]	@ (8007574 <main+0x29c>)
 8007352:	f7ff ffab 	bl	80072ac <UART_SendString>
    UART_SendString("\r\nPress 1 to generate verifiable credentials or 2 to verify your credentials:\r\n");
 8007356:	4888      	ldr	r0, [pc, #544]	@ (8007578 <main+0x2a0>)
 8007358:	f7ff ffa8 	bl	80072ac <UART_SendString>

	const cmox_ecc_impl_t curveParams = CMOX_ECC_SECP256R1_HIGHMEM;
 800735c:	4b87      	ldr	r3, [pc, #540]	@ (800757c <main+0x2a4>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f8c7 3acc 	str.w	r3, [r7, #2764]	@ 0xacc

	    cmox_ecc_construct(&Ecc_Ctx, CMOX_MATH_FUNCS_FAST, Working_Buffer, Working_Buffer_Size);
 8007364:	4b86      	ldr	r3, [pc, #536]	@ (8007580 <main+0x2a8>)
 8007366:	6819      	ldr	r1, [r3, #0]
 8007368:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800736c:	4a85      	ldr	r2, [pc, #532]	@ (8007584 <main+0x2ac>)
 800736e:	4886      	ldr	r0, [pc, #536]	@ (8007588 <main+0x2b0>)
 8007370:	f7f8 ff36 	bl	80001e0 <cmox_ecc_construct>

	    retval = cmox_ecdsa_keyGen(&Ecc_Ctx, curveParams, Known_Random, sizeof(Known_Random), privKey, &privKeyLen, pubKey, &pubKeyLen);
 8007374:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8007378:	9303      	str	r3, [sp, #12]
 800737a:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 800737e:	9302      	str	r3, [sp, #8]
 8007380:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8007384:	9301      	str	r3, [sp, #4]
 8007386:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	2320      	movs	r3, #32
 800738e:	4a7f      	ldr	r2, [pc, #508]	@ (800758c <main+0x2b4>)
 8007390:	f8d7 1acc 	ldr.w	r1, [r7, #2764]	@ 0xacc
 8007394:	487c      	ldr	r0, [pc, #496]	@ (8007588 <main+0x2b0>)
 8007396:	f7fa ff17 	bl	80021c8 <cmox_ecdsa_keyGen>
 800739a:	f8c7 0ac8 	str.w	r0, [r7, #2760]	@ 0xac8
	    if (retval != CMOX_ECC_SUCCESS) {
 800739e:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	@ 0xac8
 80073a2:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80073a6:	d005      	beq.n	80073b4 <main+0xdc>
	        UART_Print("Key generation failed");
 80073a8:	4879      	ldr	r0, [pc, #484]	@ (8007590 <main+0x2b8>)
 80073aa:	f000 fb9d 	bl	8007ae8 <UART_Print>
	        return -1;
 80073ae:	f04f 33ff 	mov.w	r3, #4294967295
 80073b2:	e209      	b.n	80077c8 <main+0x4f0>
//
//	    UART_Print("Public key: ");
//	    Print_Computed_Keys(pubKey, pubKeyLen);
//	    UART_Print("\r\n");

    UART_ReceiveChar(); // Wait for user input
 80073b4:	f7ff ff64 	bl	8007280 <UART_ReceiveChar>
    UART_Print("\r\n");
 80073b8:	4876      	ldr	r0, [pc, #472]	@ (8007594 <main+0x2bc>)
 80073ba:	f000 fb95 	bl	8007ae8 <UART_Print>

    if (rx_buffer[0] == '1')
 80073be:	4b76      	ldr	r3, [pc, #472]	@ (8007598 <main+0x2c0>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	2b31      	cmp	r3, #49	@ 0x31
 80073c4:	f040 809c 	bne.w	8007500 <main+0x228>
    {
	    UART_Print("\r\n");
 80073c8:	4872      	ldr	r0, [pc, #456]	@ (8007594 <main+0x2bc>)
 80073ca:	f000 fb8d 	bl	8007ae8 <UART_Print>
	    UART_Print("Generating ECDSA verifiable credentials...\r\n");
 80073ce:	4873      	ldr	r0, [pc, #460]	@ (800759c <main+0x2c4>)
 80073d0:	f000 fb8a 	bl	8007ae8 <UART_Print>
	    UART_Print("\r\n");
 80073d4:	486f      	ldr	r0, [pc, #444]	@ (8007594 <main+0x2bc>)
 80073d6:	f000 fb87 	bl	8007ae8 <UART_Print>
        /* Generate an interrupt every 1ms */
        HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 80073da:	f001 fddd 	bl	8008f98 <HAL_RCC_GetHCLKFreq>
 80073de:	4603      	mov	r3, r0
 80073e0:	4a6f      	ldr	r2, [pc, #444]	@ (80075a0 <main+0x2c8>)
 80073e2:	fba2 2303 	umull	r2, r3, r2, r3
 80073e6:	099b      	lsrs	r3, r3, #6
 80073e8:	4618      	mov	r0, r3
 80073ea:	f001 f804 	bl	80083f6 <HAL_SYSTICK_Config>
        start_time = HAL_GetTick();
 80073ee:	f000 ff1d 	bl	800822c <HAL_GetTick>
 80073f2:	f8c7 0ad4 	str.w	r0, [r7, #2772]	@ 0xad4

    	    // Compute the SHA-224 digest
    	    hretval = cmox_hash_compute(CMOX_SHA224_ALGO,
 80073f6:	4b6b      	ldr	r3, [pc, #428]	@ (80075a4 <main+0x2cc>)
 80073f8:	6818      	ldr	r0, [r3, #0]
 80073fa:	f507 712d 	add.w	r1, r7, #692	@ 0x2b4
 80073fe:	f607 23b8 	addw	r3, r7, #2744	@ 0xab8
 8007402:	9301      	str	r3, [sp, #4]
 8007404:	231c      	movs	r3, #28
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	4b67      	ldr	r3, [pc, #412]	@ (80075a8 <main+0x2d0>)
 800740a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800740e:	f7fb fa71 	bl	80028f4 <cmox_hash_compute>
 8007412:	f8c7 0ac4 	str.w	r0, [r7, #2756]	@ 0xac4
    	                                Message, sizeof(Message),
    	                                Computed_Hash, CMOX_SHA224_SIZE,
    	                                &computed_size);

    	    // Check if hash computation was successful
    	    if (hretval != CMOX_HASH_SUCCESS || computed_size != CMOX_SHA224_SIZE)
 8007416:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	@ 0xac4
 800741a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800741e:	d103      	bne.n	8007428 <main+0x150>
 8007420:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	@ 0xab8
 8007424:	2b1c      	cmp	r3, #28
 8007426:	d004      	beq.n	8007432 <main+0x15a>
    	    {
    	        UART_Print("Hash computation failed.\r\n");
 8007428:	4860      	ldr	r0, [pc, #384]	@ (80075ac <main+0x2d4>)
 800742a:	f000 fb5d 	bl	8007ae8 <UART_Print>
    	        Error_Handler();
 800742e:	f000 fca1 	bl	8007d74 <Error_Handler>
    	    }


    	    // Construct ECC context
    	    cmox_ecc_construct(&Ecc_Ctx, CMOX_ECC256_MATH_FUNCS, Working_Buffer, sizeof(Working_Buffer));
 8007432:	4b5f      	ldr	r3, [pc, #380]	@ (80075b0 <main+0x2d8>)
 8007434:	6819      	ldr	r1, [r3, #0]
 8007436:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800743a:	4a52      	ldr	r2, [pc, #328]	@ (8007584 <main+0x2ac>)
 800743c:	4852      	ldr	r0, [pc, #328]	@ (8007588 <main+0x2b0>)
 800743e:	f7f8 fecf 	bl	80001e0 <cmox_ecc_construct>

    	    // Compute the ECDSA signature
    	    retval = cmox_ecdsa_sign(&Ecc_Ctx,
 8007442:	4b4e      	ldr	r3, [pc, #312]	@ (800757c <main+0x2a4>)
 8007444:	6819      	ldr	r1, [r3, #0]
 8007446:	f607 23b8 	addw	r3, r7, #2744	@ 0xab8
 800744a:	9305      	str	r3, [sp, #20]
 800744c:	4b59      	ldr	r3, [pc, #356]	@ (80075b4 <main+0x2dc>)
 800744e:	9304      	str	r3, [sp, #16]
 8007450:	231c      	movs	r3, #28
 8007452:	9303      	str	r3, [sp, #12]
 8007454:	4b54      	ldr	r3, [pc, #336]	@ (80075a8 <main+0x2d0>)
 8007456:	9302      	str	r3, [sp, #8]
 8007458:	2320      	movs	r3, #32
 800745a:	9301      	str	r3, [sp, #4]
 800745c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	2320      	movs	r3, #32
 8007464:	4a49      	ldr	r2, [pc, #292]	@ (800758c <main+0x2b4>)
 8007466:	4848      	ldr	r0, [pc, #288]	@ (8007588 <main+0x2b0>)
 8007468:	f7fa ff80 	bl	800236c <cmox_ecdsa_sign>
 800746c:	f8c7 0ac8 	str.w	r0, [r7, #2760]	@ 0xac8
    								 privKey, sizeof(privKey),
    	                             Computed_Hash, CMOX_SHA224_SIZE,
    	                             Computed_Signature, &computed_size);

    	    // Verify the signature computation
    	    if (retval != CMOX_ECC_SUCCESS || computed_size != sizeof(Computed_Signature))
 8007470:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	@ 0xac8
 8007474:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007478:	d103      	bne.n	8007482 <main+0x1aa>
 800747a:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	@ 0xab8
 800747e:	2b40      	cmp	r3, #64	@ 0x40
 8007480:	d007      	beq.n	8007492 <main+0x1ba>
    	    {
    	        Print_Computed_Signature(Computed_Signature, computed_size);
 8007482:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	@ 0xab8
 8007486:	4619      	mov	r1, r3
 8007488:	484a      	ldr	r0, [pc, #296]	@ (80075b4 <main+0x2dc>)
 800748a:	f000 fab5 	bl	80079f8 <Print_Computed_Signature>
    	        Error_Handler();
 800748e:	f000 fc71 	bl	8007d74 <Error_Handler>
    	    }
    	    UART_PrintSignature(Computed_Signature, computed_size);
 8007492:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	@ 0xab8
 8007496:	4619      	mov	r1, r3
 8007498:	4846      	ldr	r0, [pc, #280]	@ (80075b4 <main+0x2dc>)
 800749a:	f000 fa73 	bl	8007984 <UART_PrintSignature>

    	    cmox_ecc_cleanup(&Ecc_Ctx);  // Clean up ECC context
 800749e:	483a      	ldr	r0, [pc, #232]	@ (8007588 <main+0x2b0>)
 80074a0:	f7f8 feb4 	bl	800020c <cmox_ecc_cleanup>

    	    cmox_ecc_construct(&Ecc_Ctx, CMOX_ECC256_MATH_FUNCS, Working_Buffer, sizeof(Working_Buffer));
 80074a4:	4b42      	ldr	r3, [pc, #264]	@ (80075b0 <main+0x2d8>)
 80074a6:	6819      	ldr	r1, [r3, #0]
 80074a8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80074ac:	4a35      	ldr	r2, [pc, #212]	@ (8007584 <main+0x2ac>)
 80074ae:	4836      	ldr	r0, [pc, #216]	@ (8007588 <main+0x2b0>)
 80074b0:	f7f8 fe96 	bl	80001e0 <cmox_ecc_construct>
    	    retval = cmox_ecdsa_verify(&Ecc_Ctx,                                  /* ECC context */
 80074b4:	4b31      	ldr	r3, [pc, #196]	@ (800757c <main+0x2a4>)
 80074b6:	6819      	ldr	r1, [r3, #0]
 80074b8:	f507 72e6 	add.w	r2, r7, #460	@ 0x1cc
 80074bc:	f607 23b4 	addw	r3, r7, #2740	@ 0xab4
 80074c0:	9304      	str	r3, [sp, #16]
 80074c2:	2340      	movs	r3, #64	@ 0x40
 80074c4:	9303      	str	r3, [sp, #12]
 80074c6:	4b3b      	ldr	r3, [pc, #236]	@ (80075b4 <main+0x2dc>)
 80074c8:	9302      	str	r3, [sp, #8]
 80074ca:	231c      	movs	r3, #28
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	4b36      	ldr	r3, [pc, #216]	@ (80075a8 <main+0x2d0>)
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	2340      	movs	r3, #64	@ 0x40
 80074d4:	482c      	ldr	r0, [pc, #176]	@ (8007588 <main+0x2b0>)
 80074d6:	f7fb f899 	bl	800260c <cmox_ecdsa_verify>
 80074da:	f8c7 0ac8 	str.w	r0, [r7, #2760]	@ 0xac8
    								   pubKey, sizeof(pubKey),            /* Public key for verification */
    	                               Computed_Hash, CMOX_SHA224_SIZE,           /* Digest to verify */
    								   Computed_Signature, sizeof(Computed_Signature),  /* Data buffer to receive signature */
    	                               &fault_check);                             /* Fault check variable:*/

    	    processRDF(Message);
 80074de:	f507 732d 	add.w	r3, r7, #692	@ 0x2b4
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff fe86 	bl	80071f4 <processRDF>

    	    // Print the Message variable
    	    UART_Print(Message);
 80074e8:	f507 732d 	add.w	r3, r7, #692	@ 0x2b4
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 fafb 	bl	8007ae8 <UART_Print>
    	    UART_Print("\r\n");
 80074f2:	4828      	ldr	r0, [pc, #160]	@ (8007594 <main+0x2bc>)
 80074f4:	f000 faf8 	bl	8007ae8 <UART_Print>


    	    /* Cleanup context */
    	    cmox_ecc_cleanup(&Ecc_Ctx);
 80074f8:	4823      	ldr	r0, [pc, #140]	@ (8007588 <main+0x2b0>)
 80074fa:	f7f8 fe87 	bl	800020c <cmox_ecc_cleanup>
 80074fe:	e062      	b.n	80075c6 <main+0x2ee>
    }
    else if (rx_buffer[0] == '2')
 8007500:	4b25      	ldr	r3, [pc, #148]	@ (8007598 <main+0x2c0>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	2b32      	cmp	r3, #50	@ 0x32
 8007506:	d15b      	bne.n	80075c0 <main+0x2e8>
        {
    	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8007508:	f001 fd46 	bl	8008f98 <HAL_RCC_GetHCLKFreq>
 800750c:	4603      	mov	r3, r0
 800750e:	4a24      	ldr	r2, [pc, #144]	@ (80075a0 <main+0x2c8>)
 8007510:	fba2 2303 	umull	r2, r3, r2, r3
 8007514:	099b      	lsrs	r3, r3, #6
 8007516:	4618      	mov	r0, r3
 8007518:	f000 ff6d 	bl	80083f6 <HAL_SYSTICK_Config>
    	start_time = HAL_GetTick();
 800751c:	f000 fe86 	bl	800822c <HAL_GetTick>
 8007520:	f8c7 0ad4 	str.w	r0, [r7, #2772]	@ 0xad4
    	char json_message[] =
 8007524:	f607 23d8 	addw	r3, r7, #2776	@ 0xad8
 8007528:	f6a3 23d8 	subw	r3, r3, #2776	@ 0xad8
 800752c:	4a22      	ldr	r2, [pc, #136]	@ (80075b8 <main+0x2e0>)
 800752e:	4618      	mov	r0, r3
 8007530:	4611      	mov	r1, r2
 8007532:	f240 13c7 	movw	r3, #455	@ 0x1c7
 8007536:	461a      	mov	r2, r3
 8007538:	f003 ff14 	bl	800b364 <memcpy>
//        } else {
//        	UART_Print("The strings are NOT equal.\n");
//        }
        //UART_Print(Message);
        //UART_Print(json_message);
    	UART_Print("\r\n");
 800753c:	4815      	ldr	r0, [pc, #84]	@ (8007594 <main+0x2bc>)
 800753e:	f000 fad3 	bl	8007ae8 <UART_Print>
    	UART_Print("Verifying  credentials, Please wait...\r\n");
 8007542:	481e      	ldr	r0, [pc, #120]	@ (80075bc <main+0x2e4>)
 8007544:	f000 fad0 	bl	8007ae8 <UART_Print>
    	UART_Print("\r\n");
 8007548:	4812      	ldr	r0, [pc, #72]	@ (8007594 <main+0x2bc>)
 800754a:	f000 facd 	bl	8007ae8 <UART_Print>

    	strcpy(Message, json_message);
 800754e:	463a      	mov	r2, r7
 8007550:	f507 732d 	add.w	r3, r7, #692	@ 0x2b4
 8007554:	4611      	mov	r1, r2
 8007556:	4618      	mov	r0, r3
 8007558:	f003 fef7 	bl	800b34a <strcpy>
//    	processRDF(Message);
    	UART_Print(Message);
 800755c:	f507 732d 	add.w	r3, r7, #692	@ 0x2b4
 8007560:	4618      	mov	r0, r3
 8007562:	f000 fac1 	bl	8007ae8 <UART_Print>
    	UART_Print("\r\n");
 8007566:	480b      	ldr	r0, [pc, #44]	@ (8007594 <main+0x2bc>)
 8007568:	f000 fabe 	bl	8007ae8 <UART_Print>
 800756c:	e02b      	b.n	80075c6 <main+0x2ee>
 800756e:	bf00      	nop
 8007570:	00066e93 	.word	0x00066e93
 8007574:	0800ea5c 	.word	0x0800ea5c
 8007578:	0800ea8c 	.word	0x0800ea8c
 800757c:	0800f32c 	.word	0x0800f32c
 8007580:	0800f398 	.word	0x0800f398
 8007584:	2000062c 	.word	0x2000062c
 8007588:	20000614 	.word	0x20000614
 800758c:	0800f520 	.word	0x0800f520
 8007590:	0800eadc 	.word	0x0800eadc
 8007594:	0800eaf4 	.word	0x0800eaf4
 8007598:	20000610 	.word	0x20000610
 800759c:	0800eaf8 	.word	0x0800eaf8
 80075a0:	10624dd3 	.word	0x10624dd3
 80075a4:	0800f3f4 	.word	0x0800f3f4
 80075a8:	20000e6c 	.word	0x20000e6c
 80075ac:	0800eb28 	.word	0x0800eb28
 80075b0:	0800f3bc 	.word	0x0800f3bc
 80075b4:	20000e88 	.word	0x20000e88
 80075b8:	0800ec94 	.word	0x0800ec94
 80075bc:	0800eb44 	.word	0x0800eb44
//            snprintf(tx_buffer, sizeof(tx_buffer), "\r\nYou entered: %s\r\n", user_input);
//            UART_SendString(tx_buffer);
        }
        else
        {
            UART_SendString("\r\nInvalid input. Press 1 or 2.\r\n");
 80075c0:	4884      	ldr	r0, [pc, #528]	@ (80077d4 <main+0x4fc>)
 80075c2:	f7ff fe73 	bl	80072ac <UART_SendString>
        }

    // Compute the SHA-224 digest
    hretval = cmox_hash_compute(CMOX_SHA224_ALGO,
 80075c6:	4b84      	ldr	r3, [pc, #528]	@ (80077d8 <main+0x500>)
 80075c8:	6818      	ldr	r0, [r3, #0]
 80075ca:	f507 712d 	add.w	r1, r7, #692	@ 0x2b4
 80075ce:	f607 23b8 	addw	r3, r7, #2744	@ 0xab8
 80075d2:	9301      	str	r3, [sp, #4]
 80075d4:	231c      	movs	r3, #28
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	4b80      	ldr	r3, [pc, #512]	@ (80077dc <main+0x504>)
 80075da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075de:	f7fb f989 	bl	80028f4 <cmox_hash_compute>
 80075e2:	f8c7 0ac4 	str.w	r0, [r7, #2756]	@ 0xac4
                                Message, sizeof(Message),
                                Computed_Hash, CMOX_SHA224_SIZE,
                                &computed_size);

    // Check if hash computation was successful
    if (hretval != CMOX_HASH_SUCCESS || computed_size != CMOX_SHA224_SIZE)
 80075e6:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	@ 0xac4
 80075ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075ee:	d103      	bne.n	80075f8 <main+0x320>
 80075f0:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	@ 0xab8
 80075f4:	2b1c      	cmp	r3, #28
 80075f6:	d004      	beq.n	8007602 <main+0x32a>
    {
        UART_Print("Hash computation failed.\r\n");
 80075f8:	4879      	ldr	r0, [pc, #484]	@ (80077e0 <main+0x508>)
 80075fa:	f000 fa75 	bl	8007ae8 <UART_Print>
        Error_Handler();
 80075fe:	f000 fbb9 	bl	8007d74 <Error_Handler>
    }


    // Construct ECC context
    cmox_ecc_construct(&Ecc_Ctx, CMOX_ECC256_MATH_FUNCS, Working_Buffer, sizeof(Working_Buffer));
 8007602:	4b78      	ldr	r3, [pc, #480]	@ (80077e4 <main+0x50c>)
 8007604:	6819      	ldr	r1, [r3, #0]
 8007606:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800760a:	4a77      	ldr	r2, [pc, #476]	@ (80077e8 <main+0x510>)
 800760c:	4877      	ldr	r0, [pc, #476]	@ (80077ec <main+0x514>)
 800760e:	f7f8 fde7 	bl	80001e0 <cmox_ecc_construct>

    // Compute the ECDSA signature
    retval = cmox_ecdsa_sign(&Ecc_Ctx,
 8007612:	4b77      	ldr	r3, [pc, #476]	@ (80077f0 <main+0x518>)
 8007614:	6819      	ldr	r1, [r3, #0]
 8007616:	f607 23b8 	addw	r3, r7, #2744	@ 0xab8
 800761a:	9305      	str	r3, [sp, #20]
 800761c:	4b75      	ldr	r3, [pc, #468]	@ (80077f4 <main+0x51c>)
 800761e:	9304      	str	r3, [sp, #16]
 8007620:	231c      	movs	r3, #28
 8007622:	9303      	str	r3, [sp, #12]
 8007624:	4b6d      	ldr	r3, [pc, #436]	@ (80077dc <main+0x504>)
 8007626:	9302      	str	r3, [sp, #8]
 8007628:	2320      	movs	r3, #32
 800762a:	9301      	str	r3, [sp, #4]
 800762c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	2320      	movs	r3, #32
 8007634:	4a70      	ldr	r2, [pc, #448]	@ (80077f8 <main+0x520>)
 8007636:	486d      	ldr	r0, [pc, #436]	@ (80077ec <main+0x514>)
 8007638:	f7fa fe98 	bl	800236c <cmox_ecdsa_sign>
 800763c:	f8c7 0ac8 	str.w	r0, [r7, #2760]	@ 0xac8
							 privKey, sizeof(privKey),
                             Computed_Hash, CMOX_SHA224_SIZE,
                             Computed_Signature, &computed_size);

    // Verify the signature computation
    if (retval != CMOX_ECC_SUCCESS || computed_size != sizeof(Computed_Signature))
 8007640:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	@ 0xac8
 8007644:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007648:	d103      	bne.n	8007652 <main+0x37a>
 800764a:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	@ 0xab8
 800764e:	2b40      	cmp	r3, #64	@ 0x40
 8007650:	d00a      	beq.n	8007668 <main+0x390>
    {
        UART_Print("Signature computation failed.\r\n");
 8007652:	486a      	ldr	r0, [pc, #424]	@ (80077fc <main+0x524>)
 8007654:	f000 fa48 	bl	8007ae8 <UART_Print>
        Print_Computed_Signature(Computed_Signature, computed_size);
 8007658:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	@ 0xab8
 800765c:	4619      	mov	r1, r3
 800765e:	4865      	ldr	r0, [pc, #404]	@ (80077f4 <main+0x51c>)
 8007660:	f000 f9ca 	bl	80079f8 <Print_Computed_Signature>
        Error_Handler();
 8007664:	f000 fb86 	bl	8007d74 <Error_Handler>
    }

    UART_Print("Signature computed successfully.\r\n");
 8007668:	4865      	ldr	r0, [pc, #404]	@ (8007800 <main+0x528>)
 800766a:	f000 fa3d 	bl	8007ae8 <UART_Print>

    UART_Print("Computed Signature: ");
 800766e:	4865      	ldr	r0, [pc, #404]	@ (8007804 <main+0x52c>)
 8007670:	f000 fa3a 	bl	8007ae8 <UART_Print>
    Print_Computed_Signature(Computed_Signature, computed_size);
 8007674:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	@ 0xab8
 8007678:	4619      	mov	r1, r3
 800767a:	485e      	ldr	r0, [pc, #376]	@ (80077f4 <main+0x51c>)
 800767c:	f000 f9bc 	bl	80079f8 <Print_Computed_Signature>
    //Print_Computed_Signature(Computed_Signature, computed_size);
    UART_Print("\r\n");
 8007680:	4861      	ldr	r0, [pc, #388]	@ (8007808 <main+0x530>)
 8007682:	f000 fa31 	bl	8007ae8 <UART_Print>

    cmox_ecc_cleanup(&Ecc_Ctx);  // Clean up ECC context
 8007686:	4859      	ldr	r0, [pc, #356]	@ (80077ec <main+0x514>)
 8007688:	f7f8 fdc0 	bl	800020c <cmox_ecc_cleanup>

    cmox_ecc_construct(&Ecc_Ctx, CMOX_ECC256_MATH_FUNCS, Working_Buffer, sizeof(Working_Buffer));
 800768c:	4b55      	ldr	r3, [pc, #340]	@ (80077e4 <main+0x50c>)
 800768e:	6819      	ldr	r1, [r3, #0]
 8007690:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8007694:	4a54      	ldr	r2, [pc, #336]	@ (80077e8 <main+0x510>)
 8007696:	4855      	ldr	r0, [pc, #340]	@ (80077ec <main+0x514>)
 8007698:	f7f8 fda2 	bl	80001e0 <cmox_ecc_construct>
    retval = cmox_ecdsa_verify(&Ecc_Ctx,                                  /* ECC context */
 800769c:	4b54      	ldr	r3, [pc, #336]	@ (80077f0 <main+0x518>)
 800769e:	6819      	ldr	r1, [r3, #0]
 80076a0:	f507 72e6 	add.w	r2, r7, #460	@ 0x1cc
 80076a4:	f607 23b4 	addw	r3, r7, #2740	@ 0xab4
 80076a8:	9304      	str	r3, [sp, #16]
 80076aa:	2340      	movs	r3, #64	@ 0x40
 80076ac:	9303      	str	r3, [sp, #12]
 80076ae:	4b51      	ldr	r3, [pc, #324]	@ (80077f4 <main+0x51c>)
 80076b0:	9302      	str	r3, [sp, #8]
 80076b2:	231c      	movs	r3, #28
 80076b4:	9301      	str	r3, [sp, #4]
 80076b6:	4b49      	ldr	r3, [pc, #292]	@ (80077dc <main+0x504>)
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	2340      	movs	r3, #64	@ 0x40
 80076bc:	484b      	ldr	r0, [pc, #300]	@ (80077ec <main+0x514>)
 80076be:	f7fa ffa5 	bl	800260c <cmox_ecdsa_verify>
 80076c2:	f8c7 0ac8 	str.w	r0, [r7, #2760]	@ 0xac8
                               Computed_Hash, CMOX_SHA224_SIZE,           /* Digest to verify */
							   Computed_Signature, sizeof(Computed_Signature),  /* Data buffer to receive signature */
                               &fault_check);                             /* Fault check variable:*/

    // Check if the verification succeeded
    if (retval != CMOX_ECC_AUTH_SUCCESS || fault_check != CMOX_ECC_AUTH_SUCCESS)
 80076c6:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	@ 0xac8
 80076ca:	4a50      	ldr	r2, [pc, #320]	@ (800780c <main+0x534>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d104      	bne.n	80076da <main+0x402>
 80076d0:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	@ 0xab4
 80076d4:	4a4d      	ldr	r2, [pc, #308]	@ (800780c <main+0x534>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d005      	beq.n	80076e6 <main+0x40e>
    {
        UART_Print("Signature verification failed.\r\n");
 80076da:	484d      	ldr	r0, [pc, #308]	@ (8007810 <main+0x538>)
 80076dc:	f000 fa04 	bl	8007ae8 <UART_Print>
        Error_Handler();
 80076e0:	f000 fb48 	bl	8007d74 <Error_Handler>
 80076e4:	e002      	b.n	80076ec <main+0x414>
    }
    else
    {
        UART_Print("Signature verification successful!\r\n");
 80076e6:	484b      	ldr	r0, [pc, #300]	@ (8007814 <main+0x53c>)
 80076e8:	f000 f9fe 	bl	8007ae8 <UART_Print>
    }

    uint32_t end_time = HAL_GetTick();
 80076ec:	f000 fd9e 	bl	800822c <HAL_GetTick>
 80076f0:	f8c7 0ac0 	str.w	r0, [r7, #2752]	@ 0xac0
    print_execution_time(start_time, end_time);
 80076f4:	f8d7 1ac0 	ldr.w	r1, [r7, #2752]	@ 0xac0
 80076f8:	f8d7 0ad4 	ldr.w	r0, [r7, #2772]	@ 0xad4
 80076fc:	f000 f898 	bl	8007830 <print_execution_time>
    cmox_ecc_cleanup(&Ecc_Ctx);
 8007700:	483a      	ldr	r0, [pc, #232]	@ (80077ec <main+0x514>)
 8007702:	f7f8 fd83 	bl	800020c <cmox_ecc_cleanup>
    //processRDF(Message);

    // Print the Message variable
    //UART_Print(Message);

    cmox_ecc_retval_t ret = cmox_ecdh(&Ecc_Ctx,
 8007706:	4b44      	ldr	r3, [pc, #272]	@ (8007818 <main+0x540>)
 8007708:	6819      	ldr	r1, [r3, #0]
 800770a:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 800770e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007712:	9303      	str	r3, [sp, #12]
 8007714:	f507 7315 	add.w	r3, r7, #596	@ 0x254
 8007718:	9302      	str	r3, [sp, #8]
 800771a:	2320      	movs	r3, #32
 800771c:	9301      	str	r3, [sp, #4]
 800771e:	f507 731d 	add.w	r3, r7, #628	@ 0x274
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	2320      	movs	r3, #32
 8007726:	4831      	ldr	r0, [pc, #196]	@ (80077ec <main+0x514>)
 8007728:	f7fa fc4c 	bl	8001fc4 <cmox_ecdh>
 800772c:	f8c7 0abc 	str.w	r0, [r7, #2748]	@ 0xabc
                                      shared_secret, &shared_secret_len);
    if (ret != CMOX_ECC_SUCCESS) {
        // Handle error
    }

    UART_Print("\r\nECDH private_key: ");
 8007730:	483a      	ldr	r0, [pc, #232]	@ (800781c <main+0x544>)
 8007732:	f000 f9d9 	bl	8007ae8 <UART_Print>
    Print_Computed_Keys(private_key, private_key_len);
 8007736:	f897 2ad3 	ldrb.w	r2, [r7, #2771]	@ 0xad3
 800773a:	f507 7325 	add.w	r3, r7, #660	@ 0x294
 800773e:	4611      	mov	r1, r2
 8007740:	4618      	mov	r0, r3
 8007742:	f000 f995 	bl	8007a70 <Print_Computed_Keys>
    UART_Print("\r\nECDH public_key: ");
 8007746:	4836      	ldr	r0, [pc, #216]	@ (8007820 <main+0x548>)
 8007748:	f000 f9ce 	bl	8007ae8 <UART_Print>
    Print_Computed_Keys(public_key, public_key_len);
 800774c:	f897 2ad2 	ldrb.w	r2, [r7, #2770]	@ 0xad2
 8007750:	f507 731d 	add.w	r3, r7, #628	@ 0x274
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f000 f98a 	bl	8007a70 <Print_Computed_Keys>
    UART_Print("\r\nECDH shared_secret: ");
 800775c:	4831      	ldr	r0, [pc, #196]	@ (8007824 <main+0x54c>)
 800775e:	f000 f9c3 	bl	8007ae8 <UART_Print>
    Print_Computed_Keys(shared_secret, shared_secret_len);
 8007762:	f607 23d8 	addw	r3, r7, #2776	@ 0xad8
 8007766:	f6a3 0388 	subw	r3, r3, #2184	@ 0x888
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	f507 7315 	add.w	r3, r7, #596	@ 0x254
 8007770:	4611      	mov	r1, r2
 8007772:	4618      	mov	r0, r3
 8007774:	f000 f97c 	bl	8007a70 <Print_Computed_Keys>

    hretval = cmox_hash_compute(CMOX_SHA256_ALGO,
 8007778:	4b2b      	ldr	r3, [pc, #172]	@ (8007828 <main+0x550>)
 800777a:	6818      	ldr	r0, [r3, #0]
 800777c:	f507 7115 	add.w	r1, r7, #596	@ 0x254
 8007780:	f607 23b8 	addw	r3, r7, #2744	@ 0xab8
 8007784:	9301      	str	r3, [sp, #4]
 8007786:	2320      	movs	r3, #32
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	4b14      	ldr	r3, [pc, #80]	@ (80077dc <main+0x504>)
 800778c:	2220      	movs	r2, #32
 800778e:	f7fb f8b1 	bl	80028f4 <cmox_hash_compute>
 8007792:	f8c7 0ac4 	str.w	r0, [r7, #2756]	@ 0xac4
    		shared_secret, sizeof(shared_secret),
                                Computed_Hash, CMOX_SHA256_SIZE,
                                &computed_size);

    // Check if hash computation was successful
    if (hretval != CMOX_HASH_SUCCESS || computed_size != CMOX_SHA256_SIZE)
 8007796:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	@ 0xac4
 800779a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800779e:	d103      	bne.n	80077a8 <main+0x4d0>
 80077a0:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	@ 0xab8
 80077a4:	2b20      	cmp	r3, #32
 80077a6:	d004      	beq.n	80077b2 <main+0x4da>
    {
        UART_Print("Hash computation failed.\r\n");
 80077a8:	480d      	ldr	r0, [pc, #52]	@ (80077e0 <main+0x508>)
 80077aa:	f000 f99d 	bl	8007ae8 <UART_Print>
        Error_Handler();
 80077ae:	f000 fae1 	bl	8007d74 <Error_Handler>
    }
    UART_Print("\r\nComputed Hash: ");
 80077b2:	481e      	ldr	r0, [pc, #120]	@ (800782c <main+0x554>)
 80077b4:	f000 f998 	bl	8007ae8 <UART_Print>
    Print_Computed_Signature(Computed_Hash, computed_size);
 80077b8:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	@ 0xab8
 80077bc:	4619      	mov	r1, r3
 80077be:	4807      	ldr	r0, [pc, #28]	@ (80077dc <main+0x504>)
 80077c0:	f000 f91a 	bl	80079f8 <Print_Computed_Signature>


    while (1) {
 80077c4:	bf00      	nop
 80077c6:	e7fd      	b.n	80077c4 <main+0x4ec>
        // Infinite loop
    }
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	f607 27d8 	addw	r7, r7, #2776	@ 0xad8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	0800eb70 	.word	0x0800eb70
 80077d8:	0800f3f4 	.word	0x0800f3f4
 80077dc:	20000e6c 	.word	0x20000e6c
 80077e0:	0800eb28 	.word	0x0800eb28
 80077e4:	0800f3bc 	.word	0x0800f3bc
 80077e8:	2000062c 	.word	0x2000062c
 80077ec:	20000614 	.word	0x20000614
 80077f0:	0800f32c 	.word	0x0800f32c
 80077f4:	20000e88 	.word	0x20000e88
 80077f8:	0800f520 	.word	0x0800f520
 80077fc:	0800eb94 	.word	0x0800eb94
 8007800:	0800ebb4 	.word	0x0800ebb4
 8007804:	0800ebd8 	.word	0x0800ebd8
 8007808:	0800eaf4 	.word	0x0800eaf4
 800780c:	0006c726 	.word	0x0006c726
 8007810:	0800ebf0 	.word	0x0800ebf0
 8007814:	0800ec14 	.word	0x0800ec14
 8007818:	0800efe0 	.word	0x0800efe0
 800781c:	0800ec3c 	.word	0x0800ec3c
 8007820:	0800ec54 	.word	0x0800ec54
 8007824:	0800ec68 	.word	0x0800ec68
 8007828:	0800f3fc 	.word	0x0800f3fc
 800782c:	0800ec80 	.word	0x0800ec80

08007830 <print_execution_time>:

void print_execution_time(uint32_t start_time, uint32_t end_time)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b090      	sub	sp, #64	@ 0x40
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  char buffer[50];
  uint32_t execution_time = end_time - start_time;
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sprintf(buffer, "Total execution time: %lu ms\r\n", execution_time);
 8007842:	f107 0308 	add.w	r3, r7, #8
 8007846:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007848:	490a      	ldr	r1, [pc, #40]	@ (8007874 <print_execution_time+0x44>)
 800784a:	4618      	mov	r0, r3
 800784c:	f003 fc60 	bl	800b110 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8007850:	f107 0308 	add.w	r3, r7, #8
 8007854:	4618      	mov	r0, r3
 8007856:	f7fe faf3 	bl	8005e40 <strlen>
 800785a:	4603      	mov	r3, r0
 800785c:	b29a      	uxth	r2, r3
 800785e:	f107 0108 	add.w	r1, r7, #8
 8007862:	f04f 33ff 	mov.w	r3, #4294967295
 8007866:	4804      	ldr	r0, [pc, #16]	@ (8007878 <print_execution_time+0x48>)
 8007868:	f002 f814 	bl	8009894 <HAL_UART_Transmit>
}
 800786c:	bf00      	nop
 800786e:	3740      	adds	r7, #64	@ 0x40
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	0800ee5c 	.word	0x0800ee5c
 8007878:	20000e1c 	.word	0x20000e1c

0800787c <print_time>:
/* USER CODE BEGIN PV */
 // Global variable to store the time string
/* USER CODE END PV */

void print_time(void)
{
 800787c:	b5b0      	push	{r4, r5, r7, lr}
 800787e:	b08a      	sub	sp, #40	@ 0x28
 8007880:	af04      	add	r7, sp, #16
    RTC_TimeTypeDef sTime = {0};
 8007882:	1d3b      	adds	r3, r7, #4
 8007884:	2200      	movs	r2, #0
 8007886:	601a      	str	r2, [r3, #0]
 8007888:	605a      	str	r2, [r3, #4]
 800788a:	609a      	str	r2, [r3, #8]
 800788c:	60da      	str	r2, [r3, #12]
 800788e:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8007890:	2300      	movs	r3, #0
 8007892:	603b      	str	r3, [r7, #0]

    // Get current time and date from RTC
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8007894:	1d3b      	adds	r3, r7, #4
 8007896:	2200      	movs	r2, #0
 8007898:	4619      	mov	r1, r3
 800789a:	4814      	ldr	r0, [pc, #80]	@ (80078ec <print_time+0x70>)
 800789c:	f001 fdbb 	bl	8009416 <HAL_RTC_GetTime>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d001      	beq.n	80078aa <print_time+0x2e>
    {
        Error_Handler();
 80078a6:	f000 fa65 	bl	8007d74 <Error_Handler>
    }
    if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80078aa:	463b      	mov	r3, r7
 80078ac:	2200      	movs	r2, #0
 80078ae:	4619      	mov	r1, r3
 80078b0:	480e      	ldr	r0, [pc, #56]	@ (80078ec <print_time+0x70>)
 80078b2:	f001 fe92 	bl	80095da <HAL_RTC_GetDate>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <print_time+0x44>
    {
        Error_Handler();
 80078bc:	f000 fa5a 	bl	8007d74 <Error_Handler>
    }

    // Format the time into the global variable
    sprintf(global_time, "%04d-%02d-%02dT%02d:%02d:%02dZ",
            sDate.Year + 2000,  // Adjust for RTC year offset
 80078c0:	78fb      	ldrb	r3, [r7, #3]
    sprintf(global_time, "%04d-%02d-%02dT%02d:%02d:%02dZ",
 80078c2:	f503 62fa 	add.w	r2, r3, #2000	@ 0x7d0
            sDate.Month,
 80078c6:	787b      	ldrb	r3, [r7, #1]
    sprintf(global_time, "%04d-%02d-%02dT%02d:%02d:%02dZ",
 80078c8:	461d      	mov	r5, r3
            sDate.Date,
 80078ca:	78bb      	ldrb	r3, [r7, #2]
            sTime.Hours,
 80078cc:	7939      	ldrb	r1, [r7, #4]
            sTime.Minutes,
 80078ce:	7978      	ldrb	r0, [r7, #5]
            sTime.Seconds);
 80078d0:	79bc      	ldrb	r4, [r7, #6]
    sprintf(global_time, "%04d-%02d-%02dT%02d:%02d:%02dZ",
 80078d2:	9403      	str	r4, [sp, #12]
 80078d4:	9002      	str	r0, [sp, #8]
 80078d6:	9101      	str	r1, [sp, #4]
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	462b      	mov	r3, r5
 80078dc:	4904      	ldr	r1, [pc, #16]	@ (80078f0 <print_time+0x74>)
 80078de:	4805      	ldr	r0, [pc, #20]	@ (80078f4 <print_time+0x78>)
 80078e0:	f003 fc16 	bl	800b110 <siprintf>
}
 80078e4:	bf00      	nop
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bdb0      	pop	{r4, r5, r7, pc}
 80078ec:	20000dfc 	.word	0x20000dfc
 80078f0:	0800ee7c 	.word	0x0800ee7c
 80078f4:	200005f4 	.word	0x200005f4

080078f8 <ByteArrayToHexString>:

/**
  * @brief Convert byte array to hex string
  */
void ByteArrayToHexString(const uint8_t *pData, size_t length, char *pStr)
{
 80078f8:	b4b0      	push	{r4, r5, r7}
 80078fa:	b08b      	sub	sp, #44	@ 0x2c
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
    const char hexDigits[] = "0123456789ABCDEF";
 8007904:	4b1e      	ldr	r3, [pc, #120]	@ (8007980 <ByteArrayToHexString+0x88>)
 8007906:	f107 0410 	add.w	r4, r7, #16
 800790a:	461d      	mov	r5, r3
 800790c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800790e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < length; ++i)
 8007914:	2300      	movs	r3, #0
 8007916:	627b      	str	r3, [r7, #36]	@ 0x24
 8007918:	e023      	b.n	8007962 <ByteArrayToHexString+0x6a>
    {
        pStr[i * 2]     = hexDigits[(pData[i] >> 4) & 0x0F];
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791e:	4413      	add	r3, r2
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	091b      	lsrs	r3, r3, #4
 8007924:	b2db      	uxtb	r3, r3
 8007926:	f003 020f 	and.w	r2, r3, #15
 800792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792c:	005b      	lsls	r3, r3, #1
 800792e:	6879      	ldr	r1, [r7, #4]
 8007930:	440b      	add	r3, r1
 8007932:	3228      	adds	r2, #40	@ 0x28
 8007934:	443a      	add	r2, r7
 8007936:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800793a:	701a      	strb	r2, [r3, #0]
        pStr[i * 2 + 1] = hexDigits[pData[i] & 0x0F];
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007940:	4413      	add	r3, r2
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	f003 020f 	and.w	r2, r3, #15
 8007948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794a:	005b      	lsls	r3, r3, #1
 800794c:	3301      	adds	r3, #1
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	440b      	add	r3, r1
 8007952:	3228      	adds	r2, #40	@ 0x28
 8007954:	443a      	add	r2, r7
 8007956:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800795a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < length; ++i)
 800795c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795e:	3301      	adds	r3, #1
 8007960:	627b      	str	r3, [r7, #36]	@ 0x24
 8007962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	429a      	cmp	r2, r3
 8007968:	d3d7      	bcc.n	800791a <ByteArrayToHexString+0x22>
    }
    pStr[length * 2] = '\0'; // Null-terminate the string
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	4413      	add	r3, r2
 8007972:	2200      	movs	r2, #0
 8007974:	701a      	strb	r2, [r3, #0]
}
 8007976:	bf00      	nop
 8007978:	372c      	adds	r7, #44	@ 0x2c
 800797a:	46bd      	mov	sp, r7
 800797c:	bcb0      	pop	{r4, r5, r7}
 800797e:	4770      	bx	lr
 8007980:	0800ee9c 	.word	0x0800ee9c

08007984 <UART_PrintSignature>:

void UART_PrintSignature(const uint8_t *data, size_t length) {
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
    size_t offset = 0;
 800798e:	2300      	movs	r3, #0
 8007990:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < length; i++) {
 8007992:	2300      	movs	r3, #0
 8007994:	60bb      	str	r3, [r7, #8]
 8007996:	e01d      	b.n	80079d4 <UART_PrintSignature+0x50>
        if ((offset + 3) < hexSignature) {
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	3303      	adds	r3, #3
 800799c:	461a      	mov	r2, r3
 800799e:	4b13      	ldr	r3, [pc, #76]	@ (80079ec <UART_PrintSignature+0x68>)
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d210      	bcs.n	80079c6 <UART_PrintSignature+0x42>
            offset += sprintf(&hexSignature[offset], "%02X", data[i]);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	4a11      	ldr	r2, [pc, #68]	@ (80079ec <UART_PrintSignature+0x68>)
 80079a8:	1898      	adds	r0, r3, r2
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	4413      	add	r3, r2
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	490e      	ldr	r1, [pc, #56]	@ (80079f0 <UART_PrintSignature+0x6c>)
 80079b6:	f003 fbab 	bl	800b110 <siprintf>
 80079ba:	4603      	mov	r3, r0
 80079bc:	461a      	mov	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	4413      	add	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	e003      	b.n	80079ce <UART_PrintSignature+0x4a>
        } else {
            UART_Print("Error: hexSignature buffer overflow\r\n");
 80079c6:	480b      	ldr	r0, [pc, #44]	@ (80079f4 <UART_PrintSignature+0x70>)
 80079c8:	f000 f88e 	bl	8007ae8 <UART_Print>
            return;
 80079cc:	e00b      	b.n	80079e6 <UART_PrintSignature+0x62>
    for (size_t i = 0; i < length; i++) {
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	3301      	adds	r3, #1
 80079d2:	60bb      	str	r3, [r7, #8]
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d3dd      	bcc.n	8007998 <UART_PrintSignature+0x14>
        }
    }
    hexSignature[offset] = '\0';
 80079dc:	4a03      	ldr	r2, [pc, #12]	@ (80079ec <UART_PrintSignature+0x68>)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4413      	add	r3, r2
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
//    UART_Print(hexSignature);
//    UART_Print("\r\n");
}
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	200001f4 	.word	0x200001f4
 80079f0:	0800eeb0 	.word	0x0800eeb0
 80079f4:	0800eeb8 	.word	0x0800eeb8

080079f8 <Print_Computed_Signature>:

/**
  * @brief Print computed ECDSA signature as hex
  */
void Print_Computed_Signature(const uint8_t *pSignature, size_t length)
{
 80079f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079fc:	b085      	sub	sp, #20
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	6039      	str	r1, [r7, #0]
 8007a04:	466b      	mov	r3, sp
 8007a06:	461e      	mov	r6, r3
    char signatureHex[2 * length + 1];
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	005b      	lsls	r3, r3, #1
 8007a0c:	1c59      	adds	r1, r3, #1
 8007a0e:	460b      	mov	r3, r1
 8007a10:	3b01      	subs	r3, #1
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	2300      	movs	r3, #0
 8007a16:	4688      	mov	r8, r1
 8007a18:	4699      	mov	r9, r3
 8007a1a:	f04f 0200 	mov.w	r2, #0
 8007a1e:	f04f 0300 	mov.w	r3, #0
 8007a22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a2e:	2300      	movs	r3, #0
 8007a30:	460c      	mov	r4, r1
 8007a32:	461d      	mov	r5, r3
 8007a34:	f04f 0200 	mov.w	r2, #0
 8007a38:	f04f 0300 	mov.w	r3, #0
 8007a3c:	00eb      	lsls	r3, r5, #3
 8007a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a42:	00e2      	lsls	r2, r4, #3
 8007a44:	1dcb      	adds	r3, r1, #7
 8007a46:	08db      	lsrs	r3, r3, #3
 8007a48:	00db      	lsls	r3, r3, #3
 8007a4a:	ebad 0d03 	sub.w	sp, sp, r3
 8007a4e:	466b      	mov	r3, sp
 8007a50:	3300      	adds	r3, #0
 8007a52:	60bb      	str	r3, [r7, #8]
    ByteArrayToHexString(pSignature, length, signatureHex);
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7ff ff4d 	bl	80078f8 <ByteArrayToHexString>
    UART_Print(signatureHex);
 8007a5e:	68b8      	ldr	r0, [r7, #8]
 8007a60:	f000 f842 	bl	8007ae8 <UART_Print>
 8007a64:	46b5      	mov	sp, r6
}
 8007a66:	bf00      	nop
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007a70 <Print_Computed_Keys>:

void Print_Computed_Keys(const uint8_t *data, size_t length)
{
 8007a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a74:	b085      	sub	sp, #20
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	6039      	str	r1, [r7, #0]
 8007a7c:	466b      	mov	r3, sp
 8007a7e:	461e      	mov	r6, r3
    char keysHex[2 * length + 1];
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	005b      	lsls	r3, r3, #1
 8007a84:	1c59      	adds	r1, r3, #1
 8007a86:	460b      	mov	r3, r1
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	4688      	mov	r8, r1
 8007a90:	4699      	mov	r9, r3
 8007a92:	f04f 0200 	mov.w	r2, #0
 8007a96:	f04f 0300 	mov.w	r3, #0
 8007a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	460c      	mov	r4, r1
 8007aaa:	461d      	mov	r5, r3
 8007aac:	f04f 0200 	mov.w	r2, #0
 8007ab0:	f04f 0300 	mov.w	r3, #0
 8007ab4:	00eb      	lsls	r3, r5, #3
 8007ab6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007aba:	00e2      	lsls	r2, r4, #3
 8007abc:	1dcb      	adds	r3, r1, #7
 8007abe:	08db      	lsrs	r3, r3, #3
 8007ac0:	00db      	lsls	r3, r3, #3
 8007ac2:	ebad 0d03 	sub.w	sp, sp, r3
 8007ac6:	466b      	mov	r3, sp
 8007ac8:	3300      	adds	r3, #0
 8007aca:	60bb      	str	r3, [r7, #8]
    ByteArrayToHexString(data, length, keysHex);
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7ff ff11 	bl	80078f8 <ByteArrayToHexString>
    UART_Print(keysHex);
 8007ad6:	68b8      	ldr	r0, [r7, #8]
 8007ad8:	f000 f806 	bl	8007ae8 <UART_Print>
 8007adc:	46b5      	mov	sp, r6
}
 8007ade:	bf00      	nop
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007ae8 <UART_Print>:

/**
  * @brief Print string over UART
  */
void UART_Print(char *pString)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    status = HAL_UART_Transmit(&huart2, (uint8_t *)pString, strlen(pString), HAL_MAX_DELAY);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7fe f9a5 	bl	8005e40 <strlen>
 8007af6:	4603      	mov	r3, r0
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	f04f 33ff 	mov.w	r3, #4294967295
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	4806      	ldr	r0, [pc, #24]	@ (8007b1c <UART_Print+0x34>)
 8007b02:	f001 fec7 	bl	8009894 <HAL_UART_Transmit>
 8007b06:	4603      	mov	r3, r0
 8007b08:	73fb      	strb	r3, [r7, #15]

    // Check if transmission was successful
    if (status != HAL_OK)
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <UART_Print+0x2c>
    {
        Error_Handler();
 8007b10:	f000 f930 	bl	8007d74 <Error_Handler>
    }
}
 8007b14:	bf00      	nop
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	20000e1c 	.word	0x20000e1c

08007b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b094      	sub	sp, #80	@ 0x50
 8007b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007b26:	f107 0320 	add.w	r3, r7, #32
 8007b2a:	2230      	movs	r2, #48	@ 0x30
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f003 fb51 	bl	800b1d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007b34:	f107 030c 	add.w	r3, r7, #12
 8007b38:	2200      	movs	r2, #0
 8007b3a:	601a      	str	r2, [r3, #0]
 8007b3c:	605a      	str	r2, [r3, #4]
 8007b3e:	609a      	str	r2, [r3, #8]
 8007b40:	60da      	str	r2, [r3, #12]
 8007b42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b44:	2300      	movs	r3, #0
 8007b46:	60bb      	str	r3, [r7, #8]
 8007b48:	4b24      	ldr	r3, [pc, #144]	@ (8007bdc <SystemClock_Config+0xbc>)
 8007b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4c:	4a23      	ldr	r2, [pc, #140]	@ (8007bdc <SystemClock_Config+0xbc>)
 8007b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b54:	4b21      	ldr	r3, [pc, #132]	@ (8007bdc <SystemClock_Config+0xbc>)
 8007b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b5c:	60bb      	str	r3, [r7, #8]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8007b60:	2300      	movs	r3, #0
 8007b62:	607b      	str	r3, [r7, #4]
 8007b64:	4b1e      	ldr	r3, [pc, #120]	@ (8007be0 <SystemClock_Config+0xc0>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8007b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8007be0 <SystemClock_Config+0xc0>)
 8007b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b72:	6013      	str	r3, [r2, #0]
 8007b74:	4b1a      	ldr	r3, [pc, #104]	@ (8007be0 <SystemClock_Config+0xc0>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007b7c:	607b      	str	r3, [r7, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8007b80:	230a      	movs	r3, #10
 8007b82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007b84:	2301      	movs	r3, #1
 8007b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007b88:	2310      	movs	r3, #16
 8007b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007b90:	2300      	movs	r3, #0
 8007b92:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b94:	f107 0320 	add.w	r3, r7, #32
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 fdd9 	bl	8008750 <HAL_RCC_OscConfig>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d001      	beq.n	8007ba8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8007ba4:	f000 f8e6 	bl	8007d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007ba8:	230f      	movs	r3, #15
 8007baa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007bac:	2300      	movs	r3, #0
 8007bae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007bbc:	f107 030c 	add.w	r3, r7, #12
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f001 f83c 	bl	8008c40 <HAL_RCC_ClockConfig>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8007bce:	f000 f8d1 	bl	8007d74 <Error_Handler>
  }
}
 8007bd2:	bf00      	nop
 8007bd4:	3750      	adds	r7, #80	@ 0x50
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	40023800 	.word	0x40023800
 8007be0:	40007000 	.word	0x40007000

08007be4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8007be8:	4b06      	ldr	r3, [pc, #24]	@ (8007c04 <MX_CRC_Init+0x20>)
 8007bea:	4a07      	ldr	r2, [pc, #28]	@ (8007c08 <MX_CRC_Init+0x24>)
 8007bec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007bee:	4805      	ldr	r0, [pc, #20]	@ (8007c04 <MX_CRC_Init+0x20>)
 8007bf0:	f000 fc0d 	bl	800840e <HAL_CRC_Init>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8007bfa:	f000 f8bb 	bl	8007d74 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8007bfe:	bf00      	nop
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	20000e64 	.word	0x20000e64
 8007c08:	40023000 	.word	0x40023000

08007c0c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8007c12:	1d3b      	adds	r3, r7, #4
 8007c14:	2200      	movs	r2, #0
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	605a      	str	r2, [r3, #4]
 8007c1a:	609a      	str	r2, [r3, #8]
 8007c1c:	60da      	str	r2, [r3, #12]
 8007c1e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8007c20:	2300      	movs	r3, #0
 8007c22:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007c24:	4b24      	ldr	r3, [pc, #144]	@ (8007cb8 <MX_RTC_Init+0xac>)
 8007c26:	4a25      	ldr	r2, [pc, #148]	@ (8007cbc <MX_RTC_Init+0xb0>)
 8007c28:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007c2a:	4b23      	ldr	r3, [pc, #140]	@ (8007cb8 <MX_RTC_Init+0xac>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007c30:	4b21      	ldr	r3, [pc, #132]	@ (8007cb8 <MX_RTC_Init+0xac>)
 8007c32:	227f      	movs	r2, #127	@ 0x7f
 8007c34:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007c36:	4b20      	ldr	r3, [pc, #128]	@ (8007cb8 <MX_RTC_Init+0xac>)
 8007c38:	22ff      	movs	r2, #255	@ 0xff
 8007c3a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8007cb8 <MX_RTC_Init+0xac>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007c42:	4b1d      	ldr	r3, [pc, #116]	@ (8007cb8 <MX_RTC_Init+0xac>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007c48:	4b1b      	ldr	r3, [pc, #108]	@ (8007cb8 <MX_RTC_Init+0xac>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007c4e:	481a      	ldr	r0, [pc, #104]	@ (8007cb8 <MX_RTC_Init+0xac>)
 8007c50:	f001 fac4 	bl	80091dc <HAL_RTC_Init>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8007c5a:	f000 f88b 	bl	8007d74 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8007c62:	2300      	movs	r3, #0
 8007c64:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8007c66:	2300      	movs	r3, #0
 8007c68:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8007c72:	1d3b      	adds	r3, r7, #4
 8007c74:	2201      	movs	r2, #1
 8007c76:	4619      	mov	r1, r3
 8007c78:	480f      	ldr	r0, [pc, #60]	@ (8007cb8 <MX_RTC_Init+0xac>)
 8007c7a:	f001 fb32 	bl	80092e2 <HAL_RTC_SetTime>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d001      	beq.n	8007c88 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8007c84:	f000 f876 	bl	8007d74 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8007c90:	2301      	movs	r3, #1
 8007c92:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8007c94:	2300      	movs	r3, #0
 8007c96:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8007c98:	463b      	mov	r3, r7
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	4806      	ldr	r0, [pc, #24]	@ (8007cb8 <MX_RTC_Init+0xac>)
 8007ca0:	f001 fc17 	bl	80094d2 <HAL_RTC_SetDate>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d001      	beq.n	8007cae <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8007caa:	f000 f863 	bl	8007d74 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007cae:	bf00      	nop
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	20000dfc 	.word	0x20000dfc
 8007cbc:	40002800 	.word	0x40002800

08007cc0 <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  */
static void MX_USART2_UART_Init(void)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8007cc4:	4b11      	ldr	r3, [pc, #68]	@ (8007d0c <MX_USART2_UART_Init+0x4c>)
 8007cc6:	4a12      	ldr	r2, [pc, #72]	@ (8007d10 <MX_USART2_UART_Init+0x50>)
 8007cc8:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8007cca:	4b10      	ldr	r3, [pc, #64]	@ (8007d0c <MX_USART2_UART_Init+0x4c>)
 8007ccc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007cd0:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8007d0c <MX_USART2_UART_Init+0x4c>)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8007cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8007d0c <MX_USART2_UART_Init+0x4c>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8007cde:	4b0b      	ldr	r3, [pc, #44]	@ (8007d0c <MX_USART2_UART_Init+0x4c>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8007ce4:	4b09      	ldr	r3, [pc, #36]	@ (8007d0c <MX_USART2_UART_Init+0x4c>)
 8007ce6:	220c      	movs	r2, #12
 8007ce8:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007cea:	4b08      	ldr	r3, [pc, #32]	@ (8007d0c <MX_USART2_UART_Init+0x4c>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007cf0:	4b06      	ldr	r3, [pc, #24]	@ (8007d0c <MX_USART2_UART_Init+0x4c>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8007cf6:	4805      	ldr	r0, [pc, #20]	@ (8007d0c <MX_USART2_UART_Init+0x4c>)
 8007cf8:	f001 fd7c 	bl	80097f4 <HAL_UART_Init>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 8007d02:	f000 f837 	bl	8007d74 <Error_Handler>
    }
}
 8007d06:	bf00      	nop
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	20000e1c 	.word	0x20000e1c
 8007d10:	40004400 	.word	0x40004400

08007d14 <MX_GPIO_Init>:

/**
  * @brief GPIO Initialization Function
  */
static void MX_GPIO_Init(void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b086      	sub	sp, #24
 8007d18:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d1a:	1d3b      	adds	r3, r7, #4
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	601a      	str	r2, [r3, #0]
 8007d20:	605a      	str	r2, [r3, #4]
 8007d22:	609a      	str	r2, [r3, #8]
 8007d24:	60da      	str	r2, [r3, #12]
 8007d26:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d28:	2300      	movs	r3, #0
 8007d2a:	603b      	str	r3, [r7, #0]
 8007d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8007d6c <MX_GPIO_Init+0x58>)
 8007d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d30:	4a0e      	ldr	r2, [pc, #56]	@ (8007d6c <MX_GPIO_Init+0x58>)
 8007d32:	f043 0301 	orr.w	r3, r3, #1
 8007d36:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d38:	4b0c      	ldr	r3, [pc, #48]	@ (8007d6c <MX_GPIO_Init+0x58>)
 8007d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d3c:	f003 0301 	and.w	r3, r3, #1
 8007d40:	603b      	str	r3, [r7, #0]
 8007d42:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3; // TX, RX
 8007d44:	230c      	movs	r3, #12
 8007d46:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d48:	2302      	movs	r3, #2
 8007d4a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d50:	2300      	movs	r3, #0
 8007d52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007d54:	2307      	movs	r3, #7
 8007d56:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d58:	1d3b      	adds	r3, r7, #4
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4804      	ldr	r0, [pc, #16]	@ (8007d70 <MX_GPIO_Init+0x5c>)
 8007d5e:	f000 fb73 	bl	8008448 <HAL_GPIO_Init>
}
 8007d62:	bf00      	nop
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	40023800 	.word	0x40023800
 8007d70:	40020000 	.word	0x40020000

08007d74 <Error_Handler>:

/**
  * @brief Error Handler function
  */
void Error_Handler(void)
{
 8007d74:	b480      	push	{r7}
 8007d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007d78:	b672      	cpsid	i
}
 8007d7a:	bf00      	nop
    __disable_irq();
    while (1) {
 8007d7c:	bf00      	nop
 8007d7e:	e7fd      	b.n	8007d7c <Error_Handler+0x8>

08007d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d86:	2300      	movs	r3, #0
 8007d88:	607b      	str	r3, [r7, #4]
 8007d8a:	4b10      	ldr	r3, [pc, #64]	@ (8007dcc <HAL_MspInit+0x4c>)
 8007d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d8e:	4a0f      	ldr	r2, [pc, #60]	@ (8007dcc <HAL_MspInit+0x4c>)
 8007d90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8007d96:	4b0d      	ldr	r3, [pc, #52]	@ (8007dcc <HAL_MspInit+0x4c>)
 8007d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d9e:	607b      	str	r3, [r7, #4]
 8007da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007da2:	2300      	movs	r3, #0
 8007da4:	603b      	str	r3, [r7, #0]
 8007da6:	4b09      	ldr	r3, [pc, #36]	@ (8007dcc <HAL_MspInit+0x4c>)
 8007da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007daa:	4a08      	ldr	r2, [pc, #32]	@ (8007dcc <HAL_MspInit+0x4c>)
 8007dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8007db2:	4b06      	ldr	r3, [pc, #24]	@ (8007dcc <HAL_MspInit+0x4c>)
 8007db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007dba:	603b      	str	r3, [r7, #0]
 8007dbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	40023800 	.word	0x40023800

08007dd0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a0b      	ldr	r2, [pc, #44]	@ (8007e0c <HAL_CRC_MspInit+0x3c>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d10d      	bne.n	8007dfe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007de2:	2300      	movs	r3, #0
 8007de4:	60fb      	str	r3, [r7, #12]
 8007de6:	4b0a      	ldr	r3, [pc, #40]	@ (8007e10 <HAL_CRC_MspInit+0x40>)
 8007de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dea:	4a09      	ldr	r2, [pc, #36]	@ (8007e10 <HAL_CRC_MspInit+0x40>)
 8007dec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8007df2:	4b07      	ldr	r3, [pc, #28]	@ (8007e10 <HAL_CRC_MspInit+0x40>)
 8007df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007dfa:	60fb      	str	r3, [r7, #12]
 8007dfc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8007dfe:	bf00      	nop
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	40023000 	.word	0x40023000
 8007e10:	40023800 	.word	0x40023800

08007e14 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b088      	sub	sp, #32
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007e1c:	f107 030c 	add.w	r3, r7, #12
 8007e20:	2200      	movs	r2, #0
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	605a      	str	r2, [r3, #4]
 8007e26:	609a      	str	r2, [r3, #8]
 8007e28:	60da      	str	r2, [r3, #12]
 8007e2a:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a0c      	ldr	r2, [pc, #48]	@ (8007e64 <HAL_RTC_MspInit+0x50>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d111      	bne.n	8007e5a <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007e36:	2302      	movs	r3, #2
 8007e38:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007e3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e3e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007e40:	f107 030c 	add.w	r3, r7, #12
 8007e44:	4618      	mov	r0, r3
 8007e46:	f001 f8db 	bl	8009000 <HAL_RCCEx_PeriphCLKConfig>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8007e50:	f7ff ff90 	bl	8007d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007e54:	4b04      	ldr	r3, [pc, #16]	@ (8007e68 <HAL_RTC_MspInit+0x54>)
 8007e56:	2201      	movs	r2, #1
 8007e58:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8007e5a:	bf00      	nop
 8007e5c:	3720      	adds	r7, #32
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	40002800 	.word	0x40002800
 8007e68:	42470e3c 	.word	0x42470e3c

08007e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08a      	sub	sp, #40	@ 0x28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e74:	f107 0314 	add.w	r3, r7, #20
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	605a      	str	r2, [r3, #4]
 8007e7e:	609a      	str	r2, [r3, #8]
 8007e80:	60da      	str	r2, [r3, #12]
 8007e82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a19      	ldr	r2, [pc, #100]	@ (8007ef0 <HAL_UART_MspInit+0x84>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d12b      	bne.n	8007ee6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007e8e:	2300      	movs	r3, #0
 8007e90:	613b      	str	r3, [r7, #16]
 8007e92:	4b18      	ldr	r3, [pc, #96]	@ (8007ef4 <HAL_UART_MspInit+0x88>)
 8007e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e96:	4a17      	ldr	r2, [pc, #92]	@ (8007ef4 <HAL_UART_MspInit+0x88>)
 8007e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e9e:	4b15      	ldr	r3, [pc, #84]	@ (8007ef4 <HAL_UART_MspInit+0x88>)
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ea6:	613b      	str	r3, [r7, #16]
 8007ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60fb      	str	r3, [r7, #12]
 8007eae:	4b11      	ldr	r3, [pc, #68]	@ (8007ef4 <HAL_UART_MspInit+0x88>)
 8007eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eb2:	4a10      	ldr	r2, [pc, #64]	@ (8007ef4 <HAL_UART_MspInit+0x88>)
 8007eb4:	f043 0301 	orr.w	r3, r3, #1
 8007eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8007eba:	4b0e      	ldr	r3, [pc, #56]	@ (8007ef4 <HAL_UART_MspInit+0x88>)
 8007ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007ec6:	230c      	movs	r3, #12
 8007ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eca:	2302      	movs	r3, #2
 8007ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007ed6:	2307      	movs	r3, #7
 8007ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007eda:	f107 0314 	add.w	r3, r7, #20
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4805      	ldr	r0, [pc, #20]	@ (8007ef8 <HAL_UART_MspInit+0x8c>)
 8007ee2:	f000 fab1 	bl	8008448 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8007ee6:	bf00      	nop
 8007ee8:	3728      	adds	r7, #40	@ 0x28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	40004400 	.word	0x40004400
 8007ef4:	40023800 	.word	0x40023800
 8007ef8:	40020000 	.word	0x40020000

08007efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007efc:	b480      	push	{r7}
 8007efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007f00:	bf00      	nop
 8007f02:	e7fd      	b.n	8007f00 <NMI_Handler+0x4>

08007f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007f04:	b480      	push	{r7}
 8007f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007f08:	bf00      	nop
 8007f0a:	e7fd      	b.n	8007f08 <HardFault_Handler+0x4>

08007f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007f10:	bf00      	nop
 8007f12:	e7fd      	b.n	8007f10 <MemManage_Handler+0x4>

08007f14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007f14:	b480      	push	{r7}
 8007f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007f18:	bf00      	nop
 8007f1a:	e7fd      	b.n	8007f18 <BusFault_Handler+0x4>

08007f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007f20:	bf00      	nop
 8007f22:	e7fd      	b.n	8007f20 <UsageFault_Handler+0x4>

08007f24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007f24:	b480      	push	{r7}
 8007f26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007f28:	bf00      	nop
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007f32:	b480      	push	{r7}
 8007f34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007f36:	bf00      	nop
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007f40:	b480      	push	{r7}
 8007f42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007f44:	bf00      	nop
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007f52:	f000 f957 	bl	8008204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007f56:	bf00      	nop
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	af00      	add	r7, sp, #0
  return 1;
 8007f5e:	2301      	movs	r3, #1
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <_kill>:

int _kill(int pid, int sig)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b082      	sub	sp, #8
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007f74:	f003 f9bc 	bl	800b2f0 <__errno>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2216      	movs	r2, #22
 8007f7c:	601a      	str	r2, [r3, #0]
  return -1;
 8007f7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <_exit>:

void _exit (int status)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007f92:	f04f 31ff 	mov.w	r1, #4294967295
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7ff ffe7 	bl	8007f6a <_kill>
  while (1) {}    /* Make sure we hang here */
 8007f9c:	bf00      	nop
 8007f9e:	e7fd      	b.n	8007f9c <_exit+0x12>

08007fa0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007fac:	2300      	movs	r3, #0
 8007fae:	617b      	str	r3, [r7, #20]
 8007fb0:	e00a      	b.n	8007fc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007fb2:	f3af 8000 	nop.w
 8007fb6:	4601      	mov	r1, r0
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	1c5a      	adds	r2, r3, #1
 8007fbc:	60ba      	str	r2, [r7, #8]
 8007fbe:	b2ca      	uxtb	r2, r1
 8007fc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	617b      	str	r3, [r7, #20]
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	dbf0      	blt.n	8007fb2 <_read+0x12>
  }

  return len;
 8007fd0:	687b      	ldr	r3, [r7, #4]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3718      	adds	r7, #24
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b086      	sub	sp, #24
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	60f8      	str	r0, [r7, #12]
 8007fe2:	60b9      	str	r1, [r7, #8]
 8007fe4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	617b      	str	r3, [r7, #20]
 8007fea:	e009      	b.n	8008000 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	1c5a      	adds	r2, r3, #1
 8007ff0:	60ba      	str	r2, [r7, #8]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	617b      	str	r3, [r7, #20]
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	429a      	cmp	r2, r3
 8008006:	dbf1      	blt.n	8007fec <_write+0x12>
  }
  return len;
 8008008:	687b      	ldr	r3, [r7, #4]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3718      	adds	r7, #24
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <_close>:

int _close(int file)
{
 8008012:	b480      	push	{r7}
 8008014:	b083      	sub	sp, #12
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800801a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800801e:	4618      	mov	r0, r3
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
 8008032:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800803a:	605a      	str	r2, [r3, #4]
  return 0;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <_isatty>:

int _isatty(int file)
{
 800804a:	b480      	push	{r7}
 800804c:	b083      	sub	sp, #12
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008052:	2301      	movs	r3, #1
}
 8008054:	4618      	mov	r0, r3
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3714      	adds	r7, #20
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
	...

0800807c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008084:	4a14      	ldr	r2, [pc, #80]	@ (80080d8 <_sbrk+0x5c>)
 8008086:	4b15      	ldr	r3, [pc, #84]	@ (80080dc <_sbrk+0x60>)
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008090:	4b13      	ldr	r3, [pc, #76]	@ (80080e0 <_sbrk+0x64>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d102      	bne.n	800809e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008098:	4b11      	ldr	r3, [pc, #68]	@ (80080e0 <_sbrk+0x64>)
 800809a:	4a12      	ldr	r2, [pc, #72]	@ (80080e4 <_sbrk+0x68>)
 800809c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800809e:	4b10      	ldr	r3, [pc, #64]	@ (80080e0 <_sbrk+0x64>)
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4413      	add	r3, r2
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d207      	bcs.n	80080bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80080ac:	f003 f920 	bl	800b2f0 <__errno>
 80080b0:	4603      	mov	r3, r0
 80080b2:	220c      	movs	r2, #12
 80080b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80080b6:	f04f 33ff 	mov.w	r3, #4294967295
 80080ba:	e009      	b.n	80080d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80080bc:	4b08      	ldr	r3, [pc, #32]	@ (80080e0 <_sbrk+0x64>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80080c2:	4b07      	ldr	r3, [pc, #28]	@ (80080e0 <_sbrk+0x64>)
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4413      	add	r3, r2
 80080ca:	4a05      	ldr	r2, [pc, #20]	@ (80080e0 <_sbrk+0x64>)
 80080cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80080ce:	68fb      	ldr	r3, [r7, #12]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3718      	adds	r7, #24
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	20018000 	.word	0x20018000
 80080dc:	00000400 	.word	0x00000400
 80080e0:	20000ec8 	.word	0x20000ec8
 80080e4:	20001020 	.word	0x20001020

080080e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80080e8:	b480      	push	{r7}
 80080ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80080ec:	4b06      	ldr	r3, [pc, #24]	@ (8008108 <SystemInit+0x20>)
 80080ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080f2:	4a05      	ldr	r2, [pc, #20]	@ (8008108 <SystemInit+0x20>)
 80080f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80080f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80080fc:	bf00      	nop
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	e000ed00 	.word	0xe000ed00

0800810c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800810c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008144 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008110:	f7ff ffea 	bl	80080e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008114:	480c      	ldr	r0, [pc, #48]	@ (8008148 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008116:	490d      	ldr	r1, [pc, #52]	@ (800814c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008118:	4a0d      	ldr	r2, [pc, #52]	@ (8008150 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800811a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800811c:	e002      	b.n	8008124 <LoopCopyDataInit>

0800811e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800811e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008122:	3304      	adds	r3, #4

08008124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008128:	d3f9      	bcc.n	800811e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800812a:	4a0a      	ldr	r2, [pc, #40]	@ (8008154 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800812c:	4c0a      	ldr	r4, [pc, #40]	@ (8008158 <LoopFillZerobss+0x22>)
  movs r3, #0
 800812e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008130:	e001      	b.n	8008136 <LoopFillZerobss>

08008132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008134:	3204      	adds	r2, #4

08008136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008138:	d3fb      	bcc.n	8008132 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800813a:	f003 f8df 	bl	800b2fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800813e:	f7ff f8cb 	bl	80072d8 <main>
  bx  lr    
 8008142:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8008144:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8008148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800814c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8008150:	0800fbfc 	.word	0x0800fbfc
  ldr r2, =_sbss
 8008154:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8008158:	2000101c 	.word	0x2000101c

0800815c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800815c:	e7fe      	b.n	800815c <ADC_IRQHandler>
	...

08008160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008164:	4b0e      	ldr	r3, [pc, #56]	@ (80081a0 <HAL_Init+0x40>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a0d      	ldr	r2, [pc, #52]	@ (80081a0 <HAL_Init+0x40>)
 800816a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800816e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008170:	4b0b      	ldr	r3, [pc, #44]	@ (80081a0 <HAL_Init+0x40>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a0a      	ldr	r2, [pc, #40]	@ (80081a0 <HAL_Init+0x40>)
 8008176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800817a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800817c:	4b08      	ldr	r3, [pc, #32]	@ (80081a0 <HAL_Init+0x40>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a07      	ldr	r2, [pc, #28]	@ (80081a0 <HAL_Init+0x40>)
 8008182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008188:	2003      	movs	r0, #3
 800818a:	f000 f90d 	bl	80083a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800818e:	200f      	movs	r0, #15
 8008190:	f000 f808 	bl	80081a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008194:	f7ff fdf4 	bl	8007d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	40023c00 	.word	0x40023c00

080081a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80081ac:	4b12      	ldr	r3, [pc, #72]	@ (80081f8 <HAL_InitTick+0x54>)
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	4b12      	ldr	r3, [pc, #72]	@ (80081fc <HAL_InitTick+0x58>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	4619      	mov	r1, r3
 80081b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80081ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80081be:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 f917 	bl	80083f6 <HAL_SYSTICK_Config>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e00e      	b.n	80081f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b0f      	cmp	r3, #15
 80081d6:	d80a      	bhi.n	80081ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80081d8:	2200      	movs	r2, #0
 80081da:	6879      	ldr	r1, [r7, #4]
 80081dc:	f04f 30ff 	mov.w	r0, #4294967295
 80081e0:	f000 f8ed 	bl	80083be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80081e4:	4a06      	ldr	r2, [pc, #24]	@ (8008200 <HAL_InitTick+0x5c>)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	e000      	b.n	80081f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	20000000 	.word	0x20000000
 80081fc:	20000008 	.word	0x20000008
 8008200:	20000004 	.word	0x20000004

08008204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008204:	b480      	push	{r7}
 8008206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008208:	4b06      	ldr	r3, [pc, #24]	@ (8008224 <HAL_IncTick+0x20>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	461a      	mov	r2, r3
 800820e:	4b06      	ldr	r3, [pc, #24]	@ (8008228 <HAL_IncTick+0x24>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4413      	add	r3, r2
 8008214:	4a04      	ldr	r2, [pc, #16]	@ (8008228 <HAL_IncTick+0x24>)
 8008216:	6013      	str	r3, [r2, #0]
}
 8008218:	bf00      	nop
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	20000008 	.word	0x20000008
 8008228:	20000ecc 	.word	0x20000ecc

0800822c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800822c:	b480      	push	{r7}
 800822e:	af00      	add	r7, sp, #0
  return uwTick;
 8008230:	4b03      	ldr	r3, [pc, #12]	@ (8008240 <HAL_GetTick+0x14>)
 8008232:	681b      	ldr	r3, [r3, #0]
}
 8008234:	4618      	mov	r0, r3
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	20000ecc 	.word	0x20000ecc

08008244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f003 0307 	and.w	r3, r3, #7
 8008252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008254:	4b0c      	ldr	r3, [pc, #48]	@ (8008288 <__NVIC_SetPriorityGrouping+0x44>)
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008260:	4013      	ands	r3, r2
 8008262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800826c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008276:	4a04      	ldr	r2, [pc, #16]	@ (8008288 <__NVIC_SetPriorityGrouping+0x44>)
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	60d3      	str	r3, [r2, #12]
}
 800827c:	bf00      	nop
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	e000ed00 	.word	0xe000ed00

0800828c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800828c:	b480      	push	{r7}
 800828e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008290:	4b04      	ldr	r3, [pc, #16]	@ (80082a4 <__NVIC_GetPriorityGrouping+0x18>)
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	0a1b      	lsrs	r3, r3, #8
 8008296:	f003 0307 	and.w	r3, r3, #7
}
 800829a:	4618      	mov	r0, r3
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr
 80082a4:	e000ed00 	.word	0xe000ed00

080082a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	6039      	str	r1, [r7, #0]
 80082b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	db0a      	blt.n	80082d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	490c      	ldr	r1, [pc, #48]	@ (80082f4 <__NVIC_SetPriority+0x4c>)
 80082c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082c6:	0112      	lsls	r2, r2, #4
 80082c8:	b2d2      	uxtb	r2, r2
 80082ca:	440b      	add	r3, r1
 80082cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80082d0:	e00a      	b.n	80082e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	b2da      	uxtb	r2, r3
 80082d6:	4908      	ldr	r1, [pc, #32]	@ (80082f8 <__NVIC_SetPriority+0x50>)
 80082d8:	79fb      	ldrb	r3, [r7, #7]
 80082da:	f003 030f 	and.w	r3, r3, #15
 80082de:	3b04      	subs	r3, #4
 80082e0:	0112      	lsls	r2, r2, #4
 80082e2:	b2d2      	uxtb	r2, r2
 80082e4:	440b      	add	r3, r1
 80082e6:	761a      	strb	r2, [r3, #24]
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	e000e100 	.word	0xe000e100
 80082f8:	e000ed00 	.word	0xe000ed00

080082fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b089      	sub	sp, #36	@ 0x24
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f003 0307 	and.w	r3, r3, #7
 800830e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	f1c3 0307 	rsb	r3, r3, #7
 8008316:	2b04      	cmp	r3, #4
 8008318:	bf28      	it	cs
 800831a:	2304      	movcs	r3, #4
 800831c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	3304      	adds	r3, #4
 8008322:	2b06      	cmp	r3, #6
 8008324:	d902      	bls.n	800832c <NVIC_EncodePriority+0x30>
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	3b03      	subs	r3, #3
 800832a:	e000      	b.n	800832e <NVIC_EncodePriority+0x32>
 800832c:	2300      	movs	r3, #0
 800832e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008330:	f04f 32ff 	mov.w	r2, #4294967295
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	fa02 f303 	lsl.w	r3, r2, r3
 800833a:	43da      	mvns	r2, r3
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	401a      	ands	r2, r3
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008344:	f04f 31ff 	mov.w	r1, #4294967295
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	fa01 f303 	lsl.w	r3, r1, r3
 800834e:	43d9      	mvns	r1, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008354:	4313      	orrs	r3, r2
         );
}
 8008356:	4618      	mov	r0, r3
 8008358:	3724      	adds	r7, #36	@ 0x24
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
	...

08008364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	3b01      	subs	r3, #1
 8008370:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008374:	d301      	bcc.n	800837a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008376:	2301      	movs	r3, #1
 8008378:	e00f      	b.n	800839a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800837a:	4a0a      	ldr	r2, [pc, #40]	@ (80083a4 <SysTick_Config+0x40>)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	3b01      	subs	r3, #1
 8008380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008382:	210f      	movs	r1, #15
 8008384:	f04f 30ff 	mov.w	r0, #4294967295
 8008388:	f7ff ff8e 	bl	80082a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800838c:	4b05      	ldr	r3, [pc, #20]	@ (80083a4 <SysTick_Config+0x40>)
 800838e:	2200      	movs	r2, #0
 8008390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008392:	4b04      	ldr	r3, [pc, #16]	@ (80083a4 <SysTick_Config+0x40>)
 8008394:	2207      	movs	r2, #7
 8008396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	e000e010 	.word	0xe000e010

080083a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7ff ff47 	bl	8008244 <__NVIC_SetPriorityGrouping>
}
 80083b6:	bf00      	nop
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80083be:	b580      	push	{r7, lr}
 80083c0:	b086      	sub	sp, #24
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	4603      	mov	r3, r0
 80083c6:	60b9      	str	r1, [r7, #8]
 80083c8:	607a      	str	r2, [r7, #4]
 80083ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80083d0:	f7ff ff5c 	bl	800828c <__NVIC_GetPriorityGrouping>
 80083d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	68b9      	ldr	r1, [r7, #8]
 80083da:	6978      	ldr	r0, [r7, #20]
 80083dc:	f7ff ff8e 	bl	80082fc <NVIC_EncodePriority>
 80083e0:	4602      	mov	r2, r0
 80083e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083e6:	4611      	mov	r1, r2
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7ff ff5d 	bl	80082a8 <__NVIC_SetPriority>
}
 80083ee:	bf00      	nop
 80083f0:	3718      	adds	r7, #24
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b082      	sub	sp, #8
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7ff ffb0 	bl	8008364 <SysTick_Config>
 8008404:	4603      	mov	r3, r0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b082      	sub	sp, #8
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d101      	bne.n	8008420 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e00e      	b.n	800843e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	795b      	ldrb	r3, [r3, #5]
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d105      	bne.n	8008436 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7ff fccd 	bl	8007dd0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
	...

08008448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008448:	b480      	push	{r7}
 800844a:	b089      	sub	sp, #36	@ 0x24
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008452:	2300      	movs	r3, #0
 8008454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008456:	2300      	movs	r3, #0
 8008458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800845a:	2300      	movs	r3, #0
 800845c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800845e:	2300      	movs	r3, #0
 8008460:	61fb      	str	r3, [r7, #28]
 8008462:	e159      	b.n	8008718 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008464:	2201      	movs	r2, #1
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	fa02 f303 	lsl.w	r3, r2, r3
 800846c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	697a      	ldr	r2, [r7, #20]
 8008474:	4013      	ands	r3, r2
 8008476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	429a      	cmp	r2, r3
 800847e:	f040 8148 	bne.w	8008712 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	f003 0303 	and.w	r3, r3, #3
 800848a:	2b01      	cmp	r3, #1
 800848c:	d005      	beq.n	800849a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008496:	2b02      	cmp	r3, #2
 8008498:	d130      	bne.n	80084fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	005b      	lsls	r3, r3, #1
 80084a4:	2203      	movs	r2, #3
 80084a6:	fa02 f303 	lsl.w	r3, r2, r3
 80084aa:	43db      	mvns	r3, r3
 80084ac:	69ba      	ldr	r2, [r7, #24]
 80084ae:	4013      	ands	r3, r2
 80084b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	68da      	ldr	r2, [r3, #12]
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	005b      	lsls	r3, r3, #1
 80084ba:	fa02 f303 	lsl.w	r3, r2, r3
 80084be:	69ba      	ldr	r2, [r7, #24]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	69ba      	ldr	r2, [r7, #24]
 80084c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80084d0:	2201      	movs	r2, #1
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	fa02 f303 	lsl.w	r3, r2, r3
 80084d8:	43db      	mvns	r3, r3
 80084da:	69ba      	ldr	r2, [r7, #24]
 80084dc:	4013      	ands	r3, r2
 80084de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	091b      	lsrs	r3, r3, #4
 80084e6:	f003 0201 	and.w	r2, r3, #1
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	fa02 f303 	lsl.w	r3, r2, r3
 80084f0:	69ba      	ldr	r2, [r7, #24]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	69ba      	ldr	r2, [r7, #24]
 80084fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	f003 0303 	and.w	r3, r3, #3
 8008504:	2b03      	cmp	r3, #3
 8008506:	d017      	beq.n	8008538 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	005b      	lsls	r3, r3, #1
 8008512:	2203      	movs	r2, #3
 8008514:	fa02 f303 	lsl.w	r3, r2, r3
 8008518:	43db      	mvns	r3, r3
 800851a:	69ba      	ldr	r2, [r7, #24]
 800851c:	4013      	ands	r3, r2
 800851e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	689a      	ldr	r2, [r3, #8]
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	005b      	lsls	r3, r3, #1
 8008528:	fa02 f303 	lsl.w	r3, r2, r3
 800852c:	69ba      	ldr	r2, [r7, #24]
 800852e:	4313      	orrs	r3, r2
 8008530:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	69ba      	ldr	r2, [r7, #24]
 8008536:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	f003 0303 	and.w	r3, r3, #3
 8008540:	2b02      	cmp	r3, #2
 8008542:	d123      	bne.n	800858c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	08da      	lsrs	r2, r3, #3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	3208      	adds	r2, #8
 800854c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	f003 0307 	and.w	r3, r3, #7
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	220f      	movs	r2, #15
 800855c:	fa02 f303 	lsl.w	r3, r2, r3
 8008560:	43db      	mvns	r3, r3
 8008562:	69ba      	ldr	r2, [r7, #24]
 8008564:	4013      	ands	r3, r2
 8008566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	691a      	ldr	r2, [r3, #16]
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	f003 0307 	and.w	r3, r3, #7
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	fa02 f303 	lsl.w	r3, r2, r3
 8008578:	69ba      	ldr	r2, [r7, #24]
 800857a:	4313      	orrs	r3, r2
 800857c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	08da      	lsrs	r2, r3, #3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	3208      	adds	r2, #8
 8008586:	69b9      	ldr	r1, [r7, #24]
 8008588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	005b      	lsls	r3, r3, #1
 8008596:	2203      	movs	r2, #3
 8008598:	fa02 f303 	lsl.w	r3, r2, r3
 800859c:	43db      	mvns	r3, r3
 800859e:	69ba      	ldr	r2, [r7, #24]
 80085a0:	4013      	ands	r3, r2
 80085a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	f003 0203 	and.w	r2, r3, #3
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	005b      	lsls	r3, r3, #1
 80085b0:	fa02 f303 	lsl.w	r3, r2, r3
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	69ba      	ldr	r2, [r7, #24]
 80085be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 80a2 	beq.w	8008712 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085ce:	2300      	movs	r3, #0
 80085d0:	60fb      	str	r3, [r7, #12]
 80085d2:	4b57      	ldr	r3, [pc, #348]	@ (8008730 <HAL_GPIO_Init+0x2e8>)
 80085d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085d6:	4a56      	ldr	r2, [pc, #344]	@ (8008730 <HAL_GPIO_Init+0x2e8>)
 80085d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80085dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80085de:	4b54      	ldr	r3, [pc, #336]	@ (8008730 <HAL_GPIO_Init+0x2e8>)
 80085e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085e6:	60fb      	str	r3, [r7, #12]
 80085e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80085ea:	4a52      	ldr	r2, [pc, #328]	@ (8008734 <HAL_GPIO_Init+0x2ec>)
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	089b      	lsrs	r3, r3, #2
 80085f0:	3302      	adds	r3, #2
 80085f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	f003 0303 	and.w	r3, r3, #3
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	220f      	movs	r2, #15
 8008602:	fa02 f303 	lsl.w	r3, r2, r3
 8008606:	43db      	mvns	r3, r3
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	4013      	ands	r3, r2
 800860c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a49      	ldr	r2, [pc, #292]	@ (8008738 <HAL_GPIO_Init+0x2f0>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d019      	beq.n	800864a <HAL_GPIO_Init+0x202>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a48      	ldr	r2, [pc, #288]	@ (800873c <HAL_GPIO_Init+0x2f4>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d013      	beq.n	8008646 <HAL_GPIO_Init+0x1fe>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a47      	ldr	r2, [pc, #284]	@ (8008740 <HAL_GPIO_Init+0x2f8>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d00d      	beq.n	8008642 <HAL_GPIO_Init+0x1fa>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a46      	ldr	r2, [pc, #280]	@ (8008744 <HAL_GPIO_Init+0x2fc>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d007      	beq.n	800863e <HAL_GPIO_Init+0x1f6>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a45      	ldr	r2, [pc, #276]	@ (8008748 <HAL_GPIO_Init+0x300>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d101      	bne.n	800863a <HAL_GPIO_Init+0x1f2>
 8008636:	2304      	movs	r3, #4
 8008638:	e008      	b.n	800864c <HAL_GPIO_Init+0x204>
 800863a:	2307      	movs	r3, #7
 800863c:	e006      	b.n	800864c <HAL_GPIO_Init+0x204>
 800863e:	2303      	movs	r3, #3
 8008640:	e004      	b.n	800864c <HAL_GPIO_Init+0x204>
 8008642:	2302      	movs	r3, #2
 8008644:	e002      	b.n	800864c <HAL_GPIO_Init+0x204>
 8008646:	2301      	movs	r3, #1
 8008648:	e000      	b.n	800864c <HAL_GPIO_Init+0x204>
 800864a:	2300      	movs	r3, #0
 800864c:	69fa      	ldr	r2, [r7, #28]
 800864e:	f002 0203 	and.w	r2, r2, #3
 8008652:	0092      	lsls	r2, r2, #2
 8008654:	4093      	lsls	r3, r2
 8008656:	69ba      	ldr	r2, [r7, #24]
 8008658:	4313      	orrs	r3, r2
 800865a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800865c:	4935      	ldr	r1, [pc, #212]	@ (8008734 <HAL_GPIO_Init+0x2ec>)
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	089b      	lsrs	r3, r3, #2
 8008662:	3302      	adds	r3, #2
 8008664:	69ba      	ldr	r2, [r7, #24]
 8008666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800866a:	4b38      	ldr	r3, [pc, #224]	@ (800874c <HAL_GPIO_Init+0x304>)
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	43db      	mvns	r3, r3
 8008674:	69ba      	ldr	r2, [r7, #24]
 8008676:	4013      	ands	r3, r2
 8008678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d003      	beq.n	800868e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008686:	69ba      	ldr	r2, [r7, #24]
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	4313      	orrs	r3, r2
 800868c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800868e:	4a2f      	ldr	r2, [pc, #188]	@ (800874c <HAL_GPIO_Init+0x304>)
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008694:	4b2d      	ldr	r3, [pc, #180]	@ (800874c <HAL_GPIO_Init+0x304>)
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	43db      	mvns	r3, r3
 800869e:	69ba      	ldr	r2, [r7, #24]
 80086a0:	4013      	ands	r3, r2
 80086a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d003      	beq.n	80086b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80086b8:	4a24      	ldr	r2, [pc, #144]	@ (800874c <HAL_GPIO_Init+0x304>)
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80086be:	4b23      	ldr	r3, [pc, #140]	@ (800874c <HAL_GPIO_Init+0x304>)
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	43db      	mvns	r3, r3
 80086c8:	69ba      	ldr	r2, [r7, #24]
 80086ca:	4013      	ands	r3, r2
 80086cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80086da:	69ba      	ldr	r2, [r7, #24]
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	4313      	orrs	r3, r2
 80086e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80086e2:	4a1a      	ldr	r2, [pc, #104]	@ (800874c <HAL_GPIO_Init+0x304>)
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80086e8:	4b18      	ldr	r3, [pc, #96]	@ (800874c <HAL_GPIO_Init+0x304>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	43db      	mvns	r3, r3
 80086f2:	69ba      	ldr	r2, [r7, #24]
 80086f4:	4013      	ands	r3, r2
 80086f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d003      	beq.n	800870c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008704:	69ba      	ldr	r2, [r7, #24]
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	4313      	orrs	r3, r2
 800870a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800870c:	4a0f      	ldr	r2, [pc, #60]	@ (800874c <HAL_GPIO_Init+0x304>)
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	3301      	adds	r3, #1
 8008716:	61fb      	str	r3, [r7, #28]
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	2b0f      	cmp	r3, #15
 800871c:	f67f aea2 	bls.w	8008464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008720:	bf00      	nop
 8008722:	bf00      	nop
 8008724:	3724      	adds	r7, #36	@ 0x24
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	40023800 	.word	0x40023800
 8008734:	40013800 	.word	0x40013800
 8008738:	40020000 	.word	0x40020000
 800873c:	40020400 	.word	0x40020400
 8008740:	40020800 	.word	0x40020800
 8008744:	40020c00 	.word	0x40020c00
 8008748:	40021000 	.word	0x40021000
 800874c:	40013c00 	.word	0x40013c00

08008750 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d101      	bne.n	8008762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e267      	b.n	8008c32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 0301 	and.w	r3, r3, #1
 800876a:	2b00      	cmp	r3, #0
 800876c:	d075      	beq.n	800885a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800876e:	4b88      	ldr	r3, [pc, #544]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	f003 030c 	and.w	r3, r3, #12
 8008776:	2b04      	cmp	r3, #4
 8008778:	d00c      	beq.n	8008794 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800877a:	4b85      	ldr	r3, [pc, #532]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008782:	2b08      	cmp	r3, #8
 8008784:	d112      	bne.n	80087ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008786:	4b82      	ldr	r3, [pc, #520]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800878e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008792:	d10b      	bne.n	80087ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008794:	4b7e      	ldr	r3, [pc, #504]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d05b      	beq.n	8008858 <HAL_RCC_OscConfig+0x108>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d157      	bne.n	8008858 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	e242      	b.n	8008c32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087b4:	d106      	bne.n	80087c4 <HAL_RCC_OscConfig+0x74>
 80087b6:	4b76      	ldr	r3, [pc, #472]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a75      	ldr	r2, [pc, #468]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 80087bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087c0:	6013      	str	r3, [r2, #0]
 80087c2:	e01d      	b.n	8008800 <HAL_RCC_OscConfig+0xb0>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80087cc:	d10c      	bne.n	80087e8 <HAL_RCC_OscConfig+0x98>
 80087ce:	4b70      	ldr	r3, [pc, #448]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a6f      	ldr	r2, [pc, #444]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 80087d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80087d8:	6013      	str	r3, [r2, #0]
 80087da:	4b6d      	ldr	r3, [pc, #436]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a6c      	ldr	r2, [pc, #432]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 80087e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087e4:	6013      	str	r3, [r2, #0]
 80087e6:	e00b      	b.n	8008800 <HAL_RCC_OscConfig+0xb0>
 80087e8:	4b69      	ldr	r3, [pc, #420]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a68      	ldr	r2, [pc, #416]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 80087ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087f2:	6013      	str	r3, [r2, #0]
 80087f4:	4b66      	ldr	r3, [pc, #408]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a65      	ldr	r2, [pc, #404]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 80087fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d013      	beq.n	8008830 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008808:	f7ff fd10 	bl	800822c <HAL_GetTick>
 800880c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800880e:	e008      	b.n	8008822 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008810:	f7ff fd0c 	bl	800822c <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	2b64      	cmp	r3, #100	@ 0x64
 800881c:	d901      	bls.n	8008822 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e207      	b.n	8008c32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008822:	4b5b      	ldr	r3, [pc, #364]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d0f0      	beq.n	8008810 <HAL_RCC_OscConfig+0xc0>
 800882e:	e014      	b.n	800885a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008830:	f7ff fcfc 	bl	800822c <HAL_GetTick>
 8008834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008836:	e008      	b.n	800884a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008838:	f7ff fcf8 	bl	800822c <HAL_GetTick>
 800883c:	4602      	mov	r2, r0
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	2b64      	cmp	r3, #100	@ 0x64
 8008844:	d901      	bls.n	800884a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e1f3      	b.n	8008c32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800884a:	4b51      	ldr	r3, [pc, #324]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1f0      	bne.n	8008838 <HAL_RCC_OscConfig+0xe8>
 8008856:	e000      	b.n	800885a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 0302 	and.w	r3, r3, #2
 8008862:	2b00      	cmp	r3, #0
 8008864:	d063      	beq.n	800892e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008866:	4b4a      	ldr	r3, [pc, #296]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	f003 030c 	and.w	r3, r3, #12
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00b      	beq.n	800888a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008872:	4b47      	ldr	r3, [pc, #284]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800887a:	2b08      	cmp	r3, #8
 800887c:	d11c      	bne.n	80088b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800887e:	4b44      	ldr	r3, [pc, #272]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d116      	bne.n	80088b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800888a:	4b41      	ldr	r3, [pc, #260]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0302 	and.w	r3, r3, #2
 8008892:	2b00      	cmp	r3, #0
 8008894:	d005      	beq.n	80088a2 <HAL_RCC_OscConfig+0x152>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d001      	beq.n	80088a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e1c7      	b.n	8008c32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088a2:	4b3b      	ldr	r3, [pc, #236]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	00db      	lsls	r3, r3, #3
 80088b0:	4937      	ldr	r1, [pc, #220]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 80088b2:	4313      	orrs	r3, r2
 80088b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088b6:	e03a      	b.n	800892e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d020      	beq.n	8008902 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088c0:	4b34      	ldr	r3, [pc, #208]	@ (8008994 <HAL_RCC_OscConfig+0x244>)
 80088c2:	2201      	movs	r2, #1
 80088c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088c6:	f7ff fcb1 	bl	800822c <HAL_GetTick>
 80088ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088cc:	e008      	b.n	80088e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088ce:	f7ff fcad 	bl	800822c <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d901      	bls.n	80088e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80088dc:	2303      	movs	r3, #3
 80088de:	e1a8      	b.n	8008c32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088e0:	4b2b      	ldr	r3, [pc, #172]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0302 	and.w	r3, r3, #2
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d0f0      	beq.n	80088ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088ec:	4b28      	ldr	r3, [pc, #160]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	00db      	lsls	r3, r3, #3
 80088fa:	4925      	ldr	r1, [pc, #148]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	600b      	str	r3, [r1, #0]
 8008900:	e015      	b.n	800892e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008902:	4b24      	ldr	r3, [pc, #144]	@ (8008994 <HAL_RCC_OscConfig+0x244>)
 8008904:	2200      	movs	r2, #0
 8008906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008908:	f7ff fc90 	bl	800822c <HAL_GetTick>
 800890c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800890e:	e008      	b.n	8008922 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008910:	f7ff fc8c 	bl	800822c <HAL_GetTick>
 8008914:	4602      	mov	r2, r0
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	2b02      	cmp	r3, #2
 800891c:	d901      	bls.n	8008922 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	e187      	b.n	8008c32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008922:	4b1b      	ldr	r3, [pc, #108]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 0302 	and.w	r3, r3, #2
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1f0      	bne.n	8008910 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 0308 	and.w	r3, r3, #8
 8008936:	2b00      	cmp	r3, #0
 8008938:	d036      	beq.n	80089a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d016      	beq.n	8008970 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008942:	4b15      	ldr	r3, [pc, #84]	@ (8008998 <HAL_RCC_OscConfig+0x248>)
 8008944:	2201      	movs	r2, #1
 8008946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008948:	f7ff fc70 	bl	800822c <HAL_GetTick>
 800894c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800894e:	e008      	b.n	8008962 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008950:	f7ff fc6c 	bl	800822c <HAL_GetTick>
 8008954:	4602      	mov	r2, r0
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	2b02      	cmp	r3, #2
 800895c:	d901      	bls.n	8008962 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800895e:	2303      	movs	r3, #3
 8008960:	e167      	b.n	8008c32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008962:	4b0b      	ldr	r3, [pc, #44]	@ (8008990 <HAL_RCC_OscConfig+0x240>)
 8008964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008966:	f003 0302 	and.w	r3, r3, #2
 800896a:	2b00      	cmp	r3, #0
 800896c:	d0f0      	beq.n	8008950 <HAL_RCC_OscConfig+0x200>
 800896e:	e01b      	b.n	80089a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008970:	4b09      	ldr	r3, [pc, #36]	@ (8008998 <HAL_RCC_OscConfig+0x248>)
 8008972:	2200      	movs	r2, #0
 8008974:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008976:	f7ff fc59 	bl	800822c <HAL_GetTick>
 800897a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800897c:	e00e      	b.n	800899c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800897e:	f7ff fc55 	bl	800822c <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	2b02      	cmp	r3, #2
 800898a:	d907      	bls.n	800899c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800898c:	2303      	movs	r3, #3
 800898e:	e150      	b.n	8008c32 <HAL_RCC_OscConfig+0x4e2>
 8008990:	40023800 	.word	0x40023800
 8008994:	42470000 	.word	0x42470000
 8008998:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800899c:	4b88      	ldr	r3, [pc, #544]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 800899e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089a0:	f003 0302 	and.w	r3, r3, #2
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1ea      	bne.n	800897e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 0304 	and.w	r3, r3, #4
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f000 8097 	beq.w	8008ae4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089b6:	2300      	movs	r3, #0
 80089b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089ba:	4b81      	ldr	r3, [pc, #516]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 80089bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10f      	bne.n	80089e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089c6:	2300      	movs	r3, #0
 80089c8:	60bb      	str	r3, [r7, #8]
 80089ca:	4b7d      	ldr	r3, [pc, #500]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 80089cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ce:	4a7c      	ldr	r2, [pc, #496]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 80089d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80089d6:	4b7a      	ldr	r3, [pc, #488]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 80089d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089de:	60bb      	str	r3, [r7, #8]
 80089e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089e2:	2301      	movs	r3, #1
 80089e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089e6:	4b77      	ldr	r3, [pc, #476]	@ (8008bc4 <HAL_RCC_OscConfig+0x474>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d118      	bne.n	8008a24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089f2:	4b74      	ldr	r3, [pc, #464]	@ (8008bc4 <HAL_RCC_OscConfig+0x474>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a73      	ldr	r2, [pc, #460]	@ (8008bc4 <HAL_RCC_OscConfig+0x474>)
 80089f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089fe:	f7ff fc15 	bl	800822c <HAL_GetTick>
 8008a02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a04:	e008      	b.n	8008a18 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a06:	f7ff fc11 	bl	800822c <HAL_GetTick>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d901      	bls.n	8008a18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e10c      	b.n	8008c32 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a18:	4b6a      	ldr	r3, [pc, #424]	@ (8008bc4 <HAL_RCC_OscConfig+0x474>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d0f0      	beq.n	8008a06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d106      	bne.n	8008a3a <HAL_RCC_OscConfig+0x2ea>
 8008a2c:	4b64      	ldr	r3, [pc, #400]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 8008a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a30:	4a63      	ldr	r2, [pc, #396]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 8008a32:	f043 0301 	orr.w	r3, r3, #1
 8008a36:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a38:	e01c      	b.n	8008a74 <HAL_RCC_OscConfig+0x324>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	2b05      	cmp	r3, #5
 8008a40:	d10c      	bne.n	8008a5c <HAL_RCC_OscConfig+0x30c>
 8008a42:	4b5f      	ldr	r3, [pc, #380]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 8008a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a46:	4a5e      	ldr	r2, [pc, #376]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 8008a48:	f043 0304 	orr.w	r3, r3, #4
 8008a4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a4e:	4b5c      	ldr	r3, [pc, #368]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 8008a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a52:	4a5b      	ldr	r2, [pc, #364]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 8008a54:	f043 0301 	orr.w	r3, r3, #1
 8008a58:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a5a:	e00b      	b.n	8008a74 <HAL_RCC_OscConfig+0x324>
 8008a5c:	4b58      	ldr	r3, [pc, #352]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 8008a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a60:	4a57      	ldr	r2, [pc, #348]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 8008a62:	f023 0301 	bic.w	r3, r3, #1
 8008a66:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a68:	4b55      	ldr	r3, [pc, #340]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 8008a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a6c:	4a54      	ldr	r2, [pc, #336]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 8008a6e:	f023 0304 	bic.w	r3, r3, #4
 8008a72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d015      	beq.n	8008aa8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a7c:	f7ff fbd6 	bl	800822c <HAL_GetTick>
 8008a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a82:	e00a      	b.n	8008a9a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a84:	f7ff fbd2 	bl	800822c <HAL_GetTick>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d901      	bls.n	8008a9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008a96:	2303      	movs	r3, #3
 8008a98:	e0cb      	b.n	8008c32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a9a:	4b49      	ldr	r3, [pc, #292]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 8008a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a9e:	f003 0302 	and.w	r3, r3, #2
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d0ee      	beq.n	8008a84 <HAL_RCC_OscConfig+0x334>
 8008aa6:	e014      	b.n	8008ad2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008aa8:	f7ff fbc0 	bl	800822c <HAL_GetTick>
 8008aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008aae:	e00a      	b.n	8008ac6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ab0:	f7ff fbbc 	bl	800822c <HAL_GetTick>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d901      	bls.n	8008ac6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e0b5      	b.n	8008c32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ac6:	4b3e      	ldr	r3, [pc, #248]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 8008ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008aca:	f003 0302 	and.w	r3, r3, #2
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1ee      	bne.n	8008ab0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008ad2:	7dfb      	ldrb	r3, [r7, #23]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d105      	bne.n	8008ae4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ad8:	4b39      	ldr	r3, [pc, #228]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 8008ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008adc:	4a38      	ldr	r2, [pc, #224]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 8008ade:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ae2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f000 80a1 	beq.w	8008c30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008aee:	4b34      	ldr	r3, [pc, #208]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	f003 030c 	and.w	r3, r3, #12
 8008af6:	2b08      	cmp	r3, #8
 8008af8:	d05c      	beq.n	8008bb4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d141      	bne.n	8008b86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b02:	4b31      	ldr	r3, [pc, #196]	@ (8008bc8 <HAL_RCC_OscConfig+0x478>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b08:	f7ff fb90 	bl	800822c <HAL_GetTick>
 8008b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b0e:	e008      	b.n	8008b22 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b10:	f7ff fb8c 	bl	800822c <HAL_GetTick>
 8008b14:	4602      	mov	r2, r0
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d901      	bls.n	8008b22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e087      	b.n	8008c32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b22:	4b27      	ldr	r3, [pc, #156]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1f0      	bne.n	8008b10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	69da      	ldr	r2, [r3, #28]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	431a      	orrs	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b3c:	019b      	lsls	r3, r3, #6
 8008b3e:	431a      	orrs	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b44:	085b      	lsrs	r3, r3, #1
 8008b46:	3b01      	subs	r3, #1
 8008b48:	041b      	lsls	r3, r3, #16
 8008b4a:	431a      	orrs	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b50:	061b      	lsls	r3, r3, #24
 8008b52:	491b      	ldr	r1, [pc, #108]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 8008b54:	4313      	orrs	r3, r2
 8008b56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b58:	4b1b      	ldr	r3, [pc, #108]	@ (8008bc8 <HAL_RCC_OscConfig+0x478>)
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b5e:	f7ff fb65 	bl	800822c <HAL_GetTick>
 8008b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b64:	e008      	b.n	8008b78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b66:	f7ff fb61 	bl	800822c <HAL_GetTick>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d901      	bls.n	8008b78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e05c      	b.n	8008c32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b78:	4b11      	ldr	r3, [pc, #68]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d0f0      	beq.n	8008b66 <HAL_RCC_OscConfig+0x416>
 8008b84:	e054      	b.n	8008c30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b86:	4b10      	ldr	r3, [pc, #64]	@ (8008bc8 <HAL_RCC_OscConfig+0x478>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b8c:	f7ff fb4e 	bl	800822c <HAL_GetTick>
 8008b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b92:	e008      	b.n	8008ba6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b94:	f7ff fb4a 	bl	800822c <HAL_GetTick>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d901      	bls.n	8008ba6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e045      	b.n	8008c32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ba6:	4b06      	ldr	r3, [pc, #24]	@ (8008bc0 <HAL_RCC_OscConfig+0x470>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1f0      	bne.n	8008b94 <HAL_RCC_OscConfig+0x444>
 8008bb2:	e03d      	b.n	8008c30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d107      	bne.n	8008bcc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e038      	b.n	8008c32 <HAL_RCC_OscConfig+0x4e2>
 8008bc0:	40023800 	.word	0x40023800
 8008bc4:	40007000 	.word	0x40007000
 8008bc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8008c3c <HAL_RCC_OscConfig+0x4ec>)
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d028      	beq.n	8008c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d121      	bne.n	8008c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d11a      	bne.n	8008c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008c02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d111      	bne.n	8008c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c12:	085b      	lsrs	r3, r3, #1
 8008c14:	3b01      	subs	r3, #1
 8008c16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d107      	bne.n	8008c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d001      	beq.n	8008c30 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e000      	b.n	8008c32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	40023800 	.word	0x40023800

08008c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d101      	bne.n	8008c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e0cc      	b.n	8008dee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c54:	4b68      	ldr	r3, [pc, #416]	@ (8008df8 <HAL_RCC_ClockConfig+0x1b8>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 0307 	and.w	r3, r3, #7
 8008c5c:	683a      	ldr	r2, [r7, #0]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d90c      	bls.n	8008c7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c62:	4b65      	ldr	r3, [pc, #404]	@ (8008df8 <HAL_RCC_ClockConfig+0x1b8>)
 8008c64:	683a      	ldr	r2, [r7, #0]
 8008c66:	b2d2      	uxtb	r2, r2
 8008c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c6a:	4b63      	ldr	r3, [pc, #396]	@ (8008df8 <HAL_RCC_ClockConfig+0x1b8>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0307 	and.w	r3, r3, #7
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d001      	beq.n	8008c7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e0b8      	b.n	8008dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 0302 	and.w	r3, r3, #2
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d020      	beq.n	8008cca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0304 	and.w	r3, r3, #4
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d005      	beq.n	8008ca0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c94:	4b59      	ldr	r3, [pc, #356]	@ (8008dfc <HAL_RCC_ClockConfig+0x1bc>)
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	4a58      	ldr	r2, [pc, #352]	@ (8008dfc <HAL_RCC_ClockConfig+0x1bc>)
 8008c9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008c9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 0308 	and.w	r3, r3, #8
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d005      	beq.n	8008cb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008cac:	4b53      	ldr	r3, [pc, #332]	@ (8008dfc <HAL_RCC_ClockConfig+0x1bc>)
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	4a52      	ldr	r2, [pc, #328]	@ (8008dfc <HAL_RCC_ClockConfig+0x1bc>)
 8008cb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008cb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cb8:	4b50      	ldr	r3, [pc, #320]	@ (8008dfc <HAL_RCC_ClockConfig+0x1bc>)
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	494d      	ldr	r1, [pc, #308]	@ (8008dfc <HAL_RCC_ClockConfig+0x1bc>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d044      	beq.n	8008d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d107      	bne.n	8008cee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cde:	4b47      	ldr	r3, [pc, #284]	@ (8008dfc <HAL_RCC_ClockConfig+0x1bc>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d119      	bne.n	8008d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e07f      	b.n	8008dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d003      	beq.n	8008cfe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008cfa:	2b03      	cmp	r3, #3
 8008cfc:	d107      	bne.n	8008d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cfe:	4b3f      	ldr	r3, [pc, #252]	@ (8008dfc <HAL_RCC_ClockConfig+0x1bc>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d109      	bne.n	8008d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e06f      	b.n	8008dee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d0e:	4b3b      	ldr	r3, [pc, #236]	@ (8008dfc <HAL_RCC_ClockConfig+0x1bc>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 0302 	and.w	r3, r3, #2
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d101      	bne.n	8008d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e067      	b.n	8008dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d1e:	4b37      	ldr	r3, [pc, #220]	@ (8008dfc <HAL_RCC_ClockConfig+0x1bc>)
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	f023 0203 	bic.w	r2, r3, #3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	4934      	ldr	r1, [pc, #208]	@ (8008dfc <HAL_RCC_ClockConfig+0x1bc>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d30:	f7ff fa7c 	bl	800822c <HAL_GetTick>
 8008d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d36:	e00a      	b.n	8008d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d38:	f7ff fa78 	bl	800822c <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d901      	bls.n	8008d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	e04f      	b.n	8008dee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d4e:	4b2b      	ldr	r3, [pc, #172]	@ (8008dfc <HAL_RCC_ClockConfig+0x1bc>)
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	f003 020c 	and.w	r2, r3, #12
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d1eb      	bne.n	8008d38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d60:	4b25      	ldr	r3, [pc, #148]	@ (8008df8 <HAL_RCC_ClockConfig+0x1b8>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0307 	and.w	r3, r3, #7
 8008d68:	683a      	ldr	r2, [r7, #0]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d20c      	bcs.n	8008d88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d6e:	4b22      	ldr	r3, [pc, #136]	@ (8008df8 <HAL_RCC_ClockConfig+0x1b8>)
 8008d70:	683a      	ldr	r2, [r7, #0]
 8008d72:	b2d2      	uxtb	r2, r2
 8008d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d76:	4b20      	ldr	r3, [pc, #128]	@ (8008df8 <HAL_RCC_ClockConfig+0x1b8>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0307 	and.w	r3, r3, #7
 8008d7e:	683a      	ldr	r2, [r7, #0]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d001      	beq.n	8008d88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	e032      	b.n	8008dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 0304 	and.w	r3, r3, #4
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d008      	beq.n	8008da6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d94:	4b19      	ldr	r3, [pc, #100]	@ (8008dfc <HAL_RCC_ClockConfig+0x1bc>)
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	4916      	ldr	r1, [pc, #88]	@ (8008dfc <HAL_RCC_ClockConfig+0x1bc>)
 8008da2:	4313      	orrs	r3, r2
 8008da4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f003 0308 	and.w	r3, r3, #8
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d009      	beq.n	8008dc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008db2:	4b12      	ldr	r3, [pc, #72]	@ (8008dfc <HAL_RCC_ClockConfig+0x1bc>)
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	00db      	lsls	r3, r3, #3
 8008dc0:	490e      	ldr	r1, [pc, #56]	@ (8008dfc <HAL_RCC_ClockConfig+0x1bc>)
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008dc6:	f000 f821 	bl	8008e0c <HAL_RCC_GetSysClockFreq>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8008dfc <HAL_RCC_ClockConfig+0x1bc>)
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	091b      	lsrs	r3, r3, #4
 8008dd2:	f003 030f 	and.w	r3, r3, #15
 8008dd6:	490a      	ldr	r1, [pc, #40]	@ (8008e00 <HAL_RCC_ClockConfig+0x1c0>)
 8008dd8:	5ccb      	ldrb	r3, [r1, r3]
 8008dda:	fa22 f303 	lsr.w	r3, r2, r3
 8008dde:	4a09      	ldr	r2, [pc, #36]	@ (8008e04 <HAL_RCC_ClockConfig+0x1c4>)
 8008de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008de2:	4b09      	ldr	r3, [pc, #36]	@ (8008e08 <HAL_RCC_ClockConfig+0x1c8>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7ff f9dc 	bl	80081a4 <HAL_InitTick>

  return HAL_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	40023c00 	.word	0x40023c00
 8008dfc:	40023800 	.word	0x40023800
 8008e00:	0800f540 	.word	0x0800f540
 8008e04:	20000000 	.word	0x20000000
 8008e08:	20000004 	.word	0x20000004

08008e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e10:	b090      	sub	sp, #64	@ 0x40
 8008e12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008e14:	2300      	movs	r3, #0
 8008e16:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008e20:	2300      	movs	r3, #0
 8008e22:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e24:	4b59      	ldr	r3, [pc, #356]	@ (8008f8c <HAL_RCC_GetSysClockFreq+0x180>)
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	f003 030c 	and.w	r3, r3, #12
 8008e2c:	2b08      	cmp	r3, #8
 8008e2e:	d00d      	beq.n	8008e4c <HAL_RCC_GetSysClockFreq+0x40>
 8008e30:	2b08      	cmp	r3, #8
 8008e32:	f200 80a1 	bhi.w	8008f78 <HAL_RCC_GetSysClockFreq+0x16c>
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d002      	beq.n	8008e40 <HAL_RCC_GetSysClockFreq+0x34>
 8008e3a:	2b04      	cmp	r3, #4
 8008e3c:	d003      	beq.n	8008e46 <HAL_RCC_GetSysClockFreq+0x3a>
 8008e3e:	e09b      	b.n	8008f78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e40:	4b53      	ldr	r3, [pc, #332]	@ (8008f90 <HAL_RCC_GetSysClockFreq+0x184>)
 8008e42:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008e44:	e09b      	b.n	8008f7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008e46:	4b53      	ldr	r3, [pc, #332]	@ (8008f94 <HAL_RCC_GetSysClockFreq+0x188>)
 8008e48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008e4a:	e098      	b.n	8008f7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008e4c:	4b4f      	ldr	r3, [pc, #316]	@ (8008f8c <HAL_RCC_GetSysClockFreq+0x180>)
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e54:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008e56:	4b4d      	ldr	r3, [pc, #308]	@ (8008f8c <HAL_RCC_GetSysClockFreq+0x180>)
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d028      	beq.n	8008eb4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e62:	4b4a      	ldr	r3, [pc, #296]	@ (8008f8c <HAL_RCC_GetSysClockFreq+0x180>)
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	099b      	lsrs	r3, r3, #6
 8008e68:	2200      	movs	r2, #0
 8008e6a:	623b      	str	r3, [r7, #32]
 8008e6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e6e:	6a3b      	ldr	r3, [r7, #32]
 8008e70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008e74:	2100      	movs	r1, #0
 8008e76:	4b47      	ldr	r3, [pc, #284]	@ (8008f94 <HAL_RCC_GetSysClockFreq+0x188>)
 8008e78:	fb03 f201 	mul.w	r2, r3, r1
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	fb00 f303 	mul.w	r3, r0, r3
 8008e82:	4413      	add	r3, r2
 8008e84:	4a43      	ldr	r2, [pc, #268]	@ (8008f94 <HAL_RCC_GetSysClockFreq+0x188>)
 8008e86:	fba0 1202 	umull	r1, r2, r0, r2
 8008e8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e8c:	460a      	mov	r2, r1
 8008e8e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008e90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e92:	4413      	add	r3, r2
 8008e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e98:	2200      	movs	r2, #0
 8008e9a:	61bb      	str	r3, [r7, #24]
 8008e9c:	61fa      	str	r2, [r7, #28]
 8008e9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ea2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008ea6:	f7fd fd25 	bl	80068f4 <__aeabi_uldivmod>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	4613      	mov	r3, r2
 8008eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008eb2:	e053      	b.n	8008f5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008eb4:	4b35      	ldr	r3, [pc, #212]	@ (8008f8c <HAL_RCC_GetSysClockFreq+0x180>)
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	099b      	lsrs	r3, r3, #6
 8008eba:	2200      	movs	r2, #0
 8008ebc:	613b      	str	r3, [r7, #16]
 8008ebe:	617a      	str	r2, [r7, #20]
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008ec6:	f04f 0b00 	mov.w	fp, #0
 8008eca:	4652      	mov	r2, sl
 8008ecc:	465b      	mov	r3, fp
 8008ece:	f04f 0000 	mov.w	r0, #0
 8008ed2:	f04f 0100 	mov.w	r1, #0
 8008ed6:	0159      	lsls	r1, r3, #5
 8008ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008edc:	0150      	lsls	r0, r2, #5
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	ebb2 080a 	subs.w	r8, r2, sl
 8008ee6:	eb63 090b 	sbc.w	r9, r3, fp
 8008eea:	f04f 0200 	mov.w	r2, #0
 8008eee:	f04f 0300 	mov.w	r3, #0
 8008ef2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008ef6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008efa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008efe:	ebb2 0408 	subs.w	r4, r2, r8
 8008f02:	eb63 0509 	sbc.w	r5, r3, r9
 8008f06:	f04f 0200 	mov.w	r2, #0
 8008f0a:	f04f 0300 	mov.w	r3, #0
 8008f0e:	00eb      	lsls	r3, r5, #3
 8008f10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f14:	00e2      	lsls	r2, r4, #3
 8008f16:	4614      	mov	r4, r2
 8008f18:	461d      	mov	r5, r3
 8008f1a:	eb14 030a 	adds.w	r3, r4, sl
 8008f1e:	603b      	str	r3, [r7, #0]
 8008f20:	eb45 030b 	adc.w	r3, r5, fp
 8008f24:	607b      	str	r3, [r7, #4]
 8008f26:	f04f 0200 	mov.w	r2, #0
 8008f2a:	f04f 0300 	mov.w	r3, #0
 8008f2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008f32:	4629      	mov	r1, r5
 8008f34:	028b      	lsls	r3, r1, #10
 8008f36:	4621      	mov	r1, r4
 8008f38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008f3c:	4621      	mov	r1, r4
 8008f3e:	028a      	lsls	r2, r1, #10
 8008f40:	4610      	mov	r0, r2
 8008f42:	4619      	mov	r1, r3
 8008f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f46:	2200      	movs	r2, #0
 8008f48:	60bb      	str	r3, [r7, #8]
 8008f4a:	60fa      	str	r2, [r7, #12]
 8008f4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f50:	f7fd fcd0 	bl	80068f4 <__aeabi_uldivmod>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	4613      	mov	r3, r2
 8008f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8008f8c <HAL_RCC_GetSysClockFreq+0x180>)
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	0c1b      	lsrs	r3, r3, #16
 8008f62:	f003 0303 	and.w	r3, r3, #3
 8008f66:	3301      	adds	r3, #1
 8008f68:	005b      	lsls	r3, r3, #1
 8008f6a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008f6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008f76:	e002      	b.n	8008f7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f78:	4b05      	ldr	r3, [pc, #20]	@ (8008f90 <HAL_RCC_GetSysClockFreq+0x184>)
 8008f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3740      	adds	r7, #64	@ 0x40
 8008f84:	46bd      	mov	sp, r7
 8008f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f8a:	bf00      	nop
 8008f8c:	40023800 	.word	0x40023800
 8008f90:	00f42400 	.word	0x00f42400
 8008f94:	017d7840 	.word	0x017d7840

08008f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f9c:	4b03      	ldr	r3, [pc, #12]	@ (8008fac <HAL_RCC_GetHCLKFreq+0x14>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop
 8008fac:	20000000 	.word	0x20000000

08008fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008fb4:	f7ff fff0 	bl	8008f98 <HAL_RCC_GetHCLKFreq>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	4b05      	ldr	r3, [pc, #20]	@ (8008fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	0a9b      	lsrs	r3, r3, #10
 8008fc0:	f003 0307 	and.w	r3, r3, #7
 8008fc4:	4903      	ldr	r1, [pc, #12]	@ (8008fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008fc6:	5ccb      	ldrb	r3, [r1, r3]
 8008fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	40023800 	.word	0x40023800
 8008fd4:	0800f550 	.word	0x0800f550

08008fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008fdc:	f7ff ffdc 	bl	8008f98 <HAL_RCC_GetHCLKFreq>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	4b05      	ldr	r3, [pc, #20]	@ (8008ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	0b5b      	lsrs	r3, r3, #13
 8008fe8:	f003 0307 	and.w	r3, r3, #7
 8008fec:	4903      	ldr	r1, [pc, #12]	@ (8008ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008fee:	5ccb      	ldrb	r3, [r1, r3]
 8008ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	40023800 	.word	0x40023800
 8008ffc:	0800f550 	.word	0x0800f550

08009000 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009008:	2300      	movs	r3, #0
 800900a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800900c:	2300      	movs	r3, #0
 800900e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0301 	and.w	r3, r3, #1
 8009018:	2b00      	cmp	r3, #0
 800901a:	d105      	bne.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009024:	2b00      	cmp	r3, #0
 8009026:	d035      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009028:	4b67      	ldr	r3, [pc, #412]	@ (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800902a:	2200      	movs	r2, #0
 800902c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800902e:	f7ff f8fd 	bl	800822c <HAL_GetTick>
 8009032:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009034:	e008      	b.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009036:	f7ff f8f9 	bl	800822c <HAL_GetTick>
 800903a:	4602      	mov	r2, r0
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	2b02      	cmp	r3, #2
 8009042:	d901      	bls.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009044:	2303      	movs	r3, #3
 8009046:	e0ba      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009048:	4b60      	ldr	r3, [pc, #384]	@ (80091cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1f0      	bne.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	019a      	lsls	r2, r3, #6
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	071b      	lsls	r3, r3, #28
 8009060:	495a      	ldr	r1, [pc, #360]	@ (80091cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009062:	4313      	orrs	r3, r2
 8009064:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009068:	4b57      	ldr	r3, [pc, #348]	@ (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800906a:	2201      	movs	r2, #1
 800906c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800906e:	f7ff f8dd 	bl	800822c <HAL_GetTick>
 8009072:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009074:	e008      	b.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009076:	f7ff f8d9 	bl	800822c <HAL_GetTick>
 800907a:	4602      	mov	r2, r0
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	2b02      	cmp	r3, #2
 8009082:	d901      	bls.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	e09a      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009088:	4b50      	ldr	r3, [pc, #320]	@ (80091cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d0f0      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0302 	and.w	r3, r3, #2
 800909c:	2b00      	cmp	r3, #0
 800909e:	f000 8083 	beq.w	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80090a2:	2300      	movs	r3, #0
 80090a4:	60fb      	str	r3, [r7, #12]
 80090a6:	4b49      	ldr	r3, [pc, #292]	@ (80091cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80090a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090aa:	4a48      	ldr	r2, [pc, #288]	@ (80091cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80090ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80090b2:	4b46      	ldr	r3, [pc, #280]	@ (80091cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80090b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090ba:	60fb      	str	r3, [r7, #12]
 80090bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80090be:	4b44      	ldr	r3, [pc, #272]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a43      	ldr	r2, [pc, #268]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80090ca:	f7ff f8af 	bl	800822c <HAL_GetTick>
 80090ce:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80090d0:	e008      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090d2:	f7ff f8ab 	bl	800822c <HAL_GetTick>
 80090d6:	4602      	mov	r2, r0
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d901      	bls.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e06c      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80090e4:	4b3a      	ldr	r3, [pc, #232]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d0f0      	beq.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80090f0:	4b36      	ldr	r3, [pc, #216]	@ (80091cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80090f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090f8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d02f      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009108:	693a      	ldr	r2, [r7, #16]
 800910a:	429a      	cmp	r2, r3
 800910c:	d028      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800910e:	4b2f      	ldr	r3, [pc, #188]	@ (80091cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009112:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009116:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009118:	4b2e      	ldr	r3, [pc, #184]	@ (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800911a:	2201      	movs	r2, #1
 800911c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800911e:	4b2d      	ldr	r3, [pc, #180]	@ (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009120:	2200      	movs	r2, #0
 8009122:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009124:	4a29      	ldr	r2, [pc, #164]	@ (80091cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800912a:	4b28      	ldr	r3, [pc, #160]	@ (80091cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800912c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800912e:	f003 0301 	and.w	r3, r3, #1
 8009132:	2b01      	cmp	r3, #1
 8009134:	d114      	bne.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009136:	f7ff f879 	bl	800822c <HAL_GetTick>
 800913a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800913c:	e00a      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800913e:	f7ff f875 	bl	800822c <HAL_GetTick>
 8009142:	4602      	mov	r2, r0
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800914c:	4293      	cmp	r3, r2
 800914e:	d901      	bls.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009150:	2303      	movs	r3, #3
 8009152:	e034      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009154:	4b1d      	ldr	r3, [pc, #116]	@ (80091cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009158:	f003 0302 	and.w	r3, r3, #2
 800915c:	2b00      	cmp	r3, #0
 800915e:	d0ee      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009168:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800916c:	d10d      	bne.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800916e:	4b17      	ldr	r3, [pc, #92]	@ (80091cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800917e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009182:	4912      	ldr	r1, [pc, #72]	@ (80091cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009184:	4313      	orrs	r3, r2
 8009186:	608b      	str	r3, [r1, #8]
 8009188:	e005      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800918a:	4b10      	ldr	r3, [pc, #64]	@ (80091cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	4a0f      	ldr	r2, [pc, #60]	@ (80091cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009190:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009194:	6093      	str	r3, [r2, #8]
 8009196:	4b0d      	ldr	r3, [pc, #52]	@ (80091cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009198:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091a2:	490a      	ldr	r1, [pc, #40]	@ (80091cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80091a4:	4313      	orrs	r3, r2
 80091a6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 0308 	and.w	r3, r3, #8
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	7c1a      	ldrb	r2, [r3, #16]
 80091b8:	4b07      	ldr	r3, [pc, #28]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80091ba:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3718      	adds	r7, #24
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	42470068 	.word	0x42470068
 80091cc:	40023800 	.word	0x40023800
 80091d0:	40007000 	.word	0x40007000
 80091d4:	42470e40 	.word	0x42470e40
 80091d8:	424711e0 	.word	0x424711e0

080091dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d101      	bne.n	80091f2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e073      	b.n	80092da <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	7f5b      	ldrb	r3, [r3, #29]
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d105      	bne.n	8009208 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f7fe fe06 	bl	8007e14 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2202      	movs	r2, #2
 800920c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	f003 0310 	and.w	r3, r3, #16
 8009218:	2b10      	cmp	r3, #16
 800921a:	d055      	beq.n	80092c8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	22ca      	movs	r2, #202	@ 0xca
 8009222:	625a      	str	r2, [r3, #36]	@ 0x24
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2253      	movs	r2, #83	@ 0x53
 800922a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 fa49 	bl	80096c4 <RTC_EnterInitMode>
 8009232:	4603      	mov	r3, r0
 8009234:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009236:	7bfb      	ldrb	r3, [r7, #15]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d12c      	bne.n	8009296 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	6812      	ldr	r2, [r2, #0]
 8009246:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800924a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800924e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6899      	ldr	r1, [r3, #8]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	685a      	ldr	r2, [r3, #4]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	431a      	orrs	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	695b      	ldr	r3, [r3, #20]
 8009264:	431a      	orrs	r2, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	430a      	orrs	r2, r1
 800926c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	68d2      	ldr	r2, [r2, #12]
 8009276:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	6919      	ldr	r1, [r3, #16]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	041a      	lsls	r2, r3, #16
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	430a      	orrs	r2, r1
 800928a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fa50 	bl	8009732 <RTC_ExitInitMode>
 8009292:	4603      	mov	r3, r0
 8009294:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009296:	7bfb      	ldrb	r3, [r7, #15]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d110      	bne.n	80092be <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80092aa:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	699a      	ldr	r2, [r3, #24]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	430a      	orrs	r2, r1
 80092bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	22ff      	movs	r2, #255	@ 0xff
 80092c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80092c6:	e001      	b.n	80092cc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d102      	bne.n	80092d8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80092d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80092e2:	b590      	push	{r4, r7, lr}
 80092e4:	b087      	sub	sp, #28
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	60f8      	str	r0, [r7, #12]
 80092ea:	60b9      	str	r1, [r7, #8]
 80092ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80092ee:	2300      	movs	r3, #0
 80092f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	7f1b      	ldrb	r3, [r3, #28]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d101      	bne.n	80092fe <HAL_RTC_SetTime+0x1c>
 80092fa:	2302      	movs	r3, #2
 80092fc:	e087      	b.n	800940e <HAL_RTC_SetTime+0x12c>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2201      	movs	r2, #1
 8009302:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2202      	movs	r2, #2
 8009308:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d126      	bne.n	800935e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800931a:	2b00      	cmp	r3, #0
 800931c:	d102      	bne.n	8009324 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	2200      	movs	r2, #0
 8009322:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	4618      	mov	r0, r3
 800932a:	f000 fa27 	bl	800977c <RTC_ByteToBcd2>
 800932e:	4603      	mov	r3, r0
 8009330:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	785b      	ldrb	r3, [r3, #1]
 8009336:	4618      	mov	r0, r3
 8009338:	f000 fa20 	bl	800977c <RTC_ByteToBcd2>
 800933c:	4603      	mov	r3, r0
 800933e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009340:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	789b      	ldrb	r3, [r3, #2]
 8009346:	4618      	mov	r0, r3
 8009348:	f000 fa18 	bl	800977c <RTC_ByteToBcd2>
 800934c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800934e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	78db      	ldrb	r3, [r3, #3]
 8009356:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009358:	4313      	orrs	r3, r2
 800935a:	617b      	str	r3, [r7, #20]
 800935c:	e018      	b.n	8009390 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009368:	2b00      	cmp	r3, #0
 800936a:	d102      	bne.n	8009372 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2200      	movs	r2, #0
 8009370:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	785b      	ldrb	r3, [r3, #1]
 800937c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800937e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009380:	68ba      	ldr	r2, [r7, #8]
 8009382:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009384:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	78db      	ldrb	r3, [r3, #3]
 800938a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800938c:	4313      	orrs	r3, r2
 800938e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	22ca      	movs	r2, #202	@ 0xca
 8009396:	625a      	str	r2, [r3, #36]	@ 0x24
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2253      	movs	r2, #83	@ 0x53
 800939e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 f98f 	bl	80096c4 <RTC_EnterInitMode>
 80093a6:	4603      	mov	r3, r0
 80093a8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80093aa:	7cfb      	ldrb	r3, [r7, #19]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d120      	bne.n	80093f2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80093ba:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80093be:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	689a      	ldr	r2, [r3, #8]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80093ce:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6899      	ldr	r1, [r3, #8]
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	68da      	ldr	r2, [r3, #12]
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	431a      	orrs	r2, r3
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	430a      	orrs	r2, r1
 80093e6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f000 f9a2 	bl	8009732 <RTC_ExitInitMode>
 80093ee:	4603      	mov	r3, r0
 80093f0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80093f2:	7cfb      	ldrb	r3, [r7, #19]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d102      	bne.n	80093fe <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2201      	movs	r2, #1
 80093fc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	22ff      	movs	r2, #255	@ 0xff
 8009404:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	771a      	strb	r2, [r3, #28]

  return status;
 800940c:	7cfb      	ldrb	r3, [r7, #19]
}
 800940e:	4618      	mov	r0, r3
 8009410:	371c      	adds	r7, #28
 8009412:	46bd      	mov	sp, r7
 8009414:	bd90      	pop	{r4, r7, pc}

08009416 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b086      	sub	sp, #24
 800941a:	af00      	add	r7, sp, #0
 800941c:	60f8      	str	r0, [r7, #12]
 800941e:	60b9      	str	r1, [r7, #8]
 8009420:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009422:	2300      	movs	r3, #0
 8009424:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	691b      	ldr	r3, [r3, #16]
 8009436:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009448:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800944c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	0c1b      	lsrs	r3, r3, #16
 8009452:	b2db      	uxtb	r3, r3
 8009454:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009458:	b2da      	uxtb	r2, r3
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	0a1b      	lsrs	r3, r3, #8
 8009462:	b2db      	uxtb	r3, r3
 8009464:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009468:	b2da      	uxtb	r2, r3
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	b2db      	uxtb	r3, r3
 8009472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009476:	b2da      	uxtb	r2, r3
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	0d9b      	lsrs	r3, r3, #22
 8009480:	b2db      	uxtb	r3, r3
 8009482:	f003 0301 	and.w	r3, r3, #1
 8009486:	b2da      	uxtb	r2, r3
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d11a      	bne.n	80094c8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	4618      	mov	r0, r3
 8009498:	f000 f98e 	bl	80097b8 <RTC_Bcd2ToByte>
 800949c:	4603      	mov	r3, r0
 800949e:	461a      	mov	r2, r3
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	785b      	ldrb	r3, [r3, #1]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f000 f985 	bl	80097b8 <RTC_Bcd2ToByte>
 80094ae:	4603      	mov	r3, r0
 80094b0:	461a      	mov	r2, r3
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	789b      	ldrb	r3, [r3, #2]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 f97c 	bl	80097b8 <RTC_Bcd2ToByte>
 80094c0:	4603      	mov	r3, r0
 80094c2:	461a      	mov	r2, r3
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3718      	adds	r7, #24
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80094d2:	b590      	push	{r4, r7, lr}
 80094d4:	b087      	sub	sp, #28
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	60f8      	str	r0, [r7, #12]
 80094da:	60b9      	str	r1, [r7, #8]
 80094dc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80094de:	2300      	movs	r3, #0
 80094e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	7f1b      	ldrb	r3, [r3, #28]
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d101      	bne.n	80094ee <HAL_RTC_SetDate+0x1c>
 80094ea:	2302      	movs	r3, #2
 80094ec:	e071      	b.n	80095d2 <HAL_RTC_SetDate+0x100>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2201      	movs	r2, #1
 80094f2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2202      	movs	r2, #2
 80094f8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10e      	bne.n	800951e <HAL_RTC_SetDate+0x4c>
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	785b      	ldrb	r3, [r3, #1]
 8009504:	f003 0310 	and.w	r3, r3, #16
 8009508:	2b00      	cmp	r3, #0
 800950a:	d008      	beq.n	800951e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	785b      	ldrb	r3, [r3, #1]
 8009510:	f023 0310 	bic.w	r3, r3, #16
 8009514:	b2db      	uxtb	r3, r3
 8009516:	330a      	adds	r3, #10
 8009518:	b2da      	uxtb	r2, r3
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d11c      	bne.n	800955e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	78db      	ldrb	r3, [r3, #3]
 8009528:	4618      	mov	r0, r3
 800952a:	f000 f927 	bl	800977c <RTC_ByteToBcd2>
 800952e:	4603      	mov	r3, r0
 8009530:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	785b      	ldrb	r3, [r3, #1]
 8009536:	4618      	mov	r0, r3
 8009538:	f000 f920 	bl	800977c <RTC_ByteToBcd2>
 800953c:	4603      	mov	r3, r0
 800953e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009540:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	789b      	ldrb	r3, [r3, #2]
 8009546:	4618      	mov	r0, r3
 8009548:	f000 f918 	bl	800977c <RTC_ByteToBcd2>
 800954c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800954e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009558:	4313      	orrs	r3, r2
 800955a:	617b      	str	r3, [r7, #20]
 800955c:	e00e      	b.n	800957c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	78db      	ldrb	r3, [r3, #3]
 8009562:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	785b      	ldrb	r3, [r3, #1]
 8009568:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800956a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800956c:	68ba      	ldr	r2, [r7, #8]
 800956e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009570:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009578:	4313      	orrs	r3, r2
 800957a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	22ca      	movs	r2, #202	@ 0xca
 8009582:	625a      	str	r2, [r3, #36]	@ 0x24
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2253      	movs	r2, #83	@ 0x53
 800958a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 f899 	bl	80096c4 <RTC_EnterInitMode>
 8009592:	4603      	mov	r3, r0
 8009594:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009596:	7cfb      	ldrb	r3, [r7, #19]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d10c      	bne.n	80095b6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80095a6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80095aa:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f000 f8c0 	bl	8009732 <RTC_ExitInitMode>
 80095b2:	4603      	mov	r3, r0
 80095b4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80095b6:	7cfb      	ldrb	r3, [r7, #19]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d102      	bne.n	80095c2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2201      	movs	r2, #1
 80095c0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	22ff      	movs	r2, #255	@ 0xff
 80095c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	771a      	strb	r2, [r3, #28]

  return status;
 80095d0:	7cfb      	ldrb	r3, [r7, #19]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	371c      	adds	r7, #28
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd90      	pop	{r4, r7, pc}

080095da <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b086      	sub	sp, #24
 80095de:	af00      	add	r7, sp, #0
 80095e0:	60f8      	str	r0, [r7, #12]
 80095e2:	60b9      	str	r1, [r7, #8]
 80095e4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80095e6:	2300      	movs	r3, #0
 80095e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80095f4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80095f8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	0c1b      	lsrs	r3, r3, #16
 80095fe:	b2da      	uxtb	r2, r3
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	0a1b      	lsrs	r3, r3, #8
 8009608:	b2db      	uxtb	r3, r3
 800960a:	f003 031f 	and.w	r3, r3, #31
 800960e:	b2da      	uxtb	r2, r3
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	b2db      	uxtb	r3, r3
 8009618:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800961c:	b2da      	uxtb	r2, r3
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	0b5b      	lsrs	r3, r3, #13
 8009626:	b2db      	uxtb	r3, r3
 8009628:	f003 0307 	and.w	r3, r3, #7
 800962c:	b2da      	uxtb	r2, r3
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d11a      	bne.n	800966e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	78db      	ldrb	r3, [r3, #3]
 800963c:	4618      	mov	r0, r3
 800963e:	f000 f8bb 	bl	80097b8 <RTC_Bcd2ToByte>
 8009642:	4603      	mov	r3, r0
 8009644:	461a      	mov	r2, r3
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	785b      	ldrb	r3, [r3, #1]
 800964e:	4618      	mov	r0, r3
 8009650:	f000 f8b2 	bl	80097b8 <RTC_Bcd2ToByte>
 8009654:	4603      	mov	r3, r0
 8009656:	461a      	mov	r2, r3
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	789b      	ldrb	r3, [r3, #2]
 8009660:	4618      	mov	r0, r3
 8009662:	f000 f8a9 	bl	80097b8 <RTC_Bcd2ToByte>
 8009666:	4603      	mov	r3, r0
 8009668:	461a      	mov	r2, r3
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3718      	adds	r7, #24
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009680:	2300      	movs	r3, #0
 8009682:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a0d      	ldr	r2, [pc, #52]	@ (80096c0 <HAL_RTC_WaitForSynchro+0x48>)
 800968a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800968c:	f7fe fdce 	bl	800822c <HAL_GetTick>
 8009690:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009692:	e009      	b.n	80096a8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009694:	f7fe fdca 	bl	800822c <HAL_GetTick>
 8009698:	4602      	mov	r2, r0
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80096a2:	d901      	bls.n	80096a8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80096a4:	2303      	movs	r3, #3
 80096a6:	e007      	b.n	80096b8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	f003 0320 	and.w	r3, r3, #32
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d0ee      	beq.n	8009694 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	00013f5f 	.word	0x00013f5f

080096c4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80096cc:	2300      	movs	r3, #0
 80096ce:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80096d0:	2300      	movs	r3, #0
 80096d2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d122      	bne.n	8009728 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68da      	ldr	r2, [r3, #12]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80096f0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80096f2:	f7fe fd9b 	bl	800822c <HAL_GetTick>
 80096f6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80096f8:	e00c      	b.n	8009714 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80096fa:	f7fe fd97 	bl	800822c <HAL_GetTick>
 80096fe:	4602      	mov	r2, r0
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	1ad3      	subs	r3, r2, r3
 8009704:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009708:	d904      	bls.n	8009714 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2204      	movs	r2, #4
 800970e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800971e:	2b00      	cmp	r3, #0
 8009720:	d102      	bne.n	8009728 <RTC_EnterInitMode+0x64>
 8009722:	7bfb      	ldrb	r3, [r7, #15]
 8009724:	2b01      	cmp	r3, #1
 8009726:	d1e8      	bne.n	80096fa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009728:	7bfb      	ldrb	r3, [r7, #15]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800973a:	2300      	movs	r3, #0
 800973c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68da      	ldr	r2, [r3, #12]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800974c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	f003 0320 	and.w	r3, r3, #32
 8009758:	2b00      	cmp	r3, #0
 800975a:	d10a      	bne.n	8009772 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f7ff ff8b 	bl	8009678 <HAL_RTC_WaitForSynchro>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d004      	beq.n	8009772 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2204      	movs	r2, #4
 800976c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009772:	7bfb      	ldrb	r3, [r7, #15]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	4603      	mov	r3, r0
 8009784:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009786:	2300      	movs	r3, #0
 8009788:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800978a:	e005      	b.n	8009798 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	3301      	adds	r3, #1
 8009790:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8009792:	79fb      	ldrb	r3, [r7, #7]
 8009794:	3b0a      	subs	r3, #10
 8009796:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009798:	79fb      	ldrb	r3, [r7, #7]
 800979a:	2b09      	cmp	r3, #9
 800979c:	d8f6      	bhi.n	800978c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	011b      	lsls	r3, r3, #4
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	79fb      	ldrb	r3, [r7, #7]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	b2db      	uxtb	r3, r3
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	4603      	mov	r3, r0
 80097c0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80097c2:	2300      	movs	r3, #0
 80097c4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80097c6:	79fb      	ldrb	r3, [r7, #7]
 80097c8:	091b      	lsrs	r3, r3, #4
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	461a      	mov	r2, r3
 80097ce:	4613      	mov	r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4413      	add	r3, r2
 80097d4:	005b      	lsls	r3, r3, #1
 80097d6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	b2da      	uxtb	r2, r3
 80097dc:	79fb      	ldrb	r3, [r7, #7]
 80097de:	f003 030f 	and.w	r3, r3, #15
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	4413      	add	r3, r2
 80097e6:	b2db      	uxtb	r3, r3
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d101      	bne.n	8009806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e042      	b.n	800988c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800980c:	b2db      	uxtb	r3, r3
 800980e:	2b00      	cmp	r3, #0
 8009810:	d106      	bne.n	8009820 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f7fe fb26 	bl	8007e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2224      	movs	r2, #36	@ 0x24
 8009824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68da      	ldr	r2, [r3, #12]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009836:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 fa09 	bl	8009c50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	691a      	ldr	r2, [r3, #16]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800984c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	695a      	ldr	r2, [r3, #20]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800985c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68da      	ldr	r2, [r3, #12]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800986c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2220      	movs	r2, #32
 8009878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2220      	movs	r2, #32
 8009880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3708      	adds	r7, #8
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b08a      	sub	sp, #40	@ 0x28
 8009898:	af02      	add	r7, sp, #8
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	603b      	str	r3, [r7, #0]
 80098a0:	4613      	mov	r3, r2
 80098a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80098a4:	2300      	movs	r3, #0
 80098a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b20      	cmp	r3, #32
 80098b2:	d175      	bne.n	80099a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d002      	beq.n	80098c0 <HAL_UART_Transmit+0x2c>
 80098ba:	88fb      	ldrh	r3, [r7, #6]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d101      	bne.n	80098c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	e06e      	b.n	80099a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2200      	movs	r2, #0
 80098c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2221      	movs	r2, #33	@ 0x21
 80098ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098d2:	f7fe fcab 	bl	800822c <HAL_GetTick>
 80098d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	88fa      	ldrh	r2, [r7, #6]
 80098dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	88fa      	ldrh	r2, [r7, #6]
 80098e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098ec:	d108      	bne.n	8009900 <HAL_UART_Transmit+0x6c>
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d104      	bne.n	8009900 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80098f6:	2300      	movs	r3, #0
 80098f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	61bb      	str	r3, [r7, #24]
 80098fe:	e003      	b.n	8009908 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009904:	2300      	movs	r3, #0
 8009906:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009908:	e02e      	b.n	8009968 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2200      	movs	r2, #0
 8009912:	2180      	movs	r1, #128	@ 0x80
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f000 f8df 	bl	8009ad8 <UART_WaitOnFlagUntilTimeout>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d005      	beq.n	800992c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2220      	movs	r2, #32
 8009924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009928:	2303      	movs	r3, #3
 800992a:	e03a      	b.n	80099a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d10b      	bne.n	800994a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	881b      	ldrh	r3, [r3, #0]
 8009936:	461a      	mov	r2, r3
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009940:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	3302      	adds	r3, #2
 8009946:	61bb      	str	r3, [r7, #24]
 8009948:	e007      	b.n	800995a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	781a      	ldrb	r2, [r3, #0]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	3301      	adds	r3, #1
 8009958:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800995e:	b29b      	uxth	r3, r3
 8009960:	3b01      	subs	r3, #1
 8009962:	b29a      	uxth	r2, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800996c:	b29b      	uxth	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1cb      	bne.n	800990a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	2200      	movs	r2, #0
 800997a:	2140      	movs	r1, #64	@ 0x40
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f000 f8ab 	bl	8009ad8 <UART_WaitOnFlagUntilTimeout>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d005      	beq.n	8009994 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2220      	movs	r2, #32
 800998c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009990:	2303      	movs	r3, #3
 8009992:	e006      	b.n	80099a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2220      	movs	r2, #32
 8009998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800999c:	2300      	movs	r3, #0
 800999e:	e000      	b.n	80099a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80099a0:	2302      	movs	r3, #2
  }
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3720      	adds	r7, #32
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b08a      	sub	sp, #40	@ 0x28
 80099ae:	af02      	add	r7, sp, #8
 80099b0:	60f8      	str	r0, [r7, #12]
 80099b2:	60b9      	str	r1, [r7, #8]
 80099b4:	603b      	str	r3, [r7, #0]
 80099b6:	4613      	mov	r3, r2
 80099b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80099ba:	2300      	movs	r3, #0
 80099bc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	2b20      	cmp	r3, #32
 80099c8:	f040 8081 	bne.w	8009ace <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d002      	beq.n	80099d8 <HAL_UART_Receive+0x2e>
 80099d2:	88fb      	ldrh	r3, [r7, #6]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d101      	bne.n	80099dc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	e079      	b.n	8009ad0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2222      	movs	r2, #34	@ 0x22
 80099e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2200      	movs	r2, #0
 80099ee:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80099f0:	f7fe fc1c 	bl	800822c <HAL_GetTick>
 80099f4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	88fa      	ldrh	r2, [r7, #6]
 80099fa:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	88fa      	ldrh	r2, [r7, #6]
 8009a00:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a0a:	d108      	bne.n	8009a1e <HAL_UART_Receive+0x74>
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d104      	bne.n	8009a1e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8009a14:	2300      	movs	r3, #0
 8009a16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	61bb      	str	r3, [r7, #24]
 8009a1c:	e003      	b.n	8009a26 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a22:	2300      	movs	r3, #0
 8009a24:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009a26:	e047      	b.n	8009ab8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	2120      	movs	r1, #32
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f000 f850 	bl	8009ad8 <UART_WaitOnFlagUntilTimeout>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d005      	beq.n	8009a4a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2220      	movs	r2, #32
 8009a42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e042      	b.n	8009ad0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d10c      	bne.n	8009a6a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	3302      	adds	r3, #2
 8009a66:	61bb      	str	r3, [r7, #24]
 8009a68:	e01f      	b.n	8009aaa <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a72:	d007      	beq.n	8009a84 <HAL_UART_Receive+0xda>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10a      	bne.n	8009a92 <HAL_UART_Receive+0xe8>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d106      	bne.n	8009a92 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	b2da      	uxtb	r2, r3
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	701a      	strb	r2, [r3, #0]
 8009a90:	e008      	b.n	8009aa4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1b2      	bne.n	8009a28 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2220      	movs	r2, #32
 8009ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8009aca:	2300      	movs	r3, #0
 8009acc:	e000      	b.n	8009ad0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009ace:	2302      	movs	r3, #2
  }
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3720      	adds	r7, #32
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b086      	sub	sp, #24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	603b      	str	r3, [r7, #0]
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ae8:	e03b      	b.n	8009b62 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009aea:	6a3b      	ldr	r3, [r7, #32]
 8009aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af0:	d037      	beq.n	8009b62 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009af2:	f7fe fb9b 	bl	800822c <HAL_GetTick>
 8009af6:	4602      	mov	r2, r0
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	6a3a      	ldr	r2, [r7, #32]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d302      	bcc.n	8009b08 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b02:	6a3b      	ldr	r3, [r7, #32]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d101      	bne.n	8009b0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	e03a      	b.n	8009b82 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	f003 0304 	and.w	r3, r3, #4
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d023      	beq.n	8009b62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	2b80      	cmp	r3, #128	@ 0x80
 8009b1e:	d020      	beq.n	8009b62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	2b40      	cmp	r3, #64	@ 0x40
 8009b24:	d01d      	beq.n	8009b62 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 0308 	and.w	r3, r3, #8
 8009b30:	2b08      	cmp	r3, #8
 8009b32:	d116      	bne.n	8009b62 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009b34:	2300      	movs	r3, #0
 8009b36:	617b      	str	r3, [r7, #20]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	617b      	str	r3, [r7, #20]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	617b      	str	r3, [r7, #20]
 8009b48:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f000 f81d 	bl	8009b8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2208      	movs	r2, #8
 8009b54:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e00f      	b.n	8009b82 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	bf0c      	ite	eq
 8009b72:	2301      	moveq	r3, #1
 8009b74:	2300      	movne	r3, #0
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	461a      	mov	r2, r3
 8009b7a:	79fb      	ldrb	r3, [r7, #7]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d0b4      	beq.n	8009aea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3718      	adds	r7, #24
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b8a:	b480      	push	{r7}
 8009b8c:	b095      	sub	sp, #84	@ 0x54
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	330c      	adds	r3, #12
 8009b98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b9c:	e853 3f00 	ldrex	r3, [r3]
 8009ba0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	330c      	adds	r3, #12
 8009bb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009bb2:	643a      	str	r2, [r7, #64]	@ 0x40
 8009bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009bb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009bba:	e841 2300 	strex	r3, r2, [r1]
 8009bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1e5      	bne.n	8009b92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3314      	adds	r3, #20
 8009bcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bce:	6a3b      	ldr	r3, [r7, #32]
 8009bd0:	e853 3f00 	ldrex	r3, [r3]
 8009bd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	f023 0301 	bic.w	r3, r3, #1
 8009bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	3314      	adds	r3, #20
 8009be4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009be6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009be8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bee:	e841 2300 	strex	r3, r2, [r1]
 8009bf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1e5      	bne.n	8009bc6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d119      	bne.n	8009c36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	330c      	adds	r3, #12
 8009c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	e853 3f00 	ldrex	r3, [r3]
 8009c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	f023 0310 	bic.w	r3, r3, #16
 8009c18:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	330c      	adds	r3, #12
 8009c20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c22:	61ba      	str	r2, [r7, #24]
 8009c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c26:	6979      	ldr	r1, [r7, #20]
 8009c28:	69ba      	ldr	r2, [r7, #24]
 8009c2a:	e841 2300 	strex	r3, r2, [r1]
 8009c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1e5      	bne.n	8009c02 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2220      	movs	r2, #32
 8009c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009c44:	bf00      	nop
 8009c46:	3754      	adds	r7, #84	@ 0x54
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c54:	b0c0      	sub	sp, #256	@ 0x100
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	691b      	ldr	r3, [r3, #16]
 8009c64:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c6c:	68d9      	ldr	r1, [r3, #12]
 8009c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	ea40 0301 	orr.w	r3, r0, r1
 8009c78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c7e:	689a      	ldr	r2, [r3, #8]
 8009c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	431a      	orrs	r2, r3
 8009c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c8c:	695b      	ldr	r3, [r3, #20]
 8009c8e:	431a      	orrs	r2, r3
 8009c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c94:	69db      	ldr	r3, [r3, #28]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009ca8:	f021 010c 	bic.w	r1, r1, #12
 8009cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009cb6:	430b      	orrs	r3, r1
 8009cb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	695b      	ldr	r3, [r3, #20]
 8009cc2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cca:	6999      	ldr	r1, [r3, #24]
 8009ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	ea40 0301 	orr.w	r3, r0, r1
 8009cd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	4b8f      	ldr	r3, [pc, #572]	@ (8009f1c <UART_SetConfig+0x2cc>)
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d005      	beq.n	8009cf0 <UART_SetConfig+0xa0>
 8009ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	4b8d      	ldr	r3, [pc, #564]	@ (8009f20 <UART_SetConfig+0x2d0>)
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d104      	bne.n	8009cfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009cf0:	f7ff f972 	bl	8008fd8 <HAL_RCC_GetPCLK2Freq>
 8009cf4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009cf8:	e003      	b.n	8009d02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009cfa:	f7ff f959 	bl	8008fb0 <HAL_RCC_GetPCLK1Freq>
 8009cfe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d06:	69db      	ldr	r3, [r3, #28]
 8009d08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d0c:	f040 810c 	bne.w	8009f28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d14:	2200      	movs	r2, #0
 8009d16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009d1a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009d1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009d22:	4622      	mov	r2, r4
 8009d24:	462b      	mov	r3, r5
 8009d26:	1891      	adds	r1, r2, r2
 8009d28:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009d2a:	415b      	adcs	r3, r3
 8009d2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009d32:	4621      	mov	r1, r4
 8009d34:	eb12 0801 	adds.w	r8, r2, r1
 8009d38:	4629      	mov	r1, r5
 8009d3a:	eb43 0901 	adc.w	r9, r3, r1
 8009d3e:	f04f 0200 	mov.w	r2, #0
 8009d42:	f04f 0300 	mov.w	r3, #0
 8009d46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d52:	4690      	mov	r8, r2
 8009d54:	4699      	mov	r9, r3
 8009d56:	4623      	mov	r3, r4
 8009d58:	eb18 0303 	adds.w	r3, r8, r3
 8009d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009d60:	462b      	mov	r3, r5
 8009d62:	eb49 0303 	adc.w	r3, r9, r3
 8009d66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009d76:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009d7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009d7e:	460b      	mov	r3, r1
 8009d80:	18db      	adds	r3, r3, r3
 8009d82:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d84:	4613      	mov	r3, r2
 8009d86:	eb42 0303 	adc.w	r3, r2, r3
 8009d8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009d90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009d94:	f7fc fdae 	bl	80068f4 <__aeabi_uldivmod>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	4b61      	ldr	r3, [pc, #388]	@ (8009f24 <UART_SetConfig+0x2d4>)
 8009d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8009da2:	095b      	lsrs	r3, r3, #5
 8009da4:	011c      	lsls	r4, r3, #4
 8009da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009daa:	2200      	movs	r2, #0
 8009dac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009db0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009db4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009db8:	4642      	mov	r2, r8
 8009dba:	464b      	mov	r3, r9
 8009dbc:	1891      	adds	r1, r2, r2
 8009dbe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009dc0:	415b      	adcs	r3, r3
 8009dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009dc8:	4641      	mov	r1, r8
 8009dca:	eb12 0a01 	adds.w	sl, r2, r1
 8009dce:	4649      	mov	r1, r9
 8009dd0:	eb43 0b01 	adc.w	fp, r3, r1
 8009dd4:	f04f 0200 	mov.w	r2, #0
 8009dd8:	f04f 0300 	mov.w	r3, #0
 8009ddc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009de0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009de4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009de8:	4692      	mov	sl, r2
 8009dea:	469b      	mov	fp, r3
 8009dec:	4643      	mov	r3, r8
 8009dee:	eb1a 0303 	adds.w	r3, sl, r3
 8009df2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009df6:	464b      	mov	r3, r9
 8009df8:	eb4b 0303 	adc.w	r3, fp, r3
 8009dfc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009e0c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009e10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009e14:	460b      	mov	r3, r1
 8009e16:	18db      	adds	r3, r3, r3
 8009e18:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	eb42 0303 	adc.w	r3, r2, r3
 8009e20:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009e26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009e2a:	f7fc fd63 	bl	80068f4 <__aeabi_uldivmod>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	460b      	mov	r3, r1
 8009e32:	4611      	mov	r1, r2
 8009e34:	4b3b      	ldr	r3, [pc, #236]	@ (8009f24 <UART_SetConfig+0x2d4>)
 8009e36:	fba3 2301 	umull	r2, r3, r3, r1
 8009e3a:	095b      	lsrs	r3, r3, #5
 8009e3c:	2264      	movs	r2, #100	@ 0x64
 8009e3e:	fb02 f303 	mul.w	r3, r2, r3
 8009e42:	1acb      	subs	r3, r1, r3
 8009e44:	00db      	lsls	r3, r3, #3
 8009e46:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009e4a:	4b36      	ldr	r3, [pc, #216]	@ (8009f24 <UART_SetConfig+0x2d4>)
 8009e4c:	fba3 2302 	umull	r2, r3, r3, r2
 8009e50:	095b      	lsrs	r3, r3, #5
 8009e52:	005b      	lsls	r3, r3, #1
 8009e54:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009e58:	441c      	add	r4, r3
 8009e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e64:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009e68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009e6c:	4642      	mov	r2, r8
 8009e6e:	464b      	mov	r3, r9
 8009e70:	1891      	adds	r1, r2, r2
 8009e72:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009e74:	415b      	adcs	r3, r3
 8009e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009e7c:	4641      	mov	r1, r8
 8009e7e:	1851      	adds	r1, r2, r1
 8009e80:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e82:	4649      	mov	r1, r9
 8009e84:	414b      	adcs	r3, r1
 8009e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e88:	f04f 0200 	mov.w	r2, #0
 8009e8c:	f04f 0300 	mov.w	r3, #0
 8009e90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009e94:	4659      	mov	r1, fp
 8009e96:	00cb      	lsls	r3, r1, #3
 8009e98:	4651      	mov	r1, sl
 8009e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e9e:	4651      	mov	r1, sl
 8009ea0:	00ca      	lsls	r2, r1, #3
 8009ea2:	4610      	mov	r0, r2
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	4642      	mov	r2, r8
 8009eaa:	189b      	adds	r3, r3, r2
 8009eac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009eb0:	464b      	mov	r3, r9
 8009eb2:	460a      	mov	r2, r1
 8009eb4:	eb42 0303 	adc.w	r3, r2, r3
 8009eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009ec8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009ecc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	18db      	adds	r3, r3, r3
 8009ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	eb42 0303 	adc.w	r3, r2, r3
 8009edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ede:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009ee2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009ee6:	f7fc fd05 	bl	80068f4 <__aeabi_uldivmod>
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	4b0d      	ldr	r3, [pc, #52]	@ (8009f24 <UART_SetConfig+0x2d4>)
 8009ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8009ef4:	095b      	lsrs	r3, r3, #5
 8009ef6:	2164      	movs	r1, #100	@ 0x64
 8009ef8:	fb01 f303 	mul.w	r3, r1, r3
 8009efc:	1ad3      	subs	r3, r2, r3
 8009efe:	00db      	lsls	r3, r3, #3
 8009f00:	3332      	adds	r3, #50	@ 0x32
 8009f02:	4a08      	ldr	r2, [pc, #32]	@ (8009f24 <UART_SetConfig+0x2d4>)
 8009f04:	fba2 2303 	umull	r2, r3, r2, r3
 8009f08:	095b      	lsrs	r3, r3, #5
 8009f0a:	f003 0207 	and.w	r2, r3, #7
 8009f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4422      	add	r2, r4
 8009f16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009f18:	e106      	b.n	800a128 <UART_SetConfig+0x4d8>
 8009f1a:	bf00      	nop
 8009f1c:	40011000 	.word	0x40011000
 8009f20:	40011400 	.word	0x40011400
 8009f24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009f32:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009f36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009f3a:	4642      	mov	r2, r8
 8009f3c:	464b      	mov	r3, r9
 8009f3e:	1891      	adds	r1, r2, r2
 8009f40:	6239      	str	r1, [r7, #32]
 8009f42:	415b      	adcs	r3, r3
 8009f44:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f4a:	4641      	mov	r1, r8
 8009f4c:	1854      	adds	r4, r2, r1
 8009f4e:	4649      	mov	r1, r9
 8009f50:	eb43 0501 	adc.w	r5, r3, r1
 8009f54:	f04f 0200 	mov.w	r2, #0
 8009f58:	f04f 0300 	mov.w	r3, #0
 8009f5c:	00eb      	lsls	r3, r5, #3
 8009f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f62:	00e2      	lsls	r2, r4, #3
 8009f64:	4614      	mov	r4, r2
 8009f66:	461d      	mov	r5, r3
 8009f68:	4643      	mov	r3, r8
 8009f6a:	18e3      	adds	r3, r4, r3
 8009f6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f70:	464b      	mov	r3, r9
 8009f72:	eb45 0303 	adc.w	r3, r5, r3
 8009f76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009f86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009f8a:	f04f 0200 	mov.w	r2, #0
 8009f8e:	f04f 0300 	mov.w	r3, #0
 8009f92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009f96:	4629      	mov	r1, r5
 8009f98:	008b      	lsls	r3, r1, #2
 8009f9a:	4621      	mov	r1, r4
 8009f9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fa0:	4621      	mov	r1, r4
 8009fa2:	008a      	lsls	r2, r1, #2
 8009fa4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009fa8:	f7fc fca4 	bl	80068f4 <__aeabi_uldivmod>
 8009fac:	4602      	mov	r2, r0
 8009fae:	460b      	mov	r3, r1
 8009fb0:	4b60      	ldr	r3, [pc, #384]	@ (800a134 <UART_SetConfig+0x4e4>)
 8009fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8009fb6:	095b      	lsrs	r3, r3, #5
 8009fb8:	011c      	lsls	r4, r3, #4
 8009fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009fc4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009fc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009fcc:	4642      	mov	r2, r8
 8009fce:	464b      	mov	r3, r9
 8009fd0:	1891      	adds	r1, r2, r2
 8009fd2:	61b9      	str	r1, [r7, #24]
 8009fd4:	415b      	adcs	r3, r3
 8009fd6:	61fb      	str	r3, [r7, #28]
 8009fd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009fdc:	4641      	mov	r1, r8
 8009fde:	1851      	adds	r1, r2, r1
 8009fe0:	6139      	str	r1, [r7, #16]
 8009fe2:	4649      	mov	r1, r9
 8009fe4:	414b      	adcs	r3, r1
 8009fe6:	617b      	str	r3, [r7, #20]
 8009fe8:	f04f 0200 	mov.w	r2, #0
 8009fec:	f04f 0300 	mov.w	r3, #0
 8009ff0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ff4:	4659      	mov	r1, fp
 8009ff6:	00cb      	lsls	r3, r1, #3
 8009ff8:	4651      	mov	r1, sl
 8009ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ffe:	4651      	mov	r1, sl
 800a000:	00ca      	lsls	r2, r1, #3
 800a002:	4610      	mov	r0, r2
 800a004:	4619      	mov	r1, r3
 800a006:	4603      	mov	r3, r0
 800a008:	4642      	mov	r2, r8
 800a00a:	189b      	adds	r3, r3, r2
 800a00c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a010:	464b      	mov	r3, r9
 800a012:	460a      	mov	r2, r1
 800a014:	eb42 0303 	adc.w	r3, r2, r3
 800a018:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a01c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a026:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a028:	f04f 0200 	mov.w	r2, #0
 800a02c:	f04f 0300 	mov.w	r3, #0
 800a030:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a034:	4649      	mov	r1, r9
 800a036:	008b      	lsls	r3, r1, #2
 800a038:	4641      	mov	r1, r8
 800a03a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a03e:	4641      	mov	r1, r8
 800a040:	008a      	lsls	r2, r1, #2
 800a042:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a046:	f7fc fc55 	bl	80068f4 <__aeabi_uldivmod>
 800a04a:	4602      	mov	r2, r0
 800a04c:	460b      	mov	r3, r1
 800a04e:	4611      	mov	r1, r2
 800a050:	4b38      	ldr	r3, [pc, #224]	@ (800a134 <UART_SetConfig+0x4e4>)
 800a052:	fba3 2301 	umull	r2, r3, r3, r1
 800a056:	095b      	lsrs	r3, r3, #5
 800a058:	2264      	movs	r2, #100	@ 0x64
 800a05a:	fb02 f303 	mul.w	r3, r2, r3
 800a05e:	1acb      	subs	r3, r1, r3
 800a060:	011b      	lsls	r3, r3, #4
 800a062:	3332      	adds	r3, #50	@ 0x32
 800a064:	4a33      	ldr	r2, [pc, #204]	@ (800a134 <UART_SetConfig+0x4e4>)
 800a066:	fba2 2303 	umull	r2, r3, r2, r3
 800a06a:	095b      	lsrs	r3, r3, #5
 800a06c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a070:	441c      	add	r4, r3
 800a072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a076:	2200      	movs	r2, #0
 800a078:	673b      	str	r3, [r7, #112]	@ 0x70
 800a07a:	677a      	str	r2, [r7, #116]	@ 0x74
 800a07c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a080:	4642      	mov	r2, r8
 800a082:	464b      	mov	r3, r9
 800a084:	1891      	adds	r1, r2, r2
 800a086:	60b9      	str	r1, [r7, #8]
 800a088:	415b      	adcs	r3, r3
 800a08a:	60fb      	str	r3, [r7, #12]
 800a08c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a090:	4641      	mov	r1, r8
 800a092:	1851      	adds	r1, r2, r1
 800a094:	6039      	str	r1, [r7, #0]
 800a096:	4649      	mov	r1, r9
 800a098:	414b      	adcs	r3, r1
 800a09a:	607b      	str	r3, [r7, #4]
 800a09c:	f04f 0200 	mov.w	r2, #0
 800a0a0:	f04f 0300 	mov.w	r3, #0
 800a0a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a0a8:	4659      	mov	r1, fp
 800a0aa:	00cb      	lsls	r3, r1, #3
 800a0ac:	4651      	mov	r1, sl
 800a0ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0b2:	4651      	mov	r1, sl
 800a0b4:	00ca      	lsls	r2, r1, #3
 800a0b6:	4610      	mov	r0, r2
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	4642      	mov	r2, r8
 800a0be:	189b      	adds	r3, r3, r2
 800a0c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0c2:	464b      	mov	r3, r9
 800a0c4:	460a      	mov	r2, r1
 800a0c6:	eb42 0303 	adc.w	r3, r2, r3
 800a0ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a0cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a0d6:	667a      	str	r2, [r7, #100]	@ 0x64
 800a0d8:	f04f 0200 	mov.w	r2, #0
 800a0dc:	f04f 0300 	mov.w	r3, #0
 800a0e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a0e4:	4649      	mov	r1, r9
 800a0e6:	008b      	lsls	r3, r1, #2
 800a0e8:	4641      	mov	r1, r8
 800a0ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0ee:	4641      	mov	r1, r8
 800a0f0:	008a      	lsls	r2, r1, #2
 800a0f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a0f6:	f7fc fbfd 	bl	80068f4 <__aeabi_uldivmod>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a134 <UART_SetConfig+0x4e4>)
 800a100:	fba3 1302 	umull	r1, r3, r3, r2
 800a104:	095b      	lsrs	r3, r3, #5
 800a106:	2164      	movs	r1, #100	@ 0x64
 800a108:	fb01 f303 	mul.w	r3, r1, r3
 800a10c:	1ad3      	subs	r3, r2, r3
 800a10e:	011b      	lsls	r3, r3, #4
 800a110:	3332      	adds	r3, #50	@ 0x32
 800a112:	4a08      	ldr	r2, [pc, #32]	@ (800a134 <UART_SetConfig+0x4e4>)
 800a114:	fba2 2303 	umull	r2, r3, r2, r3
 800a118:	095b      	lsrs	r3, r3, #5
 800a11a:	f003 020f 	and.w	r2, r3, #15
 800a11e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4422      	add	r2, r4
 800a126:	609a      	str	r2, [r3, #8]
}
 800a128:	bf00      	nop
 800a12a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a12e:	46bd      	mov	sp, r7
 800a130:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a134:	51eb851f 	.word	0x51eb851f

0800a138 <malloc>:
 800a138:	4b02      	ldr	r3, [pc, #8]	@ (800a144 <malloc+0xc>)
 800a13a:	4601      	mov	r1, r0
 800a13c:	6818      	ldr	r0, [r3, #0]
 800a13e:	f000 b82d 	b.w	800a19c <_malloc_r>
 800a142:	bf00      	nop
 800a144:	20000018 	.word	0x20000018

0800a148 <free>:
 800a148:	4b02      	ldr	r3, [pc, #8]	@ (800a154 <free+0xc>)
 800a14a:	4601      	mov	r1, r0
 800a14c:	6818      	ldr	r0, [r3, #0]
 800a14e:	f001 bf6b 	b.w	800c028 <_free_r>
 800a152:	bf00      	nop
 800a154:	20000018 	.word	0x20000018

0800a158 <sbrk_aligned>:
 800a158:	b570      	push	{r4, r5, r6, lr}
 800a15a:	4e0f      	ldr	r6, [pc, #60]	@ (800a198 <sbrk_aligned+0x40>)
 800a15c:	460c      	mov	r4, r1
 800a15e:	6831      	ldr	r1, [r6, #0]
 800a160:	4605      	mov	r5, r0
 800a162:	b911      	cbnz	r1, 800a16a <sbrk_aligned+0x12>
 800a164:	f001 f8a2 	bl	800b2ac <_sbrk_r>
 800a168:	6030      	str	r0, [r6, #0]
 800a16a:	4621      	mov	r1, r4
 800a16c:	4628      	mov	r0, r5
 800a16e:	f001 f89d 	bl	800b2ac <_sbrk_r>
 800a172:	1c43      	adds	r3, r0, #1
 800a174:	d103      	bne.n	800a17e <sbrk_aligned+0x26>
 800a176:	f04f 34ff 	mov.w	r4, #4294967295
 800a17a:	4620      	mov	r0, r4
 800a17c:	bd70      	pop	{r4, r5, r6, pc}
 800a17e:	1cc4      	adds	r4, r0, #3
 800a180:	f024 0403 	bic.w	r4, r4, #3
 800a184:	42a0      	cmp	r0, r4
 800a186:	d0f8      	beq.n	800a17a <sbrk_aligned+0x22>
 800a188:	1a21      	subs	r1, r4, r0
 800a18a:	4628      	mov	r0, r5
 800a18c:	f001 f88e 	bl	800b2ac <_sbrk_r>
 800a190:	3001      	adds	r0, #1
 800a192:	d1f2      	bne.n	800a17a <sbrk_aligned+0x22>
 800a194:	e7ef      	b.n	800a176 <sbrk_aligned+0x1e>
 800a196:	bf00      	nop
 800a198:	20000ed0 	.word	0x20000ed0

0800a19c <_malloc_r>:
 800a19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1a0:	1ccd      	adds	r5, r1, #3
 800a1a2:	f025 0503 	bic.w	r5, r5, #3
 800a1a6:	3508      	adds	r5, #8
 800a1a8:	2d0c      	cmp	r5, #12
 800a1aa:	bf38      	it	cc
 800a1ac:	250c      	movcc	r5, #12
 800a1ae:	2d00      	cmp	r5, #0
 800a1b0:	4606      	mov	r6, r0
 800a1b2:	db01      	blt.n	800a1b8 <_malloc_r+0x1c>
 800a1b4:	42a9      	cmp	r1, r5
 800a1b6:	d904      	bls.n	800a1c2 <_malloc_r+0x26>
 800a1b8:	230c      	movs	r3, #12
 800a1ba:	6033      	str	r3, [r6, #0]
 800a1bc:	2000      	movs	r0, #0
 800a1be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a298 <_malloc_r+0xfc>
 800a1c6:	f000 f869 	bl	800a29c <__malloc_lock>
 800a1ca:	f8d8 3000 	ldr.w	r3, [r8]
 800a1ce:	461c      	mov	r4, r3
 800a1d0:	bb44      	cbnz	r4, 800a224 <_malloc_r+0x88>
 800a1d2:	4629      	mov	r1, r5
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	f7ff ffbf 	bl	800a158 <sbrk_aligned>
 800a1da:	1c43      	adds	r3, r0, #1
 800a1dc:	4604      	mov	r4, r0
 800a1de:	d158      	bne.n	800a292 <_malloc_r+0xf6>
 800a1e0:	f8d8 4000 	ldr.w	r4, [r8]
 800a1e4:	4627      	mov	r7, r4
 800a1e6:	2f00      	cmp	r7, #0
 800a1e8:	d143      	bne.n	800a272 <_malloc_r+0xd6>
 800a1ea:	2c00      	cmp	r4, #0
 800a1ec:	d04b      	beq.n	800a286 <_malloc_r+0xea>
 800a1ee:	6823      	ldr	r3, [r4, #0]
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	4630      	mov	r0, r6
 800a1f4:	eb04 0903 	add.w	r9, r4, r3
 800a1f8:	f001 f858 	bl	800b2ac <_sbrk_r>
 800a1fc:	4581      	cmp	r9, r0
 800a1fe:	d142      	bne.n	800a286 <_malloc_r+0xea>
 800a200:	6821      	ldr	r1, [r4, #0]
 800a202:	1a6d      	subs	r5, r5, r1
 800a204:	4629      	mov	r1, r5
 800a206:	4630      	mov	r0, r6
 800a208:	f7ff ffa6 	bl	800a158 <sbrk_aligned>
 800a20c:	3001      	adds	r0, #1
 800a20e:	d03a      	beq.n	800a286 <_malloc_r+0xea>
 800a210:	6823      	ldr	r3, [r4, #0]
 800a212:	442b      	add	r3, r5
 800a214:	6023      	str	r3, [r4, #0]
 800a216:	f8d8 3000 	ldr.w	r3, [r8]
 800a21a:	685a      	ldr	r2, [r3, #4]
 800a21c:	bb62      	cbnz	r2, 800a278 <_malloc_r+0xdc>
 800a21e:	f8c8 7000 	str.w	r7, [r8]
 800a222:	e00f      	b.n	800a244 <_malloc_r+0xa8>
 800a224:	6822      	ldr	r2, [r4, #0]
 800a226:	1b52      	subs	r2, r2, r5
 800a228:	d420      	bmi.n	800a26c <_malloc_r+0xd0>
 800a22a:	2a0b      	cmp	r2, #11
 800a22c:	d917      	bls.n	800a25e <_malloc_r+0xc2>
 800a22e:	1961      	adds	r1, r4, r5
 800a230:	42a3      	cmp	r3, r4
 800a232:	6025      	str	r5, [r4, #0]
 800a234:	bf18      	it	ne
 800a236:	6059      	strne	r1, [r3, #4]
 800a238:	6863      	ldr	r3, [r4, #4]
 800a23a:	bf08      	it	eq
 800a23c:	f8c8 1000 	streq.w	r1, [r8]
 800a240:	5162      	str	r2, [r4, r5]
 800a242:	604b      	str	r3, [r1, #4]
 800a244:	4630      	mov	r0, r6
 800a246:	f000 f82f 	bl	800a2a8 <__malloc_unlock>
 800a24a:	f104 000b 	add.w	r0, r4, #11
 800a24e:	1d23      	adds	r3, r4, #4
 800a250:	f020 0007 	bic.w	r0, r0, #7
 800a254:	1ac2      	subs	r2, r0, r3
 800a256:	bf1c      	itt	ne
 800a258:	1a1b      	subne	r3, r3, r0
 800a25a:	50a3      	strne	r3, [r4, r2]
 800a25c:	e7af      	b.n	800a1be <_malloc_r+0x22>
 800a25e:	6862      	ldr	r2, [r4, #4]
 800a260:	42a3      	cmp	r3, r4
 800a262:	bf0c      	ite	eq
 800a264:	f8c8 2000 	streq.w	r2, [r8]
 800a268:	605a      	strne	r2, [r3, #4]
 800a26a:	e7eb      	b.n	800a244 <_malloc_r+0xa8>
 800a26c:	4623      	mov	r3, r4
 800a26e:	6864      	ldr	r4, [r4, #4]
 800a270:	e7ae      	b.n	800a1d0 <_malloc_r+0x34>
 800a272:	463c      	mov	r4, r7
 800a274:	687f      	ldr	r7, [r7, #4]
 800a276:	e7b6      	b.n	800a1e6 <_malloc_r+0x4a>
 800a278:	461a      	mov	r2, r3
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	42a3      	cmp	r3, r4
 800a27e:	d1fb      	bne.n	800a278 <_malloc_r+0xdc>
 800a280:	2300      	movs	r3, #0
 800a282:	6053      	str	r3, [r2, #4]
 800a284:	e7de      	b.n	800a244 <_malloc_r+0xa8>
 800a286:	230c      	movs	r3, #12
 800a288:	6033      	str	r3, [r6, #0]
 800a28a:	4630      	mov	r0, r6
 800a28c:	f000 f80c 	bl	800a2a8 <__malloc_unlock>
 800a290:	e794      	b.n	800a1bc <_malloc_r+0x20>
 800a292:	6005      	str	r5, [r0, #0]
 800a294:	e7d6      	b.n	800a244 <_malloc_r+0xa8>
 800a296:	bf00      	nop
 800a298:	20000ed4 	.word	0x20000ed4

0800a29c <__malloc_lock>:
 800a29c:	4801      	ldr	r0, [pc, #4]	@ (800a2a4 <__malloc_lock+0x8>)
 800a29e:	f001 b852 	b.w	800b346 <__retarget_lock_acquire_recursive>
 800a2a2:	bf00      	nop
 800a2a4:	20001018 	.word	0x20001018

0800a2a8 <__malloc_unlock>:
 800a2a8:	4801      	ldr	r0, [pc, #4]	@ (800a2b0 <__malloc_unlock+0x8>)
 800a2aa:	f001 b84d 	b.w	800b348 <__retarget_lock_release_recursive>
 800a2ae:	bf00      	nop
 800a2b0:	20001018 	.word	0x20001018

0800a2b4 <__cvt>:
 800a2b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b8:	ec57 6b10 	vmov	r6, r7, d0
 800a2bc:	2f00      	cmp	r7, #0
 800a2be:	460c      	mov	r4, r1
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	463b      	mov	r3, r7
 800a2c4:	bfbb      	ittet	lt
 800a2c6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a2ca:	461f      	movlt	r7, r3
 800a2cc:	2300      	movge	r3, #0
 800a2ce:	232d      	movlt	r3, #45	@ 0x2d
 800a2d0:	700b      	strb	r3, [r1, #0]
 800a2d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a2d4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a2d8:	4691      	mov	r9, r2
 800a2da:	f023 0820 	bic.w	r8, r3, #32
 800a2de:	bfbc      	itt	lt
 800a2e0:	4632      	movlt	r2, r6
 800a2e2:	4616      	movlt	r6, r2
 800a2e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a2e8:	d005      	beq.n	800a2f6 <__cvt+0x42>
 800a2ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a2ee:	d100      	bne.n	800a2f2 <__cvt+0x3e>
 800a2f0:	3401      	adds	r4, #1
 800a2f2:	2102      	movs	r1, #2
 800a2f4:	e000      	b.n	800a2f8 <__cvt+0x44>
 800a2f6:	2103      	movs	r1, #3
 800a2f8:	ab03      	add	r3, sp, #12
 800a2fa:	9301      	str	r3, [sp, #4]
 800a2fc:	ab02      	add	r3, sp, #8
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	ec47 6b10 	vmov	d0, r6, r7
 800a304:	4653      	mov	r3, sl
 800a306:	4622      	mov	r2, r4
 800a308:	f001 f8ca 	bl	800b4a0 <_dtoa_r>
 800a30c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a310:	4605      	mov	r5, r0
 800a312:	d119      	bne.n	800a348 <__cvt+0x94>
 800a314:	f019 0f01 	tst.w	r9, #1
 800a318:	d00e      	beq.n	800a338 <__cvt+0x84>
 800a31a:	eb00 0904 	add.w	r9, r0, r4
 800a31e:	2200      	movs	r2, #0
 800a320:	2300      	movs	r3, #0
 800a322:	4630      	mov	r0, r6
 800a324:	4639      	mov	r1, r7
 800a326:	f7fc fa05 	bl	8006734 <__aeabi_dcmpeq>
 800a32a:	b108      	cbz	r0, 800a330 <__cvt+0x7c>
 800a32c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a330:	2230      	movs	r2, #48	@ 0x30
 800a332:	9b03      	ldr	r3, [sp, #12]
 800a334:	454b      	cmp	r3, r9
 800a336:	d31e      	bcc.n	800a376 <__cvt+0xc2>
 800a338:	9b03      	ldr	r3, [sp, #12]
 800a33a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a33c:	1b5b      	subs	r3, r3, r5
 800a33e:	4628      	mov	r0, r5
 800a340:	6013      	str	r3, [r2, #0]
 800a342:	b004      	add	sp, #16
 800a344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a348:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a34c:	eb00 0904 	add.w	r9, r0, r4
 800a350:	d1e5      	bne.n	800a31e <__cvt+0x6a>
 800a352:	7803      	ldrb	r3, [r0, #0]
 800a354:	2b30      	cmp	r3, #48	@ 0x30
 800a356:	d10a      	bne.n	800a36e <__cvt+0xba>
 800a358:	2200      	movs	r2, #0
 800a35a:	2300      	movs	r3, #0
 800a35c:	4630      	mov	r0, r6
 800a35e:	4639      	mov	r1, r7
 800a360:	f7fc f9e8 	bl	8006734 <__aeabi_dcmpeq>
 800a364:	b918      	cbnz	r0, 800a36e <__cvt+0xba>
 800a366:	f1c4 0401 	rsb	r4, r4, #1
 800a36a:	f8ca 4000 	str.w	r4, [sl]
 800a36e:	f8da 3000 	ldr.w	r3, [sl]
 800a372:	4499      	add	r9, r3
 800a374:	e7d3      	b.n	800a31e <__cvt+0x6a>
 800a376:	1c59      	adds	r1, r3, #1
 800a378:	9103      	str	r1, [sp, #12]
 800a37a:	701a      	strb	r2, [r3, #0]
 800a37c:	e7d9      	b.n	800a332 <__cvt+0x7e>

0800a37e <__exponent>:
 800a37e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a380:	2900      	cmp	r1, #0
 800a382:	bfba      	itte	lt
 800a384:	4249      	neglt	r1, r1
 800a386:	232d      	movlt	r3, #45	@ 0x2d
 800a388:	232b      	movge	r3, #43	@ 0x2b
 800a38a:	2909      	cmp	r1, #9
 800a38c:	7002      	strb	r2, [r0, #0]
 800a38e:	7043      	strb	r3, [r0, #1]
 800a390:	dd29      	ble.n	800a3e6 <__exponent+0x68>
 800a392:	f10d 0307 	add.w	r3, sp, #7
 800a396:	461d      	mov	r5, r3
 800a398:	270a      	movs	r7, #10
 800a39a:	461a      	mov	r2, r3
 800a39c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a3a0:	fb07 1416 	mls	r4, r7, r6, r1
 800a3a4:	3430      	adds	r4, #48	@ 0x30
 800a3a6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	2c63      	cmp	r4, #99	@ 0x63
 800a3ae:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3b2:	4631      	mov	r1, r6
 800a3b4:	dcf1      	bgt.n	800a39a <__exponent+0x1c>
 800a3b6:	3130      	adds	r1, #48	@ 0x30
 800a3b8:	1e94      	subs	r4, r2, #2
 800a3ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a3be:	1c41      	adds	r1, r0, #1
 800a3c0:	4623      	mov	r3, r4
 800a3c2:	42ab      	cmp	r3, r5
 800a3c4:	d30a      	bcc.n	800a3dc <__exponent+0x5e>
 800a3c6:	f10d 0309 	add.w	r3, sp, #9
 800a3ca:	1a9b      	subs	r3, r3, r2
 800a3cc:	42ac      	cmp	r4, r5
 800a3ce:	bf88      	it	hi
 800a3d0:	2300      	movhi	r3, #0
 800a3d2:	3302      	adds	r3, #2
 800a3d4:	4403      	add	r3, r0
 800a3d6:	1a18      	subs	r0, r3, r0
 800a3d8:	b003      	add	sp, #12
 800a3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3dc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a3e0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a3e4:	e7ed      	b.n	800a3c2 <__exponent+0x44>
 800a3e6:	2330      	movs	r3, #48	@ 0x30
 800a3e8:	3130      	adds	r1, #48	@ 0x30
 800a3ea:	7083      	strb	r3, [r0, #2]
 800a3ec:	70c1      	strb	r1, [r0, #3]
 800a3ee:	1d03      	adds	r3, r0, #4
 800a3f0:	e7f1      	b.n	800a3d6 <__exponent+0x58>
	...

0800a3f4 <_printf_float>:
 800a3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f8:	b08d      	sub	sp, #52	@ 0x34
 800a3fa:	460c      	mov	r4, r1
 800a3fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a400:	4616      	mov	r6, r2
 800a402:	461f      	mov	r7, r3
 800a404:	4605      	mov	r5, r0
 800a406:	f000 ff19 	bl	800b23c <_localeconv_r>
 800a40a:	6803      	ldr	r3, [r0, #0]
 800a40c:	9304      	str	r3, [sp, #16]
 800a40e:	4618      	mov	r0, r3
 800a410:	f7fb fd16 	bl	8005e40 <strlen>
 800a414:	2300      	movs	r3, #0
 800a416:	930a      	str	r3, [sp, #40]	@ 0x28
 800a418:	f8d8 3000 	ldr.w	r3, [r8]
 800a41c:	9005      	str	r0, [sp, #20]
 800a41e:	3307      	adds	r3, #7
 800a420:	f023 0307 	bic.w	r3, r3, #7
 800a424:	f103 0208 	add.w	r2, r3, #8
 800a428:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a42c:	f8d4 b000 	ldr.w	fp, [r4]
 800a430:	f8c8 2000 	str.w	r2, [r8]
 800a434:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a438:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a43c:	9307      	str	r3, [sp, #28]
 800a43e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a442:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a446:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a44a:	4b9c      	ldr	r3, [pc, #624]	@ (800a6bc <_printf_float+0x2c8>)
 800a44c:	f04f 32ff 	mov.w	r2, #4294967295
 800a450:	f7fc f9a2 	bl	8006798 <__aeabi_dcmpun>
 800a454:	bb70      	cbnz	r0, 800a4b4 <_printf_float+0xc0>
 800a456:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a45a:	4b98      	ldr	r3, [pc, #608]	@ (800a6bc <_printf_float+0x2c8>)
 800a45c:	f04f 32ff 	mov.w	r2, #4294967295
 800a460:	f7fc f97c 	bl	800675c <__aeabi_dcmple>
 800a464:	bb30      	cbnz	r0, 800a4b4 <_printf_float+0xc0>
 800a466:	2200      	movs	r2, #0
 800a468:	2300      	movs	r3, #0
 800a46a:	4640      	mov	r0, r8
 800a46c:	4649      	mov	r1, r9
 800a46e:	f7fc f96b 	bl	8006748 <__aeabi_dcmplt>
 800a472:	b110      	cbz	r0, 800a47a <_printf_float+0x86>
 800a474:	232d      	movs	r3, #45	@ 0x2d
 800a476:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a47a:	4a91      	ldr	r2, [pc, #580]	@ (800a6c0 <_printf_float+0x2cc>)
 800a47c:	4b91      	ldr	r3, [pc, #580]	@ (800a6c4 <_printf_float+0x2d0>)
 800a47e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a482:	bf94      	ite	ls
 800a484:	4690      	movls	r8, r2
 800a486:	4698      	movhi	r8, r3
 800a488:	2303      	movs	r3, #3
 800a48a:	6123      	str	r3, [r4, #16]
 800a48c:	f02b 0304 	bic.w	r3, fp, #4
 800a490:	6023      	str	r3, [r4, #0]
 800a492:	f04f 0900 	mov.w	r9, #0
 800a496:	9700      	str	r7, [sp, #0]
 800a498:	4633      	mov	r3, r6
 800a49a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a49c:	4621      	mov	r1, r4
 800a49e:	4628      	mov	r0, r5
 800a4a0:	f000 f9d2 	bl	800a848 <_printf_common>
 800a4a4:	3001      	adds	r0, #1
 800a4a6:	f040 808d 	bne.w	800a5c4 <_printf_float+0x1d0>
 800a4aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ae:	b00d      	add	sp, #52	@ 0x34
 800a4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b4:	4642      	mov	r2, r8
 800a4b6:	464b      	mov	r3, r9
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	4649      	mov	r1, r9
 800a4bc:	f7fc f96c 	bl	8006798 <__aeabi_dcmpun>
 800a4c0:	b140      	cbz	r0, 800a4d4 <_printf_float+0xe0>
 800a4c2:	464b      	mov	r3, r9
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	bfbc      	itt	lt
 800a4c8:	232d      	movlt	r3, #45	@ 0x2d
 800a4ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a4ce:	4a7e      	ldr	r2, [pc, #504]	@ (800a6c8 <_printf_float+0x2d4>)
 800a4d0:	4b7e      	ldr	r3, [pc, #504]	@ (800a6cc <_printf_float+0x2d8>)
 800a4d2:	e7d4      	b.n	800a47e <_printf_float+0x8a>
 800a4d4:	6863      	ldr	r3, [r4, #4]
 800a4d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a4da:	9206      	str	r2, [sp, #24]
 800a4dc:	1c5a      	adds	r2, r3, #1
 800a4de:	d13b      	bne.n	800a558 <_printf_float+0x164>
 800a4e0:	2306      	movs	r3, #6
 800a4e2:	6063      	str	r3, [r4, #4]
 800a4e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	6022      	str	r2, [r4, #0]
 800a4ec:	9303      	str	r3, [sp, #12]
 800a4ee:	ab0a      	add	r3, sp, #40	@ 0x28
 800a4f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a4f4:	ab09      	add	r3, sp, #36	@ 0x24
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	6861      	ldr	r1, [r4, #4]
 800a4fa:	ec49 8b10 	vmov	d0, r8, r9
 800a4fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a502:	4628      	mov	r0, r5
 800a504:	f7ff fed6 	bl	800a2b4 <__cvt>
 800a508:	9b06      	ldr	r3, [sp, #24]
 800a50a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a50c:	2b47      	cmp	r3, #71	@ 0x47
 800a50e:	4680      	mov	r8, r0
 800a510:	d129      	bne.n	800a566 <_printf_float+0x172>
 800a512:	1cc8      	adds	r0, r1, #3
 800a514:	db02      	blt.n	800a51c <_printf_float+0x128>
 800a516:	6863      	ldr	r3, [r4, #4]
 800a518:	4299      	cmp	r1, r3
 800a51a:	dd41      	ble.n	800a5a0 <_printf_float+0x1ac>
 800a51c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a520:	fa5f fa8a 	uxtb.w	sl, sl
 800a524:	3901      	subs	r1, #1
 800a526:	4652      	mov	r2, sl
 800a528:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a52c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a52e:	f7ff ff26 	bl	800a37e <__exponent>
 800a532:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a534:	1813      	adds	r3, r2, r0
 800a536:	2a01      	cmp	r2, #1
 800a538:	4681      	mov	r9, r0
 800a53a:	6123      	str	r3, [r4, #16]
 800a53c:	dc02      	bgt.n	800a544 <_printf_float+0x150>
 800a53e:	6822      	ldr	r2, [r4, #0]
 800a540:	07d2      	lsls	r2, r2, #31
 800a542:	d501      	bpl.n	800a548 <_printf_float+0x154>
 800a544:	3301      	adds	r3, #1
 800a546:	6123      	str	r3, [r4, #16]
 800a548:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d0a2      	beq.n	800a496 <_printf_float+0xa2>
 800a550:	232d      	movs	r3, #45	@ 0x2d
 800a552:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a556:	e79e      	b.n	800a496 <_printf_float+0xa2>
 800a558:	9a06      	ldr	r2, [sp, #24]
 800a55a:	2a47      	cmp	r2, #71	@ 0x47
 800a55c:	d1c2      	bne.n	800a4e4 <_printf_float+0xf0>
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1c0      	bne.n	800a4e4 <_printf_float+0xf0>
 800a562:	2301      	movs	r3, #1
 800a564:	e7bd      	b.n	800a4e2 <_printf_float+0xee>
 800a566:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a56a:	d9db      	bls.n	800a524 <_printf_float+0x130>
 800a56c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a570:	d118      	bne.n	800a5a4 <_printf_float+0x1b0>
 800a572:	2900      	cmp	r1, #0
 800a574:	6863      	ldr	r3, [r4, #4]
 800a576:	dd0b      	ble.n	800a590 <_printf_float+0x19c>
 800a578:	6121      	str	r1, [r4, #16]
 800a57a:	b913      	cbnz	r3, 800a582 <_printf_float+0x18e>
 800a57c:	6822      	ldr	r2, [r4, #0]
 800a57e:	07d0      	lsls	r0, r2, #31
 800a580:	d502      	bpl.n	800a588 <_printf_float+0x194>
 800a582:	3301      	adds	r3, #1
 800a584:	440b      	add	r3, r1
 800a586:	6123      	str	r3, [r4, #16]
 800a588:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a58a:	f04f 0900 	mov.w	r9, #0
 800a58e:	e7db      	b.n	800a548 <_printf_float+0x154>
 800a590:	b913      	cbnz	r3, 800a598 <_printf_float+0x1a4>
 800a592:	6822      	ldr	r2, [r4, #0]
 800a594:	07d2      	lsls	r2, r2, #31
 800a596:	d501      	bpl.n	800a59c <_printf_float+0x1a8>
 800a598:	3302      	adds	r3, #2
 800a59a:	e7f4      	b.n	800a586 <_printf_float+0x192>
 800a59c:	2301      	movs	r3, #1
 800a59e:	e7f2      	b.n	800a586 <_printf_float+0x192>
 800a5a0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a5a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5a6:	4299      	cmp	r1, r3
 800a5a8:	db05      	blt.n	800a5b6 <_printf_float+0x1c2>
 800a5aa:	6823      	ldr	r3, [r4, #0]
 800a5ac:	6121      	str	r1, [r4, #16]
 800a5ae:	07d8      	lsls	r0, r3, #31
 800a5b0:	d5ea      	bpl.n	800a588 <_printf_float+0x194>
 800a5b2:	1c4b      	adds	r3, r1, #1
 800a5b4:	e7e7      	b.n	800a586 <_printf_float+0x192>
 800a5b6:	2900      	cmp	r1, #0
 800a5b8:	bfd4      	ite	le
 800a5ba:	f1c1 0202 	rsble	r2, r1, #2
 800a5be:	2201      	movgt	r2, #1
 800a5c0:	4413      	add	r3, r2
 800a5c2:	e7e0      	b.n	800a586 <_printf_float+0x192>
 800a5c4:	6823      	ldr	r3, [r4, #0]
 800a5c6:	055a      	lsls	r2, r3, #21
 800a5c8:	d407      	bmi.n	800a5da <_printf_float+0x1e6>
 800a5ca:	6923      	ldr	r3, [r4, #16]
 800a5cc:	4642      	mov	r2, r8
 800a5ce:	4631      	mov	r1, r6
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	47b8      	blx	r7
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	d12b      	bne.n	800a630 <_printf_float+0x23c>
 800a5d8:	e767      	b.n	800a4aa <_printf_float+0xb6>
 800a5da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a5de:	f240 80dd 	bls.w	800a79c <_printf_float+0x3a8>
 800a5e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	f7fc f8a3 	bl	8006734 <__aeabi_dcmpeq>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d033      	beq.n	800a65a <_printf_float+0x266>
 800a5f2:	4a37      	ldr	r2, [pc, #220]	@ (800a6d0 <_printf_float+0x2dc>)
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	4631      	mov	r1, r6
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	47b8      	blx	r7
 800a5fc:	3001      	adds	r0, #1
 800a5fe:	f43f af54 	beq.w	800a4aa <_printf_float+0xb6>
 800a602:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a606:	4543      	cmp	r3, r8
 800a608:	db02      	blt.n	800a610 <_printf_float+0x21c>
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	07d8      	lsls	r0, r3, #31
 800a60e:	d50f      	bpl.n	800a630 <_printf_float+0x23c>
 800a610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a614:	4631      	mov	r1, r6
 800a616:	4628      	mov	r0, r5
 800a618:	47b8      	blx	r7
 800a61a:	3001      	adds	r0, #1
 800a61c:	f43f af45 	beq.w	800a4aa <_printf_float+0xb6>
 800a620:	f04f 0900 	mov.w	r9, #0
 800a624:	f108 38ff 	add.w	r8, r8, #4294967295
 800a628:	f104 0a1a 	add.w	sl, r4, #26
 800a62c:	45c8      	cmp	r8, r9
 800a62e:	dc09      	bgt.n	800a644 <_printf_float+0x250>
 800a630:	6823      	ldr	r3, [r4, #0]
 800a632:	079b      	lsls	r3, r3, #30
 800a634:	f100 8103 	bmi.w	800a83e <_printf_float+0x44a>
 800a638:	68e0      	ldr	r0, [r4, #12]
 800a63a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a63c:	4298      	cmp	r0, r3
 800a63e:	bfb8      	it	lt
 800a640:	4618      	movlt	r0, r3
 800a642:	e734      	b.n	800a4ae <_printf_float+0xba>
 800a644:	2301      	movs	r3, #1
 800a646:	4652      	mov	r2, sl
 800a648:	4631      	mov	r1, r6
 800a64a:	4628      	mov	r0, r5
 800a64c:	47b8      	blx	r7
 800a64e:	3001      	adds	r0, #1
 800a650:	f43f af2b 	beq.w	800a4aa <_printf_float+0xb6>
 800a654:	f109 0901 	add.w	r9, r9, #1
 800a658:	e7e8      	b.n	800a62c <_printf_float+0x238>
 800a65a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	dc39      	bgt.n	800a6d4 <_printf_float+0x2e0>
 800a660:	4a1b      	ldr	r2, [pc, #108]	@ (800a6d0 <_printf_float+0x2dc>)
 800a662:	2301      	movs	r3, #1
 800a664:	4631      	mov	r1, r6
 800a666:	4628      	mov	r0, r5
 800a668:	47b8      	blx	r7
 800a66a:	3001      	adds	r0, #1
 800a66c:	f43f af1d 	beq.w	800a4aa <_printf_float+0xb6>
 800a670:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a674:	ea59 0303 	orrs.w	r3, r9, r3
 800a678:	d102      	bne.n	800a680 <_printf_float+0x28c>
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	07d9      	lsls	r1, r3, #31
 800a67e:	d5d7      	bpl.n	800a630 <_printf_float+0x23c>
 800a680:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a684:	4631      	mov	r1, r6
 800a686:	4628      	mov	r0, r5
 800a688:	47b8      	blx	r7
 800a68a:	3001      	adds	r0, #1
 800a68c:	f43f af0d 	beq.w	800a4aa <_printf_float+0xb6>
 800a690:	f04f 0a00 	mov.w	sl, #0
 800a694:	f104 0b1a 	add.w	fp, r4, #26
 800a698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a69a:	425b      	negs	r3, r3
 800a69c:	4553      	cmp	r3, sl
 800a69e:	dc01      	bgt.n	800a6a4 <_printf_float+0x2b0>
 800a6a0:	464b      	mov	r3, r9
 800a6a2:	e793      	b.n	800a5cc <_printf_float+0x1d8>
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	465a      	mov	r2, fp
 800a6a8:	4631      	mov	r1, r6
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	47b8      	blx	r7
 800a6ae:	3001      	adds	r0, #1
 800a6b0:	f43f aefb 	beq.w	800a4aa <_printf_float+0xb6>
 800a6b4:	f10a 0a01 	add.w	sl, sl, #1
 800a6b8:	e7ee      	b.n	800a698 <_printf_float+0x2a4>
 800a6ba:	bf00      	nop
 800a6bc:	7fefffff 	.word	0x7fefffff
 800a6c0:	0800f659 	.word	0x0800f659
 800a6c4:	0800f65d 	.word	0x0800f65d
 800a6c8:	0800f661 	.word	0x0800f661
 800a6cc:	0800f665 	.word	0x0800f665
 800a6d0:	0800f669 	.word	0x0800f669
 800a6d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a6d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a6da:	4553      	cmp	r3, sl
 800a6dc:	bfa8      	it	ge
 800a6de:	4653      	movge	r3, sl
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	4699      	mov	r9, r3
 800a6e4:	dc36      	bgt.n	800a754 <_printf_float+0x360>
 800a6e6:	f04f 0b00 	mov.w	fp, #0
 800a6ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6ee:	f104 021a 	add.w	r2, r4, #26
 800a6f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a6f4:	9306      	str	r3, [sp, #24]
 800a6f6:	eba3 0309 	sub.w	r3, r3, r9
 800a6fa:	455b      	cmp	r3, fp
 800a6fc:	dc31      	bgt.n	800a762 <_printf_float+0x36e>
 800a6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a700:	459a      	cmp	sl, r3
 800a702:	dc3a      	bgt.n	800a77a <_printf_float+0x386>
 800a704:	6823      	ldr	r3, [r4, #0]
 800a706:	07da      	lsls	r2, r3, #31
 800a708:	d437      	bmi.n	800a77a <_printf_float+0x386>
 800a70a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a70c:	ebaa 0903 	sub.w	r9, sl, r3
 800a710:	9b06      	ldr	r3, [sp, #24]
 800a712:	ebaa 0303 	sub.w	r3, sl, r3
 800a716:	4599      	cmp	r9, r3
 800a718:	bfa8      	it	ge
 800a71a:	4699      	movge	r9, r3
 800a71c:	f1b9 0f00 	cmp.w	r9, #0
 800a720:	dc33      	bgt.n	800a78a <_printf_float+0x396>
 800a722:	f04f 0800 	mov.w	r8, #0
 800a726:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a72a:	f104 0b1a 	add.w	fp, r4, #26
 800a72e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a730:	ebaa 0303 	sub.w	r3, sl, r3
 800a734:	eba3 0309 	sub.w	r3, r3, r9
 800a738:	4543      	cmp	r3, r8
 800a73a:	f77f af79 	ble.w	800a630 <_printf_float+0x23c>
 800a73e:	2301      	movs	r3, #1
 800a740:	465a      	mov	r2, fp
 800a742:	4631      	mov	r1, r6
 800a744:	4628      	mov	r0, r5
 800a746:	47b8      	blx	r7
 800a748:	3001      	adds	r0, #1
 800a74a:	f43f aeae 	beq.w	800a4aa <_printf_float+0xb6>
 800a74e:	f108 0801 	add.w	r8, r8, #1
 800a752:	e7ec      	b.n	800a72e <_printf_float+0x33a>
 800a754:	4642      	mov	r2, r8
 800a756:	4631      	mov	r1, r6
 800a758:	4628      	mov	r0, r5
 800a75a:	47b8      	blx	r7
 800a75c:	3001      	adds	r0, #1
 800a75e:	d1c2      	bne.n	800a6e6 <_printf_float+0x2f2>
 800a760:	e6a3      	b.n	800a4aa <_printf_float+0xb6>
 800a762:	2301      	movs	r3, #1
 800a764:	4631      	mov	r1, r6
 800a766:	4628      	mov	r0, r5
 800a768:	9206      	str	r2, [sp, #24]
 800a76a:	47b8      	blx	r7
 800a76c:	3001      	adds	r0, #1
 800a76e:	f43f ae9c 	beq.w	800a4aa <_printf_float+0xb6>
 800a772:	9a06      	ldr	r2, [sp, #24]
 800a774:	f10b 0b01 	add.w	fp, fp, #1
 800a778:	e7bb      	b.n	800a6f2 <_printf_float+0x2fe>
 800a77a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a77e:	4631      	mov	r1, r6
 800a780:	4628      	mov	r0, r5
 800a782:	47b8      	blx	r7
 800a784:	3001      	adds	r0, #1
 800a786:	d1c0      	bne.n	800a70a <_printf_float+0x316>
 800a788:	e68f      	b.n	800a4aa <_printf_float+0xb6>
 800a78a:	9a06      	ldr	r2, [sp, #24]
 800a78c:	464b      	mov	r3, r9
 800a78e:	4442      	add	r2, r8
 800a790:	4631      	mov	r1, r6
 800a792:	4628      	mov	r0, r5
 800a794:	47b8      	blx	r7
 800a796:	3001      	adds	r0, #1
 800a798:	d1c3      	bne.n	800a722 <_printf_float+0x32e>
 800a79a:	e686      	b.n	800a4aa <_printf_float+0xb6>
 800a79c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a7a0:	f1ba 0f01 	cmp.w	sl, #1
 800a7a4:	dc01      	bgt.n	800a7aa <_printf_float+0x3b6>
 800a7a6:	07db      	lsls	r3, r3, #31
 800a7a8:	d536      	bpl.n	800a818 <_printf_float+0x424>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	4642      	mov	r2, r8
 800a7ae:	4631      	mov	r1, r6
 800a7b0:	4628      	mov	r0, r5
 800a7b2:	47b8      	blx	r7
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	f43f ae78 	beq.w	800a4aa <_printf_float+0xb6>
 800a7ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7be:	4631      	mov	r1, r6
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	47b8      	blx	r7
 800a7c4:	3001      	adds	r0, #1
 800a7c6:	f43f ae70 	beq.w	800a4aa <_printf_float+0xb6>
 800a7ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7d6:	f7fb ffad 	bl	8006734 <__aeabi_dcmpeq>
 800a7da:	b9c0      	cbnz	r0, 800a80e <_printf_float+0x41a>
 800a7dc:	4653      	mov	r3, sl
 800a7de:	f108 0201 	add.w	r2, r8, #1
 800a7e2:	4631      	mov	r1, r6
 800a7e4:	4628      	mov	r0, r5
 800a7e6:	47b8      	blx	r7
 800a7e8:	3001      	adds	r0, #1
 800a7ea:	d10c      	bne.n	800a806 <_printf_float+0x412>
 800a7ec:	e65d      	b.n	800a4aa <_printf_float+0xb6>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	465a      	mov	r2, fp
 800a7f2:	4631      	mov	r1, r6
 800a7f4:	4628      	mov	r0, r5
 800a7f6:	47b8      	blx	r7
 800a7f8:	3001      	adds	r0, #1
 800a7fa:	f43f ae56 	beq.w	800a4aa <_printf_float+0xb6>
 800a7fe:	f108 0801 	add.w	r8, r8, #1
 800a802:	45d0      	cmp	r8, sl
 800a804:	dbf3      	blt.n	800a7ee <_printf_float+0x3fa>
 800a806:	464b      	mov	r3, r9
 800a808:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a80c:	e6df      	b.n	800a5ce <_printf_float+0x1da>
 800a80e:	f04f 0800 	mov.w	r8, #0
 800a812:	f104 0b1a 	add.w	fp, r4, #26
 800a816:	e7f4      	b.n	800a802 <_printf_float+0x40e>
 800a818:	2301      	movs	r3, #1
 800a81a:	4642      	mov	r2, r8
 800a81c:	e7e1      	b.n	800a7e2 <_printf_float+0x3ee>
 800a81e:	2301      	movs	r3, #1
 800a820:	464a      	mov	r2, r9
 800a822:	4631      	mov	r1, r6
 800a824:	4628      	mov	r0, r5
 800a826:	47b8      	blx	r7
 800a828:	3001      	adds	r0, #1
 800a82a:	f43f ae3e 	beq.w	800a4aa <_printf_float+0xb6>
 800a82e:	f108 0801 	add.w	r8, r8, #1
 800a832:	68e3      	ldr	r3, [r4, #12]
 800a834:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a836:	1a5b      	subs	r3, r3, r1
 800a838:	4543      	cmp	r3, r8
 800a83a:	dcf0      	bgt.n	800a81e <_printf_float+0x42a>
 800a83c:	e6fc      	b.n	800a638 <_printf_float+0x244>
 800a83e:	f04f 0800 	mov.w	r8, #0
 800a842:	f104 0919 	add.w	r9, r4, #25
 800a846:	e7f4      	b.n	800a832 <_printf_float+0x43e>

0800a848 <_printf_common>:
 800a848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a84c:	4616      	mov	r6, r2
 800a84e:	4698      	mov	r8, r3
 800a850:	688a      	ldr	r2, [r1, #8]
 800a852:	690b      	ldr	r3, [r1, #16]
 800a854:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a858:	4293      	cmp	r3, r2
 800a85a:	bfb8      	it	lt
 800a85c:	4613      	movlt	r3, r2
 800a85e:	6033      	str	r3, [r6, #0]
 800a860:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a864:	4607      	mov	r7, r0
 800a866:	460c      	mov	r4, r1
 800a868:	b10a      	cbz	r2, 800a86e <_printf_common+0x26>
 800a86a:	3301      	adds	r3, #1
 800a86c:	6033      	str	r3, [r6, #0]
 800a86e:	6823      	ldr	r3, [r4, #0]
 800a870:	0699      	lsls	r1, r3, #26
 800a872:	bf42      	ittt	mi
 800a874:	6833      	ldrmi	r3, [r6, #0]
 800a876:	3302      	addmi	r3, #2
 800a878:	6033      	strmi	r3, [r6, #0]
 800a87a:	6825      	ldr	r5, [r4, #0]
 800a87c:	f015 0506 	ands.w	r5, r5, #6
 800a880:	d106      	bne.n	800a890 <_printf_common+0x48>
 800a882:	f104 0a19 	add.w	sl, r4, #25
 800a886:	68e3      	ldr	r3, [r4, #12]
 800a888:	6832      	ldr	r2, [r6, #0]
 800a88a:	1a9b      	subs	r3, r3, r2
 800a88c:	42ab      	cmp	r3, r5
 800a88e:	dc26      	bgt.n	800a8de <_printf_common+0x96>
 800a890:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a894:	6822      	ldr	r2, [r4, #0]
 800a896:	3b00      	subs	r3, #0
 800a898:	bf18      	it	ne
 800a89a:	2301      	movne	r3, #1
 800a89c:	0692      	lsls	r2, r2, #26
 800a89e:	d42b      	bmi.n	800a8f8 <_printf_common+0xb0>
 800a8a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a8a4:	4641      	mov	r1, r8
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	47c8      	blx	r9
 800a8aa:	3001      	adds	r0, #1
 800a8ac:	d01e      	beq.n	800a8ec <_printf_common+0xa4>
 800a8ae:	6823      	ldr	r3, [r4, #0]
 800a8b0:	6922      	ldr	r2, [r4, #16]
 800a8b2:	f003 0306 	and.w	r3, r3, #6
 800a8b6:	2b04      	cmp	r3, #4
 800a8b8:	bf02      	ittt	eq
 800a8ba:	68e5      	ldreq	r5, [r4, #12]
 800a8bc:	6833      	ldreq	r3, [r6, #0]
 800a8be:	1aed      	subeq	r5, r5, r3
 800a8c0:	68a3      	ldr	r3, [r4, #8]
 800a8c2:	bf0c      	ite	eq
 800a8c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8c8:	2500      	movne	r5, #0
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	bfc4      	itt	gt
 800a8ce:	1a9b      	subgt	r3, r3, r2
 800a8d0:	18ed      	addgt	r5, r5, r3
 800a8d2:	2600      	movs	r6, #0
 800a8d4:	341a      	adds	r4, #26
 800a8d6:	42b5      	cmp	r5, r6
 800a8d8:	d11a      	bne.n	800a910 <_printf_common+0xc8>
 800a8da:	2000      	movs	r0, #0
 800a8dc:	e008      	b.n	800a8f0 <_printf_common+0xa8>
 800a8de:	2301      	movs	r3, #1
 800a8e0:	4652      	mov	r2, sl
 800a8e2:	4641      	mov	r1, r8
 800a8e4:	4638      	mov	r0, r7
 800a8e6:	47c8      	blx	r9
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	d103      	bne.n	800a8f4 <_printf_common+0xac>
 800a8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f4:	3501      	adds	r5, #1
 800a8f6:	e7c6      	b.n	800a886 <_printf_common+0x3e>
 800a8f8:	18e1      	adds	r1, r4, r3
 800a8fa:	1c5a      	adds	r2, r3, #1
 800a8fc:	2030      	movs	r0, #48	@ 0x30
 800a8fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a902:	4422      	add	r2, r4
 800a904:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a908:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a90c:	3302      	adds	r3, #2
 800a90e:	e7c7      	b.n	800a8a0 <_printf_common+0x58>
 800a910:	2301      	movs	r3, #1
 800a912:	4622      	mov	r2, r4
 800a914:	4641      	mov	r1, r8
 800a916:	4638      	mov	r0, r7
 800a918:	47c8      	blx	r9
 800a91a:	3001      	adds	r0, #1
 800a91c:	d0e6      	beq.n	800a8ec <_printf_common+0xa4>
 800a91e:	3601      	adds	r6, #1
 800a920:	e7d9      	b.n	800a8d6 <_printf_common+0x8e>
	...

0800a924 <_printf_i>:
 800a924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a928:	7e0f      	ldrb	r7, [r1, #24]
 800a92a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a92c:	2f78      	cmp	r7, #120	@ 0x78
 800a92e:	4691      	mov	r9, r2
 800a930:	4680      	mov	r8, r0
 800a932:	460c      	mov	r4, r1
 800a934:	469a      	mov	sl, r3
 800a936:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a93a:	d807      	bhi.n	800a94c <_printf_i+0x28>
 800a93c:	2f62      	cmp	r7, #98	@ 0x62
 800a93e:	d80a      	bhi.n	800a956 <_printf_i+0x32>
 800a940:	2f00      	cmp	r7, #0
 800a942:	f000 80d2 	beq.w	800aaea <_printf_i+0x1c6>
 800a946:	2f58      	cmp	r7, #88	@ 0x58
 800a948:	f000 80b9 	beq.w	800aabe <_printf_i+0x19a>
 800a94c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a950:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a954:	e03a      	b.n	800a9cc <_printf_i+0xa8>
 800a956:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a95a:	2b15      	cmp	r3, #21
 800a95c:	d8f6      	bhi.n	800a94c <_printf_i+0x28>
 800a95e:	a101      	add	r1, pc, #4	@ (adr r1, 800a964 <_printf_i+0x40>)
 800a960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a964:	0800a9bd 	.word	0x0800a9bd
 800a968:	0800a9d1 	.word	0x0800a9d1
 800a96c:	0800a94d 	.word	0x0800a94d
 800a970:	0800a94d 	.word	0x0800a94d
 800a974:	0800a94d 	.word	0x0800a94d
 800a978:	0800a94d 	.word	0x0800a94d
 800a97c:	0800a9d1 	.word	0x0800a9d1
 800a980:	0800a94d 	.word	0x0800a94d
 800a984:	0800a94d 	.word	0x0800a94d
 800a988:	0800a94d 	.word	0x0800a94d
 800a98c:	0800a94d 	.word	0x0800a94d
 800a990:	0800aad1 	.word	0x0800aad1
 800a994:	0800a9fb 	.word	0x0800a9fb
 800a998:	0800aa8b 	.word	0x0800aa8b
 800a99c:	0800a94d 	.word	0x0800a94d
 800a9a0:	0800a94d 	.word	0x0800a94d
 800a9a4:	0800aaf3 	.word	0x0800aaf3
 800a9a8:	0800a94d 	.word	0x0800a94d
 800a9ac:	0800a9fb 	.word	0x0800a9fb
 800a9b0:	0800a94d 	.word	0x0800a94d
 800a9b4:	0800a94d 	.word	0x0800a94d
 800a9b8:	0800aa93 	.word	0x0800aa93
 800a9bc:	6833      	ldr	r3, [r6, #0]
 800a9be:	1d1a      	adds	r2, r3, #4
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	6032      	str	r2, [r6, #0]
 800a9c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a9c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e09d      	b.n	800ab0c <_printf_i+0x1e8>
 800a9d0:	6833      	ldr	r3, [r6, #0]
 800a9d2:	6820      	ldr	r0, [r4, #0]
 800a9d4:	1d19      	adds	r1, r3, #4
 800a9d6:	6031      	str	r1, [r6, #0]
 800a9d8:	0606      	lsls	r6, r0, #24
 800a9da:	d501      	bpl.n	800a9e0 <_printf_i+0xbc>
 800a9dc:	681d      	ldr	r5, [r3, #0]
 800a9de:	e003      	b.n	800a9e8 <_printf_i+0xc4>
 800a9e0:	0645      	lsls	r5, r0, #25
 800a9e2:	d5fb      	bpl.n	800a9dc <_printf_i+0xb8>
 800a9e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a9e8:	2d00      	cmp	r5, #0
 800a9ea:	da03      	bge.n	800a9f4 <_printf_i+0xd0>
 800a9ec:	232d      	movs	r3, #45	@ 0x2d
 800a9ee:	426d      	negs	r5, r5
 800a9f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9f4:	4859      	ldr	r0, [pc, #356]	@ (800ab5c <_printf_i+0x238>)
 800a9f6:	230a      	movs	r3, #10
 800a9f8:	e011      	b.n	800aa1e <_printf_i+0xfa>
 800a9fa:	6821      	ldr	r1, [r4, #0]
 800a9fc:	6833      	ldr	r3, [r6, #0]
 800a9fe:	0608      	lsls	r0, r1, #24
 800aa00:	f853 5b04 	ldr.w	r5, [r3], #4
 800aa04:	d402      	bmi.n	800aa0c <_printf_i+0xe8>
 800aa06:	0649      	lsls	r1, r1, #25
 800aa08:	bf48      	it	mi
 800aa0a:	b2ad      	uxthmi	r5, r5
 800aa0c:	2f6f      	cmp	r7, #111	@ 0x6f
 800aa0e:	4853      	ldr	r0, [pc, #332]	@ (800ab5c <_printf_i+0x238>)
 800aa10:	6033      	str	r3, [r6, #0]
 800aa12:	bf14      	ite	ne
 800aa14:	230a      	movne	r3, #10
 800aa16:	2308      	moveq	r3, #8
 800aa18:	2100      	movs	r1, #0
 800aa1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aa1e:	6866      	ldr	r6, [r4, #4]
 800aa20:	60a6      	str	r6, [r4, #8]
 800aa22:	2e00      	cmp	r6, #0
 800aa24:	bfa2      	ittt	ge
 800aa26:	6821      	ldrge	r1, [r4, #0]
 800aa28:	f021 0104 	bicge.w	r1, r1, #4
 800aa2c:	6021      	strge	r1, [r4, #0]
 800aa2e:	b90d      	cbnz	r5, 800aa34 <_printf_i+0x110>
 800aa30:	2e00      	cmp	r6, #0
 800aa32:	d04b      	beq.n	800aacc <_printf_i+0x1a8>
 800aa34:	4616      	mov	r6, r2
 800aa36:	fbb5 f1f3 	udiv	r1, r5, r3
 800aa3a:	fb03 5711 	mls	r7, r3, r1, r5
 800aa3e:	5dc7      	ldrb	r7, [r0, r7]
 800aa40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aa44:	462f      	mov	r7, r5
 800aa46:	42bb      	cmp	r3, r7
 800aa48:	460d      	mov	r5, r1
 800aa4a:	d9f4      	bls.n	800aa36 <_printf_i+0x112>
 800aa4c:	2b08      	cmp	r3, #8
 800aa4e:	d10b      	bne.n	800aa68 <_printf_i+0x144>
 800aa50:	6823      	ldr	r3, [r4, #0]
 800aa52:	07df      	lsls	r7, r3, #31
 800aa54:	d508      	bpl.n	800aa68 <_printf_i+0x144>
 800aa56:	6923      	ldr	r3, [r4, #16]
 800aa58:	6861      	ldr	r1, [r4, #4]
 800aa5a:	4299      	cmp	r1, r3
 800aa5c:	bfde      	ittt	le
 800aa5e:	2330      	movle	r3, #48	@ 0x30
 800aa60:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa64:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aa68:	1b92      	subs	r2, r2, r6
 800aa6a:	6122      	str	r2, [r4, #16]
 800aa6c:	f8cd a000 	str.w	sl, [sp]
 800aa70:	464b      	mov	r3, r9
 800aa72:	aa03      	add	r2, sp, #12
 800aa74:	4621      	mov	r1, r4
 800aa76:	4640      	mov	r0, r8
 800aa78:	f7ff fee6 	bl	800a848 <_printf_common>
 800aa7c:	3001      	adds	r0, #1
 800aa7e:	d14a      	bne.n	800ab16 <_printf_i+0x1f2>
 800aa80:	f04f 30ff 	mov.w	r0, #4294967295
 800aa84:	b004      	add	sp, #16
 800aa86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa8a:	6823      	ldr	r3, [r4, #0]
 800aa8c:	f043 0320 	orr.w	r3, r3, #32
 800aa90:	6023      	str	r3, [r4, #0]
 800aa92:	4833      	ldr	r0, [pc, #204]	@ (800ab60 <_printf_i+0x23c>)
 800aa94:	2778      	movs	r7, #120	@ 0x78
 800aa96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aa9a:	6823      	ldr	r3, [r4, #0]
 800aa9c:	6831      	ldr	r1, [r6, #0]
 800aa9e:	061f      	lsls	r7, r3, #24
 800aaa0:	f851 5b04 	ldr.w	r5, [r1], #4
 800aaa4:	d402      	bmi.n	800aaac <_printf_i+0x188>
 800aaa6:	065f      	lsls	r7, r3, #25
 800aaa8:	bf48      	it	mi
 800aaaa:	b2ad      	uxthmi	r5, r5
 800aaac:	6031      	str	r1, [r6, #0]
 800aaae:	07d9      	lsls	r1, r3, #31
 800aab0:	bf44      	itt	mi
 800aab2:	f043 0320 	orrmi.w	r3, r3, #32
 800aab6:	6023      	strmi	r3, [r4, #0]
 800aab8:	b11d      	cbz	r5, 800aac2 <_printf_i+0x19e>
 800aaba:	2310      	movs	r3, #16
 800aabc:	e7ac      	b.n	800aa18 <_printf_i+0xf4>
 800aabe:	4827      	ldr	r0, [pc, #156]	@ (800ab5c <_printf_i+0x238>)
 800aac0:	e7e9      	b.n	800aa96 <_printf_i+0x172>
 800aac2:	6823      	ldr	r3, [r4, #0]
 800aac4:	f023 0320 	bic.w	r3, r3, #32
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	e7f6      	b.n	800aaba <_printf_i+0x196>
 800aacc:	4616      	mov	r6, r2
 800aace:	e7bd      	b.n	800aa4c <_printf_i+0x128>
 800aad0:	6833      	ldr	r3, [r6, #0]
 800aad2:	6825      	ldr	r5, [r4, #0]
 800aad4:	6961      	ldr	r1, [r4, #20]
 800aad6:	1d18      	adds	r0, r3, #4
 800aad8:	6030      	str	r0, [r6, #0]
 800aada:	062e      	lsls	r6, r5, #24
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	d501      	bpl.n	800aae4 <_printf_i+0x1c0>
 800aae0:	6019      	str	r1, [r3, #0]
 800aae2:	e002      	b.n	800aaea <_printf_i+0x1c6>
 800aae4:	0668      	lsls	r0, r5, #25
 800aae6:	d5fb      	bpl.n	800aae0 <_printf_i+0x1bc>
 800aae8:	8019      	strh	r1, [r3, #0]
 800aaea:	2300      	movs	r3, #0
 800aaec:	6123      	str	r3, [r4, #16]
 800aaee:	4616      	mov	r6, r2
 800aaf0:	e7bc      	b.n	800aa6c <_printf_i+0x148>
 800aaf2:	6833      	ldr	r3, [r6, #0]
 800aaf4:	1d1a      	adds	r2, r3, #4
 800aaf6:	6032      	str	r2, [r6, #0]
 800aaf8:	681e      	ldr	r6, [r3, #0]
 800aafa:	6862      	ldr	r2, [r4, #4]
 800aafc:	2100      	movs	r1, #0
 800aafe:	4630      	mov	r0, r6
 800ab00:	f7fb f94e 	bl	8005da0 <memchr>
 800ab04:	b108      	cbz	r0, 800ab0a <_printf_i+0x1e6>
 800ab06:	1b80      	subs	r0, r0, r6
 800ab08:	6060      	str	r0, [r4, #4]
 800ab0a:	6863      	ldr	r3, [r4, #4]
 800ab0c:	6123      	str	r3, [r4, #16]
 800ab0e:	2300      	movs	r3, #0
 800ab10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab14:	e7aa      	b.n	800aa6c <_printf_i+0x148>
 800ab16:	6923      	ldr	r3, [r4, #16]
 800ab18:	4632      	mov	r2, r6
 800ab1a:	4649      	mov	r1, r9
 800ab1c:	4640      	mov	r0, r8
 800ab1e:	47d0      	blx	sl
 800ab20:	3001      	adds	r0, #1
 800ab22:	d0ad      	beq.n	800aa80 <_printf_i+0x15c>
 800ab24:	6823      	ldr	r3, [r4, #0]
 800ab26:	079b      	lsls	r3, r3, #30
 800ab28:	d413      	bmi.n	800ab52 <_printf_i+0x22e>
 800ab2a:	68e0      	ldr	r0, [r4, #12]
 800ab2c:	9b03      	ldr	r3, [sp, #12]
 800ab2e:	4298      	cmp	r0, r3
 800ab30:	bfb8      	it	lt
 800ab32:	4618      	movlt	r0, r3
 800ab34:	e7a6      	b.n	800aa84 <_printf_i+0x160>
 800ab36:	2301      	movs	r3, #1
 800ab38:	4632      	mov	r2, r6
 800ab3a:	4649      	mov	r1, r9
 800ab3c:	4640      	mov	r0, r8
 800ab3e:	47d0      	blx	sl
 800ab40:	3001      	adds	r0, #1
 800ab42:	d09d      	beq.n	800aa80 <_printf_i+0x15c>
 800ab44:	3501      	adds	r5, #1
 800ab46:	68e3      	ldr	r3, [r4, #12]
 800ab48:	9903      	ldr	r1, [sp, #12]
 800ab4a:	1a5b      	subs	r3, r3, r1
 800ab4c:	42ab      	cmp	r3, r5
 800ab4e:	dcf2      	bgt.n	800ab36 <_printf_i+0x212>
 800ab50:	e7eb      	b.n	800ab2a <_printf_i+0x206>
 800ab52:	2500      	movs	r5, #0
 800ab54:	f104 0619 	add.w	r6, r4, #25
 800ab58:	e7f5      	b.n	800ab46 <_printf_i+0x222>
 800ab5a:	bf00      	nop
 800ab5c:	0800f66b 	.word	0x0800f66b
 800ab60:	0800f67c 	.word	0x0800f67c

0800ab64 <_scanf_float>:
 800ab64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab68:	b087      	sub	sp, #28
 800ab6a:	4617      	mov	r7, r2
 800ab6c:	9303      	str	r3, [sp, #12]
 800ab6e:	688b      	ldr	r3, [r1, #8]
 800ab70:	1e5a      	subs	r2, r3, #1
 800ab72:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ab76:	bf81      	itttt	hi
 800ab78:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ab7c:	eb03 0b05 	addhi.w	fp, r3, r5
 800ab80:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ab84:	608b      	strhi	r3, [r1, #8]
 800ab86:	680b      	ldr	r3, [r1, #0]
 800ab88:	460a      	mov	r2, r1
 800ab8a:	f04f 0500 	mov.w	r5, #0
 800ab8e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ab92:	f842 3b1c 	str.w	r3, [r2], #28
 800ab96:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ab9a:	4680      	mov	r8, r0
 800ab9c:	460c      	mov	r4, r1
 800ab9e:	bf98      	it	ls
 800aba0:	f04f 0b00 	movls.w	fp, #0
 800aba4:	9201      	str	r2, [sp, #4]
 800aba6:	4616      	mov	r6, r2
 800aba8:	46aa      	mov	sl, r5
 800abaa:	46a9      	mov	r9, r5
 800abac:	9502      	str	r5, [sp, #8]
 800abae:	68a2      	ldr	r2, [r4, #8]
 800abb0:	b152      	cbz	r2, 800abc8 <_scanf_float+0x64>
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	2b4e      	cmp	r3, #78	@ 0x4e
 800abb8:	d864      	bhi.n	800ac84 <_scanf_float+0x120>
 800abba:	2b40      	cmp	r3, #64	@ 0x40
 800abbc:	d83c      	bhi.n	800ac38 <_scanf_float+0xd4>
 800abbe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800abc2:	b2c8      	uxtb	r0, r1
 800abc4:	280e      	cmp	r0, #14
 800abc6:	d93a      	bls.n	800ac3e <_scanf_float+0xda>
 800abc8:	f1b9 0f00 	cmp.w	r9, #0
 800abcc:	d003      	beq.n	800abd6 <_scanf_float+0x72>
 800abce:	6823      	ldr	r3, [r4, #0]
 800abd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800abd4:	6023      	str	r3, [r4, #0]
 800abd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abda:	f1ba 0f01 	cmp.w	sl, #1
 800abde:	f200 8117 	bhi.w	800ae10 <_scanf_float+0x2ac>
 800abe2:	9b01      	ldr	r3, [sp, #4]
 800abe4:	429e      	cmp	r6, r3
 800abe6:	f200 8108 	bhi.w	800adfa <_scanf_float+0x296>
 800abea:	2001      	movs	r0, #1
 800abec:	b007      	add	sp, #28
 800abee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800abf6:	2a0d      	cmp	r2, #13
 800abf8:	d8e6      	bhi.n	800abc8 <_scanf_float+0x64>
 800abfa:	a101      	add	r1, pc, #4	@ (adr r1, 800ac00 <_scanf_float+0x9c>)
 800abfc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ac00:	0800ad47 	.word	0x0800ad47
 800ac04:	0800abc9 	.word	0x0800abc9
 800ac08:	0800abc9 	.word	0x0800abc9
 800ac0c:	0800abc9 	.word	0x0800abc9
 800ac10:	0800ada7 	.word	0x0800ada7
 800ac14:	0800ad7f 	.word	0x0800ad7f
 800ac18:	0800abc9 	.word	0x0800abc9
 800ac1c:	0800abc9 	.word	0x0800abc9
 800ac20:	0800ad55 	.word	0x0800ad55
 800ac24:	0800abc9 	.word	0x0800abc9
 800ac28:	0800abc9 	.word	0x0800abc9
 800ac2c:	0800abc9 	.word	0x0800abc9
 800ac30:	0800abc9 	.word	0x0800abc9
 800ac34:	0800ad0d 	.word	0x0800ad0d
 800ac38:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ac3c:	e7db      	b.n	800abf6 <_scanf_float+0x92>
 800ac3e:	290e      	cmp	r1, #14
 800ac40:	d8c2      	bhi.n	800abc8 <_scanf_float+0x64>
 800ac42:	a001      	add	r0, pc, #4	@ (adr r0, 800ac48 <_scanf_float+0xe4>)
 800ac44:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ac48:	0800acfd 	.word	0x0800acfd
 800ac4c:	0800abc9 	.word	0x0800abc9
 800ac50:	0800acfd 	.word	0x0800acfd
 800ac54:	0800ad93 	.word	0x0800ad93
 800ac58:	0800abc9 	.word	0x0800abc9
 800ac5c:	0800aca5 	.word	0x0800aca5
 800ac60:	0800ace3 	.word	0x0800ace3
 800ac64:	0800ace3 	.word	0x0800ace3
 800ac68:	0800ace3 	.word	0x0800ace3
 800ac6c:	0800ace3 	.word	0x0800ace3
 800ac70:	0800ace3 	.word	0x0800ace3
 800ac74:	0800ace3 	.word	0x0800ace3
 800ac78:	0800ace3 	.word	0x0800ace3
 800ac7c:	0800ace3 	.word	0x0800ace3
 800ac80:	0800ace3 	.word	0x0800ace3
 800ac84:	2b6e      	cmp	r3, #110	@ 0x6e
 800ac86:	d809      	bhi.n	800ac9c <_scanf_float+0x138>
 800ac88:	2b60      	cmp	r3, #96	@ 0x60
 800ac8a:	d8b2      	bhi.n	800abf2 <_scanf_float+0x8e>
 800ac8c:	2b54      	cmp	r3, #84	@ 0x54
 800ac8e:	d07b      	beq.n	800ad88 <_scanf_float+0x224>
 800ac90:	2b59      	cmp	r3, #89	@ 0x59
 800ac92:	d199      	bne.n	800abc8 <_scanf_float+0x64>
 800ac94:	2d07      	cmp	r5, #7
 800ac96:	d197      	bne.n	800abc8 <_scanf_float+0x64>
 800ac98:	2508      	movs	r5, #8
 800ac9a:	e02c      	b.n	800acf6 <_scanf_float+0x192>
 800ac9c:	2b74      	cmp	r3, #116	@ 0x74
 800ac9e:	d073      	beq.n	800ad88 <_scanf_float+0x224>
 800aca0:	2b79      	cmp	r3, #121	@ 0x79
 800aca2:	e7f6      	b.n	800ac92 <_scanf_float+0x12e>
 800aca4:	6821      	ldr	r1, [r4, #0]
 800aca6:	05c8      	lsls	r0, r1, #23
 800aca8:	d51b      	bpl.n	800ace2 <_scanf_float+0x17e>
 800acaa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800acae:	6021      	str	r1, [r4, #0]
 800acb0:	f109 0901 	add.w	r9, r9, #1
 800acb4:	f1bb 0f00 	cmp.w	fp, #0
 800acb8:	d003      	beq.n	800acc2 <_scanf_float+0x15e>
 800acba:	3201      	adds	r2, #1
 800acbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800acc0:	60a2      	str	r2, [r4, #8]
 800acc2:	68a3      	ldr	r3, [r4, #8]
 800acc4:	3b01      	subs	r3, #1
 800acc6:	60a3      	str	r3, [r4, #8]
 800acc8:	6923      	ldr	r3, [r4, #16]
 800acca:	3301      	adds	r3, #1
 800accc:	6123      	str	r3, [r4, #16]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	3b01      	subs	r3, #1
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	607b      	str	r3, [r7, #4]
 800acd6:	f340 8087 	ble.w	800ade8 <_scanf_float+0x284>
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	3301      	adds	r3, #1
 800acde:	603b      	str	r3, [r7, #0]
 800ace0:	e765      	b.n	800abae <_scanf_float+0x4a>
 800ace2:	eb1a 0105 	adds.w	r1, sl, r5
 800ace6:	f47f af6f 	bne.w	800abc8 <_scanf_float+0x64>
 800acea:	6822      	ldr	r2, [r4, #0]
 800acec:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800acf0:	6022      	str	r2, [r4, #0]
 800acf2:	460d      	mov	r5, r1
 800acf4:	468a      	mov	sl, r1
 800acf6:	f806 3b01 	strb.w	r3, [r6], #1
 800acfa:	e7e2      	b.n	800acc2 <_scanf_float+0x15e>
 800acfc:	6822      	ldr	r2, [r4, #0]
 800acfe:	0610      	lsls	r0, r2, #24
 800ad00:	f57f af62 	bpl.w	800abc8 <_scanf_float+0x64>
 800ad04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ad08:	6022      	str	r2, [r4, #0]
 800ad0a:	e7f4      	b.n	800acf6 <_scanf_float+0x192>
 800ad0c:	f1ba 0f00 	cmp.w	sl, #0
 800ad10:	d10e      	bne.n	800ad30 <_scanf_float+0x1cc>
 800ad12:	f1b9 0f00 	cmp.w	r9, #0
 800ad16:	d10e      	bne.n	800ad36 <_scanf_float+0x1d2>
 800ad18:	6822      	ldr	r2, [r4, #0]
 800ad1a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ad1e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ad22:	d108      	bne.n	800ad36 <_scanf_float+0x1d2>
 800ad24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ad28:	6022      	str	r2, [r4, #0]
 800ad2a:	f04f 0a01 	mov.w	sl, #1
 800ad2e:	e7e2      	b.n	800acf6 <_scanf_float+0x192>
 800ad30:	f1ba 0f02 	cmp.w	sl, #2
 800ad34:	d055      	beq.n	800ade2 <_scanf_float+0x27e>
 800ad36:	2d01      	cmp	r5, #1
 800ad38:	d002      	beq.n	800ad40 <_scanf_float+0x1dc>
 800ad3a:	2d04      	cmp	r5, #4
 800ad3c:	f47f af44 	bne.w	800abc8 <_scanf_float+0x64>
 800ad40:	3501      	adds	r5, #1
 800ad42:	b2ed      	uxtb	r5, r5
 800ad44:	e7d7      	b.n	800acf6 <_scanf_float+0x192>
 800ad46:	f1ba 0f01 	cmp.w	sl, #1
 800ad4a:	f47f af3d 	bne.w	800abc8 <_scanf_float+0x64>
 800ad4e:	f04f 0a02 	mov.w	sl, #2
 800ad52:	e7d0      	b.n	800acf6 <_scanf_float+0x192>
 800ad54:	b97d      	cbnz	r5, 800ad76 <_scanf_float+0x212>
 800ad56:	f1b9 0f00 	cmp.w	r9, #0
 800ad5a:	f47f af38 	bne.w	800abce <_scanf_float+0x6a>
 800ad5e:	6822      	ldr	r2, [r4, #0]
 800ad60:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ad64:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ad68:	f040 8108 	bne.w	800af7c <_scanf_float+0x418>
 800ad6c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ad70:	6022      	str	r2, [r4, #0]
 800ad72:	2501      	movs	r5, #1
 800ad74:	e7bf      	b.n	800acf6 <_scanf_float+0x192>
 800ad76:	2d03      	cmp	r5, #3
 800ad78:	d0e2      	beq.n	800ad40 <_scanf_float+0x1dc>
 800ad7a:	2d05      	cmp	r5, #5
 800ad7c:	e7de      	b.n	800ad3c <_scanf_float+0x1d8>
 800ad7e:	2d02      	cmp	r5, #2
 800ad80:	f47f af22 	bne.w	800abc8 <_scanf_float+0x64>
 800ad84:	2503      	movs	r5, #3
 800ad86:	e7b6      	b.n	800acf6 <_scanf_float+0x192>
 800ad88:	2d06      	cmp	r5, #6
 800ad8a:	f47f af1d 	bne.w	800abc8 <_scanf_float+0x64>
 800ad8e:	2507      	movs	r5, #7
 800ad90:	e7b1      	b.n	800acf6 <_scanf_float+0x192>
 800ad92:	6822      	ldr	r2, [r4, #0]
 800ad94:	0591      	lsls	r1, r2, #22
 800ad96:	f57f af17 	bpl.w	800abc8 <_scanf_float+0x64>
 800ad9a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ad9e:	6022      	str	r2, [r4, #0]
 800ada0:	f8cd 9008 	str.w	r9, [sp, #8]
 800ada4:	e7a7      	b.n	800acf6 <_scanf_float+0x192>
 800ada6:	6822      	ldr	r2, [r4, #0]
 800ada8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800adac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800adb0:	d006      	beq.n	800adc0 <_scanf_float+0x25c>
 800adb2:	0550      	lsls	r0, r2, #21
 800adb4:	f57f af08 	bpl.w	800abc8 <_scanf_float+0x64>
 800adb8:	f1b9 0f00 	cmp.w	r9, #0
 800adbc:	f000 80de 	beq.w	800af7c <_scanf_float+0x418>
 800adc0:	0591      	lsls	r1, r2, #22
 800adc2:	bf58      	it	pl
 800adc4:	9902      	ldrpl	r1, [sp, #8]
 800adc6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800adca:	bf58      	it	pl
 800adcc:	eba9 0101 	subpl.w	r1, r9, r1
 800add0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800add4:	bf58      	it	pl
 800add6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800adda:	6022      	str	r2, [r4, #0]
 800addc:	f04f 0900 	mov.w	r9, #0
 800ade0:	e789      	b.n	800acf6 <_scanf_float+0x192>
 800ade2:	f04f 0a03 	mov.w	sl, #3
 800ade6:	e786      	b.n	800acf6 <_scanf_float+0x192>
 800ade8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800adec:	4639      	mov	r1, r7
 800adee:	4640      	mov	r0, r8
 800adf0:	4798      	blx	r3
 800adf2:	2800      	cmp	r0, #0
 800adf4:	f43f aedb 	beq.w	800abae <_scanf_float+0x4a>
 800adf8:	e6e6      	b.n	800abc8 <_scanf_float+0x64>
 800adfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800adfe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ae02:	463a      	mov	r2, r7
 800ae04:	4640      	mov	r0, r8
 800ae06:	4798      	blx	r3
 800ae08:	6923      	ldr	r3, [r4, #16]
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	6123      	str	r3, [r4, #16]
 800ae0e:	e6e8      	b.n	800abe2 <_scanf_float+0x7e>
 800ae10:	1e6b      	subs	r3, r5, #1
 800ae12:	2b06      	cmp	r3, #6
 800ae14:	d824      	bhi.n	800ae60 <_scanf_float+0x2fc>
 800ae16:	2d02      	cmp	r5, #2
 800ae18:	d836      	bhi.n	800ae88 <_scanf_float+0x324>
 800ae1a:	9b01      	ldr	r3, [sp, #4]
 800ae1c:	429e      	cmp	r6, r3
 800ae1e:	f67f aee4 	bls.w	800abea <_scanf_float+0x86>
 800ae22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ae26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ae2a:	463a      	mov	r2, r7
 800ae2c:	4640      	mov	r0, r8
 800ae2e:	4798      	blx	r3
 800ae30:	6923      	ldr	r3, [r4, #16]
 800ae32:	3b01      	subs	r3, #1
 800ae34:	6123      	str	r3, [r4, #16]
 800ae36:	e7f0      	b.n	800ae1a <_scanf_float+0x2b6>
 800ae38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ae3c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ae40:	463a      	mov	r2, r7
 800ae42:	4640      	mov	r0, r8
 800ae44:	4798      	blx	r3
 800ae46:	6923      	ldr	r3, [r4, #16]
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	6123      	str	r3, [r4, #16]
 800ae4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae50:	fa5f fa8a 	uxtb.w	sl, sl
 800ae54:	f1ba 0f02 	cmp.w	sl, #2
 800ae58:	d1ee      	bne.n	800ae38 <_scanf_float+0x2d4>
 800ae5a:	3d03      	subs	r5, #3
 800ae5c:	b2ed      	uxtb	r5, r5
 800ae5e:	1b76      	subs	r6, r6, r5
 800ae60:	6823      	ldr	r3, [r4, #0]
 800ae62:	05da      	lsls	r2, r3, #23
 800ae64:	d530      	bpl.n	800aec8 <_scanf_float+0x364>
 800ae66:	055b      	lsls	r3, r3, #21
 800ae68:	d511      	bpl.n	800ae8e <_scanf_float+0x32a>
 800ae6a:	9b01      	ldr	r3, [sp, #4]
 800ae6c:	429e      	cmp	r6, r3
 800ae6e:	f67f aebc 	bls.w	800abea <_scanf_float+0x86>
 800ae72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ae76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ae7a:	463a      	mov	r2, r7
 800ae7c:	4640      	mov	r0, r8
 800ae7e:	4798      	blx	r3
 800ae80:	6923      	ldr	r3, [r4, #16]
 800ae82:	3b01      	subs	r3, #1
 800ae84:	6123      	str	r3, [r4, #16]
 800ae86:	e7f0      	b.n	800ae6a <_scanf_float+0x306>
 800ae88:	46aa      	mov	sl, r5
 800ae8a:	46b3      	mov	fp, r6
 800ae8c:	e7de      	b.n	800ae4c <_scanf_float+0x2e8>
 800ae8e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ae92:	6923      	ldr	r3, [r4, #16]
 800ae94:	2965      	cmp	r1, #101	@ 0x65
 800ae96:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae9a:	f106 35ff 	add.w	r5, r6, #4294967295
 800ae9e:	6123      	str	r3, [r4, #16]
 800aea0:	d00c      	beq.n	800aebc <_scanf_float+0x358>
 800aea2:	2945      	cmp	r1, #69	@ 0x45
 800aea4:	d00a      	beq.n	800aebc <_scanf_float+0x358>
 800aea6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aeaa:	463a      	mov	r2, r7
 800aeac:	4640      	mov	r0, r8
 800aeae:	4798      	blx	r3
 800aeb0:	6923      	ldr	r3, [r4, #16]
 800aeb2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	1eb5      	subs	r5, r6, #2
 800aeba:	6123      	str	r3, [r4, #16]
 800aebc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aec0:	463a      	mov	r2, r7
 800aec2:	4640      	mov	r0, r8
 800aec4:	4798      	blx	r3
 800aec6:	462e      	mov	r6, r5
 800aec8:	6822      	ldr	r2, [r4, #0]
 800aeca:	f012 0210 	ands.w	r2, r2, #16
 800aece:	d001      	beq.n	800aed4 <_scanf_float+0x370>
 800aed0:	2000      	movs	r0, #0
 800aed2:	e68b      	b.n	800abec <_scanf_float+0x88>
 800aed4:	7032      	strb	r2, [r6, #0]
 800aed6:	6823      	ldr	r3, [r4, #0]
 800aed8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800aedc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aee0:	d11c      	bne.n	800af1c <_scanf_float+0x3b8>
 800aee2:	9b02      	ldr	r3, [sp, #8]
 800aee4:	454b      	cmp	r3, r9
 800aee6:	eba3 0209 	sub.w	r2, r3, r9
 800aeea:	d123      	bne.n	800af34 <_scanf_float+0x3d0>
 800aeec:	9901      	ldr	r1, [sp, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	4640      	mov	r0, r8
 800aef2:	f002 fb99 	bl	800d628 <_strtod_r>
 800aef6:	9b03      	ldr	r3, [sp, #12]
 800aef8:	6821      	ldr	r1, [r4, #0]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f011 0f02 	tst.w	r1, #2
 800af00:	ec57 6b10 	vmov	r6, r7, d0
 800af04:	f103 0204 	add.w	r2, r3, #4
 800af08:	d01f      	beq.n	800af4a <_scanf_float+0x3e6>
 800af0a:	9903      	ldr	r1, [sp, #12]
 800af0c:	600a      	str	r2, [r1, #0]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	e9c3 6700 	strd	r6, r7, [r3]
 800af14:	68e3      	ldr	r3, [r4, #12]
 800af16:	3301      	adds	r3, #1
 800af18:	60e3      	str	r3, [r4, #12]
 800af1a:	e7d9      	b.n	800aed0 <_scanf_float+0x36c>
 800af1c:	9b04      	ldr	r3, [sp, #16]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d0e4      	beq.n	800aeec <_scanf_float+0x388>
 800af22:	9905      	ldr	r1, [sp, #20]
 800af24:	230a      	movs	r3, #10
 800af26:	3101      	adds	r1, #1
 800af28:	4640      	mov	r0, r8
 800af2a:	f002 fbfd 	bl	800d728 <_strtol_r>
 800af2e:	9b04      	ldr	r3, [sp, #16]
 800af30:	9e05      	ldr	r6, [sp, #20]
 800af32:	1ac2      	subs	r2, r0, r3
 800af34:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800af38:	429e      	cmp	r6, r3
 800af3a:	bf28      	it	cs
 800af3c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800af40:	4910      	ldr	r1, [pc, #64]	@ (800af84 <_scanf_float+0x420>)
 800af42:	4630      	mov	r0, r6
 800af44:	f000 f8e4 	bl	800b110 <siprintf>
 800af48:	e7d0      	b.n	800aeec <_scanf_float+0x388>
 800af4a:	f011 0f04 	tst.w	r1, #4
 800af4e:	9903      	ldr	r1, [sp, #12]
 800af50:	600a      	str	r2, [r1, #0]
 800af52:	d1dc      	bne.n	800af0e <_scanf_float+0x3aa>
 800af54:	681d      	ldr	r5, [r3, #0]
 800af56:	4632      	mov	r2, r6
 800af58:	463b      	mov	r3, r7
 800af5a:	4630      	mov	r0, r6
 800af5c:	4639      	mov	r1, r7
 800af5e:	f7fb fc1b 	bl	8006798 <__aeabi_dcmpun>
 800af62:	b128      	cbz	r0, 800af70 <_scanf_float+0x40c>
 800af64:	4808      	ldr	r0, [pc, #32]	@ (800af88 <_scanf_float+0x424>)
 800af66:	f000 fa0b 	bl	800b380 <nanf>
 800af6a:	ed85 0a00 	vstr	s0, [r5]
 800af6e:	e7d1      	b.n	800af14 <_scanf_float+0x3b0>
 800af70:	4630      	mov	r0, r6
 800af72:	4639      	mov	r1, r7
 800af74:	f7fb fc6e 	bl	8006854 <__aeabi_d2f>
 800af78:	6028      	str	r0, [r5, #0]
 800af7a:	e7cb      	b.n	800af14 <_scanf_float+0x3b0>
 800af7c:	f04f 0900 	mov.w	r9, #0
 800af80:	e629      	b.n	800abd6 <_scanf_float+0x72>
 800af82:	bf00      	nop
 800af84:	0800f68d 	.word	0x0800f68d
 800af88:	0800f924 	.word	0x0800f924

0800af8c <std>:
 800af8c:	2300      	movs	r3, #0
 800af8e:	b510      	push	{r4, lr}
 800af90:	4604      	mov	r4, r0
 800af92:	e9c0 3300 	strd	r3, r3, [r0]
 800af96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af9a:	6083      	str	r3, [r0, #8]
 800af9c:	8181      	strh	r1, [r0, #12]
 800af9e:	6643      	str	r3, [r0, #100]	@ 0x64
 800afa0:	81c2      	strh	r2, [r0, #14]
 800afa2:	6183      	str	r3, [r0, #24]
 800afa4:	4619      	mov	r1, r3
 800afa6:	2208      	movs	r2, #8
 800afa8:	305c      	adds	r0, #92	@ 0x5c
 800afaa:	f000 f914 	bl	800b1d6 <memset>
 800afae:	4b0d      	ldr	r3, [pc, #52]	@ (800afe4 <std+0x58>)
 800afb0:	6263      	str	r3, [r4, #36]	@ 0x24
 800afb2:	4b0d      	ldr	r3, [pc, #52]	@ (800afe8 <std+0x5c>)
 800afb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800afb6:	4b0d      	ldr	r3, [pc, #52]	@ (800afec <std+0x60>)
 800afb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800afba:	4b0d      	ldr	r3, [pc, #52]	@ (800aff0 <std+0x64>)
 800afbc:	6323      	str	r3, [r4, #48]	@ 0x30
 800afbe:	4b0d      	ldr	r3, [pc, #52]	@ (800aff4 <std+0x68>)
 800afc0:	6224      	str	r4, [r4, #32]
 800afc2:	429c      	cmp	r4, r3
 800afc4:	d006      	beq.n	800afd4 <std+0x48>
 800afc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800afca:	4294      	cmp	r4, r2
 800afcc:	d002      	beq.n	800afd4 <std+0x48>
 800afce:	33d0      	adds	r3, #208	@ 0xd0
 800afd0:	429c      	cmp	r4, r3
 800afd2:	d105      	bne.n	800afe0 <std+0x54>
 800afd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800afd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afdc:	f000 b9b2 	b.w	800b344 <__retarget_lock_init_recursive>
 800afe0:	bd10      	pop	{r4, pc}
 800afe2:	bf00      	nop
 800afe4:	0800b151 	.word	0x0800b151
 800afe8:	0800b173 	.word	0x0800b173
 800afec:	0800b1ab 	.word	0x0800b1ab
 800aff0:	0800b1cf 	.word	0x0800b1cf
 800aff4:	20000ed8 	.word	0x20000ed8

0800aff8 <stdio_exit_handler>:
 800aff8:	4a02      	ldr	r2, [pc, #8]	@ (800b004 <stdio_exit_handler+0xc>)
 800affa:	4903      	ldr	r1, [pc, #12]	@ (800b008 <stdio_exit_handler+0x10>)
 800affc:	4803      	ldr	r0, [pc, #12]	@ (800b00c <stdio_exit_handler+0x14>)
 800affe:	f000 b869 	b.w	800b0d4 <_fwalk_sglue>
 800b002:	bf00      	nop
 800b004:	2000000c 	.word	0x2000000c
 800b008:	0800dae5 	.word	0x0800dae5
 800b00c:	2000001c 	.word	0x2000001c

0800b010 <cleanup_stdio>:
 800b010:	6841      	ldr	r1, [r0, #4]
 800b012:	4b0c      	ldr	r3, [pc, #48]	@ (800b044 <cleanup_stdio+0x34>)
 800b014:	4299      	cmp	r1, r3
 800b016:	b510      	push	{r4, lr}
 800b018:	4604      	mov	r4, r0
 800b01a:	d001      	beq.n	800b020 <cleanup_stdio+0x10>
 800b01c:	f002 fd62 	bl	800dae4 <_fflush_r>
 800b020:	68a1      	ldr	r1, [r4, #8]
 800b022:	4b09      	ldr	r3, [pc, #36]	@ (800b048 <cleanup_stdio+0x38>)
 800b024:	4299      	cmp	r1, r3
 800b026:	d002      	beq.n	800b02e <cleanup_stdio+0x1e>
 800b028:	4620      	mov	r0, r4
 800b02a:	f002 fd5b 	bl	800dae4 <_fflush_r>
 800b02e:	68e1      	ldr	r1, [r4, #12]
 800b030:	4b06      	ldr	r3, [pc, #24]	@ (800b04c <cleanup_stdio+0x3c>)
 800b032:	4299      	cmp	r1, r3
 800b034:	d004      	beq.n	800b040 <cleanup_stdio+0x30>
 800b036:	4620      	mov	r0, r4
 800b038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b03c:	f002 bd52 	b.w	800dae4 <_fflush_r>
 800b040:	bd10      	pop	{r4, pc}
 800b042:	bf00      	nop
 800b044:	20000ed8 	.word	0x20000ed8
 800b048:	20000f40 	.word	0x20000f40
 800b04c:	20000fa8 	.word	0x20000fa8

0800b050 <global_stdio_init.part.0>:
 800b050:	b510      	push	{r4, lr}
 800b052:	4b0b      	ldr	r3, [pc, #44]	@ (800b080 <global_stdio_init.part.0+0x30>)
 800b054:	4c0b      	ldr	r4, [pc, #44]	@ (800b084 <global_stdio_init.part.0+0x34>)
 800b056:	4a0c      	ldr	r2, [pc, #48]	@ (800b088 <global_stdio_init.part.0+0x38>)
 800b058:	601a      	str	r2, [r3, #0]
 800b05a:	4620      	mov	r0, r4
 800b05c:	2200      	movs	r2, #0
 800b05e:	2104      	movs	r1, #4
 800b060:	f7ff ff94 	bl	800af8c <std>
 800b064:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b068:	2201      	movs	r2, #1
 800b06a:	2109      	movs	r1, #9
 800b06c:	f7ff ff8e 	bl	800af8c <std>
 800b070:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b074:	2202      	movs	r2, #2
 800b076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b07a:	2112      	movs	r1, #18
 800b07c:	f7ff bf86 	b.w	800af8c <std>
 800b080:	20001010 	.word	0x20001010
 800b084:	20000ed8 	.word	0x20000ed8
 800b088:	0800aff9 	.word	0x0800aff9

0800b08c <__sfp_lock_acquire>:
 800b08c:	4801      	ldr	r0, [pc, #4]	@ (800b094 <__sfp_lock_acquire+0x8>)
 800b08e:	f000 b95a 	b.w	800b346 <__retarget_lock_acquire_recursive>
 800b092:	bf00      	nop
 800b094:	20001019 	.word	0x20001019

0800b098 <__sfp_lock_release>:
 800b098:	4801      	ldr	r0, [pc, #4]	@ (800b0a0 <__sfp_lock_release+0x8>)
 800b09a:	f000 b955 	b.w	800b348 <__retarget_lock_release_recursive>
 800b09e:	bf00      	nop
 800b0a0:	20001019 	.word	0x20001019

0800b0a4 <__sinit>:
 800b0a4:	b510      	push	{r4, lr}
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	f7ff fff0 	bl	800b08c <__sfp_lock_acquire>
 800b0ac:	6a23      	ldr	r3, [r4, #32]
 800b0ae:	b11b      	cbz	r3, 800b0b8 <__sinit+0x14>
 800b0b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0b4:	f7ff bff0 	b.w	800b098 <__sfp_lock_release>
 800b0b8:	4b04      	ldr	r3, [pc, #16]	@ (800b0cc <__sinit+0x28>)
 800b0ba:	6223      	str	r3, [r4, #32]
 800b0bc:	4b04      	ldr	r3, [pc, #16]	@ (800b0d0 <__sinit+0x2c>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d1f5      	bne.n	800b0b0 <__sinit+0xc>
 800b0c4:	f7ff ffc4 	bl	800b050 <global_stdio_init.part.0>
 800b0c8:	e7f2      	b.n	800b0b0 <__sinit+0xc>
 800b0ca:	bf00      	nop
 800b0cc:	0800b011 	.word	0x0800b011
 800b0d0:	20001010 	.word	0x20001010

0800b0d4 <_fwalk_sglue>:
 800b0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0d8:	4607      	mov	r7, r0
 800b0da:	4688      	mov	r8, r1
 800b0dc:	4614      	mov	r4, r2
 800b0de:	2600      	movs	r6, #0
 800b0e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0e4:	f1b9 0901 	subs.w	r9, r9, #1
 800b0e8:	d505      	bpl.n	800b0f6 <_fwalk_sglue+0x22>
 800b0ea:	6824      	ldr	r4, [r4, #0]
 800b0ec:	2c00      	cmp	r4, #0
 800b0ee:	d1f7      	bne.n	800b0e0 <_fwalk_sglue+0xc>
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0f6:	89ab      	ldrh	r3, [r5, #12]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d907      	bls.n	800b10c <_fwalk_sglue+0x38>
 800b0fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b100:	3301      	adds	r3, #1
 800b102:	d003      	beq.n	800b10c <_fwalk_sglue+0x38>
 800b104:	4629      	mov	r1, r5
 800b106:	4638      	mov	r0, r7
 800b108:	47c0      	blx	r8
 800b10a:	4306      	orrs	r6, r0
 800b10c:	3568      	adds	r5, #104	@ 0x68
 800b10e:	e7e9      	b.n	800b0e4 <_fwalk_sglue+0x10>

0800b110 <siprintf>:
 800b110:	b40e      	push	{r1, r2, r3}
 800b112:	b500      	push	{lr}
 800b114:	b09c      	sub	sp, #112	@ 0x70
 800b116:	ab1d      	add	r3, sp, #116	@ 0x74
 800b118:	9002      	str	r0, [sp, #8]
 800b11a:	9006      	str	r0, [sp, #24]
 800b11c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b120:	4809      	ldr	r0, [pc, #36]	@ (800b148 <siprintf+0x38>)
 800b122:	9107      	str	r1, [sp, #28]
 800b124:	9104      	str	r1, [sp, #16]
 800b126:	4909      	ldr	r1, [pc, #36]	@ (800b14c <siprintf+0x3c>)
 800b128:	f853 2b04 	ldr.w	r2, [r3], #4
 800b12c:	9105      	str	r1, [sp, #20]
 800b12e:	6800      	ldr	r0, [r0, #0]
 800b130:	9301      	str	r3, [sp, #4]
 800b132:	a902      	add	r1, sp, #8
 800b134:	f002 fb56 	bl	800d7e4 <_svfiprintf_r>
 800b138:	9b02      	ldr	r3, [sp, #8]
 800b13a:	2200      	movs	r2, #0
 800b13c:	701a      	strb	r2, [r3, #0]
 800b13e:	b01c      	add	sp, #112	@ 0x70
 800b140:	f85d eb04 	ldr.w	lr, [sp], #4
 800b144:	b003      	add	sp, #12
 800b146:	4770      	bx	lr
 800b148:	20000018 	.word	0x20000018
 800b14c:	ffff0208 	.word	0xffff0208

0800b150 <__sread>:
 800b150:	b510      	push	{r4, lr}
 800b152:	460c      	mov	r4, r1
 800b154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b158:	f000 f896 	bl	800b288 <_read_r>
 800b15c:	2800      	cmp	r0, #0
 800b15e:	bfab      	itete	ge
 800b160:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b162:	89a3      	ldrhlt	r3, [r4, #12]
 800b164:	181b      	addge	r3, r3, r0
 800b166:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b16a:	bfac      	ite	ge
 800b16c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b16e:	81a3      	strhlt	r3, [r4, #12]
 800b170:	bd10      	pop	{r4, pc}

0800b172 <__swrite>:
 800b172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b176:	461f      	mov	r7, r3
 800b178:	898b      	ldrh	r3, [r1, #12]
 800b17a:	05db      	lsls	r3, r3, #23
 800b17c:	4605      	mov	r5, r0
 800b17e:	460c      	mov	r4, r1
 800b180:	4616      	mov	r6, r2
 800b182:	d505      	bpl.n	800b190 <__swrite+0x1e>
 800b184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b188:	2302      	movs	r3, #2
 800b18a:	2200      	movs	r2, #0
 800b18c:	f000 f86a 	bl	800b264 <_lseek_r>
 800b190:	89a3      	ldrh	r3, [r4, #12]
 800b192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b196:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b19a:	81a3      	strh	r3, [r4, #12]
 800b19c:	4632      	mov	r2, r6
 800b19e:	463b      	mov	r3, r7
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1a6:	f000 b891 	b.w	800b2cc <_write_r>

0800b1aa <__sseek>:
 800b1aa:	b510      	push	{r4, lr}
 800b1ac:	460c      	mov	r4, r1
 800b1ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1b2:	f000 f857 	bl	800b264 <_lseek_r>
 800b1b6:	1c43      	adds	r3, r0, #1
 800b1b8:	89a3      	ldrh	r3, [r4, #12]
 800b1ba:	bf15      	itete	ne
 800b1bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b1be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b1c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b1c6:	81a3      	strheq	r3, [r4, #12]
 800b1c8:	bf18      	it	ne
 800b1ca:	81a3      	strhne	r3, [r4, #12]
 800b1cc:	bd10      	pop	{r4, pc}

0800b1ce <__sclose>:
 800b1ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1d2:	f000 b837 	b.w	800b244 <_close_r>

0800b1d6 <memset>:
 800b1d6:	4402      	add	r2, r0
 800b1d8:	4603      	mov	r3, r0
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d100      	bne.n	800b1e0 <memset+0xa>
 800b1de:	4770      	bx	lr
 800b1e0:	f803 1b01 	strb.w	r1, [r3], #1
 800b1e4:	e7f9      	b.n	800b1da <memset+0x4>

0800b1e6 <strcat>:
 800b1e6:	b510      	push	{r4, lr}
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	7814      	ldrb	r4, [r2, #0]
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	3201      	adds	r2, #1
 800b1f0:	2c00      	cmp	r4, #0
 800b1f2:	d1fa      	bne.n	800b1ea <strcat+0x4>
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1fe:	2a00      	cmp	r2, #0
 800b200:	d1f9      	bne.n	800b1f6 <strcat+0x10>
 800b202:	bd10      	pop	{r4, pc}

0800b204 <strdup>:
 800b204:	4b02      	ldr	r3, [pc, #8]	@ (800b210 <strdup+0xc>)
 800b206:	4601      	mov	r1, r0
 800b208:	6818      	ldr	r0, [r3, #0]
 800b20a:	f000 b803 	b.w	800b214 <_strdup_r>
 800b20e:	bf00      	nop
 800b210:	20000018 	.word	0x20000018

0800b214 <_strdup_r>:
 800b214:	b570      	push	{r4, r5, r6, lr}
 800b216:	4604      	mov	r4, r0
 800b218:	4608      	mov	r0, r1
 800b21a:	460d      	mov	r5, r1
 800b21c:	f7fa fe10 	bl	8005e40 <strlen>
 800b220:	1c46      	adds	r6, r0, #1
 800b222:	4631      	mov	r1, r6
 800b224:	4620      	mov	r0, r4
 800b226:	f7fe ffb9 	bl	800a19c <_malloc_r>
 800b22a:	4604      	mov	r4, r0
 800b22c:	b118      	cbz	r0, 800b236 <_strdup_r+0x22>
 800b22e:	4632      	mov	r2, r6
 800b230:	4629      	mov	r1, r5
 800b232:	f000 f897 	bl	800b364 <memcpy>
 800b236:	4620      	mov	r0, r4
 800b238:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b23c <_localeconv_r>:
 800b23c:	4800      	ldr	r0, [pc, #0]	@ (800b240 <_localeconv_r+0x4>)
 800b23e:	4770      	bx	lr
 800b240:	20000158 	.word	0x20000158

0800b244 <_close_r>:
 800b244:	b538      	push	{r3, r4, r5, lr}
 800b246:	4d06      	ldr	r5, [pc, #24]	@ (800b260 <_close_r+0x1c>)
 800b248:	2300      	movs	r3, #0
 800b24a:	4604      	mov	r4, r0
 800b24c:	4608      	mov	r0, r1
 800b24e:	602b      	str	r3, [r5, #0]
 800b250:	f7fc fedf 	bl	8008012 <_close>
 800b254:	1c43      	adds	r3, r0, #1
 800b256:	d102      	bne.n	800b25e <_close_r+0x1a>
 800b258:	682b      	ldr	r3, [r5, #0]
 800b25a:	b103      	cbz	r3, 800b25e <_close_r+0x1a>
 800b25c:	6023      	str	r3, [r4, #0]
 800b25e:	bd38      	pop	{r3, r4, r5, pc}
 800b260:	20001014 	.word	0x20001014

0800b264 <_lseek_r>:
 800b264:	b538      	push	{r3, r4, r5, lr}
 800b266:	4d07      	ldr	r5, [pc, #28]	@ (800b284 <_lseek_r+0x20>)
 800b268:	4604      	mov	r4, r0
 800b26a:	4608      	mov	r0, r1
 800b26c:	4611      	mov	r1, r2
 800b26e:	2200      	movs	r2, #0
 800b270:	602a      	str	r2, [r5, #0]
 800b272:	461a      	mov	r2, r3
 800b274:	f7fc fef4 	bl	8008060 <_lseek>
 800b278:	1c43      	adds	r3, r0, #1
 800b27a:	d102      	bne.n	800b282 <_lseek_r+0x1e>
 800b27c:	682b      	ldr	r3, [r5, #0]
 800b27e:	b103      	cbz	r3, 800b282 <_lseek_r+0x1e>
 800b280:	6023      	str	r3, [r4, #0]
 800b282:	bd38      	pop	{r3, r4, r5, pc}
 800b284:	20001014 	.word	0x20001014

0800b288 <_read_r>:
 800b288:	b538      	push	{r3, r4, r5, lr}
 800b28a:	4d07      	ldr	r5, [pc, #28]	@ (800b2a8 <_read_r+0x20>)
 800b28c:	4604      	mov	r4, r0
 800b28e:	4608      	mov	r0, r1
 800b290:	4611      	mov	r1, r2
 800b292:	2200      	movs	r2, #0
 800b294:	602a      	str	r2, [r5, #0]
 800b296:	461a      	mov	r2, r3
 800b298:	f7fc fe82 	bl	8007fa0 <_read>
 800b29c:	1c43      	adds	r3, r0, #1
 800b29e:	d102      	bne.n	800b2a6 <_read_r+0x1e>
 800b2a0:	682b      	ldr	r3, [r5, #0]
 800b2a2:	b103      	cbz	r3, 800b2a6 <_read_r+0x1e>
 800b2a4:	6023      	str	r3, [r4, #0]
 800b2a6:	bd38      	pop	{r3, r4, r5, pc}
 800b2a8:	20001014 	.word	0x20001014

0800b2ac <_sbrk_r>:
 800b2ac:	b538      	push	{r3, r4, r5, lr}
 800b2ae:	4d06      	ldr	r5, [pc, #24]	@ (800b2c8 <_sbrk_r+0x1c>)
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	4608      	mov	r0, r1
 800b2b6:	602b      	str	r3, [r5, #0]
 800b2b8:	f7fc fee0 	bl	800807c <_sbrk>
 800b2bc:	1c43      	adds	r3, r0, #1
 800b2be:	d102      	bne.n	800b2c6 <_sbrk_r+0x1a>
 800b2c0:	682b      	ldr	r3, [r5, #0]
 800b2c2:	b103      	cbz	r3, 800b2c6 <_sbrk_r+0x1a>
 800b2c4:	6023      	str	r3, [r4, #0]
 800b2c6:	bd38      	pop	{r3, r4, r5, pc}
 800b2c8:	20001014 	.word	0x20001014

0800b2cc <_write_r>:
 800b2cc:	b538      	push	{r3, r4, r5, lr}
 800b2ce:	4d07      	ldr	r5, [pc, #28]	@ (800b2ec <_write_r+0x20>)
 800b2d0:	4604      	mov	r4, r0
 800b2d2:	4608      	mov	r0, r1
 800b2d4:	4611      	mov	r1, r2
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	602a      	str	r2, [r5, #0]
 800b2da:	461a      	mov	r2, r3
 800b2dc:	f7fc fe7d 	bl	8007fda <_write>
 800b2e0:	1c43      	adds	r3, r0, #1
 800b2e2:	d102      	bne.n	800b2ea <_write_r+0x1e>
 800b2e4:	682b      	ldr	r3, [r5, #0]
 800b2e6:	b103      	cbz	r3, 800b2ea <_write_r+0x1e>
 800b2e8:	6023      	str	r3, [r4, #0]
 800b2ea:	bd38      	pop	{r3, r4, r5, pc}
 800b2ec:	20001014 	.word	0x20001014

0800b2f0 <__errno>:
 800b2f0:	4b01      	ldr	r3, [pc, #4]	@ (800b2f8 <__errno+0x8>)
 800b2f2:	6818      	ldr	r0, [r3, #0]
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop
 800b2f8:	20000018 	.word	0x20000018

0800b2fc <__libc_init_array>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	4d0d      	ldr	r5, [pc, #52]	@ (800b334 <__libc_init_array+0x38>)
 800b300:	4c0d      	ldr	r4, [pc, #52]	@ (800b338 <__libc_init_array+0x3c>)
 800b302:	1b64      	subs	r4, r4, r5
 800b304:	10a4      	asrs	r4, r4, #2
 800b306:	2600      	movs	r6, #0
 800b308:	42a6      	cmp	r6, r4
 800b30a:	d109      	bne.n	800b320 <__libc_init_array+0x24>
 800b30c:	4d0b      	ldr	r5, [pc, #44]	@ (800b33c <__libc_init_array+0x40>)
 800b30e:	4c0c      	ldr	r4, [pc, #48]	@ (800b340 <__libc_init_array+0x44>)
 800b310:	f003 fabc 	bl	800e88c <_init>
 800b314:	1b64      	subs	r4, r4, r5
 800b316:	10a4      	asrs	r4, r4, #2
 800b318:	2600      	movs	r6, #0
 800b31a:	42a6      	cmp	r6, r4
 800b31c:	d105      	bne.n	800b32a <__libc_init_array+0x2e>
 800b31e:	bd70      	pop	{r4, r5, r6, pc}
 800b320:	f855 3b04 	ldr.w	r3, [r5], #4
 800b324:	4798      	blx	r3
 800b326:	3601      	adds	r6, #1
 800b328:	e7ee      	b.n	800b308 <__libc_init_array+0xc>
 800b32a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b32e:	4798      	blx	r3
 800b330:	3601      	adds	r6, #1
 800b332:	e7f2      	b.n	800b31a <__libc_init_array+0x1e>
 800b334:	0800fbf4 	.word	0x0800fbf4
 800b338:	0800fbf4 	.word	0x0800fbf4
 800b33c:	0800fbf4 	.word	0x0800fbf4
 800b340:	0800fbf8 	.word	0x0800fbf8

0800b344 <__retarget_lock_init_recursive>:
 800b344:	4770      	bx	lr

0800b346 <__retarget_lock_acquire_recursive>:
 800b346:	4770      	bx	lr

0800b348 <__retarget_lock_release_recursive>:
 800b348:	4770      	bx	lr

0800b34a <strcpy>:
 800b34a:	4603      	mov	r3, r0
 800b34c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b350:	f803 2b01 	strb.w	r2, [r3], #1
 800b354:	2a00      	cmp	r2, #0
 800b356:	d1f9      	bne.n	800b34c <strcpy+0x2>
 800b358:	4770      	bx	lr

0800b35a <__aeabi_memcpy>:
 800b35a:	f000 b803 	b.w	800b364 <memcpy>

0800b35e <__aeabi_memclr>:
 800b35e:	2200      	movs	r2, #0
 800b360:	f7fa bd76 	b.w	8005e50 <__aeabi_memset>

0800b364 <memcpy>:
 800b364:	440a      	add	r2, r1
 800b366:	4291      	cmp	r1, r2
 800b368:	f100 33ff 	add.w	r3, r0, #4294967295
 800b36c:	d100      	bne.n	800b370 <memcpy+0xc>
 800b36e:	4770      	bx	lr
 800b370:	b510      	push	{r4, lr}
 800b372:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b376:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b37a:	4291      	cmp	r1, r2
 800b37c:	d1f9      	bne.n	800b372 <memcpy+0xe>
 800b37e:	bd10      	pop	{r4, pc}

0800b380 <nanf>:
 800b380:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b388 <nanf+0x8>
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop
 800b388:	7fc00000 	.word	0x7fc00000

0800b38c <quorem>:
 800b38c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b390:	6903      	ldr	r3, [r0, #16]
 800b392:	690c      	ldr	r4, [r1, #16]
 800b394:	42a3      	cmp	r3, r4
 800b396:	4607      	mov	r7, r0
 800b398:	db7e      	blt.n	800b498 <quorem+0x10c>
 800b39a:	3c01      	subs	r4, #1
 800b39c:	f101 0814 	add.w	r8, r1, #20
 800b3a0:	00a3      	lsls	r3, r4, #2
 800b3a2:	f100 0514 	add.w	r5, r0, #20
 800b3a6:	9300      	str	r3, [sp, #0]
 800b3a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3ac:	9301      	str	r3, [sp, #4]
 800b3ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b3b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b3be:	fbb2 f6f3 	udiv	r6, r2, r3
 800b3c2:	d32e      	bcc.n	800b422 <quorem+0x96>
 800b3c4:	f04f 0a00 	mov.w	sl, #0
 800b3c8:	46c4      	mov	ip, r8
 800b3ca:	46ae      	mov	lr, r5
 800b3cc:	46d3      	mov	fp, sl
 800b3ce:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b3d2:	b298      	uxth	r0, r3
 800b3d4:	fb06 a000 	mla	r0, r6, r0, sl
 800b3d8:	0c02      	lsrs	r2, r0, #16
 800b3da:	0c1b      	lsrs	r3, r3, #16
 800b3dc:	fb06 2303 	mla	r3, r6, r3, r2
 800b3e0:	f8de 2000 	ldr.w	r2, [lr]
 800b3e4:	b280      	uxth	r0, r0
 800b3e6:	b292      	uxth	r2, r2
 800b3e8:	1a12      	subs	r2, r2, r0
 800b3ea:	445a      	add	r2, fp
 800b3ec:	f8de 0000 	ldr.w	r0, [lr]
 800b3f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b3fa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b3fe:	b292      	uxth	r2, r2
 800b400:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b404:	45e1      	cmp	r9, ip
 800b406:	f84e 2b04 	str.w	r2, [lr], #4
 800b40a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b40e:	d2de      	bcs.n	800b3ce <quorem+0x42>
 800b410:	9b00      	ldr	r3, [sp, #0]
 800b412:	58eb      	ldr	r3, [r5, r3]
 800b414:	b92b      	cbnz	r3, 800b422 <quorem+0x96>
 800b416:	9b01      	ldr	r3, [sp, #4]
 800b418:	3b04      	subs	r3, #4
 800b41a:	429d      	cmp	r5, r3
 800b41c:	461a      	mov	r2, r3
 800b41e:	d32f      	bcc.n	800b480 <quorem+0xf4>
 800b420:	613c      	str	r4, [r7, #16]
 800b422:	4638      	mov	r0, r7
 800b424:	f001 f90e 	bl	800c644 <__mcmp>
 800b428:	2800      	cmp	r0, #0
 800b42a:	db25      	blt.n	800b478 <quorem+0xec>
 800b42c:	4629      	mov	r1, r5
 800b42e:	2000      	movs	r0, #0
 800b430:	f858 2b04 	ldr.w	r2, [r8], #4
 800b434:	f8d1 c000 	ldr.w	ip, [r1]
 800b438:	fa1f fe82 	uxth.w	lr, r2
 800b43c:	fa1f f38c 	uxth.w	r3, ip
 800b440:	eba3 030e 	sub.w	r3, r3, lr
 800b444:	4403      	add	r3, r0
 800b446:	0c12      	lsrs	r2, r2, #16
 800b448:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b44c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b450:	b29b      	uxth	r3, r3
 800b452:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b456:	45c1      	cmp	r9, r8
 800b458:	f841 3b04 	str.w	r3, [r1], #4
 800b45c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b460:	d2e6      	bcs.n	800b430 <quorem+0xa4>
 800b462:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b466:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b46a:	b922      	cbnz	r2, 800b476 <quorem+0xea>
 800b46c:	3b04      	subs	r3, #4
 800b46e:	429d      	cmp	r5, r3
 800b470:	461a      	mov	r2, r3
 800b472:	d30b      	bcc.n	800b48c <quorem+0x100>
 800b474:	613c      	str	r4, [r7, #16]
 800b476:	3601      	adds	r6, #1
 800b478:	4630      	mov	r0, r6
 800b47a:	b003      	add	sp, #12
 800b47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b480:	6812      	ldr	r2, [r2, #0]
 800b482:	3b04      	subs	r3, #4
 800b484:	2a00      	cmp	r2, #0
 800b486:	d1cb      	bne.n	800b420 <quorem+0x94>
 800b488:	3c01      	subs	r4, #1
 800b48a:	e7c6      	b.n	800b41a <quorem+0x8e>
 800b48c:	6812      	ldr	r2, [r2, #0]
 800b48e:	3b04      	subs	r3, #4
 800b490:	2a00      	cmp	r2, #0
 800b492:	d1ef      	bne.n	800b474 <quorem+0xe8>
 800b494:	3c01      	subs	r4, #1
 800b496:	e7ea      	b.n	800b46e <quorem+0xe2>
 800b498:	2000      	movs	r0, #0
 800b49a:	e7ee      	b.n	800b47a <quorem+0xee>
 800b49c:	0000      	movs	r0, r0
	...

0800b4a0 <_dtoa_r>:
 800b4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a4:	69c7      	ldr	r7, [r0, #28]
 800b4a6:	b099      	sub	sp, #100	@ 0x64
 800b4a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b4ac:	ec55 4b10 	vmov	r4, r5, d0
 800b4b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b4b2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b4b4:	4683      	mov	fp, r0
 800b4b6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b4b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b4ba:	b97f      	cbnz	r7, 800b4dc <_dtoa_r+0x3c>
 800b4bc:	2010      	movs	r0, #16
 800b4be:	f7fe fe3b 	bl	800a138 <malloc>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	f8cb 001c 	str.w	r0, [fp, #28]
 800b4c8:	b920      	cbnz	r0, 800b4d4 <_dtoa_r+0x34>
 800b4ca:	4ba7      	ldr	r3, [pc, #668]	@ (800b768 <_dtoa_r+0x2c8>)
 800b4cc:	21ef      	movs	r1, #239	@ 0xef
 800b4ce:	48a7      	ldr	r0, [pc, #668]	@ (800b76c <_dtoa_r+0x2cc>)
 800b4d0:	f002 fb66 	bl	800dba0 <__assert_func>
 800b4d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b4d8:	6007      	str	r7, [r0, #0]
 800b4da:	60c7      	str	r7, [r0, #12]
 800b4dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b4e0:	6819      	ldr	r1, [r3, #0]
 800b4e2:	b159      	cbz	r1, 800b4fc <_dtoa_r+0x5c>
 800b4e4:	685a      	ldr	r2, [r3, #4]
 800b4e6:	604a      	str	r2, [r1, #4]
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	4093      	lsls	r3, r2
 800b4ec:	608b      	str	r3, [r1, #8]
 800b4ee:	4658      	mov	r0, fp
 800b4f0:	f000 fe24 	bl	800c13c <_Bfree>
 800b4f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	601a      	str	r2, [r3, #0]
 800b4fc:	1e2b      	subs	r3, r5, #0
 800b4fe:	bfb9      	ittee	lt
 800b500:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b504:	9303      	strlt	r3, [sp, #12]
 800b506:	2300      	movge	r3, #0
 800b508:	6033      	strge	r3, [r6, #0]
 800b50a:	9f03      	ldr	r7, [sp, #12]
 800b50c:	4b98      	ldr	r3, [pc, #608]	@ (800b770 <_dtoa_r+0x2d0>)
 800b50e:	bfbc      	itt	lt
 800b510:	2201      	movlt	r2, #1
 800b512:	6032      	strlt	r2, [r6, #0]
 800b514:	43bb      	bics	r3, r7
 800b516:	d112      	bne.n	800b53e <_dtoa_r+0x9e>
 800b518:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b51a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b51e:	6013      	str	r3, [r2, #0]
 800b520:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b524:	4323      	orrs	r3, r4
 800b526:	f000 854d 	beq.w	800bfc4 <_dtoa_r+0xb24>
 800b52a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b52c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b784 <_dtoa_r+0x2e4>
 800b530:	2b00      	cmp	r3, #0
 800b532:	f000 854f 	beq.w	800bfd4 <_dtoa_r+0xb34>
 800b536:	f10a 0303 	add.w	r3, sl, #3
 800b53a:	f000 bd49 	b.w	800bfd0 <_dtoa_r+0xb30>
 800b53e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b542:	2200      	movs	r2, #0
 800b544:	ec51 0b17 	vmov	r0, r1, d7
 800b548:	2300      	movs	r3, #0
 800b54a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b54e:	f7fb f8f1 	bl	8006734 <__aeabi_dcmpeq>
 800b552:	4680      	mov	r8, r0
 800b554:	b158      	cbz	r0, 800b56e <_dtoa_r+0xce>
 800b556:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b558:	2301      	movs	r3, #1
 800b55a:	6013      	str	r3, [r2, #0]
 800b55c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b55e:	b113      	cbz	r3, 800b566 <_dtoa_r+0xc6>
 800b560:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b562:	4b84      	ldr	r3, [pc, #528]	@ (800b774 <_dtoa_r+0x2d4>)
 800b564:	6013      	str	r3, [r2, #0]
 800b566:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b788 <_dtoa_r+0x2e8>
 800b56a:	f000 bd33 	b.w	800bfd4 <_dtoa_r+0xb34>
 800b56e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b572:	aa16      	add	r2, sp, #88	@ 0x58
 800b574:	a917      	add	r1, sp, #92	@ 0x5c
 800b576:	4658      	mov	r0, fp
 800b578:	f001 f984 	bl	800c884 <__d2b>
 800b57c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b580:	4681      	mov	r9, r0
 800b582:	2e00      	cmp	r6, #0
 800b584:	d077      	beq.n	800b676 <_dtoa_r+0x1d6>
 800b586:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b588:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b58c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b590:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b594:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b598:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b59c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	4b74      	ldr	r3, [pc, #464]	@ (800b778 <_dtoa_r+0x2d8>)
 800b5a6:	f7fa fca5 	bl	8005ef4 <__aeabi_dsub>
 800b5aa:	a369      	add	r3, pc, #420	@ (adr r3, 800b750 <_dtoa_r+0x2b0>)
 800b5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b0:	f7fa fe58 	bl	8006264 <__aeabi_dmul>
 800b5b4:	a368      	add	r3, pc, #416	@ (adr r3, 800b758 <_dtoa_r+0x2b8>)
 800b5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ba:	f7fa fc9d 	bl	8005ef8 <__adddf3>
 800b5be:	4604      	mov	r4, r0
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	460d      	mov	r5, r1
 800b5c4:	f7fa fde4 	bl	8006190 <__aeabi_i2d>
 800b5c8:	a365      	add	r3, pc, #404	@ (adr r3, 800b760 <_dtoa_r+0x2c0>)
 800b5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ce:	f7fa fe49 	bl	8006264 <__aeabi_dmul>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	4629      	mov	r1, r5
 800b5da:	f7fa fc8d 	bl	8005ef8 <__adddf3>
 800b5de:	4604      	mov	r4, r0
 800b5e0:	460d      	mov	r5, r1
 800b5e2:	f7fb f8ef 	bl	80067c4 <__aeabi_d2iz>
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	4607      	mov	r7, r0
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	f7fb f8aa 	bl	8006748 <__aeabi_dcmplt>
 800b5f4:	b140      	cbz	r0, 800b608 <_dtoa_r+0x168>
 800b5f6:	4638      	mov	r0, r7
 800b5f8:	f7fa fdca 	bl	8006190 <__aeabi_i2d>
 800b5fc:	4622      	mov	r2, r4
 800b5fe:	462b      	mov	r3, r5
 800b600:	f7fb f898 	bl	8006734 <__aeabi_dcmpeq>
 800b604:	b900      	cbnz	r0, 800b608 <_dtoa_r+0x168>
 800b606:	3f01      	subs	r7, #1
 800b608:	2f16      	cmp	r7, #22
 800b60a:	d851      	bhi.n	800b6b0 <_dtoa_r+0x210>
 800b60c:	4b5b      	ldr	r3, [pc, #364]	@ (800b77c <_dtoa_r+0x2dc>)
 800b60e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b616:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b61a:	f7fb f895 	bl	8006748 <__aeabi_dcmplt>
 800b61e:	2800      	cmp	r0, #0
 800b620:	d048      	beq.n	800b6b4 <_dtoa_r+0x214>
 800b622:	3f01      	subs	r7, #1
 800b624:	2300      	movs	r3, #0
 800b626:	9312      	str	r3, [sp, #72]	@ 0x48
 800b628:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b62a:	1b9b      	subs	r3, r3, r6
 800b62c:	1e5a      	subs	r2, r3, #1
 800b62e:	bf44      	itt	mi
 800b630:	f1c3 0801 	rsbmi	r8, r3, #1
 800b634:	2300      	movmi	r3, #0
 800b636:	9208      	str	r2, [sp, #32]
 800b638:	bf54      	ite	pl
 800b63a:	f04f 0800 	movpl.w	r8, #0
 800b63e:	9308      	strmi	r3, [sp, #32]
 800b640:	2f00      	cmp	r7, #0
 800b642:	db39      	blt.n	800b6b8 <_dtoa_r+0x218>
 800b644:	9b08      	ldr	r3, [sp, #32]
 800b646:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b648:	443b      	add	r3, r7
 800b64a:	9308      	str	r3, [sp, #32]
 800b64c:	2300      	movs	r3, #0
 800b64e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b652:	2b09      	cmp	r3, #9
 800b654:	d864      	bhi.n	800b720 <_dtoa_r+0x280>
 800b656:	2b05      	cmp	r3, #5
 800b658:	bfc4      	itt	gt
 800b65a:	3b04      	subgt	r3, #4
 800b65c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b65e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b660:	f1a3 0302 	sub.w	r3, r3, #2
 800b664:	bfcc      	ite	gt
 800b666:	2400      	movgt	r4, #0
 800b668:	2401      	movle	r4, #1
 800b66a:	2b03      	cmp	r3, #3
 800b66c:	d863      	bhi.n	800b736 <_dtoa_r+0x296>
 800b66e:	e8df f003 	tbb	[pc, r3]
 800b672:	372a      	.short	0x372a
 800b674:	5535      	.short	0x5535
 800b676:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b67a:	441e      	add	r6, r3
 800b67c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b680:	2b20      	cmp	r3, #32
 800b682:	bfc1      	itttt	gt
 800b684:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b688:	409f      	lslgt	r7, r3
 800b68a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b68e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b692:	bfd6      	itet	le
 800b694:	f1c3 0320 	rsble	r3, r3, #32
 800b698:	ea47 0003 	orrgt.w	r0, r7, r3
 800b69c:	fa04 f003 	lslle.w	r0, r4, r3
 800b6a0:	f7fa fd66 	bl	8006170 <__aeabi_ui2d>
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b6aa:	3e01      	subs	r6, #1
 800b6ac:	9214      	str	r2, [sp, #80]	@ 0x50
 800b6ae:	e777      	b.n	800b5a0 <_dtoa_r+0x100>
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	e7b8      	b.n	800b626 <_dtoa_r+0x186>
 800b6b4:	9012      	str	r0, [sp, #72]	@ 0x48
 800b6b6:	e7b7      	b.n	800b628 <_dtoa_r+0x188>
 800b6b8:	427b      	negs	r3, r7
 800b6ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6bc:	2300      	movs	r3, #0
 800b6be:	eba8 0807 	sub.w	r8, r8, r7
 800b6c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b6c4:	e7c4      	b.n	800b650 <_dtoa_r+0x1b0>
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	dc35      	bgt.n	800b73c <_dtoa_r+0x29c>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	9307      	str	r3, [sp, #28]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b6da:	e00b      	b.n	800b6f4 <_dtoa_r+0x254>
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e7f3      	b.n	800b6c8 <_dtoa_r+0x228>
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6e6:	18fb      	adds	r3, r7, r3
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	9307      	str	r3, [sp, #28]
 800b6f0:	bfb8      	it	lt
 800b6f2:	2301      	movlt	r3, #1
 800b6f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b6f8:	2100      	movs	r1, #0
 800b6fa:	2204      	movs	r2, #4
 800b6fc:	f102 0514 	add.w	r5, r2, #20
 800b700:	429d      	cmp	r5, r3
 800b702:	d91f      	bls.n	800b744 <_dtoa_r+0x2a4>
 800b704:	6041      	str	r1, [r0, #4]
 800b706:	4658      	mov	r0, fp
 800b708:	f000 fcd8 	bl	800c0bc <_Balloc>
 800b70c:	4682      	mov	sl, r0
 800b70e:	2800      	cmp	r0, #0
 800b710:	d13c      	bne.n	800b78c <_dtoa_r+0x2ec>
 800b712:	4b1b      	ldr	r3, [pc, #108]	@ (800b780 <_dtoa_r+0x2e0>)
 800b714:	4602      	mov	r2, r0
 800b716:	f240 11af 	movw	r1, #431	@ 0x1af
 800b71a:	e6d8      	b.n	800b4ce <_dtoa_r+0x2e>
 800b71c:	2301      	movs	r3, #1
 800b71e:	e7e0      	b.n	800b6e2 <_dtoa_r+0x242>
 800b720:	2401      	movs	r4, #1
 800b722:	2300      	movs	r3, #0
 800b724:	9309      	str	r3, [sp, #36]	@ 0x24
 800b726:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b728:	f04f 33ff 	mov.w	r3, #4294967295
 800b72c:	9300      	str	r3, [sp, #0]
 800b72e:	9307      	str	r3, [sp, #28]
 800b730:	2200      	movs	r2, #0
 800b732:	2312      	movs	r3, #18
 800b734:	e7d0      	b.n	800b6d8 <_dtoa_r+0x238>
 800b736:	2301      	movs	r3, #1
 800b738:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b73a:	e7f5      	b.n	800b728 <_dtoa_r+0x288>
 800b73c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	9307      	str	r3, [sp, #28]
 800b742:	e7d7      	b.n	800b6f4 <_dtoa_r+0x254>
 800b744:	3101      	adds	r1, #1
 800b746:	0052      	lsls	r2, r2, #1
 800b748:	e7d8      	b.n	800b6fc <_dtoa_r+0x25c>
 800b74a:	bf00      	nop
 800b74c:	f3af 8000 	nop.w
 800b750:	636f4361 	.word	0x636f4361
 800b754:	3fd287a7 	.word	0x3fd287a7
 800b758:	8b60c8b3 	.word	0x8b60c8b3
 800b75c:	3fc68a28 	.word	0x3fc68a28
 800b760:	509f79fb 	.word	0x509f79fb
 800b764:	3fd34413 	.word	0x3fd34413
 800b768:	0800f69f 	.word	0x0800f69f
 800b76c:	0800f6b6 	.word	0x0800f6b6
 800b770:	7ff00000 	.word	0x7ff00000
 800b774:	0800f66a 	.word	0x0800f66a
 800b778:	3ff80000 	.word	0x3ff80000
 800b77c:	0800f7b0 	.word	0x0800f7b0
 800b780:	0800f70e 	.word	0x0800f70e
 800b784:	0800f69b 	.word	0x0800f69b
 800b788:	0800f669 	.word	0x0800f669
 800b78c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b790:	6018      	str	r0, [r3, #0]
 800b792:	9b07      	ldr	r3, [sp, #28]
 800b794:	2b0e      	cmp	r3, #14
 800b796:	f200 80a4 	bhi.w	800b8e2 <_dtoa_r+0x442>
 800b79a:	2c00      	cmp	r4, #0
 800b79c:	f000 80a1 	beq.w	800b8e2 <_dtoa_r+0x442>
 800b7a0:	2f00      	cmp	r7, #0
 800b7a2:	dd33      	ble.n	800b80c <_dtoa_r+0x36c>
 800b7a4:	4bad      	ldr	r3, [pc, #692]	@ (800ba5c <_dtoa_r+0x5bc>)
 800b7a6:	f007 020f 	and.w	r2, r7, #15
 800b7aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7ae:	ed93 7b00 	vldr	d7, [r3]
 800b7b2:	05f8      	lsls	r0, r7, #23
 800b7b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b7b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b7bc:	d516      	bpl.n	800b7ec <_dtoa_r+0x34c>
 800b7be:	4ba8      	ldr	r3, [pc, #672]	@ (800ba60 <_dtoa_r+0x5c0>)
 800b7c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b7c8:	f7fa fe76 	bl	80064b8 <__aeabi_ddiv>
 800b7cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7d0:	f004 040f 	and.w	r4, r4, #15
 800b7d4:	2603      	movs	r6, #3
 800b7d6:	4da2      	ldr	r5, [pc, #648]	@ (800ba60 <_dtoa_r+0x5c0>)
 800b7d8:	b954      	cbnz	r4, 800b7f0 <_dtoa_r+0x350>
 800b7da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7e2:	f7fa fe69 	bl	80064b8 <__aeabi_ddiv>
 800b7e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7ea:	e028      	b.n	800b83e <_dtoa_r+0x39e>
 800b7ec:	2602      	movs	r6, #2
 800b7ee:	e7f2      	b.n	800b7d6 <_dtoa_r+0x336>
 800b7f0:	07e1      	lsls	r1, r4, #31
 800b7f2:	d508      	bpl.n	800b806 <_dtoa_r+0x366>
 800b7f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b7fc:	f7fa fd32 	bl	8006264 <__aeabi_dmul>
 800b800:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b804:	3601      	adds	r6, #1
 800b806:	1064      	asrs	r4, r4, #1
 800b808:	3508      	adds	r5, #8
 800b80a:	e7e5      	b.n	800b7d8 <_dtoa_r+0x338>
 800b80c:	f000 80d2 	beq.w	800b9b4 <_dtoa_r+0x514>
 800b810:	427c      	negs	r4, r7
 800b812:	4b92      	ldr	r3, [pc, #584]	@ (800ba5c <_dtoa_r+0x5bc>)
 800b814:	4d92      	ldr	r5, [pc, #584]	@ (800ba60 <_dtoa_r+0x5c0>)
 800b816:	f004 020f 	and.w	r2, r4, #15
 800b81a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b822:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b826:	f7fa fd1d 	bl	8006264 <__aeabi_dmul>
 800b82a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b82e:	1124      	asrs	r4, r4, #4
 800b830:	2300      	movs	r3, #0
 800b832:	2602      	movs	r6, #2
 800b834:	2c00      	cmp	r4, #0
 800b836:	f040 80b2 	bne.w	800b99e <_dtoa_r+0x4fe>
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d1d3      	bne.n	800b7e6 <_dtoa_r+0x346>
 800b83e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b840:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b844:	2b00      	cmp	r3, #0
 800b846:	f000 80b7 	beq.w	800b9b8 <_dtoa_r+0x518>
 800b84a:	4b86      	ldr	r3, [pc, #536]	@ (800ba64 <_dtoa_r+0x5c4>)
 800b84c:	2200      	movs	r2, #0
 800b84e:	4620      	mov	r0, r4
 800b850:	4629      	mov	r1, r5
 800b852:	f7fa ff79 	bl	8006748 <__aeabi_dcmplt>
 800b856:	2800      	cmp	r0, #0
 800b858:	f000 80ae 	beq.w	800b9b8 <_dtoa_r+0x518>
 800b85c:	9b07      	ldr	r3, [sp, #28]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	f000 80aa 	beq.w	800b9b8 <_dtoa_r+0x518>
 800b864:	9b00      	ldr	r3, [sp, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	dd37      	ble.n	800b8da <_dtoa_r+0x43a>
 800b86a:	1e7b      	subs	r3, r7, #1
 800b86c:	9304      	str	r3, [sp, #16]
 800b86e:	4620      	mov	r0, r4
 800b870:	4b7d      	ldr	r3, [pc, #500]	@ (800ba68 <_dtoa_r+0x5c8>)
 800b872:	2200      	movs	r2, #0
 800b874:	4629      	mov	r1, r5
 800b876:	f7fa fcf5 	bl	8006264 <__aeabi_dmul>
 800b87a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b87e:	9c00      	ldr	r4, [sp, #0]
 800b880:	3601      	adds	r6, #1
 800b882:	4630      	mov	r0, r6
 800b884:	f7fa fc84 	bl	8006190 <__aeabi_i2d>
 800b888:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b88c:	f7fa fcea 	bl	8006264 <__aeabi_dmul>
 800b890:	4b76      	ldr	r3, [pc, #472]	@ (800ba6c <_dtoa_r+0x5cc>)
 800b892:	2200      	movs	r2, #0
 800b894:	f7fa fb30 	bl	8005ef8 <__adddf3>
 800b898:	4605      	mov	r5, r0
 800b89a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b89e:	2c00      	cmp	r4, #0
 800b8a0:	f040 808d 	bne.w	800b9be <_dtoa_r+0x51e>
 800b8a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8a8:	4b71      	ldr	r3, [pc, #452]	@ (800ba70 <_dtoa_r+0x5d0>)
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f7fa fb22 	bl	8005ef4 <__aeabi_dsub>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b8b8:	462a      	mov	r2, r5
 800b8ba:	4633      	mov	r3, r6
 800b8bc:	f7fa ff62 	bl	8006784 <__aeabi_dcmpgt>
 800b8c0:	2800      	cmp	r0, #0
 800b8c2:	f040 828b 	bne.w	800bddc <_dtoa_r+0x93c>
 800b8c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8ca:	462a      	mov	r2, r5
 800b8cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b8d0:	f7fa ff3a 	bl	8006748 <__aeabi_dcmplt>
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	f040 8128 	bne.w	800bb2a <_dtoa_r+0x68a>
 800b8da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b8de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b8e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f2c0 815a 	blt.w	800bb9e <_dtoa_r+0x6fe>
 800b8ea:	2f0e      	cmp	r7, #14
 800b8ec:	f300 8157 	bgt.w	800bb9e <_dtoa_r+0x6fe>
 800b8f0:	4b5a      	ldr	r3, [pc, #360]	@ (800ba5c <_dtoa_r+0x5bc>)
 800b8f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b8f6:	ed93 7b00 	vldr	d7, [r3]
 800b8fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	ed8d 7b00 	vstr	d7, [sp]
 800b902:	da03      	bge.n	800b90c <_dtoa_r+0x46c>
 800b904:	9b07      	ldr	r3, [sp, #28]
 800b906:	2b00      	cmp	r3, #0
 800b908:	f340 8101 	ble.w	800bb0e <_dtoa_r+0x66e>
 800b90c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b910:	4656      	mov	r6, sl
 800b912:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b916:	4620      	mov	r0, r4
 800b918:	4629      	mov	r1, r5
 800b91a:	f7fa fdcd 	bl	80064b8 <__aeabi_ddiv>
 800b91e:	f7fa ff51 	bl	80067c4 <__aeabi_d2iz>
 800b922:	4680      	mov	r8, r0
 800b924:	f7fa fc34 	bl	8006190 <__aeabi_i2d>
 800b928:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b92c:	f7fa fc9a 	bl	8006264 <__aeabi_dmul>
 800b930:	4602      	mov	r2, r0
 800b932:	460b      	mov	r3, r1
 800b934:	4620      	mov	r0, r4
 800b936:	4629      	mov	r1, r5
 800b938:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b93c:	f7fa fada 	bl	8005ef4 <__aeabi_dsub>
 800b940:	f806 4b01 	strb.w	r4, [r6], #1
 800b944:	9d07      	ldr	r5, [sp, #28]
 800b946:	eba6 040a 	sub.w	r4, r6, sl
 800b94a:	42a5      	cmp	r5, r4
 800b94c:	4602      	mov	r2, r0
 800b94e:	460b      	mov	r3, r1
 800b950:	f040 8117 	bne.w	800bb82 <_dtoa_r+0x6e2>
 800b954:	f7fa fad0 	bl	8005ef8 <__adddf3>
 800b958:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b95c:	4604      	mov	r4, r0
 800b95e:	460d      	mov	r5, r1
 800b960:	f7fa ff10 	bl	8006784 <__aeabi_dcmpgt>
 800b964:	2800      	cmp	r0, #0
 800b966:	f040 80f9 	bne.w	800bb5c <_dtoa_r+0x6bc>
 800b96a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b96e:	4620      	mov	r0, r4
 800b970:	4629      	mov	r1, r5
 800b972:	f7fa fedf 	bl	8006734 <__aeabi_dcmpeq>
 800b976:	b118      	cbz	r0, 800b980 <_dtoa_r+0x4e0>
 800b978:	f018 0f01 	tst.w	r8, #1
 800b97c:	f040 80ee 	bne.w	800bb5c <_dtoa_r+0x6bc>
 800b980:	4649      	mov	r1, r9
 800b982:	4658      	mov	r0, fp
 800b984:	f000 fbda 	bl	800c13c <_Bfree>
 800b988:	2300      	movs	r3, #0
 800b98a:	7033      	strb	r3, [r6, #0]
 800b98c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b98e:	3701      	adds	r7, #1
 800b990:	601f      	str	r7, [r3, #0]
 800b992:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b994:	2b00      	cmp	r3, #0
 800b996:	f000 831d 	beq.w	800bfd4 <_dtoa_r+0xb34>
 800b99a:	601e      	str	r6, [r3, #0]
 800b99c:	e31a      	b.n	800bfd4 <_dtoa_r+0xb34>
 800b99e:	07e2      	lsls	r2, r4, #31
 800b9a0:	d505      	bpl.n	800b9ae <_dtoa_r+0x50e>
 800b9a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b9a6:	f7fa fc5d 	bl	8006264 <__aeabi_dmul>
 800b9aa:	3601      	adds	r6, #1
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	1064      	asrs	r4, r4, #1
 800b9b0:	3508      	adds	r5, #8
 800b9b2:	e73f      	b.n	800b834 <_dtoa_r+0x394>
 800b9b4:	2602      	movs	r6, #2
 800b9b6:	e742      	b.n	800b83e <_dtoa_r+0x39e>
 800b9b8:	9c07      	ldr	r4, [sp, #28]
 800b9ba:	9704      	str	r7, [sp, #16]
 800b9bc:	e761      	b.n	800b882 <_dtoa_r+0x3e2>
 800b9be:	4b27      	ldr	r3, [pc, #156]	@ (800ba5c <_dtoa_r+0x5bc>)
 800b9c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b9c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b9c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b9ca:	4454      	add	r4, sl
 800b9cc:	2900      	cmp	r1, #0
 800b9ce:	d053      	beq.n	800ba78 <_dtoa_r+0x5d8>
 800b9d0:	4928      	ldr	r1, [pc, #160]	@ (800ba74 <_dtoa_r+0x5d4>)
 800b9d2:	2000      	movs	r0, #0
 800b9d4:	f7fa fd70 	bl	80064b8 <__aeabi_ddiv>
 800b9d8:	4633      	mov	r3, r6
 800b9da:	462a      	mov	r2, r5
 800b9dc:	f7fa fa8a 	bl	8005ef4 <__aeabi_dsub>
 800b9e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b9e4:	4656      	mov	r6, sl
 800b9e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9ea:	f7fa feeb 	bl	80067c4 <__aeabi_d2iz>
 800b9ee:	4605      	mov	r5, r0
 800b9f0:	f7fa fbce 	bl	8006190 <__aeabi_i2d>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9fc:	f7fa fa7a 	bl	8005ef4 <__aeabi_dsub>
 800ba00:	3530      	adds	r5, #48	@ 0x30
 800ba02:	4602      	mov	r2, r0
 800ba04:	460b      	mov	r3, r1
 800ba06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ba0a:	f806 5b01 	strb.w	r5, [r6], #1
 800ba0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ba12:	f7fa fe99 	bl	8006748 <__aeabi_dcmplt>
 800ba16:	2800      	cmp	r0, #0
 800ba18:	d171      	bne.n	800bafe <_dtoa_r+0x65e>
 800ba1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba1e:	4911      	ldr	r1, [pc, #68]	@ (800ba64 <_dtoa_r+0x5c4>)
 800ba20:	2000      	movs	r0, #0
 800ba22:	f7fa fa67 	bl	8005ef4 <__aeabi_dsub>
 800ba26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ba2a:	f7fa fe8d 	bl	8006748 <__aeabi_dcmplt>
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	f040 8095 	bne.w	800bb5e <_dtoa_r+0x6be>
 800ba34:	42a6      	cmp	r6, r4
 800ba36:	f43f af50 	beq.w	800b8da <_dtoa_r+0x43a>
 800ba3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ba3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ba68 <_dtoa_r+0x5c8>)
 800ba40:	2200      	movs	r2, #0
 800ba42:	f7fa fc0f 	bl	8006264 <__aeabi_dmul>
 800ba46:	4b08      	ldr	r3, [pc, #32]	@ (800ba68 <_dtoa_r+0x5c8>)
 800ba48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba52:	f7fa fc07 	bl	8006264 <__aeabi_dmul>
 800ba56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba5a:	e7c4      	b.n	800b9e6 <_dtoa_r+0x546>
 800ba5c:	0800f7b0 	.word	0x0800f7b0
 800ba60:	0800f788 	.word	0x0800f788
 800ba64:	3ff00000 	.word	0x3ff00000
 800ba68:	40240000 	.word	0x40240000
 800ba6c:	401c0000 	.word	0x401c0000
 800ba70:	40140000 	.word	0x40140000
 800ba74:	3fe00000 	.word	0x3fe00000
 800ba78:	4631      	mov	r1, r6
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	f7fa fbf2 	bl	8006264 <__aeabi_dmul>
 800ba80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ba84:	9415      	str	r4, [sp, #84]	@ 0x54
 800ba86:	4656      	mov	r6, sl
 800ba88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba8c:	f7fa fe9a 	bl	80067c4 <__aeabi_d2iz>
 800ba90:	4605      	mov	r5, r0
 800ba92:	f7fa fb7d 	bl	8006190 <__aeabi_i2d>
 800ba96:	4602      	mov	r2, r0
 800ba98:	460b      	mov	r3, r1
 800ba9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba9e:	f7fa fa29 	bl	8005ef4 <__aeabi_dsub>
 800baa2:	3530      	adds	r5, #48	@ 0x30
 800baa4:	f806 5b01 	strb.w	r5, [r6], #1
 800baa8:	4602      	mov	r2, r0
 800baaa:	460b      	mov	r3, r1
 800baac:	42a6      	cmp	r6, r4
 800baae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bab2:	f04f 0200 	mov.w	r2, #0
 800bab6:	d124      	bne.n	800bb02 <_dtoa_r+0x662>
 800bab8:	4bac      	ldr	r3, [pc, #688]	@ (800bd6c <_dtoa_r+0x8cc>)
 800baba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800babe:	f7fa fa1b 	bl	8005ef8 <__adddf3>
 800bac2:	4602      	mov	r2, r0
 800bac4:	460b      	mov	r3, r1
 800bac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baca:	f7fa fe5b 	bl	8006784 <__aeabi_dcmpgt>
 800bace:	2800      	cmp	r0, #0
 800bad0:	d145      	bne.n	800bb5e <_dtoa_r+0x6be>
 800bad2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bad6:	49a5      	ldr	r1, [pc, #660]	@ (800bd6c <_dtoa_r+0x8cc>)
 800bad8:	2000      	movs	r0, #0
 800bada:	f7fa fa0b 	bl	8005ef4 <__aeabi_dsub>
 800bade:	4602      	mov	r2, r0
 800bae0:	460b      	mov	r3, r1
 800bae2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bae6:	f7fa fe2f 	bl	8006748 <__aeabi_dcmplt>
 800baea:	2800      	cmp	r0, #0
 800baec:	f43f aef5 	beq.w	800b8da <_dtoa_r+0x43a>
 800baf0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800baf2:	1e73      	subs	r3, r6, #1
 800baf4:	9315      	str	r3, [sp, #84]	@ 0x54
 800baf6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bafa:	2b30      	cmp	r3, #48	@ 0x30
 800bafc:	d0f8      	beq.n	800baf0 <_dtoa_r+0x650>
 800bafe:	9f04      	ldr	r7, [sp, #16]
 800bb00:	e73e      	b.n	800b980 <_dtoa_r+0x4e0>
 800bb02:	4b9b      	ldr	r3, [pc, #620]	@ (800bd70 <_dtoa_r+0x8d0>)
 800bb04:	f7fa fbae 	bl	8006264 <__aeabi_dmul>
 800bb08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb0c:	e7bc      	b.n	800ba88 <_dtoa_r+0x5e8>
 800bb0e:	d10c      	bne.n	800bb2a <_dtoa_r+0x68a>
 800bb10:	4b98      	ldr	r3, [pc, #608]	@ (800bd74 <_dtoa_r+0x8d4>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb18:	f7fa fba4 	bl	8006264 <__aeabi_dmul>
 800bb1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb20:	f7fa fe26 	bl	8006770 <__aeabi_dcmpge>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	f000 8157 	beq.w	800bdd8 <_dtoa_r+0x938>
 800bb2a:	2400      	movs	r4, #0
 800bb2c:	4625      	mov	r5, r4
 800bb2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb30:	43db      	mvns	r3, r3
 800bb32:	9304      	str	r3, [sp, #16]
 800bb34:	4656      	mov	r6, sl
 800bb36:	2700      	movs	r7, #0
 800bb38:	4621      	mov	r1, r4
 800bb3a:	4658      	mov	r0, fp
 800bb3c:	f000 fafe 	bl	800c13c <_Bfree>
 800bb40:	2d00      	cmp	r5, #0
 800bb42:	d0dc      	beq.n	800bafe <_dtoa_r+0x65e>
 800bb44:	b12f      	cbz	r7, 800bb52 <_dtoa_r+0x6b2>
 800bb46:	42af      	cmp	r7, r5
 800bb48:	d003      	beq.n	800bb52 <_dtoa_r+0x6b2>
 800bb4a:	4639      	mov	r1, r7
 800bb4c:	4658      	mov	r0, fp
 800bb4e:	f000 faf5 	bl	800c13c <_Bfree>
 800bb52:	4629      	mov	r1, r5
 800bb54:	4658      	mov	r0, fp
 800bb56:	f000 faf1 	bl	800c13c <_Bfree>
 800bb5a:	e7d0      	b.n	800bafe <_dtoa_r+0x65e>
 800bb5c:	9704      	str	r7, [sp, #16]
 800bb5e:	4633      	mov	r3, r6
 800bb60:	461e      	mov	r6, r3
 800bb62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb66:	2a39      	cmp	r2, #57	@ 0x39
 800bb68:	d107      	bne.n	800bb7a <_dtoa_r+0x6da>
 800bb6a:	459a      	cmp	sl, r3
 800bb6c:	d1f8      	bne.n	800bb60 <_dtoa_r+0x6c0>
 800bb6e:	9a04      	ldr	r2, [sp, #16]
 800bb70:	3201      	adds	r2, #1
 800bb72:	9204      	str	r2, [sp, #16]
 800bb74:	2230      	movs	r2, #48	@ 0x30
 800bb76:	f88a 2000 	strb.w	r2, [sl]
 800bb7a:	781a      	ldrb	r2, [r3, #0]
 800bb7c:	3201      	adds	r2, #1
 800bb7e:	701a      	strb	r2, [r3, #0]
 800bb80:	e7bd      	b.n	800bafe <_dtoa_r+0x65e>
 800bb82:	4b7b      	ldr	r3, [pc, #492]	@ (800bd70 <_dtoa_r+0x8d0>)
 800bb84:	2200      	movs	r2, #0
 800bb86:	f7fa fb6d 	bl	8006264 <__aeabi_dmul>
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	4604      	mov	r4, r0
 800bb90:	460d      	mov	r5, r1
 800bb92:	f7fa fdcf 	bl	8006734 <__aeabi_dcmpeq>
 800bb96:	2800      	cmp	r0, #0
 800bb98:	f43f aebb 	beq.w	800b912 <_dtoa_r+0x472>
 800bb9c:	e6f0      	b.n	800b980 <_dtoa_r+0x4e0>
 800bb9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bba0:	2a00      	cmp	r2, #0
 800bba2:	f000 80db 	beq.w	800bd5c <_dtoa_r+0x8bc>
 800bba6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bba8:	2a01      	cmp	r2, #1
 800bbaa:	f300 80bf 	bgt.w	800bd2c <_dtoa_r+0x88c>
 800bbae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bbb0:	2a00      	cmp	r2, #0
 800bbb2:	f000 80b7 	beq.w	800bd24 <_dtoa_r+0x884>
 800bbb6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bbba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bbbc:	4646      	mov	r6, r8
 800bbbe:	9a08      	ldr	r2, [sp, #32]
 800bbc0:	2101      	movs	r1, #1
 800bbc2:	441a      	add	r2, r3
 800bbc4:	4658      	mov	r0, fp
 800bbc6:	4498      	add	r8, r3
 800bbc8:	9208      	str	r2, [sp, #32]
 800bbca:	f000 fbb5 	bl	800c338 <__i2b>
 800bbce:	4605      	mov	r5, r0
 800bbd0:	b15e      	cbz	r6, 800bbea <_dtoa_r+0x74a>
 800bbd2:	9b08      	ldr	r3, [sp, #32]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	dd08      	ble.n	800bbea <_dtoa_r+0x74a>
 800bbd8:	42b3      	cmp	r3, r6
 800bbda:	9a08      	ldr	r2, [sp, #32]
 800bbdc:	bfa8      	it	ge
 800bbde:	4633      	movge	r3, r6
 800bbe0:	eba8 0803 	sub.w	r8, r8, r3
 800bbe4:	1af6      	subs	r6, r6, r3
 800bbe6:	1ad3      	subs	r3, r2, r3
 800bbe8:	9308      	str	r3, [sp, #32]
 800bbea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbec:	b1f3      	cbz	r3, 800bc2c <_dtoa_r+0x78c>
 800bbee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	f000 80b7 	beq.w	800bd64 <_dtoa_r+0x8c4>
 800bbf6:	b18c      	cbz	r4, 800bc1c <_dtoa_r+0x77c>
 800bbf8:	4629      	mov	r1, r5
 800bbfa:	4622      	mov	r2, r4
 800bbfc:	4658      	mov	r0, fp
 800bbfe:	f000 fc5b 	bl	800c4b8 <__pow5mult>
 800bc02:	464a      	mov	r2, r9
 800bc04:	4601      	mov	r1, r0
 800bc06:	4605      	mov	r5, r0
 800bc08:	4658      	mov	r0, fp
 800bc0a:	f000 fbab 	bl	800c364 <__multiply>
 800bc0e:	4649      	mov	r1, r9
 800bc10:	9004      	str	r0, [sp, #16]
 800bc12:	4658      	mov	r0, fp
 800bc14:	f000 fa92 	bl	800c13c <_Bfree>
 800bc18:	9b04      	ldr	r3, [sp, #16]
 800bc1a:	4699      	mov	r9, r3
 800bc1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc1e:	1b1a      	subs	r2, r3, r4
 800bc20:	d004      	beq.n	800bc2c <_dtoa_r+0x78c>
 800bc22:	4649      	mov	r1, r9
 800bc24:	4658      	mov	r0, fp
 800bc26:	f000 fc47 	bl	800c4b8 <__pow5mult>
 800bc2a:	4681      	mov	r9, r0
 800bc2c:	2101      	movs	r1, #1
 800bc2e:	4658      	mov	r0, fp
 800bc30:	f000 fb82 	bl	800c338 <__i2b>
 800bc34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc36:	4604      	mov	r4, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f000 81cf 	beq.w	800bfdc <_dtoa_r+0xb3c>
 800bc3e:	461a      	mov	r2, r3
 800bc40:	4601      	mov	r1, r0
 800bc42:	4658      	mov	r0, fp
 800bc44:	f000 fc38 	bl	800c4b8 <__pow5mult>
 800bc48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	4604      	mov	r4, r0
 800bc4e:	f300 8095 	bgt.w	800bd7c <_dtoa_r+0x8dc>
 800bc52:	9b02      	ldr	r3, [sp, #8]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f040 8087 	bne.w	800bd68 <_dtoa_r+0x8c8>
 800bc5a:	9b03      	ldr	r3, [sp, #12]
 800bc5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f040 8089 	bne.w	800bd78 <_dtoa_r+0x8d8>
 800bc66:	9b03      	ldr	r3, [sp, #12]
 800bc68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc6c:	0d1b      	lsrs	r3, r3, #20
 800bc6e:	051b      	lsls	r3, r3, #20
 800bc70:	b12b      	cbz	r3, 800bc7e <_dtoa_r+0x7de>
 800bc72:	9b08      	ldr	r3, [sp, #32]
 800bc74:	3301      	adds	r3, #1
 800bc76:	9308      	str	r3, [sp, #32]
 800bc78:	f108 0801 	add.w	r8, r8, #1
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	f000 81b0 	beq.w	800bfe8 <_dtoa_r+0xb48>
 800bc88:	6923      	ldr	r3, [r4, #16]
 800bc8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bc8e:	6918      	ldr	r0, [r3, #16]
 800bc90:	f000 fb06 	bl	800c2a0 <__hi0bits>
 800bc94:	f1c0 0020 	rsb	r0, r0, #32
 800bc98:	9b08      	ldr	r3, [sp, #32]
 800bc9a:	4418      	add	r0, r3
 800bc9c:	f010 001f 	ands.w	r0, r0, #31
 800bca0:	d077      	beq.n	800bd92 <_dtoa_r+0x8f2>
 800bca2:	f1c0 0320 	rsb	r3, r0, #32
 800bca6:	2b04      	cmp	r3, #4
 800bca8:	dd6b      	ble.n	800bd82 <_dtoa_r+0x8e2>
 800bcaa:	9b08      	ldr	r3, [sp, #32]
 800bcac:	f1c0 001c 	rsb	r0, r0, #28
 800bcb0:	4403      	add	r3, r0
 800bcb2:	4480      	add	r8, r0
 800bcb4:	4406      	add	r6, r0
 800bcb6:	9308      	str	r3, [sp, #32]
 800bcb8:	f1b8 0f00 	cmp.w	r8, #0
 800bcbc:	dd05      	ble.n	800bcca <_dtoa_r+0x82a>
 800bcbe:	4649      	mov	r1, r9
 800bcc0:	4642      	mov	r2, r8
 800bcc2:	4658      	mov	r0, fp
 800bcc4:	f000 fc52 	bl	800c56c <__lshift>
 800bcc8:	4681      	mov	r9, r0
 800bcca:	9b08      	ldr	r3, [sp, #32]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	dd05      	ble.n	800bcdc <_dtoa_r+0x83c>
 800bcd0:	4621      	mov	r1, r4
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	4658      	mov	r0, fp
 800bcd6:	f000 fc49 	bl	800c56c <__lshift>
 800bcda:	4604      	mov	r4, r0
 800bcdc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d059      	beq.n	800bd96 <_dtoa_r+0x8f6>
 800bce2:	4621      	mov	r1, r4
 800bce4:	4648      	mov	r0, r9
 800bce6:	f000 fcad 	bl	800c644 <__mcmp>
 800bcea:	2800      	cmp	r0, #0
 800bcec:	da53      	bge.n	800bd96 <_dtoa_r+0x8f6>
 800bcee:	1e7b      	subs	r3, r7, #1
 800bcf0:	9304      	str	r3, [sp, #16]
 800bcf2:	4649      	mov	r1, r9
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	220a      	movs	r2, #10
 800bcf8:	4658      	mov	r0, fp
 800bcfa:	f000 fa41 	bl	800c180 <__multadd>
 800bcfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd00:	4681      	mov	r9, r0
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	f000 8172 	beq.w	800bfec <_dtoa_r+0xb4c>
 800bd08:	2300      	movs	r3, #0
 800bd0a:	4629      	mov	r1, r5
 800bd0c:	220a      	movs	r2, #10
 800bd0e:	4658      	mov	r0, fp
 800bd10:	f000 fa36 	bl	800c180 <__multadd>
 800bd14:	9b00      	ldr	r3, [sp, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	4605      	mov	r5, r0
 800bd1a:	dc67      	bgt.n	800bdec <_dtoa_r+0x94c>
 800bd1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd1e:	2b02      	cmp	r3, #2
 800bd20:	dc41      	bgt.n	800bda6 <_dtoa_r+0x906>
 800bd22:	e063      	b.n	800bdec <_dtoa_r+0x94c>
 800bd24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bd26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bd2a:	e746      	b.n	800bbba <_dtoa_r+0x71a>
 800bd2c:	9b07      	ldr	r3, [sp, #28]
 800bd2e:	1e5c      	subs	r4, r3, #1
 800bd30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd32:	42a3      	cmp	r3, r4
 800bd34:	bfbf      	itttt	lt
 800bd36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bd38:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bd3a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bd3c:	1ae3      	sublt	r3, r4, r3
 800bd3e:	bfb4      	ite	lt
 800bd40:	18d2      	addlt	r2, r2, r3
 800bd42:	1b1c      	subge	r4, r3, r4
 800bd44:	9b07      	ldr	r3, [sp, #28]
 800bd46:	bfbc      	itt	lt
 800bd48:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bd4a:	2400      	movlt	r4, #0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	bfb5      	itete	lt
 800bd50:	eba8 0603 	sublt.w	r6, r8, r3
 800bd54:	9b07      	ldrge	r3, [sp, #28]
 800bd56:	2300      	movlt	r3, #0
 800bd58:	4646      	movge	r6, r8
 800bd5a:	e730      	b.n	800bbbe <_dtoa_r+0x71e>
 800bd5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bd5e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bd60:	4646      	mov	r6, r8
 800bd62:	e735      	b.n	800bbd0 <_dtoa_r+0x730>
 800bd64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd66:	e75c      	b.n	800bc22 <_dtoa_r+0x782>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	e788      	b.n	800bc7e <_dtoa_r+0x7de>
 800bd6c:	3fe00000 	.word	0x3fe00000
 800bd70:	40240000 	.word	0x40240000
 800bd74:	40140000 	.word	0x40140000
 800bd78:	9b02      	ldr	r3, [sp, #8]
 800bd7a:	e780      	b.n	800bc7e <_dtoa_r+0x7de>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd80:	e782      	b.n	800bc88 <_dtoa_r+0x7e8>
 800bd82:	d099      	beq.n	800bcb8 <_dtoa_r+0x818>
 800bd84:	9a08      	ldr	r2, [sp, #32]
 800bd86:	331c      	adds	r3, #28
 800bd88:	441a      	add	r2, r3
 800bd8a:	4498      	add	r8, r3
 800bd8c:	441e      	add	r6, r3
 800bd8e:	9208      	str	r2, [sp, #32]
 800bd90:	e792      	b.n	800bcb8 <_dtoa_r+0x818>
 800bd92:	4603      	mov	r3, r0
 800bd94:	e7f6      	b.n	800bd84 <_dtoa_r+0x8e4>
 800bd96:	9b07      	ldr	r3, [sp, #28]
 800bd98:	9704      	str	r7, [sp, #16]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	dc20      	bgt.n	800bde0 <_dtoa_r+0x940>
 800bd9e:	9300      	str	r3, [sp, #0]
 800bda0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bda2:	2b02      	cmp	r3, #2
 800bda4:	dd1e      	ble.n	800bde4 <_dtoa_r+0x944>
 800bda6:	9b00      	ldr	r3, [sp, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f47f aec0 	bne.w	800bb2e <_dtoa_r+0x68e>
 800bdae:	4621      	mov	r1, r4
 800bdb0:	2205      	movs	r2, #5
 800bdb2:	4658      	mov	r0, fp
 800bdb4:	f000 f9e4 	bl	800c180 <__multadd>
 800bdb8:	4601      	mov	r1, r0
 800bdba:	4604      	mov	r4, r0
 800bdbc:	4648      	mov	r0, r9
 800bdbe:	f000 fc41 	bl	800c644 <__mcmp>
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	f77f aeb3 	ble.w	800bb2e <_dtoa_r+0x68e>
 800bdc8:	4656      	mov	r6, sl
 800bdca:	2331      	movs	r3, #49	@ 0x31
 800bdcc:	f806 3b01 	strb.w	r3, [r6], #1
 800bdd0:	9b04      	ldr	r3, [sp, #16]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	9304      	str	r3, [sp, #16]
 800bdd6:	e6ae      	b.n	800bb36 <_dtoa_r+0x696>
 800bdd8:	9c07      	ldr	r4, [sp, #28]
 800bdda:	9704      	str	r7, [sp, #16]
 800bddc:	4625      	mov	r5, r4
 800bdde:	e7f3      	b.n	800bdc8 <_dtoa_r+0x928>
 800bde0:	9b07      	ldr	r3, [sp, #28]
 800bde2:	9300      	str	r3, [sp, #0]
 800bde4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	f000 8104 	beq.w	800bff4 <_dtoa_r+0xb54>
 800bdec:	2e00      	cmp	r6, #0
 800bdee:	dd05      	ble.n	800bdfc <_dtoa_r+0x95c>
 800bdf0:	4629      	mov	r1, r5
 800bdf2:	4632      	mov	r2, r6
 800bdf4:	4658      	mov	r0, fp
 800bdf6:	f000 fbb9 	bl	800c56c <__lshift>
 800bdfa:	4605      	mov	r5, r0
 800bdfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d05a      	beq.n	800beb8 <_dtoa_r+0xa18>
 800be02:	6869      	ldr	r1, [r5, #4]
 800be04:	4658      	mov	r0, fp
 800be06:	f000 f959 	bl	800c0bc <_Balloc>
 800be0a:	4606      	mov	r6, r0
 800be0c:	b928      	cbnz	r0, 800be1a <_dtoa_r+0x97a>
 800be0e:	4b84      	ldr	r3, [pc, #528]	@ (800c020 <_dtoa_r+0xb80>)
 800be10:	4602      	mov	r2, r0
 800be12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800be16:	f7ff bb5a 	b.w	800b4ce <_dtoa_r+0x2e>
 800be1a:	692a      	ldr	r2, [r5, #16]
 800be1c:	3202      	adds	r2, #2
 800be1e:	0092      	lsls	r2, r2, #2
 800be20:	f105 010c 	add.w	r1, r5, #12
 800be24:	300c      	adds	r0, #12
 800be26:	f7ff fa9d 	bl	800b364 <memcpy>
 800be2a:	2201      	movs	r2, #1
 800be2c:	4631      	mov	r1, r6
 800be2e:	4658      	mov	r0, fp
 800be30:	f000 fb9c 	bl	800c56c <__lshift>
 800be34:	f10a 0301 	add.w	r3, sl, #1
 800be38:	9307      	str	r3, [sp, #28]
 800be3a:	9b00      	ldr	r3, [sp, #0]
 800be3c:	4453      	add	r3, sl
 800be3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be40:	9b02      	ldr	r3, [sp, #8]
 800be42:	f003 0301 	and.w	r3, r3, #1
 800be46:	462f      	mov	r7, r5
 800be48:	930a      	str	r3, [sp, #40]	@ 0x28
 800be4a:	4605      	mov	r5, r0
 800be4c:	9b07      	ldr	r3, [sp, #28]
 800be4e:	4621      	mov	r1, r4
 800be50:	3b01      	subs	r3, #1
 800be52:	4648      	mov	r0, r9
 800be54:	9300      	str	r3, [sp, #0]
 800be56:	f7ff fa99 	bl	800b38c <quorem>
 800be5a:	4639      	mov	r1, r7
 800be5c:	9002      	str	r0, [sp, #8]
 800be5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800be62:	4648      	mov	r0, r9
 800be64:	f000 fbee 	bl	800c644 <__mcmp>
 800be68:	462a      	mov	r2, r5
 800be6a:	9008      	str	r0, [sp, #32]
 800be6c:	4621      	mov	r1, r4
 800be6e:	4658      	mov	r0, fp
 800be70:	f000 fc04 	bl	800c67c <__mdiff>
 800be74:	68c2      	ldr	r2, [r0, #12]
 800be76:	4606      	mov	r6, r0
 800be78:	bb02      	cbnz	r2, 800bebc <_dtoa_r+0xa1c>
 800be7a:	4601      	mov	r1, r0
 800be7c:	4648      	mov	r0, r9
 800be7e:	f000 fbe1 	bl	800c644 <__mcmp>
 800be82:	4602      	mov	r2, r0
 800be84:	4631      	mov	r1, r6
 800be86:	4658      	mov	r0, fp
 800be88:	920e      	str	r2, [sp, #56]	@ 0x38
 800be8a:	f000 f957 	bl	800c13c <_Bfree>
 800be8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be92:	9e07      	ldr	r6, [sp, #28]
 800be94:	ea43 0102 	orr.w	r1, r3, r2
 800be98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be9a:	4319      	orrs	r1, r3
 800be9c:	d110      	bne.n	800bec0 <_dtoa_r+0xa20>
 800be9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bea2:	d029      	beq.n	800bef8 <_dtoa_r+0xa58>
 800bea4:	9b08      	ldr	r3, [sp, #32]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	dd02      	ble.n	800beb0 <_dtoa_r+0xa10>
 800beaa:	9b02      	ldr	r3, [sp, #8]
 800beac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800beb0:	9b00      	ldr	r3, [sp, #0]
 800beb2:	f883 8000 	strb.w	r8, [r3]
 800beb6:	e63f      	b.n	800bb38 <_dtoa_r+0x698>
 800beb8:	4628      	mov	r0, r5
 800beba:	e7bb      	b.n	800be34 <_dtoa_r+0x994>
 800bebc:	2201      	movs	r2, #1
 800bebe:	e7e1      	b.n	800be84 <_dtoa_r+0x9e4>
 800bec0:	9b08      	ldr	r3, [sp, #32]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	db04      	blt.n	800bed0 <_dtoa_r+0xa30>
 800bec6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bec8:	430b      	orrs	r3, r1
 800beca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800becc:	430b      	orrs	r3, r1
 800bece:	d120      	bne.n	800bf12 <_dtoa_r+0xa72>
 800bed0:	2a00      	cmp	r2, #0
 800bed2:	dded      	ble.n	800beb0 <_dtoa_r+0xa10>
 800bed4:	4649      	mov	r1, r9
 800bed6:	2201      	movs	r2, #1
 800bed8:	4658      	mov	r0, fp
 800beda:	f000 fb47 	bl	800c56c <__lshift>
 800bede:	4621      	mov	r1, r4
 800bee0:	4681      	mov	r9, r0
 800bee2:	f000 fbaf 	bl	800c644 <__mcmp>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	dc03      	bgt.n	800bef2 <_dtoa_r+0xa52>
 800beea:	d1e1      	bne.n	800beb0 <_dtoa_r+0xa10>
 800beec:	f018 0f01 	tst.w	r8, #1
 800bef0:	d0de      	beq.n	800beb0 <_dtoa_r+0xa10>
 800bef2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bef6:	d1d8      	bne.n	800beaa <_dtoa_r+0xa0a>
 800bef8:	9a00      	ldr	r2, [sp, #0]
 800befa:	2339      	movs	r3, #57	@ 0x39
 800befc:	7013      	strb	r3, [r2, #0]
 800befe:	4633      	mov	r3, r6
 800bf00:	461e      	mov	r6, r3
 800bf02:	3b01      	subs	r3, #1
 800bf04:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bf08:	2a39      	cmp	r2, #57	@ 0x39
 800bf0a:	d052      	beq.n	800bfb2 <_dtoa_r+0xb12>
 800bf0c:	3201      	adds	r2, #1
 800bf0e:	701a      	strb	r2, [r3, #0]
 800bf10:	e612      	b.n	800bb38 <_dtoa_r+0x698>
 800bf12:	2a00      	cmp	r2, #0
 800bf14:	dd07      	ble.n	800bf26 <_dtoa_r+0xa86>
 800bf16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bf1a:	d0ed      	beq.n	800bef8 <_dtoa_r+0xa58>
 800bf1c:	9a00      	ldr	r2, [sp, #0]
 800bf1e:	f108 0301 	add.w	r3, r8, #1
 800bf22:	7013      	strb	r3, [r2, #0]
 800bf24:	e608      	b.n	800bb38 <_dtoa_r+0x698>
 800bf26:	9b07      	ldr	r3, [sp, #28]
 800bf28:	9a07      	ldr	r2, [sp, #28]
 800bf2a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bf2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d028      	beq.n	800bf86 <_dtoa_r+0xae6>
 800bf34:	4649      	mov	r1, r9
 800bf36:	2300      	movs	r3, #0
 800bf38:	220a      	movs	r2, #10
 800bf3a:	4658      	mov	r0, fp
 800bf3c:	f000 f920 	bl	800c180 <__multadd>
 800bf40:	42af      	cmp	r7, r5
 800bf42:	4681      	mov	r9, r0
 800bf44:	f04f 0300 	mov.w	r3, #0
 800bf48:	f04f 020a 	mov.w	r2, #10
 800bf4c:	4639      	mov	r1, r7
 800bf4e:	4658      	mov	r0, fp
 800bf50:	d107      	bne.n	800bf62 <_dtoa_r+0xac2>
 800bf52:	f000 f915 	bl	800c180 <__multadd>
 800bf56:	4607      	mov	r7, r0
 800bf58:	4605      	mov	r5, r0
 800bf5a:	9b07      	ldr	r3, [sp, #28]
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	9307      	str	r3, [sp, #28]
 800bf60:	e774      	b.n	800be4c <_dtoa_r+0x9ac>
 800bf62:	f000 f90d 	bl	800c180 <__multadd>
 800bf66:	4629      	mov	r1, r5
 800bf68:	4607      	mov	r7, r0
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	220a      	movs	r2, #10
 800bf6e:	4658      	mov	r0, fp
 800bf70:	f000 f906 	bl	800c180 <__multadd>
 800bf74:	4605      	mov	r5, r0
 800bf76:	e7f0      	b.n	800bf5a <_dtoa_r+0xaba>
 800bf78:	9b00      	ldr	r3, [sp, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	bfcc      	ite	gt
 800bf7e:	461e      	movgt	r6, r3
 800bf80:	2601      	movle	r6, #1
 800bf82:	4456      	add	r6, sl
 800bf84:	2700      	movs	r7, #0
 800bf86:	4649      	mov	r1, r9
 800bf88:	2201      	movs	r2, #1
 800bf8a:	4658      	mov	r0, fp
 800bf8c:	f000 faee 	bl	800c56c <__lshift>
 800bf90:	4621      	mov	r1, r4
 800bf92:	4681      	mov	r9, r0
 800bf94:	f000 fb56 	bl	800c644 <__mcmp>
 800bf98:	2800      	cmp	r0, #0
 800bf9a:	dcb0      	bgt.n	800befe <_dtoa_r+0xa5e>
 800bf9c:	d102      	bne.n	800bfa4 <_dtoa_r+0xb04>
 800bf9e:	f018 0f01 	tst.w	r8, #1
 800bfa2:	d1ac      	bne.n	800befe <_dtoa_r+0xa5e>
 800bfa4:	4633      	mov	r3, r6
 800bfa6:	461e      	mov	r6, r3
 800bfa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfac:	2a30      	cmp	r2, #48	@ 0x30
 800bfae:	d0fa      	beq.n	800bfa6 <_dtoa_r+0xb06>
 800bfb0:	e5c2      	b.n	800bb38 <_dtoa_r+0x698>
 800bfb2:	459a      	cmp	sl, r3
 800bfb4:	d1a4      	bne.n	800bf00 <_dtoa_r+0xa60>
 800bfb6:	9b04      	ldr	r3, [sp, #16]
 800bfb8:	3301      	adds	r3, #1
 800bfba:	9304      	str	r3, [sp, #16]
 800bfbc:	2331      	movs	r3, #49	@ 0x31
 800bfbe:	f88a 3000 	strb.w	r3, [sl]
 800bfc2:	e5b9      	b.n	800bb38 <_dtoa_r+0x698>
 800bfc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bfc6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c024 <_dtoa_r+0xb84>
 800bfca:	b11b      	cbz	r3, 800bfd4 <_dtoa_r+0xb34>
 800bfcc:	f10a 0308 	add.w	r3, sl, #8
 800bfd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bfd2:	6013      	str	r3, [r2, #0]
 800bfd4:	4650      	mov	r0, sl
 800bfd6:	b019      	add	sp, #100	@ 0x64
 800bfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	f77f ae37 	ble.w	800bc52 <_dtoa_r+0x7b2>
 800bfe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfe6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfe8:	2001      	movs	r0, #1
 800bfea:	e655      	b.n	800bc98 <_dtoa_r+0x7f8>
 800bfec:	9b00      	ldr	r3, [sp, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	f77f aed6 	ble.w	800bda0 <_dtoa_r+0x900>
 800bff4:	4656      	mov	r6, sl
 800bff6:	4621      	mov	r1, r4
 800bff8:	4648      	mov	r0, r9
 800bffa:	f7ff f9c7 	bl	800b38c <quorem>
 800bffe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c002:	f806 8b01 	strb.w	r8, [r6], #1
 800c006:	9b00      	ldr	r3, [sp, #0]
 800c008:	eba6 020a 	sub.w	r2, r6, sl
 800c00c:	4293      	cmp	r3, r2
 800c00e:	ddb3      	ble.n	800bf78 <_dtoa_r+0xad8>
 800c010:	4649      	mov	r1, r9
 800c012:	2300      	movs	r3, #0
 800c014:	220a      	movs	r2, #10
 800c016:	4658      	mov	r0, fp
 800c018:	f000 f8b2 	bl	800c180 <__multadd>
 800c01c:	4681      	mov	r9, r0
 800c01e:	e7ea      	b.n	800bff6 <_dtoa_r+0xb56>
 800c020:	0800f70e 	.word	0x0800f70e
 800c024:	0800f692 	.word	0x0800f692

0800c028 <_free_r>:
 800c028:	b538      	push	{r3, r4, r5, lr}
 800c02a:	4605      	mov	r5, r0
 800c02c:	2900      	cmp	r1, #0
 800c02e:	d041      	beq.n	800c0b4 <_free_r+0x8c>
 800c030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c034:	1f0c      	subs	r4, r1, #4
 800c036:	2b00      	cmp	r3, #0
 800c038:	bfb8      	it	lt
 800c03a:	18e4      	addlt	r4, r4, r3
 800c03c:	f7fe f92e 	bl	800a29c <__malloc_lock>
 800c040:	4a1d      	ldr	r2, [pc, #116]	@ (800c0b8 <_free_r+0x90>)
 800c042:	6813      	ldr	r3, [r2, #0]
 800c044:	b933      	cbnz	r3, 800c054 <_free_r+0x2c>
 800c046:	6063      	str	r3, [r4, #4]
 800c048:	6014      	str	r4, [r2, #0]
 800c04a:	4628      	mov	r0, r5
 800c04c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c050:	f7fe b92a 	b.w	800a2a8 <__malloc_unlock>
 800c054:	42a3      	cmp	r3, r4
 800c056:	d908      	bls.n	800c06a <_free_r+0x42>
 800c058:	6820      	ldr	r0, [r4, #0]
 800c05a:	1821      	adds	r1, r4, r0
 800c05c:	428b      	cmp	r3, r1
 800c05e:	bf01      	itttt	eq
 800c060:	6819      	ldreq	r1, [r3, #0]
 800c062:	685b      	ldreq	r3, [r3, #4]
 800c064:	1809      	addeq	r1, r1, r0
 800c066:	6021      	streq	r1, [r4, #0]
 800c068:	e7ed      	b.n	800c046 <_free_r+0x1e>
 800c06a:	461a      	mov	r2, r3
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	b10b      	cbz	r3, 800c074 <_free_r+0x4c>
 800c070:	42a3      	cmp	r3, r4
 800c072:	d9fa      	bls.n	800c06a <_free_r+0x42>
 800c074:	6811      	ldr	r1, [r2, #0]
 800c076:	1850      	adds	r0, r2, r1
 800c078:	42a0      	cmp	r0, r4
 800c07a:	d10b      	bne.n	800c094 <_free_r+0x6c>
 800c07c:	6820      	ldr	r0, [r4, #0]
 800c07e:	4401      	add	r1, r0
 800c080:	1850      	adds	r0, r2, r1
 800c082:	4283      	cmp	r3, r0
 800c084:	6011      	str	r1, [r2, #0]
 800c086:	d1e0      	bne.n	800c04a <_free_r+0x22>
 800c088:	6818      	ldr	r0, [r3, #0]
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	6053      	str	r3, [r2, #4]
 800c08e:	4408      	add	r0, r1
 800c090:	6010      	str	r0, [r2, #0]
 800c092:	e7da      	b.n	800c04a <_free_r+0x22>
 800c094:	d902      	bls.n	800c09c <_free_r+0x74>
 800c096:	230c      	movs	r3, #12
 800c098:	602b      	str	r3, [r5, #0]
 800c09a:	e7d6      	b.n	800c04a <_free_r+0x22>
 800c09c:	6820      	ldr	r0, [r4, #0]
 800c09e:	1821      	adds	r1, r4, r0
 800c0a0:	428b      	cmp	r3, r1
 800c0a2:	bf04      	itt	eq
 800c0a4:	6819      	ldreq	r1, [r3, #0]
 800c0a6:	685b      	ldreq	r3, [r3, #4]
 800c0a8:	6063      	str	r3, [r4, #4]
 800c0aa:	bf04      	itt	eq
 800c0ac:	1809      	addeq	r1, r1, r0
 800c0ae:	6021      	streq	r1, [r4, #0]
 800c0b0:	6054      	str	r4, [r2, #4]
 800c0b2:	e7ca      	b.n	800c04a <_free_r+0x22>
 800c0b4:	bd38      	pop	{r3, r4, r5, pc}
 800c0b6:	bf00      	nop
 800c0b8:	20000ed4 	.word	0x20000ed4

0800c0bc <_Balloc>:
 800c0bc:	b570      	push	{r4, r5, r6, lr}
 800c0be:	69c6      	ldr	r6, [r0, #28]
 800c0c0:	4604      	mov	r4, r0
 800c0c2:	460d      	mov	r5, r1
 800c0c4:	b976      	cbnz	r6, 800c0e4 <_Balloc+0x28>
 800c0c6:	2010      	movs	r0, #16
 800c0c8:	f7fe f836 	bl	800a138 <malloc>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	61e0      	str	r0, [r4, #28]
 800c0d0:	b920      	cbnz	r0, 800c0dc <_Balloc+0x20>
 800c0d2:	4b18      	ldr	r3, [pc, #96]	@ (800c134 <_Balloc+0x78>)
 800c0d4:	4818      	ldr	r0, [pc, #96]	@ (800c138 <_Balloc+0x7c>)
 800c0d6:	216b      	movs	r1, #107	@ 0x6b
 800c0d8:	f001 fd62 	bl	800dba0 <__assert_func>
 800c0dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0e0:	6006      	str	r6, [r0, #0]
 800c0e2:	60c6      	str	r6, [r0, #12]
 800c0e4:	69e6      	ldr	r6, [r4, #28]
 800c0e6:	68f3      	ldr	r3, [r6, #12]
 800c0e8:	b183      	cbz	r3, 800c10c <_Balloc+0x50>
 800c0ea:	69e3      	ldr	r3, [r4, #28]
 800c0ec:	68db      	ldr	r3, [r3, #12]
 800c0ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0f2:	b9b8      	cbnz	r0, 800c124 <_Balloc+0x68>
 800c0f4:	2101      	movs	r1, #1
 800c0f6:	fa01 f605 	lsl.w	r6, r1, r5
 800c0fa:	1d72      	adds	r2, r6, #5
 800c0fc:	0092      	lsls	r2, r2, #2
 800c0fe:	4620      	mov	r0, r4
 800c100:	f001 fd6c 	bl	800dbdc <_calloc_r>
 800c104:	b160      	cbz	r0, 800c120 <_Balloc+0x64>
 800c106:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c10a:	e00e      	b.n	800c12a <_Balloc+0x6e>
 800c10c:	2221      	movs	r2, #33	@ 0x21
 800c10e:	2104      	movs	r1, #4
 800c110:	4620      	mov	r0, r4
 800c112:	f001 fd63 	bl	800dbdc <_calloc_r>
 800c116:	69e3      	ldr	r3, [r4, #28]
 800c118:	60f0      	str	r0, [r6, #12]
 800c11a:	68db      	ldr	r3, [r3, #12]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d1e4      	bne.n	800c0ea <_Balloc+0x2e>
 800c120:	2000      	movs	r0, #0
 800c122:	bd70      	pop	{r4, r5, r6, pc}
 800c124:	6802      	ldr	r2, [r0, #0]
 800c126:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c12a:	2300      	movs	r3, #0
 800c12c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c130:	e7f7      	b.n	800c122 <_Balloc+0x66>
 800c132:	bf00      	nop
 800c134:	0800f69f 	.word	0x0800f69f
 800c138:	0800f71f 	.word	0x0800f71f

0800c13c <_Bfree>:
 800c13c:	b570      	push	{r4, r5, r6, lr}
 800c13e:	69c6      	ldr	r6, [r0, #28]
 800c140:	4605      	mov	r5, r0
 800c142:	460c      	mov	r4, r1
 800c144:	b976      	cbnz	r6, 800c164 <_Bfree+0x28>
 800c146:	2010      	movs	r0, #16
 800c148:	f7fd fff6 	bl	800a138 <malloc>
 800c14c:	4602      	mov	r2, r0
 800c14e:	61e8      	str	r0, [r5, #28]
 800c150:	b920      	cbnz	r0, 800c15c <_Bfree+0x20>
 800c152:	4b09      	ldr	r3, [pc, #36]	@ (800c178 <_Bfree+0x3c>)
 800c154:	4809      	ldr	r0, [pc, #36]	@ (800c17c <_Bfree+0x40>)
 800c156:	218f      	movs	r1, #143	@ 0x8f
 800c158:	f001 fd22 	bl	800dba0 <__assert_func>
 800c15c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c160:	6006      	str	r6, [r0, #0]
 800c162:	60c6      	str	r6, [r0, #12]
 800c164:	b13c      	cbz	r4, 800c176 <_Bfree+0x3a>
 800c166:	69eb      	ldr	r3, [r5, #28]
 800c168:	6862      	ldr	r2, [r4, #4]
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c170:	6021      	str	r1, [r4, #0]
 800c172:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c176:	bd70      	pop	{r4, r5, r6, pc}
 800c178:	0800f69f 	.word	0x0800f69f
 800c17c:	0800f71f 	.word	0x0800f71f

0800c180 <__multadd>:
 800c180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c184:	690d      	ldr	r5, [r1, #16]
 800c186:	4607      	mov	r7, r0
 800c188:	460c      	mov	r4, r1
 800c18a:	461e      	mov	r6, r3
 800c18c:	f101 0c14 	add.w	ip, r1, #20
 800c190:	2000      	movs	r0, #0
 800c192:	f8dc 3000 	ldr.w	r3, [ip]
 800c196:	b299      	uxth	r1, r3
 800c198:	fb02 6101 	mla	r1, r2, r1, r6
 800c19c:	0c1e      	lsrs	r6, r3, #16
 800c19e:	0c0b      	lsrs	r3, r1, #16
 800c1a0:	fb02 3306 	mla	r3, r2, r6, r3
 800c1a4:	b289      	uxth	r1, r1
 800c1a6:	3001      	adds	r0, #1
 800c1a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c1ac:	4285      	cmp	r5, r0
 800c1ae:	f84c 1b04 	str.w	r1, [ip], #4
 800c1b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c1b6:	dcec      	bgt.n	800c192 <__multadd+0x12>
 800c1b8:	b30e      	cbz	r6, 800c1fe <__multadd+0x7e>
 800c1ba:	68a3      	ldr	r3, [r4, #8]
 800c1bc:	42ab      	cmp	r3, r5
 800c1be:	dc19      	bgt.n	800c1f4 <__multadd+0x74>
 800c1c0:	6861      	ldr	r1, [r4, #4]
 800c1c2:	4638      	mov	r0, r7
 800c1c4:	3101      	adds	r1, #1
 800c1c6:	f7ff ff79 	bl	800c0bc <_Balloc>
 800c1ca:	4680      	mov	r8, r0
 800c1cc:	b928      	cbnz	r0, 800c1da <__multadd+0x5a>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	4b0c      	ldr	r3, [pc, #48]	@ (800c204 <__multadd+0x84>)
 800c1d2:	480d      	ldr	r0, [pc, #52]	@ (800c208 <__multadd+0x88>)
 800c1d4:	21ba      	movs	r1, #186	@ 0xba
 800c1d6:	f001 fce3 	bl	800dba0 <__assert_func>
 800c1da:	6922      	ldr	r2, [r4, #16]
 800c1dc:	3202      	adds	r2, #2
 800c1de:	f104 010c 	add.w	r1, r4, #12
 800c1e2:	0092      	lsls	r2, r2, #2
 800c1e4:	300c      	adds	r0, #12
 800c1e6:	f7ff f8bd 	bl	800b364 <memcpy>
 800c1ea:	4621      	mov	r1, r4
 800c1ec:	4638      	mov	r0, r7
 800c1ee:	f7ff ffa5 	bl	800c13c <_Bfree>
 800c1f2:	4644      	mov	r4, r8
 800c1f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c1f8:	3501      	adds	r5, #1
 800c1fa:	615e      	str	r6, [r3, #20]
 800c1fc:	6125      	str	r5, [r4, #16]
 800c1fe:	4620      	mov	r0, r4
 800c200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c204:	0800f70e 	.word	0x0800f70e
 800c208:	0800f71f 	.word	0x0800f71f

0800c20c <__s2b>:
 800c20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c210:	460c      	mov	r4, r1
 800c212:	4615      	mov	r5, r2
 800c214:	461f      	mov	r7, r3
 800c216:	2209      	movs	r2, #9
 800c218:	3308      	adds	r3, #8
 800c21a:	4606      	mov	r6, r0
 800c21c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c220:	2100      	movs	r1, #0
 800c222:	2201      	movs	r2, #1
 800c224:	429a      	cmp	r2, r3
 800c226:	db09      	blt.n	800c23c <__s2b+0x30>
 800c228:	4630      	mov	r0, r6
 800c22a:	f7ff ff47 	bl	800c0bc <_Balloc>
 800c22e:	b940      	cbnz	r0, 800c242 <__s2b+0x36>
 800c230:	4602      	mov	r2, r0
 800c232:	4b19      	ldr	r3, [pc, #100]	@ (800c298 <__s2b+0x8c>)
 800c234:	4819      	ldr	r0, [pc, #100]	@ (800c29c <__s2b+0x90>)
 800c236:	21d3      	movs	r1, #211	@ 0xd3
 800c238:	f001 fcb2 	bl	800dba0 <__assert_func>
 800c23c:	0052      	lsls	r2, r2, #1
 800c23e:	3101      	adds	r1, #1
 800c240:	e7f0      	b.n	800c224 <__s2b+0x18>
 800c242:	9b08      	ldr	r3, [sp, #32]
 800c244:	6143      	str	r3, [r0, #20]
 800c246:	2d09      	cmp	r5, #9
 800c248:	f04f 0301 	mov.w	r3, #1
 800c24c:	6103      	str	r3, [r0, #16]
 800c24e:	dd16      	ble.n	800c27e <__s2b+0x72>
 800c250:	f104 0909 	add.w	r9, r4, #9
 800c254:	46c8      	mov	r8, r9
 800c256:	442c      	add	r4, r5
 800c258:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c25c:	4601      	mov	r1, r0
 800c25e:	3b30      	subs	r3, #48	@ 0x30
 800c260:	220a      	movs	r2, #10
 800c262:	4630      	mov	r0, r6
 800c264:	f7ff ff8c 	bl	800c180 <__multadd>
 800c268:	45a0      	cmp	r8, r4
 800c26a:	d1f5      	bne.n	800c258 <__s2b+0x4c>
 800c26c:	f1a5 0408 	sub.w	r4, r5, #8
 800c270:	444c      	add	r4, r9
 800c272:	1b2d      	subs	r5, r5, r4
 800c274:	1963      	adds	r3, r4, r5
 800c276:	42bb      	cmp	r3, r7
 800c278:	db04      	blt.n	800c284 <__s2b+0x78>
 800c27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c27e:	340a      	adds	r4, #10
 800c280:	2509      	movs	r5, #9
 800c282:	e7f6      	b.n	800c272 <__s2b+0x66>
 800c284:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c288:	4601      	mov	r1, r0
 800c28a:	3b30      	subs	r3, #48	@ 0x30
 800c28c:	220a      	movs	r2, #10
 800c28e:	4630      	mov	r0, r6
 800c290:	f7ff ff76 	bl	800c180 <__multadd>
 800c294:	e7ee      	b.n	800c274 <__s2b+0x68>
 800c296:	bf00      	nop
 800c298:	0800f70e 	.word	0x0800f70e
 800c29c:	0800f71f 	.word	0x0800f71f

0800c2a0 <__hi0bits>:
 800c2a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	bf36      	itet	cc
 800c2a8:	0403      	lslcc	r3, r0, #16
 800c2aa:	2000      	movcs	r0, #0
 800c2ac:	2010      	movcc	r0, #16
 800c2ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c2b2:	bf3c      	itt	cc
 800c2b4:	021b      	lslcc	r3, r3, #8
 800c2b6:	3008      	addcc	r0, #8
 800c2b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c2bc:	bf3c      	itt	cc
 800c2be:	011b      	lslcc	r3, r3, #4
 800c2c0:	3004      	addcc	r0, #4
 800c2c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2c6:	bf3c      	itt	cc
 800c2c8:	009b      	lslcc	r3, r3, #2
 800c2ca:	3002      	addcc	r0, #2
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	db05      	blt.n	800c2dc <__hi0bits+0x3c>
 800c2d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c2d4:	f100 0001 	add.w	r0, r0, #1
 800c2d8:	bf08      	it	eq
 800c2da:	2020      	moveq	r0, #32
 800c2dc:	4770      	bx	lr

0800c2de <__lo0bits>:
 800c2de:	6803      	ldr	r3, [r0, #0]
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	f013 0007 	ands.w	r0, r3, #7
 800c2e6:	d00b      	beq.n	800c300 <__lo0bits+0x22>
 800c2e8:	07d9      	lsls	r1, r3, #31
 800c2ea:	d421      	bmi.n	800c330 <__lo0bits+0x52>
 800c2ec:	0798      	lsls	r0, r3, #30
 800c2ee:	bf49      	itett	mi
 800c2f0:	085b      	lsrmi	r3, r3, #1
 800c2f2:	089b      	lsrpl	r3, r3, #2
 800c2f4:	2001      	movmi	r0, #1
 800c2f6:	6013      	strmi	r3, [r2, #0]
 800c2f8:	bf5c      	itt	pl
 800c2fa:	6013      	strpl	r3, [r2, #0]
 800c2fc:	2002      	movpl	r0, #2
 800c2fe:	4770      	bx	lr
 800c300:	b299      	uxth	r1, r3
 800c302:	b909      	cbnz	r1, 800c308 <__lo0bits+0x2a>
 800c304:	0c1b      	lsrs	r3, r3, #16
 800c306:	2010      	movs	r0, #16
 800c308:	b2d9      	uxtb	r1, r3
 800c30a:	b909      	cbnz	r1, 800c310 <__lo0bits+0x32>
 800c30c:	3008      	adds	r0, #8
 800c30e:	0a1b      	lsrs	r3, r3, #8
 800c310:	0719      	lsls	r1, r3, #28
 800c312:	bf04      	itt	eq
 800c314:	091b      	lsreq	r3, r3, #4
 800c316:	3004      	addeq	r0, #4
 800c318:	0799      	lsls	r1, r3, #30
 800c31a:	bf04      	itt	eq
 800c31c:	089b      	lsreq	r3, r3, #2
 800c31e:	3002      	addeq	r0, #2
 800c320:	07d9      	lsls	r1, r3, #31
 800c322:	d403      	bmi.n	800c32c <__lo0bits+0x4e>
 800c324:	085b      	lsrs	r3, r3, #1
 800c326:	f100 0001 	add.w	r0, r0, #1
 800c32a:	d003      	beq.n	800c334 <__lo0bits+0x56>
 800c32c:	6013      	str	r3, [r2, #0]
 800c32e:	4770      	bx	lr
 800c330:	2000      	movs	r0, #0
 800c332:	4770      	bx	lr
 800c334:	2020      	movs	r0, #32
 800c336:	4770      	bx	lr

0800c338 <__i2b>:
 800c338:	b510      	push	{r4, lr}
 800c33a:	460c      	mov	r4, r1
 800c33c:	2101      	movs	r1, #1
 800c33e:	f7ff febd 	bl	800c0bc <_Balloc>
 800c342:	4602      	mov	r2, r0
 800c344:	b928      	cbnz	r0, 800c352 <__i2b+0x1a>
 800c346:	4b05      	ldr	r3, [pc, #20]	@ (800c35c <__i2b+0x24>)
 800c348:	4805      	ldr	r0, [pc, #20]	@ (800c360 <__i2b+0x28>)
 800c34a:	f240 1145 	movw	r1, #325	@ 0x145
 800c34e:	f001 fc27 	bl	800dba0 <__assert_func>
 800c352:	2301      	movs	r3, #1
 800c354:	6144      	str	r4, [r0, #20]
 800c356:	6103      	str	r3, [r0, #16]
 800c358:	bd10      	pop	{r4, pc}
 800c35a:	bf00      	nop
 800c35c:	0800f70e 	.word	0x0800f70e
 800c360:	0800f71f 	.word	0x0800f71f

0800c364 <__multiply>:
 800c364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c368:	4614      	mov	r4, r2
 800c36a:	690a      	ldr	r2, [r1, #16]
 800c36c:	6923      	ldr	r3, [r4, #16]
 800c36e:	429a      	cmp	r2, r3
 800c370:	bfa8      	it	ge
 800c372:	4623      	movge	r3, r4
 800c374:	460f      	mov	r7, r1
 800c376:	bfa4      	itt	ge
 800c378:	460c      	movge	r4, r1
 800c37a:	461f      	movge	r7, r3
 800c37c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c380:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c384:	68a3      	ldr	r3, [r4, #8]
 800c386:	6861      	ldr	r1, [r4, #4]
 800c388:	eb0a 0609 	add.w	r6, sl, r9
 800c38c:	42b3      	cmp	r3, r6
 800c38e:	b085      	sub	sp, #20
 800c390:	bfb8      	it	lt
 800c392:	3101      	addlt	r1, #1
 800c394:	f7ff fe92 	bl	800c0bc <_Balloc>
 800c398:	b930      	cbnz	r0, 800c3a8 <__multiply+0x44>
 800c39a:	4602      	mov	r2, r0
 800c39c:	4b44      	ldr	r3, [pc, #272]	@ (800c4b0 <__multiply+0x14c>)
 800c39e:	4845      	ldr	r0, [pc, #276]	@ (800c4b4 <__multiply+0x150>)
 800c3a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c3a4:	f001 fbfc 	bl	800dba0 <__assert_func>
 800c3a8:	f100 0514 	add.w	r5, r0, #20
 800c3ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c3b0:	462b      	mov	r3, r5
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	4543      	cmp	r3, r8
 800c3b6:	d321      	bcc.n	800c3fc <__multiply+0x98>
 800c3b8:	f107 0114 	add.w	r1, r7, #20
 800c3bc:	f104 0214 	add.w	r2, r4, #20
 800c3c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c3c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c3c8:	9302      	str	r3, [sp, #8]
 800c3ca:	1b13      	subs	r3, r2, r4
 800c3cc:	3b15      	subs	r3, #21
 800c3ce:	f023 0303 	bic.w	r3, r3, #3
 800c3d2:	3304      	adds	r3, #4
 800c3d4:	f104 0715 	add.w	r7, r4, #21
 800c3d8:	42ba      	cmp	r2, r7
 800c3da:	bf38      	it	cc
 800c3dc:	2304      	movcc	r3, #4
 800c3de:	9301      	str	r3, [sp, #4]
 800c3e0:	9b02      	ldr	r3, [sp, #8]
 800c3e2:	9103      	str	r1, [sp, #12]
 800c3e4:	428b      	cmp	r3, r1
 800c3e6:	d80c      	bhi.n	800c402 <__multiply+0x9e>
 800c3e8:	2e00      	cmp	r6, #0
 800c3ea:	dd03      	ble.n	800c3f4 <__multiply+0x90>
 800c3ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d05b      	beq.n	800c4ac <__multiply+0x148>
 800c3f4:	6106      	str	r6, [r0, #16]
 800c3f6:	b005      	add	sp, #20
 800c3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3fc:	f843 2b04 	str.w	r2, [r3], #4
 800c400:	e7d8      	b.n	800c3b4 <__multiply+0x50>
 800c402:	f8b1 a000 	ldrh.w	sl, [r1]
 800c406:	f1ba 0f00 	cmp.w	sl, #0
 800c40a:	d024      	beq.n	800c456 <__multiply+0xf2>
 800c40c:	f104 0e14 	add.w	lr, r4, #20
 800c410:	46a9      	mov	r9, r5
 800c412:	f04f 0c00 	mov.w	ip, #0
 800c416:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c41a:	f8d9 3000 	ldr.w	r3, [r9]
 800c41e:	fa1f fb87 	uxth.w	fp, r7
 800c422:	b29b      	uxth	r3, r3
 800c424:	fb0a 330b 	mla	r3, sl, fp, r3
 800c428:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c42c:	f8d9 7000 	ldr.w	r7, [r9]
 800c430:	4463      	add	r3, ip
 800c432:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c436:	fb0a c70b 	mla	r7, sl, fp, ip
 800c43a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c43e:	b29b      	uxth	r3, r3
 800c440:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c444:	4572      	cmp	r2, lr
 800c446:	f849 3b04 	str.w	r3, [r9], #4
 800c44a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c44e:	d8e2      	bhi.n	800c416 <__multiply+0xb2>
 800c450:	9b01      	ldr	r3, [sp, #4]
 800c452:	f845 c003 	str.w	ip, [r5, r3]
 800c456:	9b03      	ldr	r3, [sp, #12]
 800c458:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c45c:	3104      	adds	r1, #4
 800c45e:	f1b9 0f00 	cmp.w	r9, #0
 800c462:	d021      	beq.n	800c4a8 <__multiply+0x144>
 800c464:	682b      	ldr	r3, [r5, #0]
 800c466:	f104 0c14 	add.w	ip, r4, #20
 800c46a:	46ae      	mov	lr, r5
 800c46c:	f04f 0a00 	mov.w	sl, #0
 800c470:	f8bc b000 	ldrh.w	fp, [ip]
 800c474:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c478:	fb09 770b 	mla	r7, r9, fp, r7
 800c47c:	4457      	add	r7, sl
 800c47e:	b29b      	uxth	r3, r3
 800c480:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c484:	f84e 3b04 	str.w	r3, [lr], #4
 800c488:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c48c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c490:	f8be 3000 	ldrh.w	r3, [lr]
 800c494:	fb09 330a 	mla	r3, r9, sl, r3
 800c498:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c49c:	4562      	cmp	r2, ip
 800c49e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c4a2:	d8e5      	bhi.n	800c470 <__multiply+0x10c>
 800c4a4:	9f01      	ldr	r7, [sp, #4]
 800c4a6:	51eb      	str	r3, [r5, r7]
 800c4a8:	3504      	adds	r5, #4
 800c4aa:	e799      	b.n	800c3e0 <__multiply+0x7c>
 800c4ac:	3e01      	subs	r6, #1
 800c4ae:	e79b      	b.n	800c3e8 <__multiply+0x84>
 800c4b0:	0800f70e 	.word	0x0800f70e
 800c4b4:	0800f71f 	.word	0x0800f71f

0800c4b8 <__pow5mult>:
 800c4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4bc:	4615      	mov	r5, r2
 800c4be:	f012 0203 	ands.w	r2, r2, #3
 800c4c2:	4607      	mov	r7, r0
 800c4c4:	460e      	mov	r6, r1
 800c4c6:	d007      	beq.n	800c4d8 <__pow5mult+0x20>
 800c4c8:	4c25      	ldr	r4, [pc, #148]	@ (800c560 <__pow5mult+0xa8>)
 800c4ca:	3a01      	subs	r2, #1
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c4d2:	f7ff fe55 	bl	800c180 <__multadd>
 800c4d6:	4606      	mov	r6, r0
 800c4d8:	10ad      	asrs	r5, r5, #2
 800c4da:	d03d      	beq.n	800c558 <__pow5mult+0xa0>
 800c4dc:	69fc      	ldr	r4, [r7, #28]
 800c4de:	b97c      	cbnz	r4, 800c500 <__pow5mult+0x48>
 800c4e0:	2010      	movs	r0, #16
 800c4e2:	f7fd fe29 	bl	800a138 <malloc>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	61f8      	str	r0, [r7, #28]
 800c4ea:	b928      	cbnz	r0, 800c4f8 <__pow5mult+0x40>
 800c4ec:	4b1d      	ldr	r3, [pc, #116]	@ (800c564 <__pow5mult+0xac>)
 800c4ee:	481e      	ldr	r0, [pc, #120]	@ (800c568 <__pow5mult+0xb0>)
 800c4f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c4f4:	f001 fb54 	bl	800dba0 <__assert_func>
 800c4f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4fc:	6004      	str	r4, [r0, #0]
 800c4fe:	60c4      	str	r4, [r0, #12]
 800c500:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c504:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c508:	b94c      	cbnz	r4, 800c51e <__pow5mult+0x66>
 800c50a:	f240 2171 	movw	r1, #625	@ 0x271
 800c50e:	4638      	mov	r0, r7
 800c510:	f7ff ff12 	bl	800c338 <__i2b>
 800c514:	2300      	movs	r3, #0
 800c516:	f8c8 0008 	str.w	r0, [r8, #8]
 800c51a:	4604      	mov	r4, r0
 800c51c:	6003      	str	r3, [r0, #0]
 800c51e:	f04f 0900 	mov.w	r9, #0
 800c522:	07eb      	lsls	r3, r5, #31
 800c524:	d50a      	bpl.n	800c53c <__pow5mult+0x84>
 800c526:	4631      	mov	r1, r6
 800c528:	4622      	mov	r2, r4
 800c52a:	4638      	mov	r0, r7
 800c52c:	f7ff ff1a 	bl	800c364 <__multiply>
 800c530:	4631      	mov	r1, r6
 800c532:	4680      	mov	r8, r0
 800c534:	4638      	mov	r0, r7
 800c536:	f7ff fe01 	bl	800c13c <_Bfree>
 800c53a:	4646      	mov	r6, r8
 800c53c:	106d      	asrs	r5, r5, #1
 800c53e:	d00b      	beq.n	800c558 <__pow5mult+0xa0>
 800c540:	6820      	ldr	r0, [r4, #0]
 800c542:	b938      	cbnz	r0, 800c554 <__pow5mult+0x9c>
 800c544:	4622      	mov	r2, r4
 800c546:	4621      	mov	r1, r4
 800c548:	4638      	mov	r0, r7
 800c54a:	f7ff ff0b 	bl	800c364 <__multiply>
 800c54e:	6020      	str	r0, [r4, #0]
 800c550:	f8c0 9000 	str.w	r9, [r0]
 800c554:	4604      	mov	r4, r0
 800c556:	e7e4      	b.n	800c522 <__pow5mult+0x6a>
 800c558:	4630      	mov	r0, r6
 800c55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c55e:	bf00      	nop
 800c560:	0800f778 	.word	0x0800f778
 800c564:	0800f69f 	.word	0x0800f69f
 800c568:	0800f71f 	.word	0x0800f71f

0800c56c <__lshift>:
 800c56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c570:	460c      	mov	r4, r1
 800c572:	6849      	ldr	r1, [r1, #4]
 800c574:	6923      	ldr	r3, [r4, #16]
 800c576:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c57a:	68a3      	ldr	r3, [r4, #8]
 800c57c:	4607      	mov	r7, r0
 800c57e:	4691      	mov	r9, r2
 800c580:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c584:	f108 0601 	add.w	r6, r8, #1
 800c588:	42b3      	cmp	r3, r6
 800c58a:	db0b      	blt.n	800c5a4 <__lshift+0x38>
 800c58c:	4638      	mov	r0, r7
 800c58e:	f7ff fd95 	bl	800c0bc <_Balloc>
 800c592:	4605      	mov	r5, r0
 800c594:	b948      	cbnz	r0, 800c5aa <__lshift+0x3e>
 800c596:	4602      	mov	r2, r0
 800c598:	4b28      	ldr	r3, [pc, #160]	@ (800c63c <__lshift+0xd0>)
 800c59a:	4829      	ldr	r0, [pc, #164]	@ (800c640 <__lshift+0xd4>)
 800c59c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c5a0:	f001 fafe 	bl	800dba0 <__assert_func>
 800c5a4:	3101      	adds	r1, #1
 800c5a6:	005b      	lsls	r3, r3, #1
 800c5a8:	e7ee      	b.n	800c588 <__lshift+0x1c>
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	f100 0114 	add.w	r1, r0, #20
 800c5b0:	f100 0210 	add.w	r2, r0, #16
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	4553      	cmp	r3, sl
 800c5b8:	db33      	blt.n	800c622 <__lshift+0xb6>
 800c5ba:	6920      	ldr	r0, [r4, #16]
 800c5bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c5c0:	f104 0314 	add.w	r3, r4, #20
 800c5c4:	f019 091f 	ands.w	r9, r9, #31
 800c5c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c5cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c5d0:	d02b      	beq.n	800c62a <__lshift+0xbe>
 800c5d2:	f1c9 0e20 	rsb	lr, r9, #32
 800c5d6:	468a      	mov	sl, r1
 800c5d8:	2200      	movs	r2, #0
 800c5da:	6818      	ldr	r0, [r3, #0]
 800c5dc:	fa00 f009 	lsl.w	r0, r0, r9
 800c5e0:	4310      	orrs	r0, r2
 800c5e2:	f84a 0b04 	str.w	r0, [sl], #4
 800c5e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5ea:	459c      	cmp	ip, r3
 800c5ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800c5f0:	d8f3      	bhi.n	800c5da <__lshift+0x6e>
 800c5f2:	ebac 0304 	sub.w	r3, ip, r4
 800c5f6:	3b15      	subs	r3, #21
 800c5f8:	f023 0303 	bic.w	r3, r3, #3
 800c5fc:	3304      	adds	r3, #4
 800c5fe:	f104 0015 	add.w	r0, r4, #21
 800c602:	4584      	cmp	ip, r0
 800c604:	bf38      	it	cc
 800c606:	2304      	movcc	r3, #4
 800c608:	50ca      	str	r2, [r1, r3]
 800c60a:	b10a      	cbz	r2, 800c610 <__lshift+0xa4>
 800c60c:	f108 0602 	add.w	r6, r8, #2
 800c610:	3e01      	subs	r6, #1
 800c612:	4638      	mov	r0, r7
 800c614:	612e      	str	r6, [r5, #16]
 800c616:	4621      	mov	r1, r4
 800c618:	f7ff fd90 	bl	800c13c <_Bfree>
 800c61c:	4628      	mov	r0, r5
 800c61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c622:	f842 0f04 	str.w	r0, [r2, #4]!
 800c626:	3301      	adds	r3, #1
 800c628:	e7c5      	b.n	800c5b6 <__lshift+0x4a>
 800c62a:	3904      	subs	r1, #4
 800c62c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c630:	f841 2f04 	str.w	r2, [r1, #4]!
 800c634:	459c      	cmp	ip, r3
 800c636:	d8f9      	bhi.n	800c62c <__lshift+0xc0>
 800c638:	e7ea      	b.n	800c610 <__lshift+0xa4>
 800c63a:	bf00      	nop
 800c63c:	0800f70e 	.word	0x0800f70e
 800c640:	0800f71f 	.word	0x0800f71f

0800c644 <__mcmp>:
 800c644:	690a      	ldr	r2, [r1, #16]
 800c646:	4603      	mov	r3, r0
 800c648:	6900      	ldr	r0, [r0, #16]
 800c64a:	1a80      	subs	r0, r0, r2
 800c64c:	b530      	push	{r4, r5, lr}
 800c64e:	d10e      	bne.n	800c66e <__mcmp+0x2a>
 800c650:	3314      	adds	r3, #20
 800c652:	3114      	adds	r1, #20
 800c654:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c658:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c65c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c660:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c664:	4295      	cmp	r5, r2
 800c666:	d003      	beq.n	800c670 <__mcmp+0x2c>
 800c668:	d205      	bcs.n	800c676 <__mcmp+0x32>
 800c66a:	f04f 30ff 	mov.w	r0, #4294967295
 800c66e:	bd30      	pop	{r4, r5, pc}
 800c670:	42a3      	cmp	r3, r4
 800c672:	d3f3      	bcc.n	800c65c <__mcmp+0x18>
 800c674:	e7fb      	b.n	800c66e <__mcmp+0x2a>
 800c676:	2001      	movs	r0, #1
 800c678:	e7f9      	b.n	800c66e <__mcmp+0x2a>
	...

0800c67c <__mdiff>:
 800c67c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c680:	4689      	mov	r9, r1
 800c682:	4606      	mov	r6, r0
 800c684:	4611      	mov	r1, r2
 800c686:	4648      	mov	r0, r9
 800c688:	4614      	mov	r4, r2
 800c68a:	f7ff ffdb 	bl	800c644 <__mcmp>
 800c68e:	1e05      	subs	r5, r0, #0
 800c690:	d112      	bne.n	800c6b8 <__mdiff+0x3c>
 800c692:	4629      	mov	r1, r5
 800c694:	4630      	mov	r0, r6
 800c696:	f7ff fd11 	bl	800c0bc <_Balloc>
 800c69a:	4602      	mov	r2, r0
 800c69c:	b928      	cbnz	r0, 800c6aa <__mdiff+0x2e>
 800c69e:	4b3f      	ldr	r3, [pc, #252]	@ (800c79c <__mdiff+0x120>)
 800c6a0:	f240 2137 	movw	r1, #567	@ 0x237
 800c6a4:	483e      	ldr	r0, [pc, #248]	@ (800c7a0 <__mdiff+0x124>)
 800c6a6:	f001 fa7b 	bl	800dba0 <__assert_func>
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c6b0:	4610      	mov	r0, r2
 800c6b2:	b003      	add	sp, #12
 800c6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b8:	bfbc      	itt	lt
 800c6ba:	464b      	movlt	r3, r9
 800c6bc:	46a1      	movlt	r9, r4
 800c6be:	4630      	mov	r0, r6
 800c6c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c6c4:	bfba      	itte	lt
 800c6c6:	461c      	movlt	r4, r3
 800c6c8:	2501      	movlt	r5, #1
 800c6ca:	2500      	movge	r5, #0
 800c6cc:	f7ff fcf6 	bl	800c0bc <_Balloc>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	b918      	cbnz	r0, 800c6dc <__mdiff+0x60>
 800c6d4:	4b31      	ldr	r3, [pc, #196]	@ (800c79c <__mdiff+0x120>)
 800c6d6:	f240 2145 	movw	r1, #581	@ 0x245
 800c6da:	e7e3      	b.n	800c6a4 <__mdiff+0x28>
 800c6dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c6e0:	6926      	ldr	r6, [r4, #16]
 800c6e2:	60c5      	str	r5, [r0, #12]
 800c6e4:	f109 0310 	add.w	r3, r9, #16
 800c6e8:	f109 0514 	add.w	r5, r9, #20
 800c6ec:	f104 0e14 	add.w	lr, r4, #20
 800c6f0:	f100 0b14 	add.w	fp, r0, #20
 800c6f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c6f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c6fc:	9301      	str	r3, [sp, #4]
 800c6fe:	46d9      	mov	r9, fp
 800c700:	f04f 0c00 	mov.w	ip, #0
 800c704:	9b01      	ldr	r3, [sp, #4]
 800c706:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c70a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c70e:	9301      	str	r3, [sp, #4]
 800c710:	fa1f f38a 	uxth.w	r3, sl
 800c714:	4619      	mov	r1, r3
 800c716:	b283      	uxth	r3, r0
 800c718:	1acb      	subs	r3, r1, r3
 800c71a:	0c00      	lsrs	r0, r0, #16
 800c71c:	4463      	add	r3, ip
 800c71e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c722:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c726:	b29b      	uxth	r3, r3
 800c728:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c72c:	4576      	cmp	r6, lr
 800c72e:	f849 3b04 	str.w	r3, [r9], #4
 800c732:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c736:	d8e5      	bhi.n	800c704 <__mdiff+0x88>
 800c738:	1b33      	subs	r3, r6, r4
 800c73a:	3b15      	subs	r3, #21
 800c73c:	f023 0303 	bic.w	r3, r3, #3
 800c740:	3415      	adds	r4, #21
 800c742:	3304      	adds	r3, #4
 800c744:	42a6      	cmp	r6, r4
 800c746:	bf38      	it	cc
 800c748:	2304      	movcc	r3, #4
 800c74a:	441d      	add	r5, r3
 800c74c:	445b      	add	r3, fp
 800c74e:	461e      	mov	r6, r3
 800c750:	462c      	mov	r4, r5
 800c752:	4544      	cmp	r4, r8
 800c754:	d30e      	bcc.n	800c774 <__mdiff+0xf8>
 800c756:	f108 0103 	add.w	r1, r8, #3
 800c75a:	1b49      	subs	r1, r1, r5
 800c75c:	f021 0103 	bic.w	r1, r1, #3
 800c760:	3d03      	subs	r5, #3
 800c762:	45a8      	cmp	r8, r5
 800c764:	bf38      	it	cc
 800c766:	2100      	movcc	r1, #0
 800c768:	440b      	add	r3, r1
 800c76a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c76e:	b191      	cbz	r1, 800c796 <__mdiff+0x11a>
 800c770:	6117      	str	r7, [r2, #16]
 800c772:	e79d      	b.n	800c6b0 <__mdiff+0x34>
 800c774:	f854 1b04 	ldr.w	r1, [r4], #4
 800c778:	46e6      	mov	lr, ip
 800c77a:	0c08      	lsrs	r0, r1, #16
 800c77c:	fa1c fc81 	uxtah	ip, ip, r1
 800c780:	4471      	add	r1, lr
 800c782:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c786:	b289      	uxth	r1, r1
 800c788:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c78c:	f846 1b04 	str.w	r1, [r6], #4
 800c790:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c794:	e7dd      	b.n	800c752 <__mdiff+0xd6>
 800c796:	3f01      	subs	r7, #1
 800c798:	e7e7      	b.n	800c76a <__mdiff+0xee>
 800c79a:	bf00      	nop
 800c79c:	0800f70e 	.word	0x0800f70e
 800c7a0:	0800f71f 	.word	0x0800f71f

0800c7a4 <__ulp>:
 800c7a4:	b082      	sub	sp, #8
 800c7a6:	ed8d 0b00 	vstr	d0, [sp]
 800c7aa:	9a01      	ldr	r2, [sp, #4]
 800c7ac:	4b0f      	ldr	r3, [pc, #60]	@ (800c7ec <__ulp+0x48>)
 800c7ae:	4013      	ands	r3, r2
 800c7b0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	dc08      	bgt.n	800c7ca <__ulp+0x26>
 800c7b8:	425b      	negs	r3, r3
 800c7ba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c7be:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c7c2:	da04      	bge.n	800c7ce <__ulp+0x2a>
 800c7c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c7c8:	4113      	asrs	r3, r2
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	e008      	b.n	800c7e0 <__ulp+0x3c>
 800c7ce:	f1a2 0314 	sub.w	r3, r2, #20
 800c7d2:	2b1e      	cmp	r3, #30
 800c7d4:	bfda      	itte	le
 800c7d6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c7da:	40da      	lsrle	r2, r3
 800c7dc:	2201      	movgt	r2, #1
 800c7de:	2300      	movs	r3, #0
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	4610      	mov	r0, r2
 800c7e4:	ec41 0b10 	vmov	d0, r0, r1
 800c7e8:	b002      	add	sp, #8
 800c7ea:	4770      	bx	lr
 800c7ec:	7ff00000 	.word	0x7ff00000

0800c7f0 <__b2d>:
 800c7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f4:	6906      	ldr	r6, [r0, #16]
 800c7f6:	f100 0814 	add.w	r8, r0, #20
 800c7fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c7fe:	1f37      	subs	r7, r6, #4
 800c800:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c804:	4610      	mov	r0, r2
 800c806:	f7ff fd4b 	bl	800c2a0 <__hi0bits>
 800c80a:	f1c0 0320 	rsb	r3, r0, #32
 800c80e:	280a      	cmp	r0, #10
 800c810:	600b      	str	r3, [r1, #0]
 800c812:	491b      	ldr	r1, [pc, #108]	@ (800c880 <__b2d+0x90>)
 800c814:	dc15      	bgt.n	800c842 <__b2d+0x52>
 800c816:	f1c0 0c0b 	rsb	ip, r0, #11
 800c81a:	fa22 f30c 	lsr.w	r3, r2, ip
 800c81e:	45b8      	cmp	r8, r7
 800c820:	ea43 0501 	orr.w	r5, r3, r1
 800c824:	bf34      	ite	cc
 800c826:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c82a:	2300      	movcs	r3, #0
 800c82c:	3015      	adds	r0, #21
 800c82e:	fa02 f000 	lsl.w	r0, r2, r0
 800c832:	fa23 f30c 	lsr.w	r3, r3, ip
 800c836:	4303      	orrs	r3, r0
 800c838:	461c      	mov	r4, r3
 800c83a:	ec45 4b10 	vmov	d0, r4, r5
 800c83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c842:	45b8      	cmp	r8, r7
 800c844:	bf3a      	itte	cc
 800c846:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c84a:	f1a6 0708 	subcc.w	r7, r6, #8
 800c84e:	2300      	movcs	r3, #0
 800c850:	380b      	subs	r0, #11
 800c852:	d012      	beq.n	800c87a <__b2d+0x8a>
 800c854:	f1c0 0120 	rsb	r1, r0, #32
 800c858:	fa23 f401 	lsr.w	r4, r3, r1
 800c85c:	4082      	lsls	r2, r0
 800c85e:	4322      	orrs	r2, r4
 800c860:	4547      	cmp	r7, r8
 800c862:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c866:	bf8c      	ite	hi
 800c868:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c86c:	2200      	movls	r2, #0
 800c86e:	4083      	lsls	r3, r0
 800c870:	40ca      	lsrs	r2, r1
 800c872:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c876:	4313      	orrs	r3, r2
 800c878:	e7de      	b.n	800c838 <__b2d+0x48>
 800c87a:	ea42 0501 	orr.w	r5, r2, r1
 800c87e:	e7db      	b.n	800c838 <__b2d+0x48>
 800c880:	3ff00000 	.word	0x3ff00000

0800c884 <__d2b>:
 800c884:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c888:	460f      	mov	r7, r1
 800c88a:	2101      	movs	r1, #1
 800c88c:	ec59 8b10 	vmov	r8, r9, d0
 800c890:	4616      	mov	r6, r2
 800c892:	f7ff fc13 	bl	800c0bc <_Balloc>
 800c896:	4604      	mov	r4, r0
 800c898:	b930      	cbnz	r0, 800c8a8 <__d2b+0x24>
 800c89a:	4602      	mov	r2, r0
 800c89c:	4b23      	ldr	r3, [pc, #140]	@ (800c92c <__d2b+0xa8>)
 800c89e:	4824      	ldr	r0, [pc, #144]	@ (800c930 <__d2b+0xac>)
 800c8a0:	f240 310f 	movw	r1, #783	@ 0x30f
 800c8a4:	f001 f97c 	bl	800dba0 <__assert_func>
 800c8a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c8ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8b0:	b10d      	cbz	r5, 800c8b6 <__d2b+0x32>
 800c8b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c8b6:	9301      	str	r3, [sp, #4]
 800c8b8:	f1b8 0300 	subs.w	r3, r8, #0
 800c8bc:	d023      	beq.n	800c906 <__d2b+0x82>
 800c8be:	4668      	mov	r0, sp
 800c8c0:	9300      	str	r3, [sp, #0]
 800c8c2:	f7ff fd0c 	bl	800c2de <__lo0bits>
 800c8c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c8ca:	b1d0      	cbz	r0, 800c902 <__d2b+0x7e>
 800c8cc:	f1c0 0320 	rsb	r3, r0, #32
 800c8d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c8d4:	430b      	orrs	r3, r1
 800c8d6:	40c2      	lsrs	r2, r0
 800c8d8:	6163      	str	r3, [r4, #20]
 800c8da:	9201      	str	r2, [sp, #4]
 800c8dc:	9b01      	ldr	r3, [sp, #4]
 800c8de:	61a3      	str	r3, [r4, #24]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	bf0c      	ite	eq
 800c8e4:	2201      	moveq	r2, #1
 800c8e6:	2202      	movne	r2, #2
 800c8e8:	6122      	str	r2, [r4, #16]
 800c8ea:	b1a5      	cbz	r5, 800c916 <__d2b+0x92>
 800c8ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c8f0:	4405      	add	r5, r0
 800c8f2:	603d      	str	r5, [r7, #0]
 800c8f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c8f8:	6030      	str	r0, [r6, #0]
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	b003      	add	sp, #12
 800c8fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c902:	6161      	str	r1, [r4, #20]
 800c904:	e7ea      	b.n	800c8dc <__d2b+0x58>
 800c906:	a801      	add	r0, sp, #4
 800c908:	f7ff fce9 	bl	800c2de <__lo0bits>
 800c90c:	9b01      	ldr	r3, [sp, #4]
 800c90e:	6163      	str	r3, [r4, #20]
 800c910:	3020      	adds	r0, #32
 800c912:	2201      	movs	r2, #1
 800c914:	e7e8      	b.n	800c8e8 <__d2b+0x64>
 800c916:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c91a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c91e:	6038      	str	r0, [r7, #0]
 800c920:	6918      	ldr	r0, [r3, #16]
 800c922:	f7ff fcbd 	bl	800c2a0 <__hi0bits>
 800c926:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c92a:	e7e5      	b.n	800c8f8 <__d2b+0x74>
 800c92c:	0800f70e 	.word	0x0800f70e
 800c930:	0800f71f 	.word	0x0800f71f

0800c934 <__ratio>:
 800c934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c938:	b085      	sub	sp, #20
 800c93a:	e9cd 1000 	strd	r1, r0, [sp]
 800c93e:	a902      	add	r1, sp, #8
 800c940:	f7ff ff56 	bl	800c7f0 <__b2d>
 800c944:	9800      	ldr	r0, [sp, #0]
 800c946:	a903      	add	r1, sp, #12
 800c948:	ec55 4b10 	vmov	r4, r5, d0
 800c94c:	f7ff ff50 	bl	800c7f0 <__b2d>
 800c950:	9b01      	ldr	r3, [sp, #4]
 800c952:	6919      	ldr	r1, [r3, #16]
 800c954:	9b00      	ldr	r3, [sp, #0]
 800c956:	691b      	ldr	r3, [r3, #16]
 800c958:	1ac9      	subs	r1, r1, r3
 800c95a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c95e:	1a9b      	subs	r3, r3, r2
 800c960:	ec5b ab10 	vmov	sl, fp, d0
 800c964:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c968:	2b00      	cmp	r3, #0
 800c96a:	bfce      	itee	gt
 800c96c:	462a      	movgt	r2, r5
 800c96e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c972:	465a      	movle	r2, fp
 800c974:	462f      	mov	r7, r5
 800c976:	46d9      	mov	r9, fp
 800c978:	bfcc      	ite	gt
 800c97a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c97e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c982:	464b      	mov	r3, r9
 800c984:	4652      	mov	r2, sl
 800c986:	4620      	mov	r0, r4
 800c988:	4639      	mov	r1, r7
 800c98a:	f7f9 fd95 	bl	80064b8 <__aeabi_ddiv>
 800c98e:	ec41 0b10 	vmov	d0, r0, r1
 800c992:	b005      	add	sp, #20
 800c994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c998 <__copybits>:
 800c998:	3901      	subs	r1, #1
 800c99a:	b570      	push	{r4, r5, r6, lr}
 800c99c:	1149      	asrs	r1, r1, #5
 800c99e:	6914      	ldr	r4, [r2, #16]
 800c9a0:	3101      	adds	r1, #1
 800c9a2:	f102 0314 	add.w	r3, r2, #20
 800c9a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c9aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c9ae:	1f05      	subs	r5, r0, #4
 800c9b0:	42a3      	cmp	r3, r4
 800c9b2:	d30c      	bcc.n	800c9ce <__copybits+0x36>
 800c9b4:	1aa3      	subs	r3, r4, r2
 800c9b6:	3b11      	subs	r3, #17
 800c9b8:	f023 0303 	bic.w	r3, r3, #3
 800c9bc:	3211      	adds	r2, #17
 800c9be:	42a2      	cmp	r2, r4
 800c9c0:	bf88      	it	hi
 800c9c2:	2300      	movhi	r3, #0
 800c9c4:	4418      	add	r0, r3
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	4288      	cmp	r0, r1
 800c9ca:	d305      	bcc.n	800c9d8 <__copybits+0x40>
 800c9cc:	bd70      	pop	{r4, r5, r6, pc}
 800c9ce:	f853 6b04 	ldr.w	r6, [r3], #4
 800c9d2:	f845 6f04 	str.w	r6, [r5, #4]!
 800c9d6:	e7eb      	b.n	800c9b0 <__copybits+0x18>
 800c9d8:	f840 3b04 	str.w	r3, [r0], #4
 800c9dc:	e7f4      	b.n	800c9c8 <__copybits+0x30>

0800c9de <__any_on>:
 800c9de:	f100 0214 	add.w	r2, r0, #20
 800c9e2:	6900      	ldr	r0, [r0, #16]
 800c9e4:	114b      	asrs	r3, r1, #5
 800c9e6:	4298      	cmp	r0, r3
 800c9e8:	b510      	push	{r4, lr}
 800c9ea:	db11      	blt.n	800ca10 <__any_on+0x32>
 800c9ec:	dd0a      	ble.n	800ca04 <__any_on+0x26>
 800c9ee:	f011 011f 	ands.w	r1, r1, #31
 800c9f2:	d007      	beq.n	800ca04 <__any_on+0x26>
 800c9f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c9f8:	fa24 f001 	lsr.w	r0, r4, r1
 800c9fc:	fa00 f101 	lsl.w	r1, r0, r1
 800ca00:	428c      	cmp	r4, r1
 800ca02:	d10b      	bne.n	800ca1c <__any_on+0x3e>
 800ca04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d803      	bhi.n	800ca14 <__any_on+0x36>
 800ca0c:	2000      	movs	r0, #0
 800ca0e:	bd10      	pop	{r4, pc}
 800ca10:	4603      	mov	r3, r0
 800ca12:	e7f7      	b.n	800ca04 <__any_on+0x26>
 800ca14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca18:	2900      	cmp	r1, #0
 800ca1a:	d0f5      	beq.n	800ca08 <__any_on+0x2a>
 800ca1c:	2001      	movs	r0, #1
 800ca1e:	e7f6      	b.n	800ca0e <__any_on+0x30>

0800ca20 <sulp>:
 800ca20:	b570      	push	{r4, r5, r6, lr}
 800ca22:	4604      	mov	r4, r0
 800ca24:	460d      	mov	r5, r1
 800ca26:	ec45 4b10 	vmov	d0, r4, r5
 800ca2a:	4616      	mov	r6, r2
 800ca2c:	f7ff feba 	bl	800c7a4 <__ulp>
 800ca30:	ec51 0b10 	vmov	r0, r1, d0
 800ca34:	b17e      	cbz	r6, 800ca56 <sulp+0x36>
 800ca36:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ca3a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	dd09      	ble.n	800ca56 <sulp+0x36>
 800ca42:	051b      	lsls	r3, r3, #20
 800ca44:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ca48:	2400      	movs	r4, #0
 800ca4a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ca4e:	4622      	mov	r2, r4
 800ca50:	462b      	mov	r3, r5
 800ca52:	f7f9 fc07 	bl	8006264 <__aeabi_dmul>
 800ca56:	ec41 0b10 	vmov	d0, r0, r1
 800ca5a:	bd70      	pop	{r4, r5, r6, pc}
 800ca5c:	0000      	movs	r0, r0
	...

0800ca60 <_strtod_l>:
 800ca60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca64:	b09f      	sub	sp, #124	@ 0x7c
 800ca66:	460c      	mov	r4, r1
 800ca68:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ca6e:	9005      	str	r0, [sp, #20]
 800ca70:	f04f 0a00 	mov.w	sl, #0
 800ca74:	f04f 0b00 	mov.w	fp, #0
 800ca78:	460a      	mov	r2, r1
 800ca7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca7c:	7811      	ldrb	r1, [r2, #0]
 800ca7e:	292b      	cmp	r1, #43	@ 0x2b
 800ca80:	d04a      	beq.n	800cb18 <_strtod_l+0xb8>
 800ca82:	d838      	bhi.n	800caf6 <_strtod_l+0x96>
 800ca84:	290d      	cmp	r1, #13
 800ca86:	d832      	bhi.n	800caee <_strtod_l+0x8e>
 800ca88:	2908      	cmp	r1, #8
 800ca8a:	d832      	bhi.n	800caf2 <_strtod_l+0x92>
 800ca8c:	2900      	cmp	r1, #0
 800ca8e:	d03b      	beq.n	800cb08 <_strtod_l+0xa8>
 800ca90:	2200      	movs	r2, #0
 800ca92:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ca94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ca96:	782a      	ldrb	r2, [r5, #0]
 800ca98:	2a30      	cmp	r2, #48	@ 0x30
 800ca9a:	f040 80b3 	bne.w	800cc04 <_strtod_l+0x1a4>
 800ca9e:	786a      	ldrb	r2, [r5, #1]
 800caa0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800caa4:	2a58      	cmp	r2, #88	@ 0x58
 800caa6:	d16e      	bne.n	800cb86 <_strtod_l+0x126>
 800caa8:	9302      	str	r3, [sp, #8]
 800caaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800caac:	9301      	str	r3, [sp, #4]
 800caae:	ab1a      	add	r3, sp, #104	@ 0x68
 800cab0:	9300      	str	r3, [sp, #0]
 800cab2:	4a8e      	ldr	r2, [pc, #568]	@ (800ccec <_strtod_l+0x28c>)
 800cab4:	9805      	ldr	r0, [sp, #20]
 800cab6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cab8:	a919      	add	r1, sp, #100	@ 0x64
 800caba:	f001 f90b 	bl	800dcd4 <__gethex>
 800cabe:	f010 060f 	ands.w	r6, r0, #15
 800cac2:	4604      	mov	r4, r0
 800cac4:	d005      	beq.n	800cad2 <_strtod_l+0x72>
 800cac6:	2e06      	cmp	r6, #6
 800cac8:	d128      	bne.n	800cb1c <_strtod_l+0xbc>
 800caca:	3501      	adds	r5, #1
 800cacc:	2300      	movs	r3, #0
 800cace:	9519      	str	r5, [sp, #100]	@ 0x64
 800cad0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cad2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f040 858e 	bne.w	800d5f6 <_strtod_l+0xb96>
 800cada:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cadc:	b1cb      	cbz	r3, 800cb12 <_strtod_l+0xb2>
 800cade:	4652      	mov	r2, sl
 800cae0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cae4:	ec43 2b10 	vmov	d0, r2, r3
 800cae8:	b01f      	add	sp, #124	@ 0x7c
 800caea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caee:	2920      	cmp	r1, #32
 800caf0:	d1ce      	bne.n	800ca90 <_strtod_l+0x30>
 800caf2:	3201      	adds	r2, #1
 800caf4:	e7c1      	b.n	800ca7a <_strtod_l+0x1a>
 800caf6:	292d      	cmp	r1, #45	@ 0x2d
 800caf8:	d1ca      	bne.n	800ca90 <_strtod_l+0x30>
 800cafa:	2101      	movs	r1, #1
 800cafc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cafe:	1c51      	adds	r1, r2, #1
 800cb00:	9119      	str	r1, [sp, #100]	@ 0x64
 800cb02:	7852      	ldrb	r2, [r2, #1]
 800cb04:	2a00      	cmp	r2, #0
 800cb06:	d1c5      	bne.n	800ca94 <_strtod_l+0x34>
 800cb08:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cb0a:	9419      	str	r4, [sp, #100]	@ 0x64
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	f040 8570 	bne.w	800d5f2 <_strtod_l+0xb92>
 800cb12:	4652      	mov	r2, sl
 800cb14:	465b      	mov	r3, fp
 800cb16:	e7e5      	b.n	800cae4 <_strtod_l+0x84>
 800cb18:	2100      	movs	r1, #0
 800cb1a:	e7ef      	b.n	800cafc <_strtod_l+0x9c>
 800cb1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cb1e:	b13a      	cbz	r2, 800cb30 <_strtod_l+0xd0>
 800cb20:	2135      	movs	r1, #53	@ 0x35
 800cb22:	a81c      	add	r0, sp, #112	@ 0x70
 800cb24:	f7ff ff38 	bl	800c998 <__copybits>
 800cb28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb2a:	9805      	ldr	r0, [sp, #20]
 800cb2c:	f7ff fb06 	bl	800c13c <_Bfree>
 800cb30:	3e01      	subs	r6, #1
 800cb32:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cb34:	2e04      	cmp	r6, #4
 800cb36:	d806      	bhi.n	800cb46 <_strtod_l+0xe6>
 800cb38:	e8df f006 	tbb	[pc, r6]
 800cb3c:	201d0314 	.word	0x201d0314
 800cb40:	14          	.byte	0x14
 800cb41:	00          	.byte	0x00
 800cb42:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cb46:	05e1      	lsls	r1, r4, #23
 800cb48:	bf48      	it	mi
 800cb4a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cb4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb52:	0d1b      	lsrs	r3, r3, #20
 800cb54:	051b      	lsls	r3, r3, #20
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1bb      	bne.n	800cad2 <_strtod_l+0x72>
 800cb5a:	f7fe fbc9 	bl	800b2f0 <__errno>
 800cb5e:	2322      	movs	r3, #34	@ 0x22
 800cb60:	6003      	str	r3, [r0, #0]
 800cb62:	e7b6      	b.n	800cad2 <_strtod_l+0x72>
 800cb64:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cb68:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cb6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cb70:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cb74:	e7e7      	b.n	800cb46 <_strtod_l+0xe6>
 800cb76:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ccf4 <_strtod_l+0x294>
 800cb7a:	e7e4      	b.n	800cb46 <_strtod_l+0xe6>
 800cb7c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cb80:	f04f 3aff 	mov.w	sl, #4294967295
 800cb84:	e7df      	b.n	800cb46 <_strtod_l+0xe6>
 800cb86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb88:	1c5a      	adds	r2, r3, #1
 800cb8a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb8c:	785b      	ldrb	r3, [r3, #1]
 800cb8e:	2b30      	cmp	r3, #48	@ 0x30
 800cb90:	d0f9      	beq.n	800cb86 <_strtod_l+0x126>
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d09d      	beq.n	800cad2 <_strtod_l+0x72>
 800cb96:	2301      	movs	r3, #1
 800cb98:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb9c:	930c      	str	r3, [sp, #48]	@ 0x30
 800cb9e:	2300      	movs	r3, #0
 800cba0:	9308      	str	r3, [sp, #32]
 800cba2:	930a      	str	r3, [sp, #40]	@ 0x28
 800cba4:	461f      	mov	r7, r3
 800cba6:	220a      	movs	r2, #10
 800cba8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cbaa:	7805      	ldrb	r5, [r0, #0]
 800cbac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cbb0:	b2d9      	uxtb	r1, r3
 800cbb2:	2909      	cmp	r1, #9
 800cbb4:	d928      	bls.n	800cc08 <_strtod_l+0x1a8>
 800cbb6:	494e      	ldr	r1, [pc, #312]	@ (800ccf0 <_strtod_l+0x290>)
 800cbb8:	2201      	movs	r2, #1
 800cbba:	f000 ffd5 	bl	800db68 <strncmp>
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	d032      	beq.n	800cc28 <_strtod_l+0x1c8>
 800cbc2:	2000      	movs	r0, #0
 800cbc4:	462a      	mov	r2, r5
 800cbc6:	4681      	mov	r9, r0
 800cbc8:	463d      	mov	r5, r7
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2a65      	cmp	r2, #101	@ 0x65
 800cbce:	d001      	beq.n	800cbd4 <_strtod_l+0x174>
 800cbd0:	2a45      	cmp	r2, #69	@ 0x45
 800cbd2:	d114      	bne.n	800cbfe <_strtod_l+0x19e>
 800cbd4:	b91d      	cbnz	r5, 800cbde <_strtod_l+0x17e>
 800cbd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbd8:	4302      	orrs	r2, r0
 800cbda:	d095      	beq.n	800cb08 <_strtod_l+0xa8>
 800cbdc:	2500      	movs	r5, #0
 800cbde:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cbe0:	1c62      	adds	r2, r4, #1
 800cbe2:	9219      	str	r2, [sp, #100]	@ 0x64
 800cbe4:	7862      	ldrb	r2, [r4, #1]
 800cbe6:	2a2b      	cmp	r2, #43	@ 0x2b
 800cbe8:	d077      	beq.n	800ccda <_strtod_l+0x27a>
 800cbea:	2a2d      	cmp	r2, #45	@ 0x2d
 800cbec:	d07b      	beq.n	800cce6 <_strtod_l+0x286>
 800cbee:	f04f 0c00 	mov.w	ip, #0
 800cbf2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cbf6:	2909      	cmp	r1, #9
 800cbf8:	f240 8082 	bls.w	800cd00 <_strtod_l+0x2a0>
 800cbfc:	9419      	str	r4, [sp, #100]	@ 0x64
 800cbfe:	f04f 0800 	mov.w	r8, #0
 800cc02:	e0a2      	b.n	800cd4a <_strtod_l+0x2ea>
 800cc04:	2300      	movs	r3, #0
 800cc06:	e7c7      	b.n	800cb98 <_strtod_l+0x138>
 800cc08:	2f08      	cmp	r7, #8
 800cc0a:	bfd5      	itete	le
 800cc0c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800cc0e:	9908      	ldrgt	r1, [sp, #32]
 800cc10:	fb02 3301 	mlale	r3, r2, r1, r3
 800cc14:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cc18:	f100 0001 	add.w	r0, r0, #1
 800cc1c:	bfd4      	ite	le
 800cc1e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cc20:	9308      	strgt	r3, [sp, #32]
 800cc22:	3701      	adds	r7, #1
 800cc24:	9019      	str	r0, [sp, #100]	@ 0x64
 800cc26:	e7bf      	b.n	800cba8 <_strtod_l+0x148>
 800cc28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc2a:	1c5a      	adds	r2, r3, #1
 800cc2c:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc2e:	785a      	ldrb	r2, [r3, #1]
 800cc30:	b37f      	cbz	r7, 800cc92 <_strtod_l+0x232>
 800cc32:	4681      	mov	r9, r0
 800cc34:	463d      	mov	r5, r7
 800cc36:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cc3a:	2b09      	cmp	r3, #9
 800cc3c:	d912      	bls.n	800cc64 <_strtod_l+0x204>
 800cc3e:	2301      	movs	r3, #1
 800cc40:	e7c4      	b.n	800cbcc <_strtod_l+0x16c>
 800cc42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc44:	1c5a      	adds	r2, r3, #1
 800cc46:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc48:	785a      	ldrb	r2, [r3, #1]
 800cc4a:	3001      	adds	r0, #1
 800cc4c:	2a30      	cmp	r2, #48	@ 0x30
 800cc4e:	d0f8      	beq.n	800cc42 <_strtod_l+0x1e2>
 800cc50:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cc54:	2b08      	cmp	r3, #8
 800cc56:	f200 84d3 	bhi.w	800d600 <_strtod_l+0xba0>
 800cc5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc5c:	930c      	str	r3, [sp, #48]	@ 0x30
 800cc5e:	4681      	mov	r9, r0
 800cc60:	2000      	movs	r0, #0
 800cc62:	4605      	mov	r5, r0
 800cc64:	3a30      	subs	r2, #48	@ 0x30
 800cc66:	f100 0301 	add.w	r3, r0, #1
 800cc6a:	d02a      	beq.n	800ccc2 <_strtod_l+0x262>
 800cc6c:	4499      	add	r9, r3
 800cc6e:	eb00 0c05 	add.w	ip, r0, r5
 800cc72:	462b      	mov	r3, r5
 800cc74:	210a      	movs	r1, #10
 800cc76:	4563      	cmp	r3, ip
 800cc78:	d10d      	bne.n	800cc96 <_strtod_l+0x236>
 800cc7a:	1c69      	adds	r1, r5, #1
 800cc7c:	4401      	add	r1, r0
 800cc7e:	4428      	add	r0, r5
 800cc80:	2808      	cmp	r0, #8
 800cc82:	dc16      	bgt.n	800ccb2 <_strtod_l+0x252>
 800cc84:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cc86:	230a      	movs	r3, #10
 800cc88:	fb03 2300 	mla	r3, r3, r0, r2
 800cc8c:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc8e:	2300      	movs	r3, #0
 800cc90:	e018      	b.n	800ccc4 <_strtod_l+0x264>
 800cc92:	4638      	mov	r0, r7
 800cc94:	e7da      	b.n	800cc4c <_strtod_l+0x1ec>
 800cc96:	2b08      	cmp	r3, #8
 800cc98:	f103 0301 	add.w	r3, r3, #1
 800cc9c:	dc03      	bgt.n	800cca6 <_strtod_l+0x246>
 800cc9e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cca0:	434e      	muls	r6, r1
 800cca2:	960a      	str	r6, [sp, #40]	@ 0x28
 800cca4:	e7e7      	b.n	800cc76 <_strtod_l+0x216>
 800cca6:	2b10      	cmp	r3, #16
 800cca8:	bfde      	ittt	le
 800ccaa:	9e08      	ldrle	r6, [sp, #32]
 800ccac:	434e      	mulle	r6, r1
 800ccae:	9608      	strle	r6, [sp, #32]
 800ccb0:	e7e1      	b.n	800cc76 <_strtod_l+0x216>
 800ccb2:	280f      	cmp	r0, #15
 800ccb4:	dceb      	bgt.n	800cc8e <_strtod_l+0x22e>
 800ccb6:	9808      	ldr	r0, [sp, #32]
 800ccb8:	230a      	movs	r3, #10
 800ccba:	fb03 2300 	mla	r3, r3, r0, r2
 800ccbe:	9308      	str	r3, [sp, #32]
 800ccc0:	e7e5      	b.n	800cc8e <_strtod_l+0x22e>
 800ccc2:	4629      	mov	r1, r5
 800ccc4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ccc6:	1c50      	adds	r0, r2, #1
 800ccc8:	9019      	str	r0, [sp, #100]	@ 0x64
 800ccca:	7852      	ldrb	r2, [r2, #1]
 800cccc:	4618      	mov	r0, r3
 800ccce:	460d      	mov	r5, r1
 800ccd0:	e7b1      	b.n	800cc36 <_strtod_l+0x1d6>
 800ccd2:	f04f 0900 	mov.w	r9, #0
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	e77d      	b.n	800cbd6 <_strtod_l+0x176>
 800ccda:	f04f 0c00 	mov.w	ip, #0
 800ccde:	1ca2      	adds	r2, r4, #2
 800cce0:	9219      	str	r2, [sp, #100]	@ 0x64
 800cce2:	78a2      	ldrb	r2, [r4, #2]
 800cce4:	e785      	b.n	800cbf2 <_strtod_l+0x192>
 800cce6:	f04f 0c01 	mov.w	ip, #1
 800ccea:	e7f8      	b.n	800ccde <_strtod_l+0x27e>
 800ccec:	0800f890 	.word	0x0800f890
 800ccf0:	0800f878 	.word	0x0800f878
 800ccf4:	7ff00000 	.word	0x7ff00000
 800ccf8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ccfa:	1c51      	adds	r1, r2, #1
 800ccfc:	9119      	str	r1, [sp, #100]	@ 0x64
 800ccfe:	7852      	ldrb	r2, [r2, #1]
 800cd00:	2a30      	cmp	r2, #48	@ 0x30
 800cd02:	d0f9      	beq.n	800ccf8 <_strtod_l+0x298>
 800cd04:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cd08:	2908      	cmp	r1, #8
 800cd0a:	f63f af78 	bhi.w	800cbfe <_strtod_l+0x19e>
 800cd0e:	3a30      	subs	r2, #48	@ 0x30
 800cd10:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd12:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd14:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cd16:	f04f 080a 	mov.w	r8, #10
 800cd1a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd1c:	1c56      	adds	r6, r2, #1
 800cd1e:	9619      	str	r6, [sp, #100]	@ 0x64
 800cd20:	7852      	ldrb	r2, [r2, #1]
 800cd22:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cd26:	f1be 0f09 	cmp.w	lr, #9
 800cd2a:	d939      	bls.n	800cda0 <_strtod_l+0x340>
 800cd2c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cd2e:	1a76      	subs	r6, r6, r1
 800cd30:	2e08      	cmp	r6, #8
 800cd32:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cd36:	dc03      	bgt.n	800cd40 <_strtod_l+0x2e0>
 800cd38:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cd3a:	4588      	cmp	r8, r1
 800cd3c:	bfa8      	it	ge
 800cd3e:	4688      	movge	r8, r1
 800cd40:	f1bc 0f00 	cmp.w	ip, #0
 800cd44:	d001      	beq.n	800cd4a <_strtod_l+0x2ea>
 800cd46:	f1c8 0800 	rsb	r8, r8, #0
 800cd4a:	2d00      	cmp	r5, #0
 800cd4c:	d14e      	bne.n	800cdec <_strtod_l+0x38c>
 800cd4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd50:	4308      	orrs	r0, r1
 800cd52:	f47f aebe 	bne.w	800cad2 <_strtod_l+0x72>
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	f47f aed6 	bne.w	800cb08 <_strtod_l+0xa8>
 800cd5c:	2a69      	cmp	r2, #105	@ 0x69
 800cd5e:	d028      	beq.n	800cdb2 <_strtod_l+0x352>
 800cd60:	dc25      	bgt.n	800cdae <_strtod_l+0x34e>
 800cd62:	2a49      	cmp	r2, #73	@ 0x49
 800cd64:	d025      	beq.n	800cdb2 <_strtod_l+0x352>
 800cd66:	2a4e      	cmp	r2, #78	@ 0x4e
 800cd68:	f47f aece 	bne.w	800cb08 <_strtod_l+0xa8>
 800cd6c:	499b      	ldr	r1, [pc, #620]	@ (800cfdc <_strtod_l+0x57c>)
 800cd6e:	a819      	add	r0, sp, #100	@ 0x64
 800cd70:	f001 f9d2 	bl	800e118 <__match>
 800cd74:	2800      	cmp	r0, #0
 800cd76:	f43f aec7 	beq.w	800cb08 <_strtod_l+0xa8>
 800cd7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	2b28      	cmp	r3, #40	@ 0x28
 800cd80:	d12e      	bne.n	800cde0 <_strtod_l+0x380>
 800cd82:	4997      	ldr	r1, [pc, #604]	@ (800cfe0 <_strtod_l+0x580>)
 800cd84:	aa1c      	add	r2, sp, #112	@ 0x70
 800cd86:	a819      	add	r0, sp, #100	@ 0x64
 800cd88:	f001 f9da 	bl	800e140 <__hexnan>
 800cd8c:	2805      	cmp	r0, #5
 800cd8e:	d127      	bne.n	800cde0 <_strtod_l+0x380>
 800cd90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cd92:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cd96:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cd9a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cd9e:	e698      	b.n	800cad2 <_strtod_l+0x72>
 800cda0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cda2:	fb08 2101 	mla	r1, r8, r1, r2
 800cda6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cdaa:	920e      	str	r2, [sp, #56]	@ 0x38
 800cdac:	e7b5      	b.n	800cd1a <_strtod_l+0x2ba>
 800cdae:	2a6e      	cmp	r2, #110	@ 0x6e
 800cdb0:	e7da      	b.n	800cd68 <_strtod_l+0x308>
 800cdb2:	498c      	ldr	r1, [pc, #560]	@ (800cfe4 <_strtod_l+0x584>)
 800cdb4:	a819      	add	r0, sp, #100	@ 0x64
 800cdb6:	f001 f9af 	bl	800e118 <__match>
 800cdba:	2800      	cmp	r0, #0
 800cdbc:	f43f aea4 	beq.w	800cb08 <_strtod_l+0xa8>
 800cdc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdc2:	4989      	ldr	r1, [pc, #548]	@ (800cfe8 <_strtod_l+0x588>)
 800cdc4:	3b01      	subs	r3, #1
 800cdc6:	a819      	add	r0, sp, #100	@ 0x64
 800cdc8:	9319      	str	r3, [sp, #100]	@ 0x64
 800cdca:	f001 f9a5 	bl	800e118 <__match>
 800cdce:	b910      	cbnz	r0, 800cdd6 <_strtod_l+0x376>
 800cdd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	9319      	str	r3, [sp, #100]	@ 0x64
 800cdd6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cff8 <_strtod_l+0x598>
 800cdda:	f04f 0a00 	mov.w	sl, #0
 800cdde:	e678      	b.n	800cad2 <_strtod_l+0x72>
 800cde0:	4882      	ldr	r0, [pc, #520]	@ (800cfec <_strtod_l+0x58c>)
 800cde2:	f000 fed5 	bl	800db90 <nan>
 800cde6:	ec5b ab10 	vmov	sl, fp, d0
 800cdea:	e672      	b.n	800cad2 <_strtod_l+0x72>
 800cdec:	eba8 0309 	sub.w	r3, r8, r9
 800cdf0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cdf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdf4:	2f00      	cmp	r7, #0
 800cdf6:	bf08      	it	eq
 800cdf8:	462f      	moveq	r7, r5
 800cdfa:	2d10      	cmp	r5, #16
 800cdfc:	462c      	mov	r4, r5
 800cdfe:	bfa8      	it	ge
 800ce00:	2410      	movge	r4, #16
 800ce02:	f7f9 f9b5 	bl	8006170 <__aeabi_ui2d>
 800ce06:	2d09      	cmp	r5, #9
 800ce08:	4682      	mov	sl, r0
 800ce0a:	468b      	mov	fp, r1
 800ce0c:	dc13      	bgt.n	800ce36 <_strtod_l+0x3d6>
 800ce0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	f43f ae5e 	beq.w	800cad2 <_strtod_l+0x72>
 800ce16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce18:	dd78      	ble.n	800cf0c <_strtod_l+0x4ac>
 800ce1a:	2b16      	cmp	r3, #22
 800ce1c:	dc5f      	bgt.n	800cede <_strtod_l+0x47e>
 800ce1e:	4974      	ldr	r1, [pc, #464]	@ (800cff0 <_strtod_l+0x590>)
 800ce20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce28:	4652      	mov	r2, sl
 800ce2a:	465b      	mov	r3, fp
 800ce2c:	f7f9 fa1a 	bl	8006264 <__aeabi_dmul>
 800ce30:	4682      	mov	sl, r0
 800ce32:	468b      	mov	fp, r1
 800ce34:	e64d      	b.n	800cad2 <_strtod_l+0x72>
 800ce36:	4b6e      	ldr	r3, [pc, #440]	@ (800cff0 <_strtod_l+0x590>)
 800ce38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce3c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ce40:	f7f9 fa10 	bl	8006264 <__aeabi_dmul>
 800ce44:	4682      	mov	sl, r0
 800ce46:	9808      	ldr	r0, [sp, #32]
 800ce48:	468b      	mov	fp, r1
 800ce4a:	f7f9 f991 	bl	8006170 <__aeabi_ui2d>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	460b      	mov	r3, r1
 800ce52:	4650      	mov	r0, sl
 800ce54:	4659      	mov	r1, fp
 800ce56:	f7f9 f84f 	bl	8005ef8 <__adddf3>
 800ce5a:	2d0f      	cmp	r5, #15
 800ce5c:	4682      	mov	sl, r0
 800ce5e:	468b      	mov	fp, r1
 800ce60:	ddd5      	ble.n	800ce0e <_strtod_l+0x3ae>
 800ce62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce64:	1b2c      	subs	r4, r5, r4
 800ce66:	441c      	add	r4, r3
 800ce68:	2c00      	cmp	r4, #0
 800ce6a:	f340 8096 	ble.w	800cf9a <_strtod_l+0x53a>
 800ce6e:	f014 030f 	ands.w	r3, r4, #15
 800ce72:	d00a      	beq.n	800ce8a <_strtod_l+0x42a>
 800ce74:	495e      	ldr	r1, [pc, #376]	@ (800cff0 <_strtod_l+0x590>)
 800ce76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce7a:	4652      	mov	r2, sl
 800ce7c:	465b      	mov	r3, fp
 800ce7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce82:	f7f9 f9ef 	bl	8006264 <__aeabi_dmul>
 800ce86:	4682      	mov	sl, r0
 800ce88:	468b      	mov	fp, r1
 800ce8a:	f034 040f 	bics.w	r4, r4, #15
 800ce8e:	d073      	beq.n	800cf78 <_strtod_l+0x518>
 800ce90:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ce94:	dd48      	ble.n	800cf28 <_strtod_l+0x4c8>
 800ce96:	2400      	movs	r4, #0
 800ce98:	46a0      	mov	r8, r4
 800ce9a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ce9c:	46a1      	mov	r9, r4
 800ce9e:	9a05      	ldr	r2, [sp, #20]
 800cea0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cff8 <_strtod_l+0x598>
 800cea4:	2322      	movs	r3, #34	@ 0x22
 800cea6:	6013      	str	r3, [r2, #0]
 800cea8:	f04f 0a00 	mov.w	sl, #0
 800ceac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	f43f ae0f 	beq.w	800cad2 <_strtod_l+0x72>
 800ceb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ceb6:	9805      	ldr	r0, [sp, #20]
 800ceb8:	f7ff f940 	bl	800c13c <_Bfree>
 800cebc:	9805      	ldr	r0, [sp, #20]
 800cebe:	4649      	mov	r1, r9
 800cec0:	f7ff f93c 	bl	800c13c <_Bfree>
 800cec4:	9805      	ldr	r0, [sp, #20]
 800cec6:	4641      	mov	r1, r8
 800cec8:	f7ff f938 	bl	800c13c <_Bfree>
 800cecc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cece:	9805      	ldr	r0, [sp, #20]
 800ced0:	f7ff f934 	bl	800c13c <_Bfree>
 800ced4:	9805      	ldr	r0, [sp, #20]
 800ced6:	4621      	mov	r1, r4
 800ced8:	f7ff f930 	bl	800c13c <_Bfree>
 800cedc:	e5f9      	b.n	800cad2 <_strtod_l+0x72>
 800cede:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cee0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cee4:	4293      	cmp	r3, r2
 800cee6:	dbbc      	blt.n	800ce62 <_strtod_l+0x402>
 800cee8:	4c41      	ldr	r4, [pc, #260]	@ (800cff0 <_strtod_l+0x590>)
 800ceea:	f1c5 050f 	rsb	r5, r5, #15
 800ceee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cef2:	4652      	mov	r2, sl
 800cef4:	465b      	mov	r3, fp
 800cef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cefa:	f7f9 f9b3 	bl	8006264 <__aeabi_dmul>
 800cefe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf00:	1b5d      	subs	r5, r3, r5
 800cf02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cf06:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cf0a:	e78f      	b.n	800ce2c <_strtod_l+0x3cc>
 800cf0c:	3316      	adds	r3, #22
 800cf0e:	dba8      	blt.n	800ce62 <_strtod_l+0x402>
 800cf10:	4b37      	ldr	r3, [pc, #220]	@ (800cff0 <_strtod_l+0x590>)
 800cf12:	eba9 0808 	sub.w	r8, r9, r8
 800cf16:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cf1a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cf1e:	4650      	mov	r0, sl
 800cf20:	4659      	mov	r1, fp
 800cf22:	f7f9 fac9 	bl	80064b8 <__aeabi_ddiv>
 800cf26:	e783      	b.n	800ce30 <_strtod_l+0x3d0>
 800cf28:	4b32      	ldr	r3, [pc, #200]	@ (800cff4 <_strtod_l+0x594>)
 800cf2a:	9308      	str	r3, [sp, #32]
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	1124      	asrs	r4, r4, #4
 800cf30:	4650      	mov	r0, sl
 800cf32:	4659      	mov	r1, fp
 800cf34:	461e      	mov	r6, r3
 800cf36:	2c01      	cmp	r4, #1
 800cf38:	dc21      	bgt.n	800cf7e <_strtod_l+0x51e>
 800cf3a:	b10b      	cbz	r3, 800cf40 <_strtod_l+0x4e0>
 800cf3c:	4682      	mov	sl, r0
 800cf3e:	468b      	mov	fp, r1
 800cf40:	492c      	ldr	r1, [pc, #176]	@ (800cff4 <_strtod_l+0x594>)
 800cf42:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cf46:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cf4a:	4652      	mov	r2, sl
 800cf4c:	465b      	mov	r3, fp
 800cf4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf52:	f7f9 f987 	bl	8006264 <__aeabi_dmul>
 800cf56:	4b28      	ldr	r3, [pc, #160]	@ (800cff8 <_strtod_l+0x598>)
 800cf58:	460a      	mov	r2, r1
 800cf5a:	400b      	ands	r3, r1
 800cf5c:	4927      	ldr	r1, [pc, #156]	@ (800cffc <_strtod_l+0x59c>)
 800cf5e:	428b      	cmp	r3, r1
 800cf60:	4682      	mov	sl, r0
 800cf62:	d898      	bhi.n	800ce96 <_strtod_l+0x436>
 800cf64:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cf68:	428b      	cmp	r3, r1
 800cf6a:	bf86      	itte	hi
 800cf6c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d000 <_strtod_l+0x5a0>
 800cf70:	f04f 3aff 	movhi.w	sl, #4294967295
 800cf74:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cf78:	2300      	movs	r3, #0
 800cf7a:	9308      	str	r3, [sp, #32]
 800cf7c:	e07a      	b.n	800d074 <_strtod_l+0x614>
 800cf7e:	07e2      	lsls	r2, r4, #31
 800cf80:	d505      	bpl.n	800cf8e <_strtod_l+0x52e>
 800cf82:	9b08      	ldr	r3, [sp, #32]
 800cf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf88:	f7f9 f96c 	bl	8006264 <__aeabi_dmul>
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	9a08      	ldr	r2, [sp, #32]
 800cf90:	3208      	adds	r2, #8
 800cf92:	3601      	adds	r6, #1
 800cf94:	1064      	asrs	r4, r4, #1
 800cf96:	9208      	str	r2, [sp, #32]
 800cf98:	e7cd      	b.n	800cf36 <_strtod_l+0x4d6>
 800cf9a:	d0ed      	beq.n	800cf78 <_strtod_l+0x518>
 800cf9c:	4264      	negs	r4, r4
 800cf9e:	f014 020f 	ands.w	r2, r4, #15
 800cfa2:	d00a      	beq.n	800cfba <_strtod_l+0x55a>
 800cfa4:	4b12      	ldr	r3, [pc, #72]	@ (800cff0 <_strtod_l+0x590>)
 800cfa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfaa:	4650      	mov	r0, sl
 800cfac:	4659      	mov	r1, fp
 800cfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb2:	f7f9 fa81 	bl	80064b8 <__aeabi_ddiv>
 800cfb6:	4682      	mov	sl, r0
 800cfb8:	468b      	mov	fp, r1
 800cfba:	1124      	asrs	r4, r4, #4
 800cfbc:	d0dc      	beq.n	800cf78 <_strtod_l+0x518>
 800cfbe:	2c1f      	cmp	r4, #31
 800cfc0:	dd20      	ble.n	800d004 <_strtod_l+0x5a4>
 800cfc2:	2400      	movs	r4, #0
 800cfc4:	46a0      	mov	r8, r4
 800cfc6:	940a      	str	r4, [sp, #40]	@ 0x28
 800cfc8:	46a1      	mov	r9, r4
 800cfca:	9a05      	ldr	r2, [sp, #20]
 800cfcc:	2322      	movs	r3, #34	@ 0x22
 800cfce:	f04f 0a00 	mov.w	sl, #0
 800cfd2:	f04f 0b00 	mov.w	fp, #0
 800cfd6:	6013      	str	r3, [r2, #0]
 800cfd8:	e768      	b.n	800ceac <_strtod_l+0x44c>
 800cfda:	bf00      	nop
 800cfdc:	0800f666 	.word	0x0800f666
 800cfe0:	0800f87c 	.word	0x0800f87c
 800cfe4:	0800f65e 	.word	0x0800f65e
 800cfe8:	0800f695 	.word	0x0800f695
 800cfec:	0800f924 	.word	0x0800f924
 800cff0:	0800f7b0 	.word	0x0800f7b0
 800cff4:	0800f788 	.word	0x0800f788
 800cff8:	7ff00000 	.word	0x7ff00000
 800cffc:	7ca00000 	.word	0x7ca00000
 800d000:	7fefffff 	.word	0x7fefffff
 800d004:	f014 0310 	ands.w	r3, r4, #16
 800d008:	bf18      	it	ne
 800d00a:	236a      	movne	r3, #106	@ 0x6a
 800d00c:	4ea9      	ldr	r6, [pc, #676]	@ (800d2b4 <_strtod_l+0x854>)
 800d00e:	9308      	str	r3, [sp, #32]
 800d010:	4650      	mov	r0, sl
 800d012:	4659      	mov	r1, fp
 800d014:	2300      	movs	r3, #0
 800d016:	07e2      	lsls	r2, r4, #31
 800d018:	d504      	bpl.n	800d024 <_strtod_l+0x5c4>
 800d01a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d01e:	f7f9 f921 	bl	8006264 <__aeabi_dmul>
 800d022:	2301      	movs	r3, #1
 800d024:	1064      	asrs	r4, r4, #1
 800d026:	f106 0608 	add.w	r6, r6, #8
 800d02a:	d1f4      	bne.n	800d016 <_strtod_l+0x5b6>
 800d02c:	b10b      	cbz	r3, 800d032 <_strtod_l+0x5d2>
 800d02e:	4682      	mov	sl, r0
 800d030:	468b      	mov	fp, r1
 800d032:	9b08      	ldr	r3, [sp, #32]
 800d034:	b1b3      	cbz	r3, 800d064 <_strtod_l+0x604>
 800d036:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d03a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d03e:	2b00      	cmp	r3, #0
 800d040:	4659      	mov	r1, fp
 800d042:	dd0f      	ble.n	800d064 <_strtod_l+0x604>
 800d044:	2b1f      	cmp	r3, #31
 800d046:	dd55      	ble.n	800d0f4 <_strtod_l+0x694>
 800d048:	2b34      	cmp	r3, #52	@ 0x34
 800d04a:	bfde      	ittt	le
 800d04c:	f04f 33ff 	movle.w	r3, #4294967295
 800d050:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d054:	4093      	lslle	r3, r2
 800d056:	f04f 0a00 	mov.w	sl, #0
 800d05a:	bfcc      	ite	gt
 800d05c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d060:	ea03 0b01 	andle.w	fp, r3, r1
 800d064:	2200      	movs	r2, #0
 800d066:	2300      	movs	r3, #0
 800d068:	4650      	mov	r0, sl
 800d06a:	4659      	mov	r1, fp
 800d06c:	f7f9 fb62 	bl	8006734 <__aeabi_dcmpeq>
 800d070:	2800      	cmp	r0, #0
 800d072:	d1a6      	bne.n	800cfc2 <_strtod_l+0x562>
 800d074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d076:	9300      	str	r3, [sp, #0]
 800d078:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d07a:	9805      	ldr	r0, [sp, #20]
 800d07c:	462b      	mov	r3, r5
 800d07e:	463a      	mov	r2, r7
 800d080:	f7ff f8c4 	bl	800c20c <__s2b>
 800d084:	900a      	str	r0, [sp, #40]	@ 0x28
 800d086:	2800      	cmp	r0, #0
 800d088:	f43f af05 	beq.w	800ce96 <_strtod_l+0x436>
 800d08c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d08e:	2a00      	cmp	r2, #0
 800d090:	eba9 0308 	sub.w	r3, r9, r8
 800d094:	bfa8      	it	ge
 800d096:	2300      	movge	r3, #0
 800d098:	9312      	str	r3, [sp, #72]	@ 0x48
 800d09a:	2400      	movs	r4, #0
 800d09c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d0a0:	9316      	str	r3, [sp, #88]	@ 0x58
 800d0a2:	46a0      	mov	r8, r4
 800d0a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0a6:	9805      	ldr	r0, [sp, #20]
 800d0a8:	6859      	ldr	r1, [r3, #4]
 800d0aa:	f7ff f807 	bl	800c0bc <_Balloc>
 800d0ae:	4681      	mov	r9, r0
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	f43f aef4 	beq.w	800ce9e <_strtod_l+0x43e>
 800d0b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0b8:	691a      	ldr	r2, [r3, #16]
 800d0ba:	3202      	adds	r2, #2
 800d0bc:	f103 010c 	add.w	r1, r3, #12
 800d0c0:	0092      	lsls	r2, r2, #2
 800d0c2:	300c      	adds	r0, #12
 800d0c4:	f7fe f94e 	bl	800b364 <memcpy>
 800d0c8:	ec4b ab10 	vmov	d0, sl, fp
 800d0cc:	9805      	ldr	r0, [sp, #20]
 800d0ce:	aa1c      	add	r2, sp, #112	@ 0x70
 800d0d0:	a91b      	add	r1, sp, #108	@ 0x6c
 800d0d2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d0d6:	f7ff fbd5 	bl	800c884 <__d2b>
 800d0da:	901a      	str	r0, [sp, #104]	@ 0x68
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	f43f aede 	beq.w	800ce9e <_strtod_l+0x43e>
 800d0e2:	9805      	ldr	r0, [sp, #20]
 800d0e4:	2101      	movs	r1, #1
 800d0e6:	f7ff f927 	bl	800c338 <__i2b>
 800d0ea:	4680      	mov	r8, r0
 800d0ec:	b948      	cbnz	r0, 800d102 <_strtod_l+0x6a2>
 800d0ee:	f04f 0800 	mov.w	r8, #0
 800d0f2:	e6d4      	b.n	800ce9e <_strtod_l+0x43e>
 800d0f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d0f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d0fc:	ea03 0a0a 	and.w	sl, r3, sl
 800d100:	e7b0      	b.n	800d064 <_strtod_l+0x604>
 800d102:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d104:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d106:	2d00      	cmp	r5, #0
 800d108:	bfab      	itete	ge
 800d10a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d10c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d10e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d110:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d112:	bfac      	ite	ge
 800d114:	18ef      	addge	r7, r5, r3
 800d116:	1b5e      	sublt	r6, r3, r5
 800d118:	9b08      	ldr	r3, [sp, #32]
 800d11a:	1aed      	subs	r5, r5, r3
 800d11c:	4415      	add	r5, r2
 800d11e:	4b66      	ldr	r3, [pc, #408]	@ (800d2b8 <_strtod_l+0x858>)
 800d120:	3d01      	subs	r5, #1
 800d122:	429d      	cmp	r5, r3
 800d124:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d128:	da50      	bge.n	800d1cc <_strtod_l+0x76c>
 800d12a:	1b5b      	subs	r3, r3, r5
 800d12c:	2b1f      	cmp	r3, #31
 800d12e:	eba2 0203 	sub.w	r2, r2, r3
 800d132:	f04f 0101 	mov.w	r1, #1
 800d136:	dc3d      	bgt.n	800d1b4 <_strtod_l+0x754>
 800d138:	fa01 f303 	lsl.w	r3, r1, r3
 800d13c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d13e:	2300      	movs	r3, #0
 800d140:	9310      	str	r3, [sp, #64]	@ 0x40
 800d142:	18bd      	adds	r5, r7, r2
 800d144:	9b08      	ldr	r3, [sp, #32]
 800d146:	42af      	cmp	r7, r5
 800d148:	4416      	add	r6, r2
 800d14a:	441e      	add	r6, r3
 800d14c:	463b      	mov	r3, r7
 800d14e:	bfa8      	it	ge
 800d150:	462b      	movge	r3, r5
 800d152:	42b3      	cmp	r3, r6
 800d154:	bfa8      	it	ge
 800d156:	4633      	movge	r3, r6
 800d158:	2b00      	cmp	r3, #0
 800d15a:	bfc2      	ittt	gt
 800d15c:	1aed      	subgt	r5, r5, r3
 800d15e:	1af6      	subgt	r6, r6, r3
 800d160:	1aff      	subgt	r7, r7, r3
 800d162:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d164:	2b00      	cmp	r3, #0
 800d166:	dd16      	ble.n	800d196 <_strtod_l+0x736>
 800d168:	4641      	mov	r1, r8
 800d16a:	9805      	ldr	r0, [sp, #20]
 800d16c:	461a      	mov	r2, r3
 800d16e:	f7ff f9a3 	bl	800c4b8 <__pow5mult>
 800d172:	4680      	mov	r8, r0
 800d174:	2800      	cmp	r0, #0
 800d176:	d0ba      	beq.n	800d0ee <_strtod_l+0x68e>
 800d178:	4601      	mov	r1, r0
 800d17a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d17c:	9805      	ldr	r0, [sp, #20]
 800d17e:	f7ff f8f1 	bl	800c364 <__multiply>
 800d182:	900e      	str	r0, [sp, #56]	@ 0x38
 800d184:	2800      	cmp	r0, #0
 800d186:	f43f ae8a 	beq.w	800ce9e <_strtod_l+0x43e>
 800d18a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d18c:	9805      	ldr	r0, [sp, #20]
 800d18e:	f7fe ffd5 	bl	800c13c <_Bfree>
 800d192:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d194:	931a      	str	r3, [sp, #104]	@ 0x68
 800d196:	2d00      	cmp	r5, #0
 800d198:	dc1d      	bgt.n	800d1d6 <_strtod_l+0x776>
 800d19a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	dd23      	ble.n	800d1e8 <_strtod_l+0x788>
 800d1a0:	4649      	mov	r1, r9
 800d1a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d1a4:	9805      	ldr	r0, [sp, #20]
 800d1a6:	f7ff f987 	bl	800c4b8 <__pow5mult>
 800d1aa:	4681      	mov	r9, r0
 800d1ac:	b9e0      	cbnz	r0, 800d1e8 <_strtod_l+0x788>
 800d1ae:	f04f 0900 	mov.w	r9, #0
 800d1b2:	e674      	b.n	800ce9e <_strtod_l+0x43e>
 800d1b4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d1b8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d1bc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d1c0:	35e2      	adds	r5, #226	@ 0xe2
 800d1c2:	fa01 f305 	lsl.w	r3, r1, r5
 800d1c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d1c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d1ca:	e7ba      	b.n	800d142 <_strtod_l+0x6e2>
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d1d4:	e7b5      	b.n	800d142 <_strtod_l+0x6e2>
 800d1d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1d8:	9805      	ldr	r0, [sp, #20]
 800d1da:	462a      	mov	r2, r5
 800d1dc:	f7ff f9c6 	bl	800c56c <__lshift>
 800d1e0:	901a      	str	r0, [sp, #104]	@ 0x68
 800d1e2:	2800      	cmp	r0, #0
 800d1e4:	d1d9      	bne.n	800d19a <_strtod_l+0x73a>
 800d1e6:	e65a      	b.n	800ce9e <_strtod_l+0x43e>
 800d1e8:	2e00      	cmp	r6, #0
 800d1ea:	dd07      	ble.n	800d1fc <_strtod_l+0x79c>
 800d1ec:	4649      	mov	r1, r9
 800d1ee:	9805      	ldr	r0, [sp, #20]
 800d1f0:	4632      	mov	r2, r6
 800d1f2:	f7ff f9bb 	bl	800c56c <__lshift>
 800d1f6:	4681      	mov	r9, r0
 800d1f8:	2800      	cmp	r0, #0
 800d1fa:	d0d8      	beq.n	800d1ae <_strtod_l+0x74e>
 800d1fc:	2f00      	cmp	r7, #0
 800d1fe:	dd08      	ble.n	800d212 <_strtod_l+0x7b2>
 800d200:	4641      	mov	r1, r8
 800d202:	9805      	ldr	r0, [sp, #20]
 800d204:	463a      	mov	r2, r7
 800d206:	f7ff f9b1 	bl	800c56c <__lshift>
 800d20a:	4680      	mov	r8, r0
 800d20c:	2800      	cmp	r0, #0
 800d20e:	f43f ae46 	beq.w	800ce9e <_strtod_l+0x43e>
 800d212:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d214:	9805      	ldr	r0, [sp, #20]
 800d216:	464a      	mov	r2, r9
 800d218:	f7ff fa30 	bl	800c67c <__mdiff>
 800d21c:	4604      	mov	r4, r0
 800d21e:	2800      	cmp	r0, #0
 800d220:	f43f ae3d 	beq.w	800ce9e <_strtod_l+0x43e>
 800d224:	68c3      	ldr	r3, [r0, #12]
 800d226:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d228:	2300      	movs	r3, #0
 800d22a:	60c3      	str	r3, [r0, #12]
 800d22c:	4641      	mov	r1, r8
 800d22e:	f7ff fa09 	bl	800c644 <__mcmp>
 800d232:	2800      	cmp	r0, #0
 800d234:	da46      	bge.n	800d2c4 <_strtod_l+0x864>
 800d236:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d238:	ea53 030a 	orrs.w	r3, r3, sl
 800d23c:	d16c      	bne.n	800d318 <_strtod_l+0x8b8>
 800d23e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d242:	2b00      	cmp	r3, #0
 800d244:	d168      	bne.n	800d318 <_strtod_l+0x8b8>
 800d246:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d24a:	0d1b      	lsrs	r3, r3, #20
 800d24c:	051b      	lsls	r3, r3, #20
 800d24e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d252:	d961      	bls.n	800d318 <_strtod_l+0x8b8>
 800d254:	6963      	ldr	r3, [r4, #20]
 800d256:	b913      	cbnz	r3, 800d25e <_strtod_l+0x7fe>
 800d258:	6923      	ldr	r3, [r4, #16]
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	dd5c      	ble.n	800d318 <_strtod_l+0x8b8>
 800d25e:	4621      	mov	r1, r4
 800d260:	2201      	movs	r2, #1
 800d262:	9805      	ldr	r0, [sp, #20]
 800d264:	f7ff f982 	bl	800c56c <__lshift>
 800d268:	4641      	mov	r1, r8
 800d26a:	4604      	mov	r4, r0
 800d26c:	f7ff f9ea 	bl	800c644 <__mcmp>
 800d270:	2800      	cmp	r0, #0
 800d272:	dd51      	ble.n	800d318 <_strtod_l+0x8b8>
 800d274:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d278:	9a08      	ldr	r2, [sp, #32]
 800d27a:	0d1b      	lsrs	r3, r3, #20
 800d27c:	051b      	lsls	r3, r3, #20
 800d27e:	2a00      	cmp	r2, #0
 800d280:	d06b      	beq.n	800d35a <_strtod_l+0x8fa>
 800d282:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d286:	d868      	bhi.n	800d35a <_strtod_l+0x8fa>
 800d288:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d28c:	f67f ae9d 	bls.w	800cfca <_strtod_l+0x56a>
 800d290:	4b0a      	ldr	r3, [pc, #40]	@ (800d2bc <_strtod_l+0x85c>)
 800d292:	4650      	mov	r0, sl
 800d294:	4659      	mov	r1, fp
 800d296:	2200      	movs	r2, #0
 800d298:	f7f8 ffe4 	bl	8006264 <__aeabi_dmul>
 800d29c:	4b08      	ldr	r3, [pc, #32]	@ (800d2c0 <_strtod_l+0x860>)
 800d29e:	400b      	ands	r3, r1
 800d2a0:	4682      	mov	sl, r0
 800d2a2:	468b      	mov	fp, r1
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	f47f ae05 	bne.w	800ceb4 <_strtod_l+0x454>
 800d2aa:	9a05      	ldr	r2, [sp, #20]
 800d2ac:	2322      	movs	r3, #34	@ 0x22
 800d2ae:	6013      	str	r3, [r2, #0]
 800d2b0:	e600      	b.n	800ceb4 <_strtod_l+0x454>
 800d2b2:	bf00      	nop
 800d2b4:	0800f8a8 	.word	0x0800f8a8
 800d2b8:	fffffc02 	.word	0xfffffc02
 800d2bc:	39500000 	.word	0x39500000
 800d2c0:	7ff00000 	.word	0x7ff00000
 800d2c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d2c8:	d165      	bne.n	800d396 <_strtod_l+0x936>
 800d2ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d2cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d2d0:	b35a      	cbz	r2, 800d32a <_strtod_l+0x8ca>
 800d2d2:	4a9f      	ldr	r2, [pc, #636]	@ (800d550 <_strtod_l+0xaf0>)
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d12b      	bne.n	800d330 <_strtod_l+0x8d0>
 800d2d8:	9b08      	ldr	r3, [sp, #32]
 800d2da:	4651      	mov	r1, sl
 800d2dc:	b303      	cbz	r3, 800d320 <_strtod_l+0x8c0>
 800d2de:	4b9d      	ldr	r3, [pc, #628]	@ (800d554 <_strtod_l+0xaf4>)
 800d2e0:	465a      	mov	r2, fp
 800d2e2:	4013      	ands	r3, r2
 800d2e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d2e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ec:	d81b      	bhi.n	800d326 <_strtod_l+0x8c6>
 800d2ee:	0d1b      	lsrs	r3, r3, #20
 800d2f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d2f4:	fa02 f303 	lsl.w	r3, r2, r3
 800d2f8:	4299      	cmp	r1, r3
 800d2fa:	d119      	bne.n	800d330 <_strtod_l+0x8d0>
 800d2fc:	4b96      	ldr	r3, [pc, #600]	@ (800d558 <_strtod_l+0xaf8>)
 800d2fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d300:	429a      	cmp	r2, r3
 800d302:	d102      	bne.n	800d30a <_strtod_l+0x8aa>
 800d304:	3101      	adds	r1, #1
 800d306:	f43f adca 	beq.w	800ce9e <_strtod_l+0x43e>
 800d30a:	4b92      	ldr	r3, [pc, #584]	@ (800d554 <_strtod_l+0xaf4>)
 800d30c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d30e:	401a      	ands	r2, r3
 800d310:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d314:	f04f 0a00 	mov.w	sl, #0
 800d318:	9b08      	ldr	r3, [sp, #32]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1b8      	bne.n	800d290 <_strtod_l+0x830>
 800d31e:	e5c9      	b.n	800ceb4 <_strtod_l+0x454>
 800d320:	f04f 33ff 	mov.w	r3, #4294967295
 800d324:	e7e8      	b.n	800d2f8 <_strtod_l+0x898>
 800d326:	4613      	mov	r3, r2
 800d328:	e7e6      	b.n	800d2f8 <_strtod_l+0x898>
 800d32a:	ea53 030a 	orrs.w	r3, r3, sl
 800d32e:	d0a1      	beq.n	800d274 <_strtod_l+0x814>
 800d330:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d332:	b1db      	cbz	r3, 800d36c <_strtod_l+0x90c>
 800d334:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d336:	4213      	tst	r3, r2
 800d338:	d0ee      	beq.n	800d318 <_strtod_l+0x8b8>
 800d33a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d33c:	9a08      	ldr	r2, [sp, #32]
 800d33e:	4650      	mov	r0, sl
 800d340:	4659      	mov	r1, fp
 800d342:	b1bb      	cbz	r3, 800d374 <_strtod_l+0x914>
 800d344:	f7ff fb6c 	bl	800ca20 <sulp>
 800d348:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d34c:	ec53 2b10 	vmov	r2, r3, d0
 800d350:	f7f8 fdd2 	bl	8005ef8 <__adddf3>
 800d354:	4682      	mov	sl, r0
 800d356:	468b      	mov	fp, r1
 800d358:	e7de      	b.n	800d318 <_strtod_l+0x8b8>
 800d35a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d35e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d362:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d366:	f04f 3aff 	mov.w	sl, #4294967295
 800d36a:	e7d5      	b.n	800d318 <_strtod_l+0x8b8>
 800d36c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d36e:	ea13 0f0a 	tst.w	r3, sl
 800d372:	e7e1      	b.n	800d338 <_strtod_l+0x8d8>
 800d374:	f7ff fb54 	bl	800ca20 <sulp>
 800d378:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d37c:	ec53 2b10 	vmov	r2, r3, d0
 800d380:	f7f8 fdb8 	bl	8005ef4 <__aeabi_dsub>
 800d384:	2200      	movs	r2, #0
 800d386:	2300      	movs	r3, #0
 800d388:	4682      	mov	sl, r0
 800d38a:	468b      	mov	fp, r1
 800d38c:	f7f9 f9d2 	bl	8006734 <__aeabi_dcmpeq>
 800d390:	2800      	cmp	r0, #0
 800d392:	d0c1      	beq.n	800d318 <_strtod_l+0x8b8>
 800d394:	e619      	b.n	800cfca <_strtod_l+0x56a>
 800d396:	4641      	mov	r1, r8
 800d398:	4620      	mov	r0, r4
 800d39a:	f7ff facb 	bl	800c934 <__ratio>
 800d39e:	ec57 6b10 	vmov	r6, r7, d0
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	4639      	mov	r1, r7
 800d3ac:	f7f9 f9d6 	bl	800675c <__aeabi_dcmple>
 800d3b0:	2800      	cmp	r0, #0
 800d3b2:	d06f      	beq.n	800d494 <_strtod_l+0xa34>
 800d3b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d17a      	bne.n	800d4b0 <_strtod_l+0xa50>
 800d3ba:	f1ba 0f00 	cmp.w	sl, #0
 800d3be:	d158      	bne.n	800d472 <_strtod_l+0xa12>
 800d3c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d15a      	bne.n	800d480 <_strtod_l+0xa20>
 800d3ca:	4b64      	ldr	r3, [pc, #400]	@ (800d55c <_strtod_l+0xafc>)
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	4630      	mov	r0, r6
 800d3d0:	4639      	mov	r1, r7
 800d3d2:	f7f9 f9b9 	bl	8006748 <__aeabi_dcmplt>
 800d3d6:	2800      	cmp	r0, #0
 800d3d8:	d159      	bne.n	800d48e <_strtod_l+0xa2e>
 800d3da:	4630      	mov	r0, r6
 800d3dc:	4639      	mov	r1, r7
 800d3de:	4b60      	ldr	r3, [pc, #384]	@ (800d560 <_strtod_l+0xb00>)
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	f7f8 ff3f 	bl	8006264 <__aeabi_dmul>
 800d3e6:	4606      	mov	r6, r0
 800d3e8:	460f      	mov	r7, r1
 800d3ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d3ee:	9606      	str	r6, [sp, #24]
 800d3f0:	9307      	str	r3, [sp, #28]
 800d3f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3f6:	4d57      	ldr	r5, [pc, #348]	@ (800d554 <_strtod_l+0xaf4>)
 800d3f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d3fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3fe:	401d      	ands	r5, r3
 800d400:	4b58      	ldr	r3, [pc, #352]	@ (800d564 <_strtod_l+0xb04>)
 800d402:	429d      	cmp	r5, r3
 800d404:	f040 80b2 	bne.w	800d56c <_strtod_l+0xb0c>
 800d408:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d40a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d40e:	ec4b ab10 	vmov	d0, sl, fp
 800d412:	f7ff f9c7 	bl	800c7a4 <__ulp>
 800d416:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d41a:	ec51 0b10 	vmov	r0, r1, d0
 800d41e:	f7f8 ff21 	bl	8006264 <__aeabi_dmul>
 800d422:	4652      	mov	r2, sl
 800d424:	465b      	mov	r3, fp
 800d426:	f7f8 fd67 	bl	8005ef8 <__adddf3>
 800d42a:	460b      	mov	r3, r1
 800d42c:	4949      	ldr	r1, [pc, #292]	@ (800d554 <_strtod_l+0xaf4>)
 800d42e:	4a4e      	ldr	r2, [pc, #312]	@ (800d568 <_strtod_l+0xb08>)
 800d430:	4019      	ands	r1, r3
 800d432:	4291      	cmp	r1, r2
 800d434:	4682      	mov	sl, r0
 800d436:	d942      	bls.n	800d4be <_strtod_l+0xa5e>
 800d438:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d43a:	4b47      	ldr	r3, [pc, #284]	@ (800d558 <_strtod_l+0xaf8>)
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d103      	bne.n	800d448 <_strtod_l+0x9e8>
 800d440:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d442:	3301      	adds	r3, #1
 800d444:	f43f ad2b 	beq.w	800ce9e <_strtod_l+0x43e>
 800d448:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d558 <_strtod_l+0xaf8>
 800d44c:	f04f 3aff 	mov.w	sl, #4294967295
 800d450:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d452:	9805      	ldr	r0, [sp, #20]
 800d454:	f7fe fe72 	bl	800c13c <_Bfree>
 800d458:	9805      	ldr	r0, [sp, #20]
 800d45a:	4649      	mov	r1, r9
 800d45c:	f7fe fe6e 	bl	800c13c <_Bfree>
 800d460:	9805      	ldr	r0, [sp, #20]
 800d462:	4641      	mov	r1, r8
 800d464:	f7fe fe6a 	bl	800c13c <_Bfree>
 800d468:	9805      	ldr	r0, [sp, #20]
 800d46a:	4621      	mov	r1, r4
 800d46c:	f7fe fe66 	bl	800c13c <_Bfree>
 800d470:	e618      	b.n	800d0a4 <_strtod_l+0x644>
 800d472:	f1ba 0f01 	cmp.w	sl, #1
 800d476:	d103      	bne.n	800d480 <_strtod_l+0xa20>
 800d478:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	f43f ada5 	beq.w	800cfca <_strtod_l+0x56a>
 800d480:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d530 <_strtod_l+0xad0>
 800d484:	4f35      	ldr	r7, [pc, #212]	@ (800d55c <_strtod_l+0xafc>)
 800d486:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d48a:	2600      	movs	r6, #0
 800d48c:	e7b1      	b.n	800d3f2 <_strtod_l+0x992>
 800d48e:	4f34      	ldr	r7, [pc, #208]	@ (800d560 <_strtod_l+0xb00>)
 800d490:	2600      	movs	r6, #0
 800d492:	e7aa      	b.n	800d3ea <_strtod_l+0x98a>
 800d494:	4b32      	ldr	r3, [pc, #200]	@ (800d560 <_strtod_l+0xb00>)
 800d496:	4630      	mov	r0, r6
 800d498:	4639      	mov	r1, r7
 800d49a:	2200      	movs	r2, #0
 800d49c:	f7f8 fee2 	bl	8006264 <__aeabi_dmul>
 800d4a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4a2:	4606      	mov	r6, r0
 800d4a4:	460f      	mov	r7, r1
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d09f      	beq.n	800d3ea <_strtod_l+0x98a>
 800d4aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d4ae:	e7a0      	b.n	800d3f2 <_strtod_l+0x992>
 800d4b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d538 <_strtod_l+0xad8>
 800d4b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d4b8:	ec57 6b17 	vmov	r6, r7, d7
 800d4bc:	e799      	b.n	800d3f2 <_strtod_l+0x992>
 800d4be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d4c2:	9b08      	ldr	r3, [sp, #32]
 800d4c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d1c1      	bne.n	800d450 <_strtod_l+0x9f0>
 800d4cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d4d0:	0d1b      	lsrs	r3, r3, #20
 800d4d2:	051b      	lsls	r3, r3, #20
 800d4d4:	429d      	cmp	r5, r3
 800d4d6:	d1bb      	bne.n	800d450 <_strtod_l+0x9f0>
 800d4d8:	4630      	mov	r0, r6
 800d4da:	4639      	mov	r1, r7
 800d4dc:	f7f9 fa22 	bl	8006924 <__aeabi_d2lz>
 800d4e0:	f7f8 fe92 	bl	8006208 <__aeabi_l2d>
 800d4e4:	4602      	mov	r2, r0
 800d4e6:	460b      	mov	r3, r1
 800d4e8:	4630      	mov	r0, r6
 800d4ea:	4639      	mov	r1, r7
 800d4ec:	f7f8 fd02 	bl	8005ef4 <__aeabi_dsub>
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d4f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d4fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4fe:	ea46 060a 	orr.w	r6, r6, sl
 800d502:	431e      	orrs	r6, r3
 800d504:	d06f      	beq.n	800d5e6 <_strtod_l+0xb86>
 800d506:	a30e      	add	r3, pc, #56	@ (adr r3, 800d540 <_strtod_l+0xae0>)
 800d508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50c:	f7f9 f91c 	bl	8006748 <__aeabi_dcmplt>
 800d510:	2800      	cmp	r0, #0
 800d512:	f47f accf 	bne.w	800ceb4 <_strtod_l+0x454>
 800d516:	a30c      	add	r3, pc, #48	@ (adr r3, 800d548 <_strtod_l+0xae8>)
 800d518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d520:	f7f9 f930 	bl	8006784 <__aeabi_dcmpgt>
 800d524:	2800      	cmp	r0, #0
 800d526:	d093      	beq.n	800d450 <_strtod_l+0x9f0>
 800d528:	e4c4      	b.n	800ceb4 <_strtod_l+0x454>
 800d52a:	bf00      	nop
 800d52c:	f3af 8000 	nop.w
 800d530:	00000000 	.word	0x00000000
 800d534:	bff00000 	.word	0xbff00000
 800d538:	00000000 	.word	0x00000000
 800d53c:	3ff00000 	.word	0x3ff00000
 800d540:	94a03595 	.word	0x94a03595
 800d544:	3fdfffff 	.word	0x3fdfffff
 800d548:	35afe535 	.word	0x35afe535
 800d54c:	3fe00000 	.word	0x3fe00000
 800d550:	000fffff 	.word	0x000fffff
 800d554:	7ff00000 	.word	0x7ff00000
 800d558:	7fefffff 	.word	0x7fefffff
 800d55c:	3ff00000 	.word	0x3ff00000
 800d560:	3fe00000 	.word	0x3fe00000
 800d564:	7fe00000 	.word	0x7fe00000
 800d568:	7c9fffff 	.word	0x7c9fffff
 800d56c:	9b08      	ldr	r3, [sp, #32]
 800d56e:	b323      	cbz	r3, 800d5ba <_strtod_l+0xb5a>
 800d570:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d574:	d821      	bhi.n	800d5ba <_strtod_l+0xb5a>
 800d576:	a328      	add	r3, pc, #160	@ (adr r3, 800d618 <_strtod_l+0xbb8>)
 800d578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57c:	4630      	mov	r0, r6
 800d57e:	4639      	mov	r1, r7
 800d580:	f7f9 f8ec 	bl	800675c <__aeabi_dcmple>
 800d584:	b1a0      	cbz	r0, 800d5b0 <_strtod_l+0xb50>
 800d586:	4639      	mov	r1, r7
 800d588:	4630      	mov	r0, r6
 800d58a:	f7f9 f943 	bl	8006814 <__aeabi_d2uiz>
 800d58e:	2801      	cmp	r0, #1
 800d590:	bf38      	it	cc
 800d592:	2001      	movcc	r0, #1
 800d594:	f7f8 fdec 	bl	8006170 <__aeabi_ui2d>
 800d598:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d59a:	4606      	mov	r6, r0
 800d59c:	460f      	mov	r7, r1
 800d59e:	b9fb      	cbnz	r3, 800d5e0 <_strtod_l+0xb80>
 800d5a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d5a4:	9014      	str	r0, [sp, #80]	@ 0x50
 800d5a6:	9315      	str	r3, [sp, #84]	@ 0x54
 800d5a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d5ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d5b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d5b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d5b6:	1b5b      	subs	r3, r3, r5
 800d5b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d5ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d5be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d5c2:	f7ff f8ef 	bl	800c7a4 <__ulp>
 800d5c6:	4650      	mov	r0, sl
 800d5c8:	ec53 2b10 	vmov	r2, r3, d0
 800d5cc:	4659      	mov	r1, fp
 800d5ce:	f7f8 fe49 	bl	8006264 <__aeabi_dmul>
 800d5d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d5d6:	f7f8 fc8f 	bl	8005ef8 <__adddf3>
 800d5da:	4682      	mov	sl, r0
 800d5dc:	468b      	mov	fp, r1
 800d5de:	e770      	b.n	800d4c2 <_strtod_l+0xa62>
 800d5e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d5e4:	e7e0      	b.n	800d5a8 <_strtod_l+0xb48>
 800d5e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d620 <_strtod_l+0xbc0>)
 800d5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ec:	f7f9 f8ac 	bl	8006748 <__aeabi_dcmplt>
 800d5f0:	e798      	b.n	800d524 <_strtod_l+0xac4>
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d5f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5fa:	6013      	str	r3, [r2, #0]
 800d5fc:	f7ff ba6d 	b.w	800cada <_strtod_l+0x7a>
 800d600:	2a65      	cmp	r2, #101	@ 0x65
 800d602:	f43f ab66 	beq.w	800ccd2 <_strtod_l+0x272>
 800d606:	2a45      	cmp	r2, #69	@ 0x45
 800d608:	f43f ab63 	beq.w	800ccd2 <_strtod_l+0x272>
 800d60c:	2301      	movs	r3, #1
 800d60e:	f7ff bb9e 	b.w	800cd4e <_strtod_l+0x2ee>
 800d612:	bf00      	nop
 800d614:	f3af 8000 	nop.w
 800d618:	ffc00000 	.word	0xffc00000
 800d61c:	41dfffff 	.word	0x41dfffff
 800d620:	94a03595 	.word	0x94a03595
 800d624:	3fcfffff 	.word	0x3fcfffff

0800d628 <_strtod_r>:
 800d628:	4b01      	ldr	r3, [pc, #4]	@ (800d630 <_strtod_r+0x8>)
 800d62a:	f7ff ba19 	b.w	800ca60 <_strtod_l>
 800d62e:	bf00      	nop
 800d630:	20000068 	.word	0x20000068

0800d634 <_strtol_l.constprop.0>:
 800d634:	2b24      	cmp	r3, #36	@ 0x24
 800d636:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d63a:	4686      	mov	lr, r0
 800d63c:	4690      	mov	r8, r2
 800d63e:	d801      	bhi.n	800d644 <_strtol_l.constprop.0+0x10>
 800d640:	2b01      	cmp	r3, #1
 800d642:	d106      	bne.n	800d652 <_strtol_l.constprop.0+0x1e>
 800d644:	f7fd fe54 	bl	800b2f0 <__errno>
 800d648:	2316      	movs	r3, #22
 800d64a:	6003      	str	r3, [r0, #0]
 800d64c:	2000      	movs	r0, #0
 800d64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d652:	4834      	ldr	r0, [pc, #208]	@ (800d724 <_strtol_l.constprop.0+0xf0>)
 800d654:	460d      	mov	r5, r1
 800d656:	462a      	mov	r2, r5
 800d658:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d65c:	5d06      	ldrb	r6, [r0, r4]
 800d65e:	f016 0608 	ands.w	r6, r6, #8
 800d662:	d1f8      	bne.n	800d656 <_strtol_l.constprop.0+0x22>
 800d664:	2c2d      	cmp	r4, #45	@ 0x2d
 800d666:	d12d      	bne.n	800d6c4 <_strtol_l.constprop.0+0x90>
 800d668:	782c      	ldrb	r4, [r5, #0]
 800d66a:	2601      	movs	r6, #1
 800d66c:	1c95      	adds	r5, r2, #2
 800d66e:	f033 0210 	bics.w	r2, r3, #16
 800d672:	d109      	bne.n	800d688 <_strtol_l.constprop.0+0x54>
 800d674:	2c30      	cmp	r4, #48	@ 0x30
 800d676:	d12a      	bne.n	800d6ce <_strtol_l.constprop.0+0x9a>
 800d678:	782a      	ldrb	r2, [r5, #0]
 800d67a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d67e:	2a58      	cmp	r2, #88	@ 0x58
 800d680:	d125      	bne.n	800d6ce <_strtol_l.constprop.0+0x9a>
 800d682:	786c      	ldrb	r4, [r5, #1]
 800d684:	2310      	movs	r3, #16
 800d686:	3502      	adds	r5, #2
 800d688:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d68c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d690:	2200      	movs	r2, #0
 800d692:	fbbc f9f3 	udiv	r9, ip, r3
 800d696:	4610      	mov	r0, r2
 800d698:	fb03 ca19 	mls	sl, r3, r9, ip
 800d69c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d6a0:	2f09      	cmp	r7, #9
 800d6a2:	d81b      	bhi.n	800d6dc <_strtol_l.constprop.0+0xa8>
 800d6a4:	463c      	mov	r4, r7
 800d6a6:	42a3      	cmp	r3, r4
 800d6a8:	dd27      	ble.n	800d6fa <_strtol_l.constprop.0+0xc6>
 800d6aa:	1c57      	adds	r7, r2, #1
 800d6ac:	d007      	beq.n	800d6be <_strtol_l.constprop.0+0x8a>
 800d6ae:	4581      	cmp	r9, r0
 800d6b0:	d320      	bcc.n	800d6f4 <_strtol_l.constprop.0+0xc0>
 800d6b2:	d101      	bne.n	800d6b8 <_strtol_l.constprop.0+0x84>
 800d6b4:	45a2      	cmp	sl, r4
 800d6b6:	db1d      	blt.n	800d6f4 <_strtol_l.constprop.0+0xc0>
 800d6b8:	fb00 4003 	mla	r0, r0, r3, r4
 800d6bc:	2201      	movs	r2, #1
 800d6be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d6c2:	e7eb      	b.n	800d69c <_strtol_l.constprop.0+0x68>
 800d6c4:	2c2b      	cmp	r4, #43	@ 0x2b
 800d6c6:	bf04      	itt	eq
 800d6c8:	782c      	ldrbeq	r4, [r5, #0]
 800d6ca:	1c95      	addeq	r5, r2, #2
 800d6cc:	e7cf      	b.n	800d66e <_strtol_l.constprop.0+0x3a>
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d1da      	bne.n	800d688 <_strtol_l.constprop.0+0x54>
 800d6d2:	2c30      	cmp	r4, #48	@ 0x30
 800d6d4:	bf0c      	ite	eq
 800d6d6:	2308      	moveq	r3, #8
 800d6d8:	230a      	movne	r3, #10
 800d6da:	e7d5      	b.n	800d688 <_strtol_l.constprop.0+0x54>
 800d6dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d6e0:	2f19      	cmp	r7, #25
 800d6e2:	d801      	bhi.n	800d6e8 <_strtol_l.constprop.0+0xb4>
 800d6e4:	3c37      	subs	r4, #55	@ 0x37
 800d6e6:	e7de      	b.n	800d6a6 <_strtol_l.constprop.0+0x72>
 800d6e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d6ec:	2f19      	cmp	r7, #25
 800d6ee:	d804      	bhi.n	800d6fa <_strtol_l.constprop.0+0xc6>
 800d6f0:	3c57      	subs	r4, #87	@ 0x57
 800d6f2:	e7d8      	b.n	800d6a6 <_strtol_l.constprop.0+0x72>
 800d6f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d6f8:	e7e1      	b.n	800d6be <_strtol_l.constprop.0+0x8a>
 800d6fa:	1c53      	adds	r3, r2, #1
 800d6fc:	d108      	bne.n	800d710 <_strtol_l.constprop.0+0xdc>
 800d6fe:	2322      	movs	r3, #34	@ 0x22
 800d700:	f8ce 3000 	str.w	r3, [lr]
 800d704:	4660      	mov	r0, ip
 800d706:	f1b8 0f00 	cmp.w	r8, #0
 800d70a:	d0a0      	beq.n	800d64e <_strtol_l.constprop.0+0x1a>
 800d70c:	1e69      	subs	r1, r5, #1
 800d70e:	e006      	b.n	800d71e <_strtol_l.constprop.0+0xea>
 800d710:	b106      	cbz	r6, 800d714 <_strtol_l.constprop.0+0xe0>
 800d712:	4240      	negs	r0, r0
 800d714:	f1b8 0f00 	cmp.w	r8, #0
 800d718:	d099      	beq.n	800d64e <_strtol_l.constprop.0+0x1a>
 800d71a:	2a00      	cmp	r2, #0
 800d71c:	d1f6      	bne.n	800d70c <_strtol_l.constprop.0+0xd8>
 800d71e:	f8c8 1000 	str.w	r1, [r8]
 800d722:	e794      	b.n	800d64e <_strtol_l.constprop.0+0x1a>
 800d724:	0800f559 	.word	0x0800f559

0800d728 <_strtol_r>:
 800d728:	f7ff bf84 	b.w	800d634 <_strtol_l.constprop.0>

0800d72c <__ssputs_r>:
 800d72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d730:	688e      	ldr	r6, [r1, #8]
 800d732:	461f      	mov	r7, r3
 800d734:	42be      	cmp	r6, r7
 800d736:	680b      	ldr	r3, [r1, #0]
 800d738:	4682      	mov	sl, r0
 800d73a:	460c      	mov	r4, r1
 800d73c:	4690      	mov	r8, r2
 800d73e:	d82d      	bhi.n	800d79c <__ssputs_r+0x70>
 800d740:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d744:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d748:	d026      	beq.n	800d798 <__ssputs_r+0x6c>
 800d74a:	6965      	ldr	r5, [r4, #20]
 800d74c:	6909      	ldr	r1, [r1, #16]
 800d74e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d752:	eba3 0901 	sub.w	r9, r3, r1
 800d756:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d75a:	1c7b      	adds	r3, r7, #1
 800d75c:	444b      	add	r3, r9
 800d75e:	106d      	asrs	r5, r5, #1
 800d760:	429d      	cmp	r5, r3
 800d762:	bf38      	it	cc
 800d764:	461d      	movcc	r5, r3
 800d766:	0553      	lsls	r3, r2, #21
 800d768:	d527      	bpl.n	800d7ba <__ssputs_r+0x8e>
 800d76a:	4629      	mov	r1, r5
 800d76c:	f7fc fd16 	bl	800a19c <_malloc_r>
 800d770:	4606      	mov	r6, r0
 800d772:	b360      	cbz	r0, 800d7ce <__ssputs_r+0xa2>
 800d774:	6921      	ldr	r1, [r4, #16]
 800d776:	464a      	mov	r2, r9
 800d778:	f7fd fdf4 	bl	800b364 <memcpy>
 800d77c:	89a3      	ldrh	r3, [r4, #12]
 800d77e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d786:	81a3      	strh	r3, [r4, #12]
 800d788:	6126      	str	r6, [r4, #16]
 800d78a:	6165      	str	r5, [r4, #20]
 800d78c:	444e      	add	r6, r9
 800d78e:	eba5 0509 	sub.w	r5, r5, r9
 800d792:	6026      	str	r6, [r4, #0]
 800d794:	60a5      	str	r5, [r4, #8]
 800d796:	463e      	mov	r6, r7
 800d798:	42be      	cmp	r6, r7
 800d79a:	d900      	bls.n	800d79e <__ssputs_r+0x72>
 800d79c:	463e      	mov	r6, r7
 800d79e:	6820      	ldr	r0, [r4, #0]
 800d7a0:	4632      	mov	r2, r6
 800d7a2:	4641      	mov	r1, r8
 800d7a4:	f000 f9c6 	bl	800db34 <memmove>
 800d7a8:	68a3      	ldr	r3, [r4, #8]
 800d7aa:	1b9b      	subs	r3, r3, r6
 800d7ac:	60a3      	str	r3, [r4, #8]
 800d7ae:	6823      	ldr	r3, [r4, #0]
 800d7b0:	4433      	add	r3, r6
 800d7b2:	6023      	str	r3, [r4, #0]
 800d7b4:	2000      	movs	r0, #0
 800d7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ba:	462a      	mov	r2, r5
 800d7bc:	f000 fd6d 	bl	800e29a <_realloc_r>
 800d7c0:	4606      	mov	r6, r0
 800d7c2:	2800      	cmp	r0, #0
 800d7c4:	d1e0      	bne.n	800d788 <__ssputs_r+0x5c>
 800d7c6:	6921      	ldr	r1, [r4, #16]
 800d7c8:	4650      	mov	r0, sl
 800d7ca:	f7fe fc2d 	bl	800c028 <_free_r>
 800d7ce:	230c      	movs	r3, #12
 800d7d0:	f8ca 3000 	str.w	r3, [sl]
 800d7d4:	89a3      	ldrh	r3, [r4, #12]
 800d7d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7da:	81a3      	strh	r3, [r4, #12]
 800d7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e0:	e7e9      	b.n	800d7b6 <__ssputs_r+0x8a>
	...

0800d7e4 <_svfiprintf_r>:
 800d7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7e8:	4698      	mov	r8, r3
 800d7ea:	898b      	ldrh	r3, [r1, #12]
 800d7ec:	061b      	lsls	r3, r3, #24
 800d7ee:	b09d      	sub	sp, #116	@ 0x74
 800d7f0:	4607      	mov	r7, r0
 800d7f2:	460d      	mov	r5, r1
 800d7f4:	4614      	mov	r4, r2
 800d7f6:	d510      	bpl.n	800d81a <_svfiprintf_r+0x36>
 800d7f8:	690b      	ldr	r3, [r1, #16]
 800d7fa:	b973      	cbnz	r3, 800d81a <_svfiprintf_r+0x36>
 800d7fc:	2140      	movs	r1, #64	@ 0x40
 800d7fe:	f7fc fccd 	bl	800a19c <_malloc_r>
 800d802:	6028      	str	r0, [r5, #0]
 800d804:	6128      	str	r0, [r5, #16]
 800d806:	b930      	cbnz	r0, 800d816 <_svfiprintf_r+0x32>
 800d808:	230c      	movs	r3, #12
 800d80a:	603b      	str	r3, [r7, #0]
 800d80c:	f04f 30ff 	mov.w	r0, #4294967295
 800d810:	b01d      	add	sp, #116	@ 0x74
 800d812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d816:	2340      	movs	r3, #64	@ 0x40
 800d818:	616b      	str	r3, [r5, #20]
 800d81a:	2300      	movs	r3, #0
 800d81c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d81e:	2320      	movs	r3, #32
 800d820:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d824:	f8cd 800c 	str.w	r8, [sp, #12]
 800d828:	2330      	movs	r3, #48	@ 0x30
 800d82a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d9c8 <_svfiprintf_r+0x1e4>
 800d82e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d832:	f04f 0901 	mov.w	r9, #1
 800d836:	4623      	mov	r3, r4
 800d838:	469a      	mov	sl, r3
 800d83a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d83e:	b10a      	cbz	r2, 800d844 <_svfiprintf_r+0x60>
 800d840:	2a25      	cmp	r2, #37	@ 0x25
 800d842:	d1f9      	bne.n	800d838 <_svfiprintf_r+0x54>
 800d844:	ebba 0b04 	subs.w	fp, sl, r4
 800d848:	d00b      	beq.n	800d862 <_svfiprintf_r+0x7e>
 800d84a:	465b      	mov	r3, fp
 800d84c:	4622      	mov	r2, r4
 800d84e:	4629      	mov	r1, r5
 800d850:	4638      	mov	r0, r7
 800d852:	f7ff ff6b 	bl	800d72c <__ssputs_r>
 800d856:	3001      	adds	r0, #1
 800d858:	f000 80a7 	beq.w	800d9aa <_svfiprintf_r+0x1c6>
 800d85c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d85e:	445a      	add	r2, fp
 800d860:	9209      	str	r2, [sp, #36]	@ 0x24
 800d862:	f89a 3000 	ldrb.w	r3, [sl]
 800d866:	2b00      	cmp	r3, #0
 800d868:	f000 809f 	beq.w	800d9aa <_svfiprintf_r+0x1c6>
 800d86c:	2300      	movs	r3, #0
 800d86e:	f04f 32ff 	mov.w	r2, #4294967295
 800d872:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d876:	f10a 0a01 	add.w	sl, sl, #1
 800d87a:	9304      	str	r3, [sp, #16]
 800d87c:	9307      	str	r3, [sp, #28]
 800d87e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d882:	931a      	str	r3, [sp, #104]	@ 0x68
 800d884:	4654      	mov	r4, sl
 800d886:	2205      	movs	r2, #5
 800d888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d88c:	484e      	ldr	r0, [pc, #312]	@ (800d9c8 <_svfiprintf_r+0x1e4>)
 800d88e:	f7f8 fa87 	bl	8005da0 <memchr>
 800d892:	9a04      	ldr	r2, [sp, #16]
 800d894:	b9d8      	cbnz	r0, 800d8ce <_svfiprintf_r+0xea>
 800d896:	06d0      	lsls	r0, r2, #27
 800d898:	bf44      	itt	mi
 800d89a:	2320      	movmi	r3, #32
 800d89c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8a0:	0711      	lsls	r1, r2, #28
 800d8a2:	bf44      	itt	mi
 800d8a4:	232b      	movmi	r3, #43	@ 0x2b
 800d8a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8aa:	f89a 3000 	ldrb.w	r3, [sl]
 800d8ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8b0:	d015      	beq.n	800d8de <_svfiprintf_r+0xfa>
 800d8b2:	9a07      	ldr	r2, [sp, #28]
 800d8b4:	4654      	mov	r4, sl
 800d8b6:	2000      	movs	r0, #0
 800d8b8:	f04f 0c0a 	mov.w	ip, #10
 800d8bc:	4621      	mov	r1, r4
 800d8be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8c2:	3b30      	subs	r3, #48	@ 0x30
 800d8c4:	2b09      	cmp	r3, #9
 800d8c6:	d94b      	bls.n	800d960 <_svfiprintf_r+0x17c>
 800d8c8:	b1b0      	cbz	r0, 800d8f8 <_svfiprintf_r+0x114>
 800d8ca:	9207      	str	r2, [sp, #28]
 800d8cc:	e014      	b.n	800d8f8 <_svfiprintf_r+0x114>
 800d8ce:	eba0 0308 	sub.w	r3, r0, r8
 800d8d2:	fa09 f303 	lsl.w	r3, r9, r3
 800d8d6:	4313      	orrs	r3, r2
 800d8d8:	9304      	str	r3, [sp, #16]
 800d8da:	46a2      	mov	sl, r4
 800d8dc:	e7d2      	b.n	800d884 <_svfiprintf_r+0xa0>
 800d8de:	9b03      	ldr	r3, [sp, #12]
 800d8e0:	1d19      	adds	r1, r3, #4
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	9103      	str	r1, [sp, #12]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	bfbb      	ittet	lt
 800d8ea:	425b      	neglt	r3, r3
 800d8ec:	f042 0202 	orrlt.w	r2, r2, #2
 800d8f0:	9307      	strge	r3, [sp, #28]
 800d8f2:	9307      	strlt	r3, [sp, #28]
 800d8f4:	bfb8      	it	lt
 800d8f6:	9204      	strlt	r2, [sp, #16]
 800d8f8:	7823      	ldrb	r3, [r4, #0]
 800d8fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8fc:	d10a      	bne.n	800d914 <_svfiprintf_r+0x130>
 800d8fe:	7863      	ldrb	r3, [r4, #1]
 800d900:	2b2a      	cmp	r3, #42	@ 0x2a
 800d902:	d132      	bne.n	800d96a <_svfiprintf_r+0x186>
 800d904:	9b03      	ldr	r3, [sp, #12]
 800d906:	1d1a      	adds	r2, r3, #4
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	9203      	str	r2, [sp, #12]
 800d90c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d910:	3402      	adds	r4, #2
 800d912:	9305      	str	r3, [sp, #20]
 800d914:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d9d8 <_svfiprintf_r+0x1f4>
 800d918:	7821      	ldrb	r1, [r4, #0]
 800d91a:	2203      	movs	r2, #3
 800d91c:	4650      	mov	r0, sl
 800d91e:	f7f8 fa3f 	bl	8005da0 <memchr>
 800d922:	b138      	cbz	r0, 800d934 <_svfiprintf_r+0x150>
 800d924:	9b04      	ldr	r3, [sp, #16]
 800d926:	eba0 000a 	sub.w	r0, r0, sl
 800d92a:	2240      	movs	r2, #64	@ 0x40
 800d92c:	4082      	lsls	r2, r0
 800d92e:	4313      	orrs	r3, r2
 800d930:	3401      	adds	r4, #1
 800d932:	9304      	str	r3, [sp, #16]
 800d934:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d938:	4824      	ldr	r0, [pc, #144]	@ (800d9cc <_svfiprintf_r+0x1e8>)
 800d93a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d93e:	2206      	movs	r2, #6
 800d940:	f7f8 fa2e 	bl	8005da0 <memchr>
 800d944:	2800      	cmp	r0, #0
 800d946:	d036      	beq.n	800d9b6 <_svfiprintf_r+0x1d2>
 800d948:	4b21      	ldr	r3, [pc, #132]	@ (800d9d0 <_svfiprintf_r+0x1ec>)
 800d94a:	bb1b      	cbnz	r3, 800d994 <_svfiprintf_r+0x1b0>
 800d94c:	9b03      	ldr	r3, [sp, #12]
 800d94e:	3307      	adds	r3, #7
 800d950:	f023 0307 	bic.w	r3, r3, #7
 800d954:	3308      	adds	r3, #8
 800d956:	9303      	str	r3, [sp, #12]
 800d958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d95a:	4433      	add	r3, r6
 800d95c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d95e:	e76a      	b.n	800d836 <_svfiprintf_r+0x52>
 800d960:	fb0c 3202 	mla	r2, ip, r2, r3
 800d964:	460c      	mov	r4, r1
 800d966:	2001      	movs	r0, #1
 800d968:	e7a8      	b.n	800d8bc <_svfiprintf_r+0xd8>
 800d96a:	2300      	movs	r3, #0
 800d96c:	3401      	adds	r4, #1
 800d96e:	9305      	str	r3, [sp, #20]
 800d970:	4619      	mov	r1, r3
 800d972:	f04f 0c0a 	mov.w	ip, #10
 800d976:	4620      	mov	r0, r4
 800d978:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d97c:	3a30      	subs	r2, #48	@ 0x30
 800d97e:	2a09      	cmp	r2, #9
 800d980:	d903      	bls.n	800d98a <_svfiprintf_r+0x1a6>
 800d982:	2b00      	cmp	r3, #0
 800d984:	d0c6      	beq.n	800d914 <_svfiprintf_r+0x130>
 800d986:	9105      	str	r1, [sp, #20]
 800d988:	e7c4      	b.n	800d914 <_svfiprintf_r+0x130>
 800d98a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d98e:	4604      	mov	r4, r0
 800d990:	2301      	movs	r3, #1
 800d992:	e7f0      	b.n	800d976 <_svfiprintf_r+0x192>
 800d994:	ab03      	add	r3, sp, #12
 800d996:	9300      	str	r3, [sp, #0]
 800d998:	462a      	mov	r2, r5
 800d99a:	4b0e      	ldr	r3, [pc, #56]	@ (800d9d4 <_svfiprintf_r+0x1f0>)
 800d99c:	a904      	add	r1, sp, #16
 800d99e:	4638      	mov	r0, r7
 800d9a0:	f7fc fd28 	bl	800a3f4 <_printf_float>
 800d9a4:	1c42      	adds	r2, r0, #1
 800d9a6:	4606      	mov	r6, r0
 800d9a8:	d1d6      	bne.n	800d958 <_svfiprintf_r+0x174>
 800d9aa:	89ab      	ldrh	r3, [r5, #12]
 800d9ac:	065b      	lsls	r3, r3, #25
 800d9ae:	f53f af2d 	bmi.w	800d80c <_svfiprintf_r+0x28>
 800d9b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d9b4:	e72c      	b.n	800d810 <_svfiprintf_r+0x2c>
 800d9b6:	ab03      	add	r3, sp, #12
 800d9b8:	9300      	str	r3, [sp, #0]
 800d9ba:	462a      	mov	r2, r5
 800d9bc:	4b05      	ldr	r3, [pc, #20]	@ (800d9d4 <_svfiprintf_r+0x1f0>)
 800d9be:	a904      	add	r1, sp, #16
 800d9c0:	4638      	mov	r0, r7
 800d9c2:	f7fc ffaf 	bl	800a924 <_printf_i>
 800d9c6:	e7ed      	b.n	800d9a4 <_svfiprintf_r+0x1c0>
 800d9c8:	0800f8d0 	.word	0x0800f8d0
 800d9cc:	0800f8da 	.word	0x0800f8da
 800d9d0:	0800a3f5 	.word	0x0800a3f5
 800d9d4:	0800d72d 	.word	0x0800d72d
 800d9d8:	0800f8d6 	.word	0x0800f8d6

0800d9dc <__sflush_r>:
 800d9dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9e4:	0716      	lsls	r6, r2, #28
 800d9e6:	4605      	mov	r5, r0
 800d9e8:	460c      	mov	r4, r1
 800d9ea:	d454      	bmi.n	800da96 <__sflush_r+0xba>
 800d9ec:	684b      	ldr	r3, [r1, #4]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	dc02      	bgt.n	800d9f8 <__sflush_r+0x1c>
 800d9f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	dd48      	ble.n	800da8a <__sflush_r+0xae>
 800d9f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d9fa:	2e00      	cmp	r6, #0
 800d9fc:	d045      	beq.n	800da8a <__sflush_r+0xae>
 800d9fe:	2300      	movs	r3, #0
 800da00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800da04:	682f      	ldr	r7, [r5, #0]
 800da06:	6a21      	ldr	r1, [r4, #32]
 800da08:	602b      	str	r3, [r5, #0]
 800da0a:	d030      	beq.n	800da6e <__sflush_r+0x92>
 800da0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800da0e:	89a3      	ldrh	r3, [r4, #12]
 800da10:	0759      	lsls	r1, r3, #29
 800da12:	d505      	bpl.n	800da20 <__sflush_r+0x44>
 800da14:	6863      	ldr	r3, [r4, #4]
 800da16:	1ad2      	subs	r2, r2, r3
 800da18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800da1a:	b10b      	cbz	r3, 800da20 <__sflush_r+0x44>
 800da1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800da1e:	1ad2      	subs	r2, r2, r3
 800da20:	2300      	movs	r3, #0
 800da22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da24:	6a21      	ldr	r1, [r4, #32]
 800da26:	4628      	mov	r0, r5
 800da28:	47b0      	blx	r6
 800da2a:	1c43      	adds	r3, r0, #1
 800da2c:	89a3      	ldrh	r3, [r4, #12]
 800da2e:	d106      	bne.n	800da3e <__sflush_r+0x62>
 800da30:	6829      	ldr	r1, [r5, #0]
 800da32:	291d      	cmp	r1, #29
 800da34:	d82b      	bhi.n	800da8e <__sflush_r+0xb2>
 800da36:	4a2a      	ldr	r2, [pc, #168]	@ (800dae0 <__sflush_r+0x104>)
 800da38:	410a      	asrs	r2, r1
 800da3a:	07d6      	lsls	r6, r2, #31
 800da3c:	d427      	bmi.n	800da8e <__sflush_r+0xb2>
 800da3e:	2200      	movs	r2, #0
 800da40:	6062      	str	r2, [r4, #4]
 800da42:	04d9      	lsls	r1, r3, #19
 800da44:	6922      	ldr	r2, [r4, #16]
 800da46:	6022      	str	r2, [r4, #0]
 800da48:	d504      	bpl.n	800da54 <__sflush_r+0x78>
 800da4a:	1c42      	adds	r2, r0, #1
 800da4c:	d101      	bne.n	800da52 <__sflush_r+0x76>
 800da4e:	682b      	ldr	r3, [r5, #0]
 800da50:	b903      	cbnz	r3, 800da54 <__sflush_r+0x78>
 800da52:	6560      	str	r0, [r4, #84]	@ 0x54
 800da54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da56:	602f      	str	r7, [r5, #0]
 800da58:	b1b9      	cbz	r1, 800da8a <__sflush_r+0xae>
 800da5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da5e:	4299      	cmp	r1, r3
 800da60:	d002      	beq.n	800da68 <__sflush_r+0x8c>
 800da62:	4628      	mov	r0, r5
 800da64:	f7fe fae0 	bl	800c028 <_free_r>
 800da68:	2300      	movs	r3, #0
 800da6a:	6363      	str	r3, [r4, #52]	@ 0x34
 800da6c:	e00d      	b.n	800da8a <__sflush_r+0xae>
 800da6e:	2301      	movs	r3, #1
 800da70:	4628      	mov	r0, r5
 800da72:	47b0      	blx	r6
 800da74:	4602      	mov	r2, r0
 800da76:	1c50      	adds	r0, r2, #1
 800da78:	d1c9      	bne.n	800da0e <__sflush_r+0x32>
 800da7a:	682b      	ldr	r3, [r5, #0]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d0c6      	beq.n	800da0e <__sflush_r+0x32>
 800da80:	2b1d      	cmp	r3, #29
 800da82:	d001      	beq.n	800da88 <__sflush_r+0xac>
 800da84:	2b16      	cmp	r3, #22
 800da86:	d11e      	bne.n	800dac6 <__sflush_r+0xea>
 800da88:	602f      	str	r7, [r5, #0]
 800da8a:	2000      	movs	r0, #0
 800da8c:	e022      	b.n	800dad4 <__sflush_r+0xf8>
 800da8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da92:	b21b      	sxth	r3, r3
 800da94:	e01b      	b.n	800dace <__sflush_r+0xf2>
 800da96:	690f      	ldr	r7, [r1, #16]
 800da98:	2f00      	cmp	r7, #0
 800da9a:	d0f6      	beq.n	800da8a <__sflush_r+0xae>
 800da9c:	0793      	lsls	r3, r2, #30
 800da9e:	680e      	ldr	r6, [r1, #0]
 800daa0:	bf08      	it	eq
 800daa2:	694b      	ldreq	r3, [r1, #20]
 800daa4:	600f      	str	r7, [r1, #0]
 800daa6:	bf18      	it	ne
 800daa8:	2300      	movne	r3, #0
 800daaa:	eba6 0807 	sub.w	r8, r6, r7
 800daae:	608b      	str	r3, [r1, #8]
 800dab0:	f1b8 0f00 	cmp.w	r8, #0
 800dab4:	dde9      	ble.n	800da8a <__sflush_r+0xae>
 800dab6:	6a21      	ldr	r1, [r4, #32]
 800dab8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800daba:	4643      	mov	r3, r8
 800dabc:	463a      	mov	r2, r7
 800dabe:	4628      	mov	r0, r5
 800dac0:	47b0      	blx	r6
 800dac2:	2800      	cmp	r0, #0
 800dac4:	dc08      	bgt.n	800dad8 <__sflush_r+0xfc>
 800dac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800daca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dace:	81a3      	strh	r3, [r4, #12]
 800dad0:	f04f 30ff 	mov.w	r0, #4294967295
 800dad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dad8:	4407      	add	r7, r0
 800dada:	eba8 0800 	sub.w	r8, r8, r0
 800dade:	e7e7      	b.n	800dab0 <__sflush_r+0xd4>
 800dae0:	dfbffffe 	.word	0xdfbffffe

0800dae4 <_fflush_r>:
 800dae4:	b538      	push	{r3, r4, r5, lr}
 800dae6:	690b      	ldr	r3, [r1, #16]
 800dae8:	4605      	mov	r5, r0
 800daea:	460c      	mov	r4, r1
 800daec:	b913      	cbnz	r3, 800daf4 <_fflush_r+0x10>
 800daee:	2500      	movs	r5, #0
 800daf0:	4628      	mov	r0, r5
 800daf2:	bd38      	pop	{r3, r4, r5, pc}
 800daf4:	b118      	cbz	r0, 800dafe <_fflush_r+0x1a>
 800daf6:	6a03      	ldr	r3, [r0, #32]
 800daf8:	b90b      	cbnz	r3, 800dafe <_fflush_r+0x1a>
 800dafa:	f7fd fad3 	bl	800b0a4 <__sinit>
 800dafe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d0f3      	beq.n	800daee <_fflush_r+0xa>
 800db06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800db08:	07d0      	lsls	r0, r2, #31
 800db0a:	d404      	bmi.n	800db16 <_fflush_r+0x32>
 800db0c:	0599      	lsls	r1, r3, #22
 800db0e:	d402      	bmi.n	800db16 <_fflush_r+0x32>
 800db10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db12:	f7fd fc18 	bl	800b346 <__retarget_lock_acquire_recursive>
 800db16:	4628      	mov	r0, r5
 800db18:	4621      	mov	r1, r4
 800db1a:	f7ff ff5f 	bl	800d9dc <__sflush_r>
 800db1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db20:	07da      	lsls	r2, r3, #31
 800db22:	4605      	mov	r5, r0
 800db24:	d4e4      	bmi.n	800daf0 <_fflush_r+0xc>
 800db26:	89a3      	ldrh	r3, [r4, #12]
 800db28:	059b      	lsls	r3, r3, #22
 800db2a:	d4e1      	bmi.n	800daf0 <_fflush_r+0xc>
 800db2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db2e:	f7fd fc0b 	bl	800b348 <__retarget_lock_release_recursive>
 800db32:	e7dd      	b.n	800daf0 <_fflush_r+0xc>

0800db34 <memmove>:
 800db34:	4288      	cmp	r0, r1
 800db36:	b510      	push	{r4, lr}
 800db38:	eb01 0402 	add.w	r4, r1, r2
 800db3c:	d902      	bls.n	800db44 <memmove+0x10>
 800db3e:	4284      	cmp	r4, r0
 800db40:	4623      	mov	r3, r4
 800db42:	d807      	bhi.n	800db54 <memmove+0x20>
 800db44:	1e43      	subs	r3, r0, #1
 800db46:	42a1      	cmp	r1, r4
 800db48:	d008      	beq.n	800db5c <memmove+0x28>
 800db4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db52:	e7f8      	b.n	800db46 <memmove+0x12>
 800db54:	4402      	add	r2, r0
 800db56:	4601      	mov	r1, r0
 800db58:	428a      	cmp	r2, r1
 800db5a:	d100      	bne.n	800db5e <memmove+0x2a>
 800db5c:	bd10      	pop	{r4, pc}
 800db5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db66:	e7f7      	b.n	800db58 <memmove+0x24>

0800db68 <strncmp>:
 800db68:	b510      	push	{r4, lr}
 800db6a:	b16a      	cbz	r2, 800db88 <strncmp+0x20>
 800db6c:	3901      	subs	r1, #1
 800db6e:	1884      	adds	r4, r0, r2
 800db70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db74:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800db78:	429a      	cmp	r2, r3
 800db7a:	d103      	bne.n	800db84 <strncmp+0x1c>
 800db7c:	42a0      	cmp	r0, r4
 800db7e:	d001      	beq.n	800db84 <strncmp+0x1c>
 800db80:	2a00      	cmp	r2, #0
 800db82:	d1f5      	bne.n	800db70 <strncmp+0x8>
 800db84:	1ad0      	subs	r0, r2, r3
 800db86:	bd10      	pop	{r4, pc}
 800db88:	4610      	mov	r0, r2
 800db8a:	e7fc      	b.n	800db86 <strncmp+0x1e>
 800db8c:	0000      	movs	r0, r0
	...

0800db90 <nan>:
 800db90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800db98 <nan+0x8>
 800db94:	4770      	bx	lr
 800db96:	bf00      	nop
 800db98:	00000000 	.word	0x00000000
 800db9c:	7ff80000 	.word	0x7ff80000

0800dba0 <__assert_func>:
 800dba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dba2:	4614      	mov	r4, r2
 800dba4:	461a      	mov	r2, r3
 800dba6:	4b09      	ldr	r3, [pc, #36]	@ (800dbcc <__assert_func+0x2c>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4605      	mov	r5, r0
 800dbac:	68d8      	ldr	r0, [r3, #12]
 800dbae:	b954      	cbnz	r4, 800dbc6 <__assert_func+0x26>
 800dbb0:	4b07      	ldr	r3, [pc, #28]	@ (800dbd0 <__assert_func+0x30>)
 800dbb2:	461c      	mov	r4, r3
 800dbb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dbb8:	9100      	str	r1, [sp, #0]
 800dbba:	462b      	mov	r3, r5
 800dbbc:	4905      	ldr	r1, [pc, #20]	@ (800dbd4 <__assert_func+0x34>)
 800dbbe:	f000 fba7 	bl	800e310 <fiprintf>
 800dbc2:	f000 fbb7 	bl	800e334 <abort>
 800dbc6:	4b04      	ldr	r3, [pc, #16]	@ (800dbd8 <__assert_func+0x38>)
 800dbc8:	e7f4      	b.n	800dbb4 <__assert_func+0x14>
 800dbca:	bf00      	nop
 800dbcc:	20000018 	.word	0x20000018
 800dbd0:	0800f924 	.word	0x0800f924
 800dbd4:	0800f8f6 	.word	0x0800f8f6
 800dbd8:	0800f8e9 	.word	0x0800f8e9

0800dbdc <_calloc_r>:
 800dbdc:	b570      	push	{r4, r5, r6, lr}
 800dbde:	fba1 5402 	umull	r5, r4, r1, r2
 800dbe2:	b93c      	cbnz	r4, 800dbf4 <_calloc_r+0x18>
 800dbe4:	4629      	mov	r1, r5
 800dbe6:	f7fc fad9 	bl	800a19c <_malloc_r>
 800dbea:	4606      	mov	r6, r0
 800dbec:	b928      	cbnz	r0, 800dbfa <_calloc_r+0x1e>
 800dbee:	2600      	movs	r6, #0
 800dbf0:	4630      	mov	r0, r6
 800dbf2:	bd70      	pop	{r4, r5, r6, pc}
 800dbf4:	220c      	movs	r2, #12
 800dbf6:	6002      	str	r2, [r0, #0]
 800dbf8:	e7f9      	b.n	800dbee <_calloc_r+0x12>
 800dbfa:	462a      	mov	r2, r5
 800dbfc:	4621      	mov	r1, r4
 800dbfe:	f7fd faea 	bl	800b1d6 <memset>
 800dc02:	e7f5      	b.n	800dbf0 <_calloc_r+0x14>

0800dc04 <rshift>:
 800dc04:	6903      	ldr	r3, [r0, #16]
 800dc06:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dc0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc0e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dc12:	f100 0414 	add.w	r4, r0, #20
 800dc16:	dd45      	ble.n	800dca4 <rshift+0xa0>
 800dc18:	f011 011f 	ands.w	r1, r1, #31
 800dc1c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dc20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dc24:	d10c      	bne.n	800dc40 <rshift+0x3c>
 800dc26:	f100 0710 	add.w	r7, r0, #16
 800dc2a:	4629      	mov	r1, r5
 800dc2c:	42b1      	cmp	r1, r6
 800dc2e:	d334      	bcc.n	800dc9a <rshift+0x96>
 800dc30:	1a9b      	subs	r3, r3, r2
 800dc32:	009b      	lsls	r3, r3, #2
 800dc34:	1eea      	subs	r2, r5, #3
 800dc36:	4296      	cmp	r6, r2
 800dc38:	bf38      	it	cc
 800dc3a:	2300      	movcc	r3, #0
 800dc3c:	4423      	add	r3, r4
 800dc3e:	e015      	b.n	800dc6c <rshift+0x68>
 800dc40:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dc44:	f1c1 0820 	rsb	r8, r1, #32
 800dc48:	40cf      	lsrs	r7, r1
 800dc4a:	f105 0e04 	add.w	lr, r5, #4
 800dc4e:	46a1      	mov	r9, r4
 800dc50:	4576      	cmp	r6, lr
 800dc52:	46f4      	mov	ip, lr
 800dc54:	d815      	bhi.n	800dc82 <rshift+0x7e>
 800dc56:	1a9a      	subs	r2, r3, r2
 800dc58:	0092      	lsls	r2, r2, #2
 800dc5a:	3a04      	subs	r2, #4
 800dc5c:	3501      	adds	r5, #1
 800dc5e:	42ae      	cmp	r6, r5
 800dc60:	bf38      	it	cc
 800dc62:	2200      	movcc	r2, #0
 800dc64:	18a3      	adds	r3, r4, r2
 800dc66:	50a7      	str	r7, [r4, r2]
 800dc68:	b107      	cbz	r7, 800dc6c <rshift+0x68>
 800dc6a:	3304      	adds	r3, #4
 800dc6c:	1b1a      	subs	r2, r3, r4
 800dc6e:	42a3      	cmp	r3, r4
 800dc70:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dc74:	bf08      	it	eq
 800dc76:	2300      	moveq	r3, #0
 800dc78:	6102      	str	r2, [r0, #16]
 800dc7a:	bf08      	it	eq
 800dc7c:	6143      	streq	r3, [r0, #20]
 800dc7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc82:	f8dc c000 	ldr.w	ip, [ip]
 800dc86:	fa0c fc08 	lsl.w	ip, ip, r8
 800dc8a:	ea4c 0707 	orr.w	r7, ip, r7
 800dc8e:	f849 7b04 	str.w	r7, [r9], #4
 800dc92:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dc96:	40cf      	lsrs	r7, r1
 800dc98:	e7da      	b.n	800dc50 <rshift+0x4c>
 800dc9a:	f851 cb04 	ldr.w	ip, [r1], #4
 800dc9e:	f847 cf04 	str.w	ip, [r7, #4]!
 800dca2:	e7c3      	b.n	800dc2c <rshift+0x28>
 800dca4:	4623      	mov	r3, r4
 800dca6:	e7e1      	b.n	800dc6c <rshift+0x68>

0800dca8 <__hexdig_fun>:
 800dca8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dcac:	2b09      	cmp	r3, #9
 800dcae:	d802      	bhi.n	800dcb6 <__hexdig_fun+0xe>
 800dcb0:	3820      	subs	r0, #32
 800dcb2:	b2c0      	uxtb	r0, r0
 800dcb4:	4770      	bx	lr
 800dcb6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dcba:	2b05      	cmp	r3, #5
 800dcbc:	d801      	bhi.n	800dcc2 <__hexdig_fun+0x1a>
 800dcbe:	3847      	subs	r0, #71	@ 0x47
 800dcc0:	e7f7      	b.n	800dcb2 <__hexdig_fun+0xa>
 800dcc2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800dcc6:	2b05      	cmp	r3, #5
 800dcc8:	d801      	bhi.n	800dcce <__hexdig_fun+0x26>
 800dcca:	3827      	subs	r0, #39	@ 0x27
 800dccc:	e7f1      	b.n	800dcb2 <__hexdig_fun+0xa>
 800dcce:	2000      	movs	r0, #0
 800dcd0:	4770      	bx	lr
	...

0800dcd4 <__gethex>:
 800dcd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcd8:	b085      	sub	sp, #20
 800dcda:	468a      	mov	sl, r1
 800dcdc:	9302      	str	r3, [sp, #8]
 800dcde:	680b      	ldr	r3, [r1, #0]
 800dce0:	9001      	str	r0, [sp, #4]
 800dce2:	4690      	mov	r8, r2
 800dce4:	1c9c      	adds	r4, r3, #2
 800dce6:	46a1      	mov	r9, r4
 800dce8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dcec:	2830      	cmp	r0, #48	@ 0x30
 800dcee:	d0fa      	beq.n	800dce6 <__gethex+0x12>
 800dcf0:	eba9 0303 	sub.w	r3, r9, r3
 800dcf4:	f1a3 0b02 	sub.w	fp, r3, #2
 800dcf8:	f7ff ffd6 	bl	800dca8 <__hexdig_fun>
 800dcfc:	4605      	mov	r5, r0
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	d168      	bne.n	800ddd4 <__gethex+0x100>
 800dd02:	49a0      	ldr	r1, [pc, #640]	@ (800df84 <__gethex+0x2b0>)
 800dd04:	2201      	movs	r2, #1
 800dd06:	4648      	mov	r0, r9
 800dd08:	f7ff ff2e 	bl	800db68 <strncmp>
 800dd0c:	4607      	mov	r7, r0
 800dd0e:	2800      	cmp	r0, #0
 800dd10:	d167      	bne.n	800dde2 <__gethex+0x10e>
 800dd12:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dd16:	4626      	mov	r6, r4
 800dd18:	f7ff ffc6 	bl	800dca8 <__hexdig_fun>
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	d062      	beq.n	800dde6 <__gethex+0x112>
 800dd20:	4623      	mov	r3, r4
 800dd22:	7818      	ldrb	r0, [r3, #0]
 800dd24:	2830      	cmp	r0, #48	@ 0x30
 800dd26:	4699      	mov	r9, r3
 800dd28:	f103 0301 	add.w	r3, r3, #1
 800dd2c:	d0f9      	beq.n	800dd22 <__gethex+0x4e>
 800dd2e:	f7ff ffbb 	bl	800dca8 <__hexdig_fun>
 800dd32:	fab0 f580 	clz	r5, r0
 800dd36:	096d      	lsrs	r5, r5, #5
 800dd38:	f04f 0b01 	mov.w	fp, #1
 800dd3c:	464a      	mov	r2, r9
 800dd3e:	4616      	mov	r6, r2
 800dd40:	3201      	adds	r2, #1
 800dd42:	7830      	ldrb	r0, [r6, #0]
 800dd44:	f7ff ffb0 	bl	800dca8 <__hexdig_fun>
 800dd48:	2800      	cmp	r0, #0
 800dd4a:	d1f8      	bne.n	800dd3e <__gethex+0x6a>
 800dd4c:	498d      	ldr	r1, [pc, #564]	@ (800df84 <__gethex+0x2b0>)
 800dd4e:	2201      	movs	r2, #1
 800dd50:	4630      	mov	r0, r6
 800dd52:	f7ff ff09 	bl	800db68 <strncmp>
 800dd56:	2800      	cmp	r0, #0
 800dd58:	d13f      	bne.n	800ddda <__gethex+0x106>
 800dd5a:	b944      	cbnz	r4, 800dd6e <__gethex+0x9a>
 800dd5c:	1c74      	adds	r4, r6, #1
 800dd5e:	4622      	mov	r2, r4
 800dd60:	4616      	mov	r6, r2
 800dd62:	3201      	adds	r2, #1
 800dd64:	7830      	ldrb	r0, [r6, #0]
 800dd66:	f7ff ff9f 	bl	800dca8 <__hexdig_fun>
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	d1f8      	bne.n	800dd60 <__gethex+0x8c>
 800dd6e:	1ba4      	subs	r4, r4, r6
 800dd70:	00a7      	lsls	r7, r4, #2
 800dd72:	7833      	ldrb	r3, [r6, #0]
 800dd74:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dd78:	2b50      	cmp	r3, #80	@ 0x50
 800dd7a:	d13e      	bne.n	800ddfa <__gethex+0x126>
 800dd7c:	7873      	ldrb	r3, [r6, #1]
 800dd7e:	2b2b      	cmp	r3, #43	@ 0x2b
 800dd80:	d033      	beq.n	800ddea <__gethex+0x116>
 800dd82:	2b2d      	cmp	r3, #45	@ 0x2d
 800dd84:	d034      	beq.n	800ddf0 <__gethex+0x11c>
 800dd86:	1c71      	adds	r1, r6, #1
 800dd88:	2400      	movs	r4, #0
 800dd8a:	7808      	ldrb	r0, [r1, #0]
 800dd8c:	f7ff ff8c 	bl	800dca8 <__hexdig_fun>
 800dd90:	1e43      	subs	r3, r0, #1
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	2b18      	cmp	r3, #24
 800dd96:	d830      	bhi.n	800ddfa <__gethex+0x126>
 800dd98:	f1a0 0210 	sub.w	r2, r0, #16
 800dd9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dda0:	f7ff ff82 	bl	800dca8 <__hexdig_fun>
 800dda4:	f100 3cff 	add.w	ip, r0, #4294967295
 800dda8:	fa5f fc8c 	uxtb.w	ip, ip
 800ddac:	f1bc 0f18 	cmp.w	ip, #24
 800ddb0:	f04f 030a 	mov.w	r3, #10
 800ddb4:	d91e      	bls.n	800ddf4 <__gethex+0x120>
 800ddb6:	b104      	cbz	r4, 800ddba <__gethex+0xe6>
 800ddb8:	4252      	negs	r2, r2
 800ddba:	4417      	add	r7, r2
 800ddbc:	f8ca 1000 	str.w	r1, [sl]
 800ddc0:	b1ed      	cbz	r5, 800ddfe <__gethex+0x12a>
 800ddc2:	f1bb 0f00 	cmp.w	fp, #0
 800ddc6:	bf0c      	ite	eq
 800ddc8:	2506      	moveq	r5, #6
 800ddca:	2500      	movne	r5, #0
 800ddcc:	4628      	mov	r0, r5
 800ddce:	b005      	add	sp, #20
 800ddd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd4:	2500      	movs	r5, #0
 800ddd6:	462c      	mov	r4, r5
 800ddd8:	e7b0      	b.n	800dd3c <__gethex+0x68>
 800ddda:	2c00      	cmp	r4, #0
 800dddc:	d1c7      	bne.n	800dd6e <__gethex+0x9a>
 800ddde:	4627      	mov	r7, r4
 800dde0:	e7c7      	b.n	800dd72 <__gethex+0x9e>
 800dde2:	464e      	mov	r6, r9
 800dde4:	462f      	mov	r7, r5
 800dde6:	2501      	movs	r5, #1
 800dde8:	e7c3      	b.n	800dd72 <__gethex+0x9e>
 800ddea:	2400      	movs	r4, #0
 800ddec:	1cb1      	adds	r1, r6, #2
 800ddee:	e7cc      	b.n	800dd8a <__gethex+0xb6>
 800ddf0:	2401      	movs	r4, #1
 800ddf2:	e7fb      	b.n	800ddec <__gethex+0x118>
 800ddf4:	fb03 0002 	mla	r0, r3, r2, r0
 800ddf8:	e7ce      	b.n	800dd98 <__gethex+0xc4>
 800ddfa:	4631      	mov	r1, r6
 800ddfc:	e7de      	b.n	800ddbc <__gethex+0xe8>
 800ddfe:	eba6 0309 	sub.w	r3, r6, r9
 800de02:	3b01      	subs	r3, #1
 800de04:	4629      	mov	r1, r5
 800de06:	2b07      	cmp	r3, #7
 800de08:	dc0a      	bgt.n	800de20 <__gethex+0x14c>
 800de0a:	9801      	ldr	r0, [sp, #4]
 800de0c:	f7fe f956 	bl	800c0bc <_Balloc>
 800de10:	4604      	mov	r4, r0
 800de12:	b940      	cbnz	r0, 800de26 <__gethex+0x152>
 800de14:	4b5c      	ldr	r3, [pc, #368]	@ (800df88 <__gethex+0x2b4>)
 800de16:	4602      	mov	r2, r0
 800de18:	21e4      	movs	r1, #228	@ 0xe4
 800de1a:	485c      	ldr	r0, [pc, #368]	@ (800df8c <__gethex+0x2b8>)
 800de1c:	f7ff fec0 	bl	800dba0 <__assert_func>
 800de20:	3101      	adds	r1, #1
 800de22:	105b      	asrs	r3, r3, #1
 800de24:	e7ef      	b.n	800de06 <__gethex+0x132>
 800de26:	f100 0a14 	add.w	sl, r0, #20
 800de2a:	2300      	movs	r3, #0
 800de2c:	4655      	mov	r5, sl
 800de2e:	469b      	mov	fp, r3
 800de30:	45b1      	cmp	r9, r6
 800de32:	d337      	bcc.n	800dea4 <__gethex+0x1d0>
 800de34:	f845 bb04 	str.w	fp, [r5], #4
 800de38:	eba5 050a 	sub.w	r5, r5, sl
 800de3c:	10ad      	asrs	r5, r5, #2
 800de3e:	6125      	str	r5, [r4, #16]
 800de40:	4658      	mov	r0, fp
 800de42:	f7fe fa2d 	bl	800c2a0 <__hi0bits>
 800de46:	016d      	lsls	r5, r5, #5
 800de48:	f8d8 6000 	ldr.w	r6, [r8]
 800de4c:	1a2d      	subs	r5, r5, r0
 800de4e:	42b5      	cmp	r5, r6
 800de50:	dd54      	ble.n	800defc <__gethex+0x228>
 800de52:	1bad      	subs	r5, r5, r6
 800de54:	4629      	mov	r1, r5
 800de56:	4620      	mov	r0, r4
 800de58:	f7fe fdc1 	bl	800c9de <__any_on>
 800de5c:	4681      	mov	r9, r0
 800de5e:	b178      	cbz	r0, 800de80 <__gethex+0x1ac>
 800de60:	1e6b      	subs	r3, r5, #1
 800de62:	1159      	asrs	r1, r3, #5
 800de64:	f003 021f 	and.w	r2, r3, #31
 800de68:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800de6c:	f04f 0901 	mov.w	r9, #1
 800de70:	fa09 f202 	lsl.w	r2, r9, r2
 800de74:	420a      	tst	r2, r1
 800de76:	d003      	beq.n	800de80 <__gethex+0x1ac>
 800de78:	454b      	cmp	r3, r9
 800de7a:	dc36      	bgt.n	800deea <__gethex+0x216>
 800de7c:	f04f 0902 	mov.w	r9, #2
 800de80:	4629      	mov	r1, r5
 800de82:	4620      	mov	r0, r4
 800de84:	f7ff febe 	bl	800dc04 <rshift>
 800de88:	442f      	add	r7, r5
 800de8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de8e:	42bb      	cmp	r3, r7
 800de90:	da42      	bge.n	800df18 <__gethex+0x244>
 800de92:	9801      	ldr	r0, [sp, #4]
 800de94:	4621      	mov	r1, r4
 800de96:	f7fe f951 	bl	800c13c <_Bfree>
 800de9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de9c:	2300      	movs	r3, #0
 800de9e:	6013      	str	r3, [r2, #0]
 800dea0:	25a3      	movs	r5, #163	@ 0xa3
 800dea2:	e793      	b.n	800ddcc <__gethex+0xf8>
 800dea4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dea8:	2a2e      	cmp	r2, #46	@ 0x2e
 800deaa:	d012      	beq.n	800ded2 <__gethex+0x1fe>
 800deac:	2b20      	cmp	r3, #32
 800deae:	d104      	bne.n	800deba <__gethex+0x1e6>
 800deb0:	f845 bb04 	str.w	fp, [r5], #4
 800deb4:	f04f 0b00 	mov.w	fp, #0
 800deb8:	465b      	mov	r3, fp
 800deba:	7830      	ldrb	r0, [r6, #0]
 800debc:	9303      	str	r3, [sp, #12]
 800debe:	f7ff fef3 	bl	800dca8 <__hexdig_fun>
 800dec2:	9b03      	ldr	r3, [sp, #12]
 800dec4:	f000 000f 	and.w	r0, r0, #15
 800dec8:	4098      	lsls	r0, r3
 800deca:	ea4b 0b00 	orr.w	fp, fp, r0
 800dece:	3304      	adds	r3, #4
 800ded0:	e7ae      	b.n	800de30 <__gethex+0x15c>
 800ded2:	45b1      	cmp	r9, r6
 800ded4:	d8ea      	bhi.n	800deac <__gethex+0x1d8>
 800ded6:	492b      	ldr	r1, [pc, #172]	@ (800df84 <__gethex+0x2b0>)
 800ded8:	9303      	str	r3, [sp, #12]
 800deda:	2201      	movs	r2, #1
 800dedc:	4630      	mov	r0, r6
 800dede:	f7ff fe43 	bl	800db68 <strncmp>
 800dee2:	9b03      	ldr	r3, [sp, #12]
 800dee4:	2800      	cmp	r0, #0
 800dee6:	d1e1      	bne.n	800deac <__gethex+0x1d8>
 800dee8:	e7a2      	b.n	800de30 <__gethex+0x15c>
 800deea:	1ea9      	subs	r1, r5, #2
 800deec:	4620      	mov	r0, r4
 800deee:	f7fe fd76 	bl	800c9de <__any_on>
 800def2:	2800      	cmp	r0, #0
 800def4:	d0c2      	beq.n	800de7c <__gethex+0x1a8>
 800def6:	f04f 0903 	mov.w	r9, #3
 800defa:	e7c1      	b.n	800de80 <__gethex+0x1ac>
 800defc:	da09      	bge.n	800df12 <__gethex+0x23e>
 800defe:	1b75      	subs	r5, r6, r5
 800df00:	4621      	mov	r1, r4
 800df02:	9801      	ldr	r0, [sp, #4]
 800df04:	462a      	mov	r2, r5
 800df06:	f7fe fb31 	bl	800c56c <__lshift>
 800df0a:	1b7f      	subs	r7, r7, r5
 800df0c:	4604      	mov	r4, r0
 800df0e:	f100 0a14 	add.w	sl, r0, #20
 800df12:	f04f 0900 	mov.w	r9, #0
 800df16:	e7b8      	b.n	800de8a <__gethex+0x1b6>
 800df18:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800df1c:	42bd      	cmp	r5, r7
 800df1e:	dd6f      	ble.n	800e000 <__gethex+0x32c>
 800df20:	1bed      	subs	r5, r5, r7
 800df22:	42ae      	cmp	r6, r5
 800df24:	dc34      	bgt.n	800df90 <__gethex+0x2bc>
 800df26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df2a:	2b02      	cmp	r3, #2
 800df2c:	d022      	beq.n	800df74 <__gethex+0x2a0>
 800df2e:	2b03      	cmp	r3, #3
 800df30:	d024      	beq.n	800df7c <__gethex+0x2a8>
 800df32:	2b01      	cmp	r3, #1
 800df34:	d115      	bne.n	800df62 <__gethex+0x28e>
 800df36:	42ae      	cmp	r6, r5
 800df38:	d113      	bne.n	800df62 <__gethex+0x28e>
 800df3a:	2e01      	cmp	r6, #1
 800df3c:	d10b      	bne.n	800df56 <__gethex+0x282>
 800df3e:	9a02      	ldr	r2, [sp, #8]
 800df40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800df44:	6013      	str	r3, [r2, #0]
 800df46:	2301      	movs	r3, #1
 800df48:	6123      	str	r3, [r4, #16]
 800df4a:	f8ca 3000 	str.w	r3, [sl]
 800df4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df50:	2562      	movs	r5, #98	@ 0x62
 800df52:	601c      	str	r4, [r3, #0]
 800df54:	e73a      	b.n	800ddcc <__gethex+0xf8>
 800df56:	1e71      	subs	r1, r6, #1
 800df58:	4620      	mov	r0, r4
 800df5a:	f7fe fd40 	bl	800c9de <__any_on>
 800df5e:	2800      	cmp	r0, #0
 800df60:	d1ed      	bne.n	800df3e <__gethex+0x26a>
 800df62:	9801      	ldr	r0, [sp, #4]
 800df64:	4621      	mov	r1, r4
 800df66:	f7fe f8e9 	bl	800c13c <_Bfree>
 800df6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df6c:	2300      	movs	r3, #0
 800df6e:	6013      	str	r3, [r2, #0]
 800df70:	2550      	movs	r5, #80	@ 0x50
 800df72:	e72b      	b.n	800ddcc <__gethex+0xf8>
 800df74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df76:	2b00      	cmp	r3, #0
 800df78:	d1f3      	bne.n	800df62 <__gethex+0x28e>
 800df7a:	e7e0      	b.n	800df3e <__gethex+0x26a>
 800df7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d1dd      	bne.n	800df3e <__gethex+0x26a>
 800df82:	e7ee      	b.n	800df62 <__gethex+0x28e>
 800df84:	0800f878 	.word	0x0800f878
 800df88:	0800f70e 	.word	0x0800f70e
 800df8c:	0800f925 	.word	0x0800f925
 800df90:	1e6f      	subs	r7, r5, #1
 800df92:	f1b9 0f00 	cmp.w	r9, #0
 800df96:	d130      	bne.n	800dffa <__gethex+0x326>
 800df98:	b127      	cbz	r7, 800dfa4 <__gethex+0x2d0>
 800df9a:	4639      	mov	r1, r7
 800df9c:	4620      	mov	r0, r4
 800df9e:	f7fe fd1e 	bl	800c9de <__any_on>
 800dfa2:	4681      	mov	r9, r0
 800dfa4:	117a      	asrs	r2, r7, #5
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dfac:	f007 071f 	and.w	r7, r7, #31
 800dfb0:	40bb      	lsls	r3, r7
 800dfb2:	4213      	tst	r3, r2
 800dfb4:	4629      	mov	r1, r5
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	bf18      	it	ne
 800dfba:	f049 0902 	orrne.w	r9, r9, #2
 800dfbe:	f7ff fe21 	bl	800dc04 <rshift>
 800dfc2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dfc6:	1b76      	subs	r6, r6, r5
 800dfc8:	2502      	movs	r5, #2
 800dfca:	f1b9 0f00 	cmp.w	r9, #0
 800dfce:	d047      	beq.n	800e060 <__gethex+0x38c>
 800dfd0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dfd4:	2b02      	cmp	r3, #2
 800dfd6:	d015      	beq.n	800e004 <__gethex+0x330>
 800dfd8:	2b03      	cmp	r3, #3
 800dfda:	d017      	beq.n	800e00c <__gethex+0x338>
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d109      	bne.n	800dff4 <__gethex+0x320>
 800dfe0:	f019 0f02 	tst.w	r9, #2
 800dfe4:	d006      	beq.n	800dff4 <__gethex+0x320>
 800dfe6:	f8da 3000 	ldr.w	r3, [sl]
 800dfea:	ea49 0903 	orr.w	r9, r9, r3
 800dfee:	f019 0f01 	tst.w	r9, #1
 800dff2:	d10e      	bne.n	800e012 <__gethex+0x33e>
 800dff4:	f045 0510 	orr.w	r5, r5, #16
 800dff8:	e032      	b.n	800e060 <__gethex+0x38c>
 800dffa:	f04f 0901 	mov.w	r9, #1
 800dffe:	e7d1      	b.n	800dfa4 <__gethex+0x2d0>
 800e000:	2501      	movs	r5, #1
 800e002:	e7e2      	b.n	800dfca <__gethex+0x2f6>
 800e004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e006:	f1c3 0301 	rsb	r3, r3, #1
 800e00a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e00c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d0f0      	beq.n	800dff4 <__gethex+0x320>
 800e012:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e016:	f104 0314 	add.w	r3, r4, #20
 800e01a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e01e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e022:	f04f 0c00 	mov.w	ip, #0
 800e026:	4618      	mov	r0, r3
 800e028:	f853 2b04 	ldr.w	r2, [r3], #4
 800e02c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e030:	d01b      	beq.n	800e06a <__gethex+0x396>
 800e032:	3201      	adds	r2, #1
 800e034:	6002      	str	r2, [r0, #0]
 800e036:	2d02      	cmp	r5, #2
 800e038:	f104 0314 	add.w	r3, r4, #20
 800e03c:	d13c      	bne.n	800e0b8 <__gethex+0x3e4>
 800e03e:	f8d8 2000 	ldr.w	r2, [r8]
 800e042:	3a01      	subs	r2, #1
 800e044:	42b2      	cmp	r2, r6
 800e046:	d109      	bne.n	800e05c <__gethex+0x388>
 800e048:	1171      	asrs	r1, r6, #5
 800e04a:	2201      	movs	r2, #1
 800e04c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e050:	f006 061f 	and.w	r6, r6, #31
 800e054:	fa02 f606 	lsl.w	r6, r2, r6
 800e058:	421e      	tst	r6, r3
 800e05a:	d13a      	bne.n	800e0d2 <__gethex+0x3fe>
 800e05c:	f045 0520 	orr.w	r5, r5, #32
 800e060:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e062:	601c      	str	r4, [r3, #0]
 800e064:	9b02      	ldr	r3, [sp, #8]
 800e066:	601f      	str	r7, [r3, #0]
 800e068:	e6b0      	b.n	800ddcc <__gethex+0xf8>
 800e06a:	4299      	cmp	r1, r3
 800e06c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e070:	d8d9      	bhi.n	800e026 <__gethex+0x352>
 800e072:	68a3      	ldr	r3, [r4, #8]
 800e074:	459b      	cmp	fp, r3
 800e076:	db17      	blt.n	800e0a8 <__gethex+0x3d4>
 800e078:	6861      	ldr	r1, [r4, #4]
 800e07a:	9801      	ldr	r0, [sp, #4]
 800e07c:	3101      	adds	r1, #1
 800e07e:	f7fe f81d 	bl	800c0bc <_Balloc>
 800e082:	4681      	mov	r9, r0
 800e084:	b918      	cbnz	r0, 800e08e <__gethex+0x3ba>
 800e086:	4b1a      	ldr	r3, [pc, #104]	@ (800e0f0 <__gethex+0x41c>)
 800e088:	4602      	mov	r2, r0
 800e08a:	2184      	movs	r1, #132	@ 0x84
 800e08c:	e6c5      	b.n	800de1a <__gethex+0x146>
 800e08e:	6922      	ldr	r2, [r4, #16]
 800e090:	3202      	adds	r2, #2
 800e092:	f104 010c 	add.w	r1, r4, #12
 800e096:	0092      	lsls	r2, r2, #2
 800e098:	300c      	adds	r0, #12
 800e09a:	f7fd f963 	bl	800b364 <memcpy>
 800e09e:	4621      	mov	r1, r4
 800e0a0:	9801      	ldr	r0, [sp, #4]
 800e0a2:	f7fe f84b 	bl	800c13c <_Bfree>
 800e0a6:	464c      	mov	r4, r9
 800e0a8:	6923      	ldr	r3, [r4, #16]
 800e0aa:	1c5a      	adds	r2, r3, #1
 800e0ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e0b0:	6122      	str	r2, [r4, #16]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	615a      	str	r2, [r3, #20]
 800e0b6:	e7be      	b.n	800e036 <__gethex+0x362>
 800e0b8:	6922      	ldr	r2, [r4, #16]
 800e0ba:	455a      	cmp	r2, fp
 800e0bc:	dd0b      	ble.n	800e0d6 <__gethex+0x402>
 800e0be:	2101      	movs	r1, #1
 800e0c0:	4620      	mov	r0, r4
 800e0c2:	f7ff fd9f 	bl	800dc04 <rshift>
 800e0c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e0ca:	3701      	adds	r7, #1
 800e0cc:	42bb      	cmp	r3, r7
 800e0ce:	f6ff aee0 	blt.w	800de92 <__gethex+0x1be>
 800e0d2:	2501      	movs	r5, #1
 800e0d4:	e7c2      	b.n	800e05c <__gethex+0x388>
 800e0d6:	f016 061f 	ands.w	r6, r6, #31
 800e0da:	d0fa      	beq.n	800e0d2 <__gethex+0x3fe>
 800e0dc:	4453      	add	r3, sl
 800e0de:	f1c6 0620 	rsb	r6, r6, #32
 800e0e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e0e6:	f7fe f8db 	bl	800c2a0 <__hi0bits>
 800e0ea:	42b0      	cmp	r0, r6
 800e0ec:	dbe7      	blt.n	800e0be <__gethex+0x3ea>
 800e0ee:	e7f0      	b.n	800e0d2 <__gethex+0x3fe>
 800e0f0:	0800f70e 	.word	0x0800f70e

0800e0f4 <L_shift>:
 800e0f4:	f1c2 0208 	rsb	r2, r2, #8
 800e0f8:	0092      	lsls	r2, r2, #2
 800e0fa:	b570      	push	{r4, r5, r6, lr}
 800e0fc:	f1c2 0620 	rsb	r6, r2, #32
 800e100:	6843      	ldr	r3, [r0, #4]
 800e102:	6804      	ldr	r4, [r0, #0]
 800e104:	fa03 f506 	lsl.w	r5, r3, r6
 800e108:	432c      	orrs	r4, r5
 800e10a:	40d3      	lsrs	r3, r2
 800e10c:	6004      	str	r4, [r0, #0]
 800e10e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e112:	4288      	cmp	r0, r1
 800e114:	d3f4      	bcc.n	800e100 <L_shift+0xc>
 800e116:	bd70      	pop	{r4, r5, r6, pc}

0800e118 <__match>:
 800e118:	b530      	push	{r4, r5, lr}
 800e11a:	6803      	ldr	r3, [r0, #0]
 800e11c:	3301      	adds	r3, #1
 800e11e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e122:	b914      	cbnz	r4, 800e12a <__match+0x12>
 800e124:	6003      	str	r3, [r0, #0]
 800e126:	2001      	movs	r0, #1
 800e128:	bd30      	pop	{r4, r5, pc}
 800e12a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e12e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e132:	2d19      	cmp	r5, #25
 800e134:	bf98      	it	ls
 800e136:	3220      	addls	r2, #32
 800e138:	42a2      	cmp	r2, r4
 800e13a:	d0f0      	beq.n	800e11e <__match+0x6>
 800e13c:	2000      	movs	r0, #0
 800e13e:	e7f3      	b.n	800e128 <__match+0x10>

0800e140 <__hexnan>:
 800e140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e144:	680b      	ldr	r3, [r1, #0]
 800e146:	6801      	ldr	r1, [r0, #0]
 800e148:	115e      	asrs	r6, r3, #5
 800e14a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e14e:	f013 031f 	ands.w	r3, r3, #31
 800e152:	b087      	sub	sp, #28
 800e154:	bf18      	it	ne
 800e156:	3604      	addne	r6, #4
 800e158:	2500      	movs	r5, #0
 800e15a:	1f37      	subs	r7, r6, #4
 800e15c:	4682      	mov	sl, r0
 800e15e:	4690      	mov	r8, r2
 800e160:	9301      	str	r3, [sp, #4]
 800e162:	f846 5c04 	str.w	r5, [r6, #-4]
 800e166:	46b9      	mov	r9, r7
 800e168:	463c      	mov	r4, r7
 800e16a:	9502      	str	r5, [sp, #8]
 800e16c:	46ab      	mov	fp, r5
 800e16e:	784a      	ldrb	r2, [r1, #1]
 800e170:	1c4b      	adds	r3, r1, #1
 800e172:	9303      	str	r3, [sp, #12]
 800e174:	b342      	cbz	r2, 800e1c8 <__hexnan+0x88>
 800e176:	4610      	mov	r0, r2
 800e178:	9105      	str	r1, [sp, #20]
 800e17a:	9204      	str	r2, [sp, #16]
 800e17c:	f7ff fd94 	bl	800dca8 <__hexdig_fun>
 800e180:	2800      	cmp	r0, #0
 800e182:	d151      	bne.n	800e228 <__hexnan+0xe8>
 800e184:	9a04      	ldr	r2, [sp, #16]
 800e186:	9905      	ldr	r1, [sp, #20]
 800e188:	2a20      	cmp	r2, #32
 800e18a:	d818      	bhi.n	800e1be <__hexnan+0x7e>
 800e18c:	9b02      	ldr	r3, [sp, #8]
 800e18e:	459b      	cmp	fp, r3
 800e190:	dd13      	ble.n	800e1ba <__hexnan+0x7a>
 800e192:	454c      	cmp	r4, r9
 800e194:	d206      	bcs.n	800e1a4 <__hexnan+0x64>
 800e196:	2d07      	cmp	r5, #7
 800e198:	dc04      	bgt.n	800e1a4 <__hexnan+0x64>
 800e19a:	462a      	mov	r2, r5
 800e19c:	4649      	mov	r1, r9
 800e19e:	4620      	mov	r0, r4
 800e1a0:	f7ff ffa8 	bl	800e0f4 <L_shift>
 800e1a4:	4544      	cmp	r4, r8
 800e1a6:	d952      	bls.n	800e24e <__hexnan+0x10e>
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	f1a4 0904 	sub.w	r9, r4, #4
 800e1ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800e1b2:	f8cd b008 	str.w	fp, [sp, #8]
 800e1b6:	464c      	mov	r4, r9
 800e1b8:	461d      	mov	r5, r3
 800e1ba:	9903      	ldr	r1, [sp, #12]
 800e1bc:	e7d7      	b.n	800e16e <__hexnan+0x2e>
 800e1be:	2a29      	cmp	r2, #41	@ 0x29
 800e1c0:	d157      	bne.n	800e272 <__hexnan+0x132>
 800e1c2:	3102      	adds	r1, #2
 800e1c4:	f8ca 1000 	str.w	r1, [sl]
 800e1c8:	f1bb 0f00 	cmp.w	fp, #0
 800e1cc:	d051      	beq.n	800e272 <__hexnan+0x132>
 800e1ce:	454c      	cmp	r4, r9
 800e1d0:	d206      	bcs.n	800e1e0 <__hexnan+0xa0>
 800e1d2:	2d07      	cmp	r5, #7
 800e1d4:	dc04      	bgt.n	800e1e0 <__hexnan+0xa0>
 800e1d6:	462a      	mov	r2, r5
 800e1d8:	4649      	mov	r1, r9
 800e1da:	4620      	mov	r0, r4
 800e1dc:	f7ff ff8a 	bl	800e0f4 <L_shift>
 800e1e0:	4544      	cmp	r4, r8
 800e1e2:	d936      	bls.n	800e252 <__hexnan+0x112>
 800e1e4:	f1a8 0204 	sub.w	r2, r8, #4
 800e1e8:	4623      	mov	r3, r4
 800e1ea:	f853 1b04 	ldr.w	r1, [r3], #4
 800e1ee:	f842 1f04 	str.w	r1, [r2, #4]!
 800e1f2:	429f      	cmp	r7, r3
 800e1f4:	d2f9      	bcs.n	800e1ea <__hexnan+0xaa>
 800e1f6:	1b3b      	subs	r3, r7, r4
 800e1f8:	f023 0303 	bic.w	r3, r3, #3
 800e1fc:	3304      	adds	r3, #4
 800e1fe:	3401      	adds	r4, #1
 800e200:	3e03      	subs	r6, #3
 800e202:	42b4      	cmp	r4, r6
 800e204:	bf88      	it	hi
 800e206:	2304      	movhi	r3, #4
 800e208:	4443      	add	r3, r8
 800e20a:	2200      	movs	r2, #0
 800e20c:	f843 2b04 	str.w	r2, [r3], #4
 800e210:	429f      	cmp	r7, r3
 800e212:	d2fb      	bcs.n	800e20c <__hexnan+0xcc>
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	b91b      	cbnz	r3, 800e220 <__hexnan+0xe0>
 800e218:	4547      	cmp	r7, r8
 800e21a:	d128      	bne.n	800e26e <__hexnan+0x12e>
 800e21c:	2301      	movs	r3, #1
 800e21e:	603b      	str	r3, [r7, #0]
 800e220:	2005      	movs	r0, #5
 800e222:	b007      	add	sp, #28
 800e224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e228:	3501      	adds	r5, #1
 800e22a:	2d08      	cmp	r5, #8
 800e22c:	f10b 0b01 	add.w	fp, fp, #1
 800e230:	dd06      	ble.n	800e240 <__hexnan+0x100>
 800e232:	4544      	cmp	r4, r8
 800e234:	d9c1      	bls.n	800e1ba <__hexnan+0x7a>
 800e236:	2300      	movs	r3, #0
 800e238:	f844 3c04 	str.w	r3, [r4, #-4]
 800e23c:	2501      	movs	r5, #1
 800e23e:	3c04      	subs	r4, #4
 800e240:	6822      	ldr	r2, [r4, #0]
 800e242:	f000 000f 	and.w	r0, r0, #15
 800e246:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e24a:	6020      	str	r0, [r4, #0]
 800e24c:	e7b5      	b.n	800e1ba <__hexnan+0x7a>
 800e24e:	2508      	movs	r5, #8
 800e250:	e7b3      	b.n	800e1ba <__hexnan+0x7a>
 800e252:	9b01      	ldr	r3, [sp, #4]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d0dd      	beq.n	800e214 <__hexnan+0xd4>
 800e258:	f1c3 0320 	rsb	r3, r3, #32
 800e25c:	f04f 32ff 	mov.w	r2, #4294967295
 800e260:	40da      	lsrs	r2, r3
 800e262:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e266:	4013      	ands	r3, r2
 800e268:	f846 3c04 	str.w	r3, [r6, #-4]
 800e26c:	e7d2      	b.n	800e214 <__hexnan+0xd4>
 800e26e:	3f04      	subs	r7, #4
 800e270:	e7d0      	b.n	800e214 <__hexnan+0xd4>
 800e272:	2004      	movs	r0, #4
 800e274:	e7d5      	b.n	800e222 <__hexnan+0xe2>

0800e276 <__ascii_mbtowc>:
 800e276:	b082      	sub	sp, #8
 800e278:	b901      	cbnz	r1, 800e27c <__ascii_mbtowc+0x6>
 800e27a:	a901      	add	r1, sp, #4
 800e27c:	b142      	cbz	r2, 800e290 <__ascii_mbtowc+0x1a>
 800e27e:	b14b      	cbz	r3, 800e294 <__ascii_mbtowc+0x1e>
 800e280:	7813      	ldrb	r3, [r2, #0]
 800e282:	600b      	str	r3, [r1, #0]
 800e284:	7812      	ldrb	r2, [r2, #0]
 800e286:	1e10      	subs	r0, r2, #0
 800e288:	bf18      	it	ne
 800e28a:	2001      	movne	r0, #1
 800e28c:	b002      	add	sp, #8
 800e28e:	4770      	bx	lr
 800e290:	4610      	mov	r0, r2
 800e292:	e7fb      	b.n	800e28c <__ascii_mbtowc+0x16>
 800e294:	f06f 0001 	mvn.w	r0, #1
 800e298:	e7f8      	b.n	800e28c <__ascii_mbtowc+0x16>

0800e29a <_realloc_r>:
 800e29a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e29e:	4680      	mov	r8, r0
 800e2a0:	4615      	mov	r5, r2
 800e2a2:	460c      	mov	r4, r1
 800e2a4:	b921      	cbnz	r1, 800e2b0 <_realloc_r+0x16>
 800e2a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2aa:	4611      	mov	r1, r2
 800e2ac:	f7fb bf76 	b.w	800a19c <_malloc_r>
 800e2b0:	b92a      	cbnz	r2, 800e2be <_realloc_r+0x24>
 800e2b2:	f7fd feb9 	bl	800c028 <_free_r>
 800e2b6:	2400      	movs	r4, #0
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2be:	f000 f840 	bl	800e342 <_malloc_usable_size_r>
 800e2c2:	4285      	cmp	r5, r0
 800e2c4:	4606      	mov	r6, r0
 800e2c6:	d802      	bhi.n	800e2ce <_realloc_r+0x34>
 800e2c8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e2cc:	d8f4      	bhi.n	800e2b8 <_realloc_r+0x1e>
 800e2ce:	4629      	mov	r1, r5
 800e2d0:	4640      	mov	r0, r8
 800e2d2:	f7fb ff63 	bl	800a19c <_malloc_r>
 800e2d6:	4607      	mov	r7, r0
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	d0ec      	beq.n	800e2b6 <_realloc_r+0x1c>
 800e2dc:	42b5      	cmp	r5, r6
 800e2de:	462a      	mov	r2, r5
 800e2e0:	4621      	mov	r1, r4
 800e2e2:	bf28      	it	cs
 800e2e4:	4632      	movcs	r2, r6
 800e2e6:	f7fd f83d 	bl	800b364 <memcpy>
 800e2ea:	4621      	mov	r1, r4
 800e2ec:	4640      	mov	r0, r8
 800e2ee:	f7fd fe9b 	bl	800c028 <_free_r>
 800e2f2:	463c      	mov	r4, r7
 800e2f4:	e7e0      	b.n	800e2b8 <_realloc_r+0x1e>

0800e2f6 <__ascii_wctomb>:
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	4608      	mov	r0, r1
 800e2fa:	b141      	cbz	r1, 800e30e <__ascii_wctomb+0x18>
 800e2fc:	2aff      	cmp	r2, #255	@ 0xff
 800e2fe:	d904      	bls.n	800e30a <__ascii_wctomb+0x14>
 800e300:	228a      	movs	r2, #138	@ 0x8a
 800e302:	601a      	str	r2, [r3, #0]
 800e304:	f04f 30ff 	mov.w	r0, #4294967295
 800e308:	4770      	bx	lr
 800e30a:	700a      	strb	r2, [r1, #0]
 800e30c:	2001      	movs	r0, #1
 800e30e:	4770      	bx	lr

0800e310 <fiprintf>:
 800e310:	b40e      	push	{r1, r2, r3}
 800e312:	b503      	push	{r0, r1, lr}
 800e314:	4601      	mov	r1, r0
 800e316:	ab03      	add	r3, sp, #12
 800e318:	4805      	ldr	r0, [pc, #20]	@ (800e330 <fiprintf+0x20>)
 800e31a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e31e:	6800      	ldr	r0, [r0, #0]
 800e320:	9301      	str	r3, [sp, #4]
 800e322:	f000 f83f 	bl	800e3a4 <_vfiprintf_r>
 800e326:	b002      	add	sp, #8
 800e328:	f85d eb04 	ldr.w	lr, [sp], #4
 800e32c:	b003      	add	sp, #12
 800e32e:	4770      	bx	lr
 800e330:	20000018 	.word	0x20000018

0800e334 <abort>:
 800e334:	b508      	push	{r3, lr}
 800e336:	2006      	movs	r0, #6
 800e338:	f000 fa08 	bl	800e74c <raise>
 800e33c:	2001      	movs	r0, #1
 800e33e:	f7f9 fe24 	bl	8007f8a <_exit>

0800e342 <_malloc_usable_size_r>:
 800e342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e346:	1f18      	subs	r0, r3, #4
 800e348:	2b00      	cmp	r3, #0
 800e34a:	bfbc      	itt	lt
 800e34c:	580b      	ldrlt	r3, [r1, r0]
 800e34e:	18c0      	addlt	r0, r0, r3
 800e350:	4770      	bx	lr

0800e352 <__sfputc_r>:
 800e352:	6893      	ldr	r3, [r2, #8]
 800e354:	3b01      	subs	r3, #1
 800e356:	2b00      	cmp	r3, #0
 800e358:	b410      	push	{r4}
 800e35a:	6093      	str	r3, [r2, #8]
 800e35c:	da08      	bge.n	800e370 <__sfputc_r+0x1e>
 800e35e:	6994      	ldr	r4, [r2, #24]
 800e360:	42a3      	cmp	r3, r4
 800e362:	db01      	blt.n	800e368 <__sfputc_r+0x16>
 800e364:	290a      	cmp	r1, #10
 800e366:	d103      	bne.n	800e370 <__sfputc_r+0x1e>
 800e368:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e36c:	f000 b932 	b.w	800e5d4 <__swbuf_r>
 800e370:	6813      	ldr	r3, [r2, #0]
 800e372:	1c58      	adds	r0, r3, #1
 800e374:	6010      	str	r0, [r2, #0]
 800e376:	7019      	strb	r1, [r3, #0]
 800e378:	4608      	mov	r0, r1
 800e37a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <__sfputs_r>:
 800e380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e382:	4606      	mov	r6, r0
 800e384:	460f      	mov	r7, r1
 800e386:	4614      	mov	r4, r2
 800e388:	18d5      	adds	r5, r2, r3
 800e38a:	42ac      	cmp	r4, r5
 800e38c:	d101      	bne.n	800e392 <__sfputs_r+0x12>
 800e38e:	2000      	movs	r0, #0
 800e390:	e007      	b.n	800e3a2 <__sfputs_r+0x22>
 800e392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e396:	463a      	mov	r2, r7
 800e398:	4630      	mov	r0, r6
 800e39a:	f7ff ffda 	bl	800e352 <__sfputc_r>
 800e39e:	1c43      	adds	r3, r0, #1
 800e3a0:	d1f3      	bne.n	800e38a <__sfputs_r+0xa>
 800e3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e3a4 <_vfiprintf_r>:
 800e3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3a8:	460d      	mov	r5, r1
 800e3aa:	b09d      	sub	sp, #116	@ 0x74
 800e3ac:	4614      	mov	r4, r2
 800e3ae:	4698      	mov	r8, r3
 800e3b0:	4606      	mov	r6, r0
 800e3b2:	b118      	cbz	r0, 800e3bc <_vfiprintf_r+0x18>
 800e3b4:	6a03      	ldr	r3, [r0, #32]
 800e3b6:	b90b      	cbnz	r3, 800e3bc <_vfiprintf_r+0x18>
 800e3b8:	f7fc fe74 	bl	800b0a4 <__sinit>
 800e3bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3be:	07d9      	lsls	r1, r3, #31
 800e3c0:	d405      	bmi.n	800e3ce <_vfiprintf_r+0x2a>
 800e3c2:	89ab      	ldrh	r3, [r5, #12]
 800e3c4:	059a      	lsls	r2, r3, #22
 800e3c6:	d402      	bmi.n	800e3ce <_vfiprintf_r+0x2a>
 800e3c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3ca:	f7fc ffbc 	bl	800b346 <__retarget_lock_acquire_recursive>
 800e3ce:	89ab      	ldrh	r3, [r5, #12]
 800e3d0:	071b      	lsls	r3, r3, #28
 800e3d2:	d501      	bpl.n	800e3d8 <_vfiprintf_r+0x34>
 800e3d4:	692b      	ldr	r3, [r5, #16]
 800e3d6:	b99b      	cbnz	r3, 800e400 <_vfiprintf_r+0x5c>
 800e3d8:	4629      	mov	r1, r5
 800e3da:	4630      	mov	r0, r6
 800e3dc:	f000 f938 	bl	800e650 <__swsetup_r>
 800e3e0:	b170      	cbz	r0, 800e400 <_vfiprintf_r+0x5c>
 800e3e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3e4:	07dc      	lsls	r4, r3, #31
 800e3e6:	d504      	bpl.n	800e3f2 <_vfiprintf_r+0x4e>
 800e3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ec:	b01d      	add	sp, #116	@ 0x74
 800e3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3f2:	89ab      	ldrh	r3, [r5, #12]
 800e3f4:	0598      	lsls	r0, r3, #22
 800e3f6:	d4f7      	bmi.n	800e3e8 <_vfiprintf_r+0x44>
 800e3f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3fa:	f7fc ffa5 	bl	800b348 <__retarget_lock_release_recursive>
 800e3fe:	e7f3      	b.n	800e3e8 <_vfiprintf_r+0x44>
 800e400:	2300      	movs	r3, #0
 800e402:	9309      	str	r3, [sp, #36]	@ 0x24
 800e404:	2320      	movs	r3, #32
 800e406:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e40a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e40e:	2330      	movs	r3, #48	@ 0x30
 800e410:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e5c0 <_vfiprintf_r+0x21c>
 800e414:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e418:	f04f 0901 	mov.w	r9, #1
 800e41c:	4623      	mov	r3, r4
 800e41e:	469a      	mov	sl, r3
 800e420:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e424:	b10a      	cbz	r2, 800e42a <_vfiprintf_r+0x86>
 800e426:	2a25      	cmp	r2, #37	@ 0x25
 800e428:	d1f9      	bne.n	800e41e <_vfiprintf_r+0x7a>
 800e42a:	ebba 0b04 	subs.w	fp, sl, r4
 800e42e:	d00b      	beq.n	800e448 <_vfiprintf_r+0xa4>
 800e430:	465b      	mov	r3, fp
 800e432:	4622      	mov	r2, r4
 800e434:	4629      	mov	r1, r5
 800e436:	4630      	mov	r0, r6
 800e438:	f7ff ffa2 	bl	800e380 <__sfputs_r>
 800e43c:	3001      	adds	r0, #1
 800e43e:	f000 80a7 	beq.w	800e590 <_vfiprintf_r+0x1ec>
 800e442:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e444:	445a      	add	r2, fp
 800e446:	9209      	str	r2, [sp, #36]	@ 0x24
 800e448:	f89a 3000 	ldrb.w	r3, [sl]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	f000 809f 	beq.w	800e590 <_vfiprintf_r+0x1ec>
 800e452:	2300      	movs	r3, #0
 800e454:	f04f 32ff 	mov.w	r2, #4294967295
 800e458:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e45c:	f10a 0a01 	add.w	sl, sl, #1
 800e460:	9304      	str	r3, [sp, #16]
 800e462:	9307      	str	r3, [sp, #28]
 800e464:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e468:	931a      	str	r3, [sp, #104]	@ 0x68
 800e46a:	4654      	mov	r4, sl
 800e46c:	2205      	movs	r2, #5
 800e46e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e472:	4853      	ldr	r0, [pc, #332]	@ (800e5c0 <_vfiprintf_r+0x21c>)
 800e474:	f7f7 fc94 	bl	8005da0 <memchr>
 800e478:	9a04      	ldr	r2, [sp, #16]
 800e47a:	b9d8      	cbnz	r0, 800e4b4 <_vfiprintf_r+0x110>
 800e47c:	06d1      	lsls	r1, r2, #27
 800e47e:	bf44      	itt	mi
 800e480:	2320      	movmi	r3, #32
 800e482:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e486:	0713      	lsls	r3, r2, #28
 800e488:	bf44      	itt	mi
 800e48a:	232b      	movmi	r3, #43	@ 0x2b
 800e48c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e490:	f89a 3000 	ldrb.w	r3, [sl]
 800e494:	2b2a      	cmp	r3, #42	@ 0x2a
 800e496:	d015      	beq.n	800e4c4 <_vfiprintf_r+0x120>
 800e498:	9a07      	ldr	r2, [sp, #28]
 800e49a:	4654      	mov	r4, sl
 800e49c:	2000      	movs	r0, #0
 800e49e:	f04f 0c0a 	mov.w	ip, #10
 800e4a2:	4621      	mov	r1, r4
 800e4a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4a8:	3b30      	subs	r3, #48	@ 0x30
 800e4aa:	2b09      	cmp	r3, #9
 800e4ac:	d94b      	bls.n	800e546 <_vfiprintf_r+0x1a2>
 800e4ae:	b1b0      	cbz	r0, 800e4de <_vfiprintf_r+0x13a>
 800e4b0:	9207      	str	r2, [sp, #28]
 800e4b2:	e014      	b.n	800e4de <_vfiprintf_r+0x13a>
 800e4b4:	eba0 0308 	sub.w	r3, r0, r8
 800e4b8:	fa09 f303 	lsl.w	r3, r9, r3
 800e4bc:	4313      	orrs	r3, r2
 800e4be:	9304      	str	r3, [sp, #16]
 800e4c0:	46a2      	mov	sl, r4
 800e4c2:	e7d2      	b.n	800e46a <_vfiprintf_r+0xc6>
 800e4c4:	9b03      	ldr	r3, [sp, #12]
 800e4c6:	1d19      	adds	r1, r3, #4
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	9103      	str	r1, [sp, #12]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	bfbb      	ittet	lt
 800e4d0:	425b      	neglt	r3, r3
 800e4d2:	f042 0202 	orrlt.w	r2, r2, #2
 800e4d6:	9307      	strge	r3, [sp, #28]
 800e4d8:	9307      	strlt	r3, [sp, #28]
 800e4da:	bfb8      	it	lt
 800e4dc:	9204      	strlt	r2, [sp, #16]
 800e4de:	7823      	ldrb	r3, [r4, #0]
 800e4e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e4e2:	d10a      	bne.n	800e4fa <_vfiprintf_r+0x156>
 800e4e4:	7863      	ldrb	r3, [r4, #1]
 800e4e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4e8:	d132      	bne.n	800e550 <_vfiprintf_r+0x1ac>
 800e4ea:	9b03      	ldr	r3, [sp, #12]
 800e4ec:	1d1a      	adds	r2, r3, #4
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	9203      	str	r2, [sp, #12]
 800e4f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e4f6:	3402      	adds	r4, #2
 800e4f8:	9305      	str	r3, [sp, #20]
 800e4fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e5d0 <_vfiprintf_r+0x22c>
 800e4fe:	7821      	ldrb	r1, [r4, #0]
 800e500:	2203      	movs	r2, #3
 800e502:	4650      	mov	r0, sl
 800e504:	f7f7 fc4c 	bl	8005da0 <memchr>
 800e508:	b138      	cbz	r0, 800e51a <_vfiprintf_r+0x176>
 800e50a:	9b04      	ldr	r3, [sp, #16]
 800e50c:	eba0 000a 	sub.w	r0, r0, sl
 800e510:	2240      	movs	r2, #64	@ 0x40
 800e512:	4082      	lsls	r2, r0
 800e514:	4313      	orrs	r3, r2
 800e516:	3401      	adds	r4, #1
 800e518:	9304      	str	r3, [sp, #16]
 800e51a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e51e:	4829      	ldr	r0, [pc, #164]	@ (800e5c4 <_vfiprintf_r+0x220>)
 800e520:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e524:	2206      	movs	r2, #6
 800e526:	f7f7 fc3b 	bl	8005da0 <memchr>
 800e52a:	2800      	cmp	r0, #0
 800e52c:	d03f      	beq.n	800e5ae <_vfiprintf_r+0x20a>
 800e52e:	4b26      	ldr	r3, [pc, #152]	@ (800e5c8 <_vfiprintf_r+0x224>)
 800e530:	bb1b      	cbnz	r3, 800e57a <_vfiprintf_r+0x1d6>
 800e532:	9b03      	ldr	r3, [sp, #12]
 800e534:	3307      	adds	r3, #7
 800e536:	f023 0307 	bic.w	r3, r3, #7
 800e53a:	3308      	adds	r3, #8
 800e53c:	9303      	str	r3, [sp, #12]
 800e53e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e540:	443b      	add	r3, r7
 800e542:	9309      	str	r3, [sp, #36]	@ 0x24
 800e544:	e76a      	b.n	800e41c <_vfiprintf_r+0x78>
 800e546:	fb0c 3202 	mla	r2, ip, r2, r3
 800e54a:	460c      	mov	r4, r1
 800e54c:	2001      	movs	r0, #1
 800e54e:	e7a8      	b.n	800e4a2 <_vfiprintf_r+0xfe>
 800e550:	2300      	movs	r3, #0
 800e552:	3401      	adds	r4, #1
 800e554:	9305      	str	r3, [sp, #20]
 800e556:	4619      	mov	r1, r3
 800e558:	f04f 0c0a 	mov.w	ip, #10
 800e55c:	4620      	mov	r0, r4
 800e55e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e562:	3a30      	subs	r2, #48	@ 0x30
 800e564:	2a09      	cmp	r2, #9
 800e566:	d903      	bls.n	800e570 <_vfiprintf_r+0x1cc>
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d0c6      	beq.n	800e4fa <_vfiprintf_r+0x156>
 800e56c:	9105      	str	r1, [sp, #20]
 800e56e:	e7c4      	b.n	800e4fa <_vfiprintf_r+0x156>
 800e570:	fb0c 2101 	mla	r1, ip, r1, r2
 800e574:	4604      	mov	r4, r0
 800e576:	2301      	movs	r3, #1
 800e578:	e7f0      	b.n	800e55c <_vfiprintf_r+0x1b8>
 800e57a:	ab03      	add	r3, sp, #12
 800e57c:	9300      	str	r3, [sp, #0]
 800e57e:	462a      	mov	r2, r5
 800e580:	4b12      	ldr	r3, [pc, #72]	@ (800e5cc <_vfiprintf_r+0x228>)
 800e582:	a904      	add	r1, sp, #16
 800e584:	4630      	mov	r0, r6
 800e586:	f7fb ff35 	bl	800a3f4 <_printf_float>
 800e58a:	4607      	mov	r7, r0
 800e58c:	1c78      	adds	r0, r7, #1
 800e58e:	d1d6      	bne.n	800e53e <_vfiprintf_r+0x19a>
 800e590:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e592:	07d9      	lsls	r1, r3, #31
 800e594:	d405      	bmi.n	800e5a2 <_vfiprintf_r+0x1fe>
 800e596:	89ab      	ldrh	r3, [r5, #12]
 800e598:	059a      	lsls	r2, r3, #22
 800e59a:	d402      	bmi.n	800e5a2 <_vfiprintf_r+0x1fe>
 800e59c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e59e:	f7fc fed3 	bl	800b348 <__retarget_lock_release_recursive>
 800e5a2:	89ab      	ldrh	r3, [r5, #12]
 800e5a4:	065b      	lsls	r3, r3, #25
 800e5a6:	f53f af1f 	bmi.w	800e3e8 <_vfiprintf_r+0x44>
 800e5aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e5ac:	e71e      	b.n	800e3ec <_vfiprintf_r+0x48>
 800e5ae:	ab03      	add	r3, sp, #12
 800e5b0:	9300      	str	r3, [sp, #0]
 800e5b2:	462a      	mov	r2, r5
 800e5b4:	4b05      	ldr	r3, [pc, #20]	@ (800e5cc <_vfiprintf_r+0x228>)
 800e5b6:	a904      	add	r1, sp, #16
 800e5b8:	4630      	mov	r0, r6
 800e5ba:	f7fc f9b3 	bl	800a924 <_printf_i>
 800e5be:	e7e4      	b.n	800e58a <_vfiprintf_r+0x1e6>
 800e5c0:	0800f8d0 	.word	0x0800f8d0
 800e5c4:	0800f8da 	.word	0x0800f8da
 800e5c8:	0800a3f5 	.word	0x0800a3f5
 800e5cc:	0800e381 	.word	0x0800e381
 800e5d0:	0800f8d6 	.word	0x0800f8d6

0800e5d4 <__swbuf_r>:
 800e5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5d6:	460e      	mov	r6, r1
 800e5d8:	4614      	mov	r4, r2
 800e5da:	4605      	mov	r5, r0
 800e5dc:	b118      	cbz	r0, 800e5e6 <__swbuf_r+0x12>
 800e5de:	6a03      	ldr	r3, [r0, #32]
 800e5e0:	b90b      	cbnz	r3, 800e5e6 <__swbuf_r+0x12>
 800e5e2:	f7fc fd5f 	bl	800b0a4 <__sinit>
 800e5e6:	69a3      	ldr	r3, [r4, #24]
 800e5e8:	60a3      	str	r3, [r4, #8]
 800e5ea:	89a3      	ldrh	r3, [r4, #12]
 800e5ec:	071a      	lsls	r2, r3, #28
 800e5ee:	d501      	bpl.n	800e5f4 <__swbuf_r+0x20>
 800e5f0:	6923      	ldr	r3, [r4, #16]
 800e5f2:	b943      	cbnz	r3, 800e606 <__swbuf_r+0x32>
 800e5f4:	4621      	mov	r1, r4
 800e5f6:	4628      	mov	r0, r5
 800e5f8:	f000 f82a 	bl	800e650 <__swsetup_r>
 800e5fc:	b118      	cbz	r0, 800e606 <__swbuf_r+0x32>
 800e5fe:	f04f 37ff 	mov.w	r7, #4294967295
 800e602:	4638      	mov	r0, r7
 800e604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e606:	6823      	ldr	r3, [r4, #0]
 800e608:	6922      	ldr	r2, [r4, #16]
 800e60a:	1a98      	subs	r0, r3, r2
 800e60c:	6963      	ldr	r3, [r4, #20]
 800e60e:	b2f6      	uxtb	r6, r6
 800e610:	4283      	cmp	r3, r0
 800e612:	4637      	mov	r7, r6
 800e614:	dc05      	bgt.n	800e622 <__swbuf_r+0x4e>
 800e616:	4621      	mov	r1, r4
 800e618:	4628      	mov	r0, r5
 800e61a:	f7ff fa63 	bl	800dae4 <_fflush_r>
 800e61e:	2800      	cmp	r0, #0
 800e620:	d1ed      	bne.n	800e5fe <__swbuf_r+0x2a>
 800e622:	68a3      	ldr	r3, [r4, #8]
 800e624:	3b01      	subs	r3, #1
 800e626:	60a3      	str	r3, [r4, #8]
 800e628:	6823      	ldr	r3, [r4, #0]
 800e62a:	1c5a      	adds	r2, r3, #1
 800e62c:	6022      	str	r2, [r4, #0]
 800e62e:	701e      	strb	r6, [r3, #0]
 800e630:	6962      	ldr	r2, [r4, #20]
 800e632:	1c43      	adds	r3, r0, #1
 800e634:	429a      	cmp	r2, r3
 800e636:	d004      	beq.n	800e642 <__swbuf_r+0x6e>
 800e638:	89a3      	ldrh	r3, [r4, #12]
 800e63a:	07db      	lsls	r3, r3, #31
 800e63c:	d5e1      	bpl.n	800e602 <__swbuf_r+0x2e>
 800e63e:	2e0a      	cmp	r6, #10
 800e640:	d1df      	bne.n	800e602 <__swbuf_r+0x2e>
 800e642:	4621      	mov	r1, r4
 800e644:	4628      	mov	r0, r5
 800e646:	f7ff fa4d 	bl	800dae4 <_fflush_r>
 800e64a:	2800      	cmp	r0, #0
 800e64c:	d0d9      	beq.n	800e602 <__swbuf_r+0x2e>
 800e64e:	e7d6      	b.n	800e5fe <__swbuf_r+0x2a>

0800e650 <__swsetup_r>:
 800e650:	b538      	push	{r3, r4, r5, lr}
 800e652:	4b29      	ldr	r3, [pc, #164]	@ (800e6f8 <__swsetup_r+0xa8>)
 800e654:	4605      	mov	r5, r0
 800e656:	6818      	ldr	r0, [r3, #0]
 800e658:	460c      	mov	r4, r1
 800e65a:	b118      	cbz	r0, 800e664 <__swsetup_r+0x14>
 800e65c:	6a03      	ldr	r3, [r0, #32]
 800e65e:	b90b      	cbnz	r3, 800e664 <__swsetup_r+0x14>
 800e660:	f7fc fd20 	bl	800b0a4 <__sinit>
 800e664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e668:	0719      	lsls	r1, r3, #28
 800e66a:	d422      	bmi.n	800e6b2 <__swsetup_r+0x62>
 800e66c:	06da      	lsls	r2, r3, #27
 800e66e:	d407      	bmi.n	800e680 <__swsetup_r+0x30>
 800e670:	2209      	movs	r2, #9
 800e672:	602a      	str	r2, [r5, #0]
 800e674:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e678:	81a3      	strh	r3, [r4, #12]
 800e67a:	f04f 30ff 	mov.w	r0, #4294967295
 800e67e:	e033      	b.n	800e6e8 <__swsetup_r+0x98>
 800e680:	0758      	lsls	r0, r3, #29
 800e682:	d512      	bpl.n	800e6aa <__swsetup_r+0x5a>
 800e684:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e686:	b141      	cbz	r1, 800e69a <__swsetup_r+0x4a>
 800e688:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e68c:	4299      	cmp	r1, r3
 800e68e:	d002      	beq.n	800e696 <__swsetup_r+0x46>
 800e690:	4628      	mov	r0, r5
 800e692:	f7fd fcc9 	bl	800c028 <_free_r>
 800e696:	2300      	movs	r3, #0
 800e698:	6363      	str	r3, [r4, #52]	@ 0x34
 800e69a:	89a3      	ldrh	r3, [r4, #12]
 800e69c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e6a0:	81a3      	strh	r3, [r4, #12]
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	6063      	str	r3, [r4, #4]
 800e6a6:	6923      	ldr	r3, [r4, #16]
 800e6a8:	6023      	str	r3, [r4, #0]
 800e6aa:	89a3      	ldrh	r3, [r4, #12]
 800e6ac:	f043 0308 	orr.w	r3, r3, #8
 800e6b0:	81a3      	strh	r3, [r4, #12]
 800e6b2:	6923      	ldr	r3, [r4, #16]
 800e6b4:	b94b      	cbnz	r3, 800e6ca <__swsetup_r+0x7a>
 800e6b6:	89a3      	ldrh	r3, [r4, #12]
 800e6b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e6bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6c0:	d003      	beq.n	800e6ca <__swsetup_r+0x7a>
 800e6c2:	4621      	mov	r1, r4
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	f000 f883 	bl	800e7d0 <__smakebuf_r>
 800e6ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6ce:	f013 0201 	ands.w	r2, r3, #1
 800e6d2:	d00a      	beq.n	800e6ea <__swsetup_r+0x9a>
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	60a2      	str	r2, [r4, #8]
 800e6d8:	6962      	ldr	r2, [r4, #20]
 800e6da:	4252      	negs	r2, r2
 800e6dc:	61a2      	str	r2, [r4, #24]
 800e6de:	6922      	ldr	r2, [r4, #16]
 800e6e0:	b942      	cbnz	r2, 800e6f4 <__swsetup_r+0xa4>
 800e6e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e6e6:	d1c5      	bne.n	800e674 <__swsetup_r+0x24>
 800e6e8:	bd38      	pop	{r3, r4, r5, pc}
 800e6ea:	0799      	lsls	r1, r3, #30
 800e6ec:	bf58      	it	pl
 800e6ee:	6962      	ldrpl	r2, [r4, #20]
 800e6f0:	60a2      	str	r2, [r4, #8]
 800e6f2:	e7f4      	b.n	800e6de <__swsetup_r+0x8e>
 800e6f4:	2000      	movs	r0, #0
 800e6f6:	e7f7      	b.n	800e6e8 <__swsetup_r+0x98>
 800e6f8:	20000018 	.word	0x20000018

0800e6fc <_raise_r>:
 800e6fc:	291f      	cmp	r1, #31
 800e6fe:	b538      	push	{r3, r4, r5, lr}
 800e700:	4605      	mov	r5, r0
 800e702:	460c      	mov	r4, r1
 800e704:	d904      	bls.n	800e710 <_raise_r+0x14>
 800e706:	2316      	movs	r3, #22
 800e708:	6003      	str	r3, [r0, #0]
 800e70a:	f04f 30ff 	mov.w	r0, #4294967295
 800e70e:	bd38      	pop	{r3, r4, r5, pc}
 800e710:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e712:	b112      	cbz	r2, 800e71a <_raise_r+0x1e>
 800e714:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e718:	b94b      	cbnz	r3, 800e72e <_raise_r+0x32>
 800e71a:	4628      	mov	r0, r5
 800e71c:	f000 f830 	bl	800e780 <_getpid_r>
 800e720:	4622      	mov	r2, r4
 800e722:	4601      	mov	r1, r0
 800e724:	4628      	mov	r0, r5
 800e726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e72a:	f000 b817 	b.w	800e75c <_kill_r>
 800e72e:	2b01      	cmp	r3, #1
 800e730:	d00a      	beq.n	800e748 <_raise_r+0x4c>
 800e732:	1c59      	adds	r1, r3, #1
 800e734:	d103      	bne.n	800e73e <_raise_r+0x42>
 800e736:	2316      	movs	r3, #22
 800e738:	6003      	str	r3, [r0, #0]
 800e73a:	2001      	movs	r0, #1
 800e73c:	e7e7      	b.n	800e70e <_raise_r+0x12>
 800e73e:	2100      	movs	r1, #0
 800e740:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e744:	4620      	mov	r0, r4
 800e746:	4798      	blx	r3
 800e748:	2000      	movs	r0, #0
 800e74a:	e7e0      	b.n	800e70e <_raise_r+0x12>

0800e74c <raise>:
 800e74c:	4b02      	ldr	r3, [pc, #8]	@ (800e758 <raise+0xc>)
 800e74e:	4601      	mov	r1, r0
 800e750:	6818      	ldr	r0, [r3, #0]
 800e752:	f7ff bfd3 	b.w	800e6fc <_raise_r>
 800e756:	bf00      	nop
 800e758:	20000018 	.word	0x20000018

0800e75c <_kill_r>:
 800e75c:	b538      	push	{r3, r4, r5, lr}
 800e75e:	4d07      	ldr	r5, [pc, #28]	@ (800e77c <_kill_r+0x20>)
 800e760:	2300      	movs	r3, #0
 800e762:	4604      	mov	r4, r0
 800e764:	4608      	mov	r0, r1
 800e766:	4611      	mov	r1, r2
 800e768:	602b      	str	r3, [r5, #0]
 800e76a:	f7f9 fbfe 	bl	8007f6a <_kill>
 800e76e:	1c43      	adds	r3, r0, #1
 800e770:	d102      	bne.n	800e778 <_kill_r+0x1c>
 800e772:	682b      	ldr	r3, [r5, #0]
 800e774:	b103      	cbz	r3, 800e778 <_kill_r+0x1c>
 800e776:	6023      	str	r3, [r4, #0]
 800e778:	bd38      	pop	{r3, r4, r5, pc}
 800e77a:	bf00      	nop
 800e77c:	20001014 	.word	0x20001014

0800e780 <_getpid_r>:
 800e780:	f7f9 bbeb 	b.w	8007f5a <_getpid>

0800e784 <__swhatbuf_r>:
 800e784:	b570      	push	{r4, r5, r6, lr}
 800e786:	460c      	mov	r4, r1
 800e788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e78c:	2900      	cmp	r1, #0
 800e78e:	b096      	sub	sp, #88	@ 0x58
 800e790:	4615      	mov	r5, r2
 800e792:	461e      	mov	r6, r3
 800e794:	da0d      	bge.n	800e7b2 <__swhatbuf_r+0x2e>
 800e796:	89a3      	ldrh	r3, [r4, #12]
 800e798:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e79c:	f04f 0100 	mov.w	r1, #0
 800e7a0:	bf14      	ite	ne
 800e7a2:	2340      	movne	r3, #64	@ 0x40
 800e7a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e7a8:	2000      	movs	r0, #0
 800e7aa:	6031      	str	r1, [r6, #0]
 800e7ac:	602b      	str	r3, [r5, #0]
 800e7ae:	b016      	add	sp, #88	@ 0x58
 800e7b0:	bd70      	pop	{r4, r5, r6, pc}
 800e7b2:	466a      	mov	r2, sp
 800e7b4:	f000 f848 	bl	800e848 <_fstat_r>
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	dbec      	blt.n	800e796 <__swhatbuf_r+0x12>
 800e7bc:	9901      	ldr	r1, [sp, #4]
 800e7be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e7c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e7c6:	4259      	negs	r1, r3
 800e7c8:	4159      	adcs	r1, r3
 800e7ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7ce:	e7eb      	b.n	800e7a8 <__swhatbuf_r+0x24>

0800e7d0 <__smakebuf_r>:
 800e7d0:	898b      	ldrh	r3, [r1, #12]
 800e7d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7d4:	079d      	lsls	r5, r3, #30
 800e7d6:	4606      	mov	r6, r0
 800e7d8:	460c      	mov	r4, r1
 800e7da:	d507      	bpl.n	800e7ec <__smakebuf_r+0x1c>
 800e7dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e7e0:	6023      	str	r3, [r4, #0]
 800e7e2:	6123      	str	r3, [r4, #16]
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	6163      	str	r3, [r4, #20]
 800e7e8:	b003      	add	sp, #12
 800e7ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7ec:	ab01      	add	r3, sp, #4
 800e7ee:	466a      	mov	r2, sp
 800e7f0:	f7ff ffc8 	bl	800e784 <__swhatbuf_r>
 800e7f4:	9f00      	ldr	r7, [sp, #0]
 800e7f6:	4605      	mov	r5, r0
 800e7f8:	4639      	mov	r1, r7
 800e7fa:	4630      	mov	r0, r6
 800e7fc:	f7fb fcce 	bl	800a19c <_malloc_r>
 800e800:	b948      	cbnz	r0, 800e816 <__smakebuf_r+0x46>
 800e802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e806:	059a      	lsls	r2, r3, #22
 800e808:	d4ee      	bmi.n	800e7e8 <__smakebuf_r+0x18>
 800e80a:	f023 0303 	bic.w	r3, r3, #3
 800e80e:	f043 0302 	orr.w	r3, r3, #2
 800e812:	81a3      	strh	r3, [r4, #12]
 800e814:	e7e2      	b.n	800e7dc <__smakebuf_r+0xc>
 800e816:	89a3      	ldrh	r3, [r4, #12]
 800e818:	6020      	str	r0, [r4, #0]
 800e81a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e81e:	81a3      	strh	r3, [r4, #12]
 800e820:	9b01      	ldr	r3, [sp, #4]
 800e822:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e826:	b15b      	cbz	r3, 800e840 <__smakebuf_r+0x70>
 800e828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e82c:	4630      	mov	r0, r6
 800e82e:	f000 f81d 	bl	800e86c <_isatty_r>
 800e832:	b128      	cbz	r0, 800e840 <__smakebuf_r+0x70>
 800e834:	89a3      	ldrh	r3, [r4, #12]
 800e836:	f023 0303 	bic.w	r3, r3, #3
 800e83a:	f043 0301 	orr.w	r3, r3, #1
 800e83e:	81a3      	strh	r3, [r4, #12]
 800e840:	89a3      	ldrh	r3, [r4, #12]
 800e842:	431d      	orrs	r5, r3
 800e844:	81a5      	strh	r5, [r4, #12]
 800e846:	e7cf      	b.n	800e7e8 <__smakebuf_r+0x18>

0800e848 <_fstat_r>:
 800e848:	b538      	push	{r3, r4, r5, lr}
 800e84a:	4d07      	ldr	r5, [pc, #28]	@ (800e868 <_fstat_r+0x20>)
 800e84c:	2300      	movs	r3, #0
 800e84e:	4604      	mov	r4, r0
 800e850:	4608      	mov	r0, r1
 800e852:	4611      	mov	r1, r2
 800e854:	602b      	str	r3, [r5, #0]
 800e856:	f7f9 fbe8 	bl	800802a <_fstat>
 800e85a:	1c43      	adds	r3, r0, #1
 800e85c:	d102      	bne.n	800e864 <_fstat_r+0x1c>
 800e85e:	682b      	ldr	r3, [r5, #0]
 800e860:	b103      	cbz	r3, 800e864 <_fstat_r+0x1c>
 800e862:	6023      	str	r3, [r4, #0]
 800e864:	bd38      	pop	{r3, r4, r5, pc}
 800e866:	bf00      	nop
 800e868:	20001014 	.word	0x20001014

0800e86c <_isatty_r>:
 800e86c:	b538      	push	{r3, r4, r5, lr}
 800e86e:	4d06      	ldr	r5, [pc, #24]	@ (800e888 <_isatty_r+0x1c>)
 800e870:	2300      	movs	r3, #0
 800e872:	4604      	mov	r4, r0
 800e874:	4608      	mov	r0, r1
 800e876:	602b      	str	r3, [r5, #0]
 800e878:	f7f9 fbe7 	bl	800804a <_isatty>
 800e87c:	1c43      	adds	r3, r0, #1
 800e87e:	d102      	bne.n	800e886 <_isatty_r+0x1a>
 800e880:	682b      	ldr	r3, [r5, #0]
 800e882:	b103      	cbz	r3, 800e886 <_isatty_r+0x1a>
 800e884:	6023      	str	r3, [r4, #0]
 800e886:	bd38      	pop	{r3, r4, r5, pc}
 800e888:	20001014 	.word	0x20001014

0800e88c <_init>:
 800e88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e88e:	bf00      	nop
 800e890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e892:	bc08      	pop	{r3}
 800e894:	469e      	mov	lr, r3
 800e896:	4770      	bx	lr

0800e898 <_fini>:
 800e898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e89a:	bf00      	nop
 800e89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e89e:	bc08      	pop	{r3}
 800e8a0:	469e      	mov	lr, r3
 800e8a2:	4770      	bx	lr
